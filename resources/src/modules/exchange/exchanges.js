(function () {
    function r(e, n, t) {
        function o(i, f) {
            if (!n[i]) {
                if (!e[i]) {
                    var c = "function" == typeof require && require;
                    if (!f && c) return c(i, !0);
                    if (u) return u(i, !0);
                    var a = new Error("Cannot find module '" + i + "'");
                    throw ((a.code = "MODULE_NOT_FOUND"), a);
                }
                var p = (n[i] = { exports: {} });
                e[i][0].call(
                    p.exports,
                    function (r) {
                        var n = e[i][1][r];
                        return o(n || r);
                    },
                    p,
                    p.exports,
                    r,
                    e,
                    n,
                    t
                );
            }
            return n[i].exports;
        }
        for (
            var u = "function" == typeof require && require, i = 0;
            i < t.length;
            i++
        )
            o(t[i]);
        return o;
    }
    return r;
})()(
    {
        1: [
            function (require, module, exports) {
                /*  A entry point for the browser bundle version. This gets compiled by:

            browserify --debug ./ccxt.browser.js > ./dist/ccxt.browser.js
     */

                // self works in webworkers too
                self.ccxt = require("./ccxt");
            },
            { "./ccxt": 2 },
        ],
        2: [
            function (require, module, exports) {
                "use strict";

                /*

    MIT License

    Copyright (c) 2017 Igor Kroitor

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

    */

                //-----------------------------------------------------------------------------

                const Exchange = require("./js/base/Exchange"),
                    wsExchange = require("./js/pro/base/Exchange"),
                    Precise = require("./js/base/Precise"),
                    functions = require("./js/base/functions"),
                    errors = require("./js/base/errors");

                //-----------------------------------------------------------------------------
                // this is updated by vss.js when building

                const version = "2.5.46";

                Exchange.ccxtVersion = version;

                //-----------------------------------------------------------------------------

                const exchanges = {
                    binance: require("./js/binance.js"),
                    coinbasepro: require("./js/coinbasepro.js"),
                    kucoin: require("./js/kucoin.js"),
                };

                const pro = {
                    binance: require("./js/pro/binance.js"),
                    coinbasepro: require("./js/pro/coinbasepro.js"),
                    kucoin: require("./js/pro/kucoin.js"),
                };

                for (const exchange in pro) {
                    const ccxtExchange = exchanges[exchange];
                    const baseExchange = Object.getPrototypeOf(ccxtExchange);
                    if (baseExchange.name === "Exchange") {
                        Object.setPrototypeOf(ccxtExchange, wsExchange);
                        Object.setPrototypeOf(
                            ccxtExchange.prototype,
                            wsExchange.prototype
                        );
                    }
                }

                pro.exchanges = Object.keys(pro);

                //-----------------------------------------------------------------------------

                module.exports = Object.assign(
                    {
                        version,
                        Exchange,
                        Precise,
                        exchanges: Object.keys(exchanges),
                        pro,
                    },
                    exchanges,
                    functions,
                    errors
                );

                //-----------------------------------------------------------------------------
            },
            {
                "./js/base/Exchange": 3,
                "./js/base/Precise": 4,
                "./js/base/errors": 6,
                "./js/base/functions": 7,
                "./js/binance.js": 18,
                "./js/coinbasepro.js": 19,
                "./js/kucoin.js": 20,
                "./js/pro/base/Exchange": 23,
                "./js/pro/binance.js": 29,
                "./js/pro/coinbasepro.js": 30,
                "./js/pro/kucoin.js": 31,
            },
        ],
        3: [
            function (require, module, exports) {
                "use strict";

                // ----------------------------------------------------------------------------
                /* eslint-disable */

                const functions = require("./functions");

                const {
                    isNode,
                    clone,
                    unCamelCase,
                    throttle,
                    timeout,
                    TimedOut,
                    defaultFetch,
                } = functions;

                const {
                    // eslint-disable-line object-curly-newline
                    ExchangeError,
                    BadSymbol,
                    NullResponse,
                    InvalidAddress,
                    InvalidOrder,
                    NotSupported,
                    AuthenticationError,
                    DDoSProtection,
                    RequestTimeout,
                    ExchangeNotAvailable,
                    RateLimitExceeded,
                    ArgumentsRequired,
                } = require("./errors");

                const {
                    TRUNCATE,
                    ROUND,
                    DECIMAL_PLACES,
                    NO_PADDING,
                    TICK_SIZE,
                } = functions.precisionConstants;

                const BN = require("../static_dependencies/BN/bn");
                const Precise = require("./Precise");

                // ----------------------------------------------------------------------------

                module.exports = class Exchange {
                    describe() {
                        return {
                            id: undefined,
                            name: undefined,
                            countries: undefined,
                            enableRateLimit: true,
                            rateLimit: 2000, // milliseconds = seconds * 1000
                            certified: false, // if certified by the CCXT dev team
                            pro: false, // if it is integrated with CCXT Pro for WebSocket support
                            alias: false, // whether this exchange is an alias to another exchange
                            has: {
                                publicAPI: true,
                                privateAPI: true,
                                CORS: undefined,
                                spot: undefined,
                                margin: undefined,
                                swap: undefined,
                                future: undefined,
                                option: undefined,
                                addMargin: undefined,
                                cancelAllOrders: undefined,
                                cancelOrder: true,
                                cancelOrders: undefined,
                                createDepositAddress: undefined,
                                createLimitOrder: true,
                                createMarketOrder: true,
                                createOrder: true,
                                createPostOnlyOrder: undefined,
                                createReduceOnlyOrder: undefined,
                                createStopOrder: undefined,
                                createStopLimitOrder: undefined,
                                createStopMarketOrder: undefined,
                                editOrder: "emulated",
                                fetchAccounts: undefined,
                                fetchBalance: true,
                                fetchBidsAsks: undefined,
                                fetchBorrowInterest: undefined,
                                fetchBorrowRate: undefined,
                                fetchBorrowRateHistory: undefined,
                                fetchBorrowRatesPerSymbol: undefined,
                                fetchBorrowRates: undefined,
                                fetchCanceledOrders: undefined,
                                fetchClosedOrder: undefined,
                                fetchClosedOrders: undefined,
                                fetchCurrencies: "emulated",
                                fetchDeposit: undefined,
                                fetchDepositAddress: undefined,
                                fetchDepositAddresses: undefined,
                                fetchDepositAddressesByNetwork: undefined,
                                fetchDeposits: undefined,
                                fetchTransactionFee: undefined,
                                fetchTransactionFees: undefined,
                                fetchFundingHistory: undefined,
                                fetchFundingRate: undefined,
                                fetchFundingRateHistory: undefined,
                                fetchFundingRates: undefined,
                                fetchIndexOHLCV: undefined,
                                fetchL2OrderBook: true,
                                fetchLedger: undefined,
                                fetchLedgerEntry: undefined,
                                fetchLeverageTiers: undefined,
                                fetchMarketLeverageTiers: undefined,
                                fetchMarkets: true,
                                fetchMarkOHLCV: undefined,
                                fetchMyTrades: undefined,
                                fetchOHLCV: "emulated",
                                fetchOpenInterest: undefined,
                                fetchOpenInterestHistory: undefined,
                                fetchOpenOrder: undefined,
                                fetchOpenOrders: undefined,
                                fetchOrder: undefined,
                                fetchOrderBook: true,
                                fetchOrderBooks: undefined,
                                fetchOrders: undefined,
                                fetchOrderTrades: undefined,
                                fetchPermissions: undefined,
                                fetchPosition: undefined,
                                fetchPositions: undefined,
                                fetchPositionsRisk: undefined,
                                fetchPremiumIndexOHLCV: undefined,
                                fetchStatus: "emulated",
                                fetchTicker: true,
                                fetchTickers: undefined,
                                fetchTime: undefined,
                                fetchTrades: true,
                                fetchTradingFee: undefined,
                                fetchTradingFees: undefined,
                                fetchTradingLimits: undefined,
                                fetchTransactions: undefined,
                                fetchTransfers: undefined,
                                fetchWithdrawAddresses: undefined,
                                fetchWithdrawal: undefined,
                                fetchWithdrawals: undefined,
                                reduceMargin: undefined,
                                setLeverage: undefined,
                                setMargin: undefined,
                                setMarginMode: undefined,
                                setPositionMode: undefined,
                                signIn: undefined,
                                transfer: undefined,
                                withdraw: undefined,
                            },
                            urls: {
                                logo: undefined,
                                api: undefined,
                                www: undefined,
                                doc: undefined,
                                fees: undefined,
                            },
                            api: undefined,
                            requiredCredentials: {
                                apiKey: true,
                                secret: true,
                                uid: false,
                                login: false,
                                password: false,
                                twofa: false, // 2-factor authentication (one-time password key)
                                privateKey: false, // a "0x"-prefixed hexstring private key for a wallet
                                walletAddress: false, // the wallet address "0x"-prefixed hexstring
                                token: false, // reserved for HTTP auth in some cases
                            },
                            markets: undefined, // to be filled manually or by fetchMarkets
                            currencies: {}, // to be filled manually or by fetchMarkets
                            timeframes: undefined, // redefine if the exchange has.fetchOHLCV
                            fees: {
                                trading: {
                                    tierBased: undefined,
                                    percentage: undefined,
                                    taker: undefined,
                                    maker: undefined,
                                },
                                funding: {
                                    tierBased: undefined,
                                    percentage: undefined,
                                    withdraw: {},
                                    deposit: {},
                                },
                            },
                            status: {
                                status: "ok",
                                updated: undefined,
                                eta: undefined,
                                url: undefined,
                            },
                            exceptions: undefined,
                            httpExceptions: {
                                422: ExchangeError,
                                418: DDoSProtection,
                                429: RateLimitExceeded,
                                404: ExchangeNotAvailable,
                                409: ExchangeNotAvailable,
                                410: ExchangeNotAvailable,
                                451: ExchangeNotAvailable,
                                500: ExchangeNotAvailable,
                                501: ExchangeNotAvailable,
                                502: ExchangeNotAvailable,
                                520: ExchangeNotAvailable,
                                521: ExchangeNotAvailable,
                                522: ExchangeNotAvailable,
                                525: ExchangeNotAvailable,
                                526: ExchangeNotAvailable,
                                400: ExchangeNotAvailable,
                                403: ExchangeNotAvailable,
                                405: ExchangeNotAvailable,
                                503: ExchangeNotAvailable,
                                530: ExchangeNotAvailable,
                                408: RequestTimeout,
                                504: RequestTimeout,
                                401: AuthenticationError,
                                407: AuthenticationError,
                                511: AuthenticationError,
                            },
                            commonCurrencies: {
                                // gets extended/overwritten in subclasses
                                XBT: "BTC",
                                BCC: "BCH",
                                BCHABC: "BCH",
                                BCHSV: "BSV",
                            },
                            precisionMode: DECIMAL_PLACES,
                            paddingMode: NO_PADDING,
                            limits: {
                                leverage: { min: undefined, max: undefined },
                                amount: { min: undefined, max: undefined },
                                price: { min: undefined, max: undefined },
                                cost: { min: undefined, max: undefined },
                            },
                        }; // return
                    } // describe ()

                    constructor(userConfig = {}) {
                        Object.assign(this, functions);
                        //
                        //     if (isNode) {
                        //         this.nodeVersion = process.version.match (/\d+\.\d+\.\d+/)[0]
                        //         this.userAgent = {
                        //             'User-Agent': 'ccxt/' + Exchange.ccxtVersion +
                        //                 ' (+https://github.com/ccxt/ccxt)' +
                        //                 ' Node.js/' + this.nodeVersion + ' (JavaScript)'
                        //         }
                        //     }
                        //
                        this.options = this.getDefaultOptions(); // exchange-specific options, if any
                        // fetch implementation options (JS only)
                        this.fetchOptions = {
                            // keepalive: true, // does not work in Chrome, https://github.com/ccxt/ccxt/issues/6368
                        };
                        // http properties
                        this.userAgents = {
                            chrome: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36",
                            chrome39:
                                "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36",
                            chrome100:
                                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36",
                        };
                        this.headers = {};
                        // prepended to URL, like https://proxy.com/https://exchange.com/api...
                        this.proxy = "";
                        this.origin = "*"; // CORS origin
                        // underlying properties
                        this.minFundingAddressLength = 1; // used in checkAddress
                        this.substituteCommonCurrencyCodes = true; // reserved
                        this.quoteJsonNumbers = true; // treat numbers in json as quoted precise strings
                        this.number = Number; // or String (a pointer to a function)
                        this.handleContentTypeApplicationZip = false;
                        // whether fees should be summed by currency code
                        this.reduceFees = true;
                        // do not delete this line, it is needed for users to be able to define their own fetchImplementation
                        this.fetchImplementation = defaultFetch;
                        this.validateServerSsl = true;
                        this.validateClientSsl = false;
                        // default property values
                        this.timeout = 10000; // milliseconds
                        this.verbose = false;
                        this.debug = false;
                        this.userAgent = undefined;
                        this.twofa = undefined; // two-factor authentication (2FA)
                        // default credentials
                        this.apiKey = undefined;
                        this.secret = undefined;
                        this.uid = undefined;
                        this.login = undefined;
                        this.password = undefined;
                        this.privateKey = undefined; // a "0x"-prefixed hexstring private key for a wallet
                        this.walletAddress = undefined; // a wallet address "0x"-prefixed hexstring
                        this.token = undefined; // reserved for HTTP auth in some cases
                        // placeholders for cached data
                        this.balance = {};
                        this.orderbooks = {};
                        this.tickers = {};
                        this.orders = undefined;
                        this.trades = {};
                        this.transactions = {};
                        this.ohlcvs = {};
                        this.myTrades = undefined;
                        this.positions = {};
                        // web3 and cryptography flags
                        this.requiresWeb3 = false;
                        this.requiresEddsa = false;
                        this.precision = {};
                        // response handling flags and properties
                        this.lastRestRequestTimestamp = 0;
                        this.enableLastJsonResponse = true;
                        this.enableLastHttpResponse = true;
                        this.enableLastResponseHeaders = true;
                        this.last_http_response = undefined;
                        this.last_json_response = undefined;
                        this.last_response_headers = undefined;
                        // camelCase and snake_notation support
                        const unCamelCaseProperties = (obj = this) => {
                            if (obj !== null) {
                                const ownPropertyNames =
                                    Object.getOwnPropertyNames(obj);
                                for (
                                    let i = 0;
                                    i < ownPropertyNames.length;
                                    i++
                                ) {
                                    const k = ownPropertyNames[i];
                                    this[unCamelCase(k)] = this[k];
                                }
                                unCamelCaseProperties(
                                    Object.getPrototypeOf(obj)
                                );
                            }
                        };
                        unCamelCaseProperties();
                        // merge constructor overrides to this instance
                        const configEntries = Object.entries(
                            this.describe()
                        ).concat(Object.entries(userConfig));
                        for (let i = 0; i < configEntries.length; i++) {
                            const [property, value] = configEntries[i];
                            if (
                                value &&
                                Object.getPrototypeOf(value) ===
                                    Object.prototype
                            ) {
                                this[property] = this.deepExtend(
                                    this[property],
                                    value
                                );
                            } else {
                                this[property] = value;
                            }
                        }
                        // http client options
                        const agentOptions = {
                            keepAlive: true,
                        };
                        // ssl options
                        if (!this.validateServerSsl) {
                            agentOptions["rejectUnauthorized"] = false;
                        }
                        // js-specific http options
                        if (!this.httpAgent && defaultFetch.http && isNode) {
                            this.httpAgent = new defaultFetch.http.Agent(
                                agentOptions
                            );
                        }
                        if (!this.httpsAgent && defaultFetch.https && isNode) {
                            this.httpsAgent = new defaultFetch.https.Agent(
                                agentOptions
                            );
                        }
                        // generate old metainfo interface
                        const hasKeys = Object.keys(this.has);
                        for (let i = 0; i < hasKeys.length; i++) {
                            const k = hasKeys[i];
                            this["has" + this.capitalize(k)] = !!this.has[k]; // converts 'emulated' to true
                        }
                        // generate implicit api
                        if (this.api) {
                            this.defineRestApi(this.api, "request");
                        }
                        // init the request rate limiter
                        this.initRestRateLimiter();
                        // init predefined markets if any
                        if (this.markets) {
                            this.setMarkets(this.markets);
                        }
                    }

                    encodeURIComponent(...args) {
                        return encodeURIComponent(...args);
                    }

                    checkRequiredVersion(requiredVersion, error = true) {
                        let result = true;
                        const [major1, minor1, patch1] =
                                requiredVersion.split("."),
                            [major2, minor2, patch2] =
                                Exchange.ccxtVersion.split("."),
                            intMajor1 = parseInt(major1),
                            intMinor1 = parseInt(minor1),
                            intPatch1 = parseInt(patch1),
                            intMajor2 = parseInt(major2),
                            intMinor2 = parseInt(minor2),
                            intPatch2 = parseInt(patch2);
                        if (intMajor1 > intMajor2) {
                            result = false;
                        }
                        if (intMajor1 === intMajor2) {
                            if (intMinor1 > intMinor2) {
                                result = false;
                            } else if (
                                intMinor1 === intMinor2 &&
                                intPatch1 > intPatch2
                            ) {
                                result = false;
                            }
                        }
                        if (!result) {
                            if (error) {
                                throw new NotSupported(
                                    "Your current version of CCXT is " +
                                        Exchange.ccxtVersion +
                                        ", a newer version " +
                                        requiredVersion +
                                        " is required, please, upgrade your version of CCXT"
                                );
                            } else {
                                return error;
                            }
                        }
                        return result;
                    }

                    checkAddress(address) {
                        if (address === undefined) {
                            throw new InvalidAddress(
                                this.id + " address is undefined"
                            );
                        }
                        // check the address is not the same letter like 'aaaaa' nor too short nor has a space
                        if (
                            this.unique(address).length === 1 ||
                            address.length < this.minFundingAddressLength ||
                            address.includes(" ")
                        ) {
                            throw new InvalidAddress(
                                this.id +
                                    " address is invalid or has less than " +
                                    this.minFundingAddressLength.toString() +
                                    ' characters: "' +
                                    this.json(address) +
                                    '"'
                            );
                        }
                        return address;
                    }

                    initRestRateLimiter() {
                        if (this.rateLimit === undefined) {
                            throw new Error(
                                this.id +
                                    ".rateLimit property is not configured"
                            );
                        }
                        this.tokenBucket = this.extend(
                            {
                                delay: 0.001,
                                capacity: 1,
                                cost: 1,
                                maxCapacity: 1000,
                                refillRate:
                                    this.rateLimit > 0
                                        ? 1 / this.rateLimit
                                        : Number.MAX_VALUE,
                            },
                            this.tokenBucket
                        );
                        this.throttle = throttle(this.tokenBucket);
                        this.executeRestRequest = (
                            url,
                            method = "GET",
                            headers = undefined,
                            body = undefined
                        ) => {
                            // fetchImplementation cannot be called on this. in browsers:
                            // TypeError Failed to execute 'fetch' on 'Window': Illegal invocation
                            const fetchImplementation =
                                this.fetchImplementation;
                            const params = {
                                method,
                                headers,
                                body,
                                timeout: this.timeout,
                            };
                            if (this.agent) {
                                params["agent"] = this.agent;
                            } else if (
                                this.httpAgent &&
                                url.indexOf("http://") === 0
                            ) {
                                params["agent"] = this.httpAgent;
                            } else if (
                                this.httpsAgent &&
                                url.indexOf("https://") === 0
                            ) {
                                params["agent"] = this.httpsAgent;
                            }
                            const promise = fetchImplementation(
                                url,
                                this.extend(params, this.fetchOptions)
                            )
                                .catch((e) => {
                                    if (isNode) {
                                        throw new ExchangeNotAvailable(
                                            [
                                                this.id,
                                                method,
                                                url,
                                                e.type,
                                                e.message,
                                            ].join(" ")
                                        );
                                    }
                                    throw e; // rethrow all unknown errors
                                })
                                .then((response) =>
                                    this.handleRestResponse(
                                        response,
                                        url,
                                        method,
                                        headers,
                                        body
                                    )
                                );
                            return timeout(this.timeout, promise).catch((e) => {
                                if (e instanceof TimedOut) {
                                    throw new RequestTimeout(
                                        this.id +
                                            " " +
                                            method +
                                            " " +
                                            url +
                                            " request timed out (" +
                                            this.timeout +
                                            " ms)"
                                    );
                                }
                                throw e;
                            });
                        };
                    }

                    setSandboxMode(enabled) {
                        if (!!enabled) {
                            // eslint-disable-line no-extra-boolean-cast
                            if ("test" in this.urls) {
                                if (typeof this.urls["api"] === "string") {
                                    this.urls["apiBackup"] = this.urls["api"];
                                    this.urls["api"] = this.urls["test"];
                                } else {
                                    this.urls["apiBackup"] = clone(
                                        this.urls["api"]
                                    );
                                    this.urls["api"] = clone(this.urls["test"]);
                                }
                            } else {
                                throw new NotSupported(
                                    this.id + " does not have a sandbox URL"
                                );
                            }
                        } else if ("apiBackup" in this.urls) {
                            if (typeof this.urls["api"] === "string") {
                                this.urls["api"] = this.urls["apiBackup"];
                            } else {
                                this.urls["api"] = clone(
                                    this.urls["apiBackup"]
                                );
                            }
                        }
                    }

                    defineRestApiEndpoint(
                        methodName,
                        uppercaseMethod,
                        lowercaseMethod,
                        camelcaseMethod,
                        path,
                        paths,
                        config = {}
                    ) {
                        const splitPath = path.split(/[^a-zA-Z0-9]/);
                        const camelcaseSuffix = splitPath
                            .map(this.capitalize)
                            .join("");
                        const underscoreSuffix = splitPath
                            .map((x) => x.trim().toLowerCase())
                            .filter((x) => x.length > 0)
                            .join("_");
                        const camelcasePrefix = [paths[0]]
                            .concat(paths.slice(1).map(this.capitalize))
                            .join("");
                        const underscorePrefix = [paths[0]]
                            .concat(
                                paths
                                    .slice(1)
                                    .map((x) => x.trim())
                                    .filter((x) => x.length > 0)
                            )
                            .join("_");
                        const camelcase =
                            camelcasePrefix +
                            camelcaseMethod +
                            this.capitalize(camelcaseSuffix);
                        const underscore =
                            underscorePrefix +
                            "_" +
                            lowercaseMethod +
                            "_" +
                            underscoreSuffix;
                        const typeArgument =
                            paths.length > 1 ? paths : paths[0];
                        // handle call costs here
                        const partial = async (params = {}, context = {}) =>
                            this[methodName](
                                path,
                                typeArgument,
                                uppercaseMethod,
                                params,
                                undefined,
                                undefined,
                                config,
                                context
                            );
                        // const partial = async (params) => this[methodName] (path, typeArgument, uppercaseMethod, params || {})
                        this[camelcase] = partial;
                        this[underscore] = partial;
                    }

                    defineRestApi(api, methodName, paths = []) {
                        const keys = Object.keys(api);
                        for (let i = 0; i < keys.length; i++) {
                            const key = keys[i];
                            const value = api[key];
                            const uppercaseMethod = key.toUpperCase();
                            const lowercaseMethod = key.toLowerCase();
                            const camelcaseMethod =
                                this.capitalize(lowercaseMethod);
                            if (Array.isArray(value)) {
                                for (let k = 0; k < value.length; k++) {
                                    const path = value[k].trim();
                                    this.defineRestApiEndpoint(
                                        methodName,
                                        uppercaseMethod,
                                        lowercaseMethod,
                                        camelcaseMethod,
                                        path,
                                        paths
                                    );
                                }
                                // the options HTTP method conflicts with the 'options' API url path
                                // } else if (key.match (/^(?:get|post|put|delete|options|head|patch)$/i)) {
                            } else if (
                                key.match(
                                    /^(?:get|post|put|delete|head|patch)$/i
                                )
                            ) {
                                const endpoints = Object.keys(value);
                                for (let j = 0; j < endpoints.length; j++) {
                                    const endpoint = endpoints[j];
                                    const path = endpoint.trim();
                                    const config = value[endpoint];
                                    if (typeof config === "object") {
                                        this.defineRestApiEndpoint(
                                            methodName,
                                            uppercaseMethod,
                                            lowercaseMethod,
                                            camelcaseMethod,
                                            path,
                                            paths,
                                            config
                                        );
                                    } else if (typeof config === "number") {
                                        this.defineRestApiEndpoint(
                                            methodName,
                                            uppercaseMethod,
                                            lowercaseMethod,
                                            camelcaseMethod,
                                            path,
                                            paths,
                                            { cost: config }
                                        );
                                    } else {
                                        throw new NotSupported(
                                            this.id +
                                                " defineRestApi() API format is not supported, API leafs must strings, objects or numbers"
                                        );
                                    }
                                }
                            } else {
                                this.defineRestApi(
                                    value,
                                    methodName,
                                    paths.concat([key])
                                );
                            }
                        }
                    }

                    log(...args) {
                        console.log(...args);
                    }

                    fetch(
                        url,
                        method = "GET",
                        headers = undefined,
                        body = undefined
                    ) {
                        if (isNode && this.userAgent) {
                            if (typeof this.userAgent === "string") {
                                headers = this.extend(
                                    { "User-Agent": this.userAgent },
                                    headers
                                );
                            } else if (
                                typeof this.userAgent === "object" &&
                                "User-Agent" in this.userAgent
                            ) {
                                headers = this.extend(this.userAgent, headers);
                            }
                        }
                        if (typeof this.proxy === "function") {
                            url = this.proxy(url);
                            if (isNode) {
                                headers = this.extend(
                                    { Origin: this.origin },
                                    headers
                                );
                            }
                        } else if (typeof this.proxy === "string") {
                            if (this.proxy.length && isNode) {
                                headers = this.extend(
                                    { Origin: this.origin },
                                    headers
                                );
                            }
                            url = this.proxy + url;
                        }
                        headers = this.extend(this.headers, headers);
                        headers = this.setHeaders(headers);
                        if (this.verbose) {
                            this.log(
                                "fetch Request:\n",
                                this.id,
                                method,
                                url,
                                "\nRequestHeaders:\n",
                                headers,
                                "\nRequestBody:\n",
                                body,
                                "\n"
                            );
                        }
                        return this.executeRestRequest(
                            url,
                            method,
                            headers,
                            body
                        );
                    }

                    parseJson(jsonString) {
                        try {
                            if (this.isJsonEncodedObject(jsonString)) {
                                return JSON.parse(
                                    this.onJsonResponse(jsonString)
                                );
                            }
                        } catch (e) {
                            // SyntaxError
                            return undefined;
                        }
                    }

                    getResponseHeaders(response) {
                        const result = {};
                        response.headers.forEach((value, key) => {
                            key = key
                                .split("-")
                                .map((word) => this.capitalize(word))
                                .join("-");
                            result[key] = value;
                        });
                        return result;
                    }

                    handleRestResponse(
                        response,
                        url,
                        method = "GET",
                        requestHeaders = undefined,
                        requestBody = undefined
                    ) {
                        const responseHeaders =
                            this.getResponseHeaders(response);
                        if (
                            this.handleContentTypeApplicationZip &&
                            responseHeaders["Content-Type"] ===
                                "application/zip"
                        ) {
                            const responseBuffer = response.buffer();
                            if (this.enableLastResponseHeaders) {
                                this.last_response_headers = responseHeaders;
                            }
                            if (this.enableLastHttpResponse) {
                                this.last_http_response = responseBuffer;
                            }
                            if (this.verbose) {
                                this.log(
                                    "handleRestResponse:\n",
                                    this.id,
                                    method,
                                    url,
                                    response.status,
                                    response.statusText,
                                    "\nResponseHeaders:\n",
                                    responseHeaders,
                                    "ZIP redacted",
                                    "\n"
                                );
                            }
                            // no error handler needed, because it would not be a zip response in case of an error
                            return responseBuffer;
                        }
                        return response.text().then((responseBody) => {
                            const bodyText = this.onRestResponse(
                                response.status,
                                response.statusText,
                                url,
                                method,
                                responseHeaders,
                                responseBody,
                                requestHeaders,
                                requestBody
                            );
                            const json = this.parseJson(bodyText);
                            if (this.enableLastResponseHeaders) {
                                this.last_response_headers = responseHeaders;
                            }
                            if (this.enableLastHttpResponse) {
                                this.last_http_response = responseBody;
                            }
                            if (this.enableLastJsonResponse) {
                                this.last_json_response = json;
                            }
                            if (this.verbose) {
                                this.log(
                                    "handleRestResponse:\n",
                                    this.id,
                                    method,
                                    url,
                                    response.status,
                                    response.statusText,
                                    "\nResponseHeaders:\n",
                                    responseHeaders,
                                    "\nResponseBody:\n",
                                    responseBody,
                                    "\n"
                                );
                            }
                            const skipFurtherErrorHandling = this.handleErrors(
                                response.status,
                                response.statusText,
                                url,
                                method,
                                responseHeaders,
                                responseBody,
                                json,
                                requestHeaders,
                                requestBody
                            );
                            if (!skipFurtherErrorHandling) {
                                this.handleHttpStatusCode(
                                    response.status,
                                    response.statusText,
                                    url,
                                    method,
                                    responseBody
                                );
                            }
                            return json || responseBody;
                        });
                    }

                    onRestResponse(
                        statusCode,
                        statusText,
                        url,
                        method,
                        responseHeaders,
                        responseBody,
                        requestHeaders,
                        requestBody
                    ) {
                        return responseBody.trim();
                    }

                    onJsonResponse(responseBody) {
                        return this.quoteJsonNumbers
                            ? responseBody.replace(
                                  /":([+.0-9eE-]+)([,}])/g,
                                  '":"$1"$2'
                              )
                            : responseBody;
                    }

                    async loadMarketsHelper(reload = false, params = {}) {
                        if (!reload && this.markets) {
                            if (!this.markets_by_id) {
                                return this.setMarkets(this.markets);
                            }
                            return this.markets;
                        }
                        let currencies = undefined;
                        // only call if exchange API provides endpoint (true), thus avoid emulated versions ('emulated')
                        if (this.has.fetchCurrencies === true) {
                            currencies = await this.fetchCurrencies();
                        }
                        const markets = await this.fetchMarkets(params);
                        return this.setMarkets(markets, currencies);
                    }

                    loadMarkets(reload = false, params = {}) {
                        // this method is async, it returns a promise
                        if (
                            (reload && !this.reloadingMarkets) ||
                            !this.marketsLoading
                        ) {
                            this.reloadingMarkets = true;
                            this.marketsLoading = this.loadMarketsHelper(
                                reload,
                                params
                            ).then(
                                (resolved) => {
                                    this.reloadingMarkets = false;
                                    return resolved;
                                },
                                (error) => {
                                    this.reloadingMarkets = false;
                                    throw error;
                                }
                            );
                        }
                        return this.marketsLoading;
                    }

                    fetchCurrencies(params = {}) {
                        // markets are returned as a list
                        // currencies are returned as a dict
                        // this is for historical reasons
                        // and may be changed for consistency later
                        return new Promise((resolve, reject) =>
                            resolve(this.currencies)
                        );
                    }

                    fetchMarkets(params = {}) {
                        // markets are returned as a list
                        // currencies are returned as a dict
                        // this is for historical reasons
                        // and may be changed for consistency later
                        return new Promise((resolve, reject) =>
                            resolve(Object.values(this.markets))
                        );
                    }

                    filterBySinceLimit(
                        array,
                        since = undefined,
                        limit = undefined,
                        key = "timestamp",
                        tail = false
                    ) {
                        const sinceIsDefined =
                            since !== undefined && since !== null;
                        if (sinceIsDefined) {
                            array = array.filter(
                                (entry) => entry[key] >= since
                            );
                        }
                        if (limit !== undefined && limit !== null) {
                            array = tail
                                ? array.slice(-limit)
                                : array.slice(0, limit);
                        }
                        return array;
                    }

                    filterByValueSinceLimit(
                        array,
                        field,
                        value = undefined,
                        since = undefined,
                        limit = undefined,
                        key = "timestamp",
                        tail = false
                    ) {
                        const valueIsDefined =
                            value !== undefined && value !== null;
                        const sinceIsDefined =
                            since !== undefined && since !== null;
                        // single-pass filter for both symbol and since
                        if (valueIsDefined || sinceIsDefined) {
                            array = array.filter(
                                (entry) =>
                                    (valueIsDefined
                                        ? entry[field] === value
                                        : true) &&
                                    (sinceIsDefined
                                        ? entry[key] >= since
                                        : true)
                            );
                        }
                        if (limit !== undefined && limit !== null) {
                            array = tail
                                ? array.slice(-limit)
                                : array.slice(0, limit);
                        }
                        return array;
                    }

                    checkRequiredDependencies() {
                        return;
                    }

                    remove0xPrefix(hexData) {
                        if (hexData.slice(0, 2) === "0x") {
                            return hexData.slice(2);
                        } else {
                            return hexData;
                        }
                    }

                    hashMessage(message) {
                        // takes a hex encoded message
                        const binaryMessage = this.base16ToBinary(
                            this.remove0xPrefix(message)
                        );
                        const prefix = this.stringToBinary(
                            "\x19Ethereum Signed Message:\n" +
                                binaryMessage.sigBytes
                        );
                        return (
                            "0x" +
                            this.hash(
                                this.binaryConcat(prefix, binaryMessage),
                                "keccak",
                                "hex"
                            )
                        );
                    }

                    signHash(hash, privateKey) {
                        const signature = this.ecdsa(
                            hash.slice(-64),
                            privateKey.slice(-64),
                            "secp256k1",
                            undefined
                        );
                        return {
                            r: "0x" + signature["r"],
                            s: "0x" + signature["s"],
                            v: 27 + signature["v"],
                        };
                    }

                    signMessage(message, privateKey) {
                        return this.signHash(
                            this.hashMessage(message),
                            privateKey.slice(-64)
                        );
                    }

                    signMessageString(message, privateKey) {
                        // still takes the input as a hex string
                        // same as above but returns a string instead of an object
                        const signature = this.signMessage(message, privateKey);
                        return (
                            signature["r"] +
                            this.remove0xPrefix(signature["s"]) +
                            this.binaryToBase16(this.numberToBE(signature["v"]))
                        );
                    }

                    parseNumber(value, d = undefined) {
                        if (value === undefined) {
                            return d;
                        } else {
                            try {
                                return this.number(value);
                            } catch (e) {
                                return d;
                            }
                        }
                    }

                    checkOrderArguments(
                        market,
                        type,
                        side,
                        amount,
                        price,
                        params
                    ) {
                        if (price === undefined) {
                            if (type === "limit") {
                                throw new ArgumentsRequired(
                                    this.id +
                                        " createOrder() requires a price argument for a limit order"
                                );
                            }
                        }
                        if (amount <= 0) {
                            throw new ArgumentsRequired(
                                this.id +
                                    " createOrder() amount should be above 0"
                            );
                        }
                    }

                    handleHttpStatusCode(code, reason, url, method, body) {
                        const codeAsString = code.toString();
                        if (codeAsString in this.httpExceptions) {
                            const ErrorClass =
                                this.httpExceptions[codeAsString];
                            throw new ErrorClass(
                                this.id +
                                    " " +
                                    method +
                                    " " +
                                    url +
                                    " " +
                                    codeAsString +
                                    " " +
                                    reason +
                                    " " +
                                    body
                            );
                        }
                    }

                    /* eslint-enable */
                    // ------------------------------------------------------------------------

                    // ########################################################################
                    // ########################################################################
                    // ########################################################################
                    // ########################################################################
                    // ########                        ########                        ########
                    // ########                        ########                        ########
                    // ########                        ########                        ########
                    // ########                        ########                        ########
                    // ########        ########################        ########################
                    // ########        ########################        ########################
                    // ########        ########################        ########################
                    // ########        ########################        ########################
                    // ########                        ########                        ########
                    // ########                        ########                        ########
                    // ########                        ########                        ########
                    // ########                        ########                        ########
                    // ########################################################################
                    // ########################################################################
                    // ########################################################################
                    // ########################################################################
                    // ########        ########        ########                        ########
                    // ########        ########        ########                        ########
                    // ########        ########        ########                        ########
                    // ########        ########        ########                        ########
                    // ################        ########################        ################
                    // ################        ########################        ################
                    // ################        ########################        ################
                    // ################        ########################        ################
                    // ########        ########        ################        ################
                    // ########        ########        ################        ################
                    // ########        ########        ################        ################
                    // ########        ########        ################        ################
                    // ########################################################################
                    // ########################################################################
                    // ########################################################################
                    // ########################################################################

                    // ------------------------------------------------------------------------
                    // METHODS BELOW THIS LINE ARE TRANSPILED FROM JAVASCRIPT TO PYTHON AND PHP

                    getDefaultOptions() {
                        return {
                            defaultNetworkCodeReplacements: {
                                ETH: { ERC20: "ETH" },
                                TRX: { TRC20: "TRX" },
                                CRO: { CRC20: "CRONOS" },
                            },
                        };
                    }

                    safeLedgerEntry(entry, currency = undefined) {
                        currency = this.safeCurrency(undefined, currency);
                        let direction = this.safeString(entry, "direction");
                        let before = this.safeString(entry, "before");
                        let after = this.safeString(entry, "after");
                        const amount = this.safeString(entry, "amount");
                        if (amount !== undefined) {
                            if (before === undefined && after !== undefined) {
                                before = Precise.stringSub(after, amount);
                            } else if (
                                before !== undefined &&
                                after === undefined
                            ) {
                                after = Precise.stringAdd(before, amount);
                            }
                        }
                        if (before !== undefined && after !== undefined) {
                            if (direction === undefined) {
                                if (Precise.stringGt(before, after)) {
                                    direction = "out";
                                }
                                if (Precise.stringGt(after, before)) {
                                    direction = "in";
                                }
                            }
                        }
                        const fee = this.safeValue(entry, "fee");
                        if (fee !== undefined) {
                            fee["cost"] = this.safeNumber(fee, "cost");
                        }
                        const timestamp = this.safeInteger(entry, "timestamp");
                        return {
                            id: this.safeString(entry, "id"),
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            direction: direction,
                            account: this.safeString(entry, "account"),
                            referenceId: this.safeString(entry, "referenceId"),
                            referenceAccount: this.safeString(
                                entry,
                                "referenceAccount"
                            ),
                            type: this.safeString(entry, "type"),
                            currency: currency["code"],
                            amount: this.parseNumber(amount),
                            before: this.parseNumber(before),
                            after: this.parseNumber(after),
                            status: this.safeString(entry, "status"),
                            fee: fee,
                            info: entry,
                        };
                    }

                    setMarkets(markets, currencies = undefined) {
                        const values = [];
                        this.markets_by_id = {};
                        // handle marketId conflicts
                        // we insert spot markets first
                        const marketValues = this.sortBy(
                            this.toArray(markets),
                            "spot",
                            true
                        );
                        for (let i = 0; i < marketValues.length; i++) {
                            const value = marketValues[i];
                            if (value["id"] in this.markets_by_id) {
                                this.markets_by_id[value["id"]].push(value);
                            } else {
                                this.markets_by_id[value["id"]] = [value];
                            }
                            const market = this.deepExtend(
                                this.safeMarket(),
                                {
                                    precision: this.precision,
                                    limits: this.limits,
                                },
                                this.fees["trading"],
                                value
                            );
                            values.push(market);
                        }
                        this.markets = this.indexBy(values, "symbol");
                        const marketsSortedBySymbol = this.keysort(
                            this.markets
                        );
                        const marketsSortedById = this.keysort(
                            this.markets_by_id
                        );
                        this.symbols = Object.keys(marketsSortedBySymbol);
                        this.ids = Object.keys(marketsSortedById);
                        if (currencies !== undefined) {
                            this.currencies = this.deepExtend(
                                this.currencies,
                                currencies
                            );
                        } else {
                            let baseCurrencies = [];
                            let quoteCurrencies = [];
                            for (let i = 0; i < values.length; i++) {
                                const market = values[i];
                                const defaultCurrencyPrecision =
                                    this.precisionMode === DECIMAL_PLACES
                                        ? 8
                                        : this.parseNumber("1e-8");
                                const marketPrecision = this.safeValue(
                                    market,
                                    "precision",
                                    {}
                                );
                                if ("base" in market) {
                                    const currencyPrecision = this.safeValue2(
                                        marketPrecision,
                                        "base",
                                        "amount",
                                        defaultCurrencyPrecision
                                    );
                                    const currency = {
                                        id: this.safeString2(
                                            market,
                                            "baseId",
                                            "base"
                                        ),
                                        numericId: this.safeString(
                                            market,
                                            "baseNumericId"
                                        ),
                                        code: this.safeString(market, "base"),
                                        precision: currencyPrecision,
                                    };
                                    baseCurrencies.push(currency);
                                }
                                if ("quote" in market) {
                                    const currencyPrecision = this.safeValue2(
                                        marketPrecision,
                                        "quote",
                                        "price",
                                        defaultCurrencyPrecision
                                    );
                                    const currency = {
                                        id: this.safeString2(
                                            market,
                                            "quoteId",
                                            "quote"
                                        ),
                                        numericId: this.safeString(
                                            market,
                                            "quoteNumericId"
                                        ),
                                        code: this.safeString(market, "quote"),
                                        precision: currencyPrecision,
                                    };
                                    quoteCurrencies.push(currency);
                                }
                            }
                            baseCurrencies = this.sortBy(
                                baseCurrencies,
                                "code"
                            );
                            quoteCurrencies = this.sortBy(
                                quoteCurrencies,
                                "code"
                            );
                            this.baseCurrencies = this.indexBy(
                                baseCurrencies,
                                "code"
                            );
                            this.quoteCurrencies = this.indexBy(
                                quoteCurrencies,
                                "code"
                            );
                            const allCurrencies = this.arrayConcat(
                                baseCurrencies,
                                quoteCurrencies
                            );
                            const groupedCurrencies = this.groupBy(
                                allCurrencies,
                                "code"
                            );
                            const codes = Object.keys(groupedCurrencies);
                            const resultingCurrencies = [];
                            for (let i = 0; i < codes.length; i++) {
                                const code = codes[i];
                                const groupedCurrenciesCode = this.safeValue(
                                    groupedCurrencies,
                                    code,
                                    []
                                );
                                let highestPrecisionCurrency = this.safeValue(
                                    groupedCurrenciesCode,
                                    0
                                );
                                for (
                                    let j = 1;
                                    j < groupedCurrenciesCode.length;
                                    j++
                                ) {
                                    const currentCurrency =
                                        groupedCurrenciesCode[j];
                                    if (this.precisionMode === TICK_SIZE) {
                                        highestPrecisionCurrency =
                                            currentCurrency["precision"] <
                                            highestPrecisionCurrency[
                                                "precision"
                                            ]
                                                ? currentCurrency
                                                : highestPrecisionCurrency;
                                    } else {
                                        highestPrecisionCurrency =
                                            currentCurrency["precision"] >
                                            highestPrecisionCurrency[
                                                "precision"
                                            ]
                                                ? currentCurrency
                                                : highestPrecisionCurrency;
                                    }
                                }
                                resultingCurrencies.push(
                                    highestPrecisionCurrency
                                );
                            }
                            const sortedCurrencies = this.sortBy(
                                resultingCurrencies,
                                "code"
                            );
                            this.currencies = this.deepExtend(
                                this.currencies,
                                this.indexBy(sortedCurrencies, "code")
                            );
                        }
                        this.currencies_by_id = this.indexBy(
                            this.currencies,
                            "id"
                        );
                        const currenciesSortedByCode = this.keysort(
                            this.currencies
                        );
                        this.codes = Object.keys(currenciesSortedByCode);
                        return this.markets;
                    }

                    safeBalance(balance) {
                        const balances = this.omit(balance, [
                            "info",
                            "timestamp",
                            "datetime",
                            "free",
                            "used",
                            "total",
                        ]);
                        const codes = Object.keys(balances);
                        balance["free"] = {};
                        balance["used"] = {};
                        balance["total"] = {};
                        const debtBalance = {};
                        for (let i = 0; i < codes.length; i++) {
                            const code = codes[i];
                            let total = this.safeString(balance[code], "total");
                            let free = this.safeString(balance[code], "free");
                            let used = this.safeString(balance[code], "used");
                            const debt = this.safeString(balance[code], "debt");
                            if (
                                total === undefined &&
                                free !== undefined &&
                                used !== undefined
                            ) {
                                total = Precise.stringAdd(free, used);
                            }
                            if (
                                free === undefined &&
                                total !== undefined &&
                                used !== undefined
                            ) {
                                free = Precise.stringSub(total, used);
                            }
                            if (
                                used === undefined &&
                                total !== undefined &&
                                free !== undefined
                            ) {
                                used = Precise.stringSub(total, free);
                            }
                            balance[code]["free"] = this.parseNumber(free);
                            balance[code]["used"] = this.parseNumber(used);
                            balance[code]["total"] = this.parseNumber(total);
                            balance["free"][code] = balance[code]["free"];
                            balance["used"][code] = balance[code]["used"];
                            balance["total"][code] = balance[code]["total"];
                            if (debt !== undefined) {
                                balance[code]["debt"] = this.parseNumber(debt);
                                debtBalance[code] = balance[code]["debt"];
                            }
                        }
                        const debtBalanceArray = Object.keys(debtBalance);
                        const length = debtBalanceArray.length;
                        if (length) {
                            balance["debt"] = debtBalance;
                        }
                        return balance;
                    }

                    safeOrder(order, market = undefined) {
                        // parses numbers as strings
                        // it is important pass the trades as unparsed rawTrades
                        let amount = this.omitZero(
                            this.safeString(order, "amount")
                        );
                        let remaining = this.safeString(order, "remaining");
                        let filled = this.safeString(order, "filled");
                        let cost = this.safeString(order, "cost");
                        let average = this.omitZero(
                            this.safeString(order, "average")
                        );
                        let price = this.omitZero(
                            this.safeString(order, "price")
                        );
                        let lastTradeTimeTimestamp = this.safeInteger(
                            order,
                            "lastTradeTimestamp"
                        );
                        let symbol = this.safeString(order, "symbol");
                        let side = this.safeString(order, "side");
                        const parseFilled = filled === undefined;
                        const parseCost = cost === undefined;
                        const parseLastTradeTimeTimestamp =
                            lastTradeTimeTimestamp === undefined;
                        const fee = this.safeValue(order, "fee");
                        const parseFee = fee === undefined;
                        const parseFees =
                            this.safeValue(order, "fees") === undefined;
                        const parseSymbol = symbol === undefined;
                        const parseSide = side === undefined;
                        const shouldParseFees = parseFee || parseFees;
                        const fees = this.safeValue(order, "fees", []);
                        let trades = [];
                        if (parseFilled || parseCost || shouldParseFees) {
                            const rawTrades = this.safeValue(
                                order,
                                "trades",
                                trades
                            );
                            const oldNumber = this.number;
                            // we parse trades as strings here!
                            this.number = String;
                            trades = this.parseTrades(rawTrades, market);
                            this.number = oldNumber;
                            let tradesLength = 0;
                            const isArray = Array.isArray(trades);
                            if (isArray) {
                                tradesLength = trades.length;
                            }
                            if (isArray && tradesLength > 0) {
                                // move properties that are defined in trades up into the order
                                if (order["symbol"] === undefined) {
                                    order["symbol"] = trades[0]["symbol"];
                                }
                                if (order["side"] === undefined) {
                                    order["side"] = trades[0]["side"];
                                }
                                if (order["type"] === undefined) {
                                    order["type"] = trades[0]["type"];
                                }
                                if (order["id"] === undefined) {
                                    order["id"] = trades[0]["order"];
                                }
                                if (parseFilled) {
                                    filled = "0";
                                }
                                if (parseCost) {
                                    cost = "0";
                                }
                                for (let i = 0; i < trades.length; i++) {
                                    const trade = trades[i];
                                    const tradeAmount = this.safeString(
                                        trade,
                                        "amount"
                                    );
                                    if (
                                        parseFilled &&
                                        tradeAmount !== undefined
                                    ) {
                                        filled = Precise.stringAdd(
                                            filled,
                                            tradeAmount
                                        );
                                    }
                                    const tradeCost = this.safeString(
                                        trade,
                                        "cost"
                                    );
                                    if (parseCost && tradeCost !== undefined) {
                                        cost = Precise.stringAdd(
                                            cost,
                                            tradeCost
                                        );
                                    }
                                    if (parseSymbol) {
                                        symbol = this.safeString(
                                            trade,
                                            "symbol"
                                        );
                                    }
                                    if (parseSide) {
                                        side = this.safeString(trade, "side");
                                    }
                                    const tradeTimestamp = this.safeValue(
                                        trade,
                                        "timestamp"
                                    );
                                    if (
                                        parseLastTradeTimeTimestamp &&
                                        tradeTimestamp !== undefined
                                    ) {
                                        if (
                                            lastTradeTimeTimestamp === undefined
                                        ) {
                                            lastTradeTimeTimestamp =
                                                tradeTimestamp;
                                        } else {
                                            lastTradeTimeTimestamp = Math.max(
                                                lastTradeTimeTimestamp,
                                                tradeTimestamp
                                            );
                                        }
                                    }
                                    if (shouldParseFees) {
                                        const tradeFees = this.safeValue(
                                            trade,
                                            "fees"
                                        );
                                        if (tradeFees !== undefined) {
                                            for (
                                                let j = 0;
                                                j < tradeFees.length;
                                                j++
                                            ) {
                                                const tradeFee = tradeFees[j];
                                                fees.push(
                                                    this.extend({}, tradeFee)
                                                );
                                            }
                                        } else {
                                            const tradeFee = this.safeValue(
                                                trade,
                                                "fee"
                                            );
                                            if (tradeFee !== undefined) {
                                                fees.push(
                                                    this.extend({}, tradeFee)
                                                );
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (shouldParseFees) {
                            const reducedFees = this.reduceFees
                                ? this.reduceFeesByCurrency(fees)
                                : fees;
                            const reducedLength = reducedFees.length;
                            for (let i = 0; i < reducedLength; i++) {
                                reducedFees[i]["cost"] = this.safeNumber(
                                    reducedFees[i],
                                    "cost"
                                );
                                if ("rate" in reducedFees[i]) {
                                    reducedFees[i]["rate"] = this.safeNumber(
                                        reducedFees[i],
                                        "rate"
                                    );
                                }
                            }
                            if (!parseFee && reducedLength === 0) {
                                fee["cost"] = this.safeNumber(fee, "cost");
                                if ("rate" in fee) {
                                    fee["rate"] = this.safeNumber(fee, "rate");
                                }
                                reducedFees.push(fee);
                            }
                            order["fees"] = reducedFees;
                            if (parseFee && reducedLength === 1) {
                                order["fee"] = reducedFees[0];
                            }
                        }
                        if (amount === undefined) {
                            // ensure amount = filled + remaining
                            if (
                                filled !== undefined &&
                                remaining !== undefined
                            ) {
                                amount = Precise.stringAdd(filled, remaining);
                            } else if (
                                this.safeString(order, "status") === "closed"
                            ) {
                                amount = filled;
                            }
                        }
                        if (filled === undefined) {
                            if (
                                amount !== undefined &&
                                remaining !== undefined
                            ) {
                                filled = Precise.stringSub(amount, remaining);
                            }
                        }
                        if (remaining === undefined) {
                            if (amount !== undefined && filled !== undefined) {
                                remaining = Precise.stringSub(amount, filled);
                            }
                        }
                        // ensure that the average field is calculated correctly
                        const inverse = this.safeValue(
                            market,
                            "inverse",
                            false
                        );
                        const contractSize = this.numberToString(
                            this.safeValue(market, "contractSize", 1)
                        );
                        // inverse
                        // price = filled * contract size / cost
                        //
                        // linear
                        // price = cost / (filled * contract size)
                        if (average === undefined) {
                            if (
                                filled !== undefined &&
                                cost !== undefined &&
                                Precise.stringGt(filled, "0")
                            ) {
                                const filledTimesContractSize =
                                    Precise.stringMul(filled, contractSize);
                                if (inverse) {
                                    average = Precise.stringDiv(
                                        filledTimesContractSize,
                                        cost
                                    );
                                } else {
                                    average = Precise.stringDiv(
                                        cost,
                                        filledTimesContractSize
                                    );
                                }
                            }
                        }
                        // similarly
                        // inverse
                        // cost = filled * contract size / price
                        //
                        // linear
                        // cost = filled * contract size * price
                        const costPriceExists =
                            average !== undefined || price !== undefined;
                        if (
                            parseCost &&
                            filled !== undefined &&
                            costPriceExists
                        ) {
                            let multiplyPrice = undefined;
                            if (average === undefined) {
                                multiplyPrice = price;
                            } else {
                                multiplyPrice = average;
                            }
                            // contract trading
                            const filledTimesContractSize = Precise.stringMul(
                                filled,
                                contractSize
                            );
                            if (inverse) {
                                cost = Precise.stringDiv(
                                    filledTimesContractSize,
                                    multiplyPrice
                                );
                            } else {
                                cost = Precise.stringMul(
                                    filledTimesContractSize,
                                    multiplyPrice
                                );
                            }
                        }
                        // support for market orders
                        const orderType = this.safeValue(order, "type");
                        const emptyPrice =
                            price === undefined ||
                            Precise.stringEquals(price, "0");
                        if (emptyPrice && orderType === "market") {
                            price = average;
                        }
                        // we have trades with string values at this point so we will mutate them
                        for (let i = 0; i < trades.length; i++) {
                            const entry = trades[i];
                            entry["amount"] = this.safeNumber(entry, "amount");
                            entry["price"] = this.safeNumber(entry, "price");
                            entry["cost"] = this.safeNumber(entry, "cost");
                            const fee = this.safeValue(entry, "fee", {});
                            fee["cost"] = this.safeNumber(fee, "cost");
                            if ("rate" in fee) {
                                fee["rate"] = this.safeNumber(fee, "rate");
                            }
                            entry["fee"] = fee;
                        }
                        let timeInForce = this.safeString(order, "timeInForce");
                        let postOnly = this.safeValue(order, "postOnly");
                        // timeInForceHandling
                        if (timeInForce === undefined) {
                            if (this.safeString(order, "type") === "market") {
                                timeInForce = "IOC";
                            }
                            // allow postOnly override
                            if (postOnly) {
                                timeInForce = "PO";
                            }
                        } else if (postOnly === undefined) {
                            // timeInForce is not undefined here
                            postOnly = timeInForce === "PO";
                        }
                        return this.extend(order, {
                            symbol: symbol,
                            side: side,
                            lastTradeTimestamp: lastTradeTimeTimestamp,
                            price: this.parseNumber(price),
                            amount: this.parseNumber(amount),
                            cost: this.parseNumber(cost),
                            average: this.parseNumber(average),
                            filled: this.parseNumber(filled),
                            remaining: this.parseNumber(remaining),
                            timeInForce: timeInForce,
                            postOnly: postOnly,
                            trades: trades,
                        });
                    }

                    parseOrders(
                        orders,
                        market = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        //
                        // the value of orders is either a dict or a list
                        //
                        // dict
                        //
                        //     {
                        //         'id1': { ... },
                        //         'id2': { ... },
                        //         'id3': { ... },
                        //         ...
                        //     }
                        //
                        // list
                        //
                        //     [
                        //         { 'id': 'id1', ... },
                        //         { 'id': 'id2', ... },
                        //         { 'id': 'id3', ... },
                        //         ...
                        //     ]
                        //
                        let results = [];
                        if (Array.isArray(orders)) {
                            for (let i = 0; i < orders.length; i++) {
                                const order = this.extend(
                                    this.parseOrder(orders[i], market),
                                    params
                                );
                                results.push(order);
                            }
                        } else {
                            const ids = Object.keys(orders);
                            for (let i = 0; i < ids.length; i++) {
                                const id = ids[i];
                                const order = this.extend(
                                    this.parseOrder(
                                        this.extend({ id: id }, orders[id]),
                                        market
                                    ),
                                    params
                                );
                                results.push(order);
                            }
                        }
                        results = this.sortBy(results, "timestamp");
                        const symbol =
                            market !== undefined ? market["symbol"] : undefined;
                        const tail = since === undefined;
                        return this.filterBySymbolSinceLimit(
                            results,
                            symbol,
                            since,
                            limit,
                            tail
                        );
                    }

                    calculateFee(
                        symbol,
                        type,
                        side,
                        amount,
                        price,
                        takerOrMaker = "taker",
                        params = {}
                    ) {
                        if (type === "market" && takerOrMaker === "maker") {
                            throw new ArgumentsRequired(
                                this.id +
                                    ' calculateFee() - you have provided incompatible arguments - "market" type order can not be "maker". Change either the "type" or the "takerOrMaker" argument to calculate the fee.'
                            );
                        }
                        const market = this.markets[symbol];
                        const feeSide = this.safeString(
                            market,
                            "feeSide",
                            "quote"
                        );
                        let key = "quote";
                        let cost = undefined;
                        const amountString = this.numberToString(amount);
                        const priceString = this.numberToString(price);
                        if (feeSide === "quote") {
                            // the fee is always in quote currency
                            cost = Precise.stringMul(amountString, priceString);
                        } else if (feeSide === "base") {
                            // the fee is always in base currency
                            cost = amountString;
                        } else if (feeSide === "get") {
                            // the fee is always in the currency you get
                            cost = amountString;
                            if (side === "sell") {
                                cost = Precise.stringMul(cost, priceString);
                            } else {
                                key = "base";
                            }
                        } else if (feeSide === "give") {
                            // the fee is always in the currency you give
                            cost = amountString;
                            if (side === "buy") {
                                cost = Precise.stringMul(cost, priceString);
                            } else {
                                key = "base";
                            }
                        }
                        // for derivatives, the fee is in 'settle' currency
                        if (!market["spot"]) {
                            key = "settle";
                        }
                        // even if `takerOrMaker` argument was set to 'maker', for 'market' orders we should forcefully override it to 'taker'
                        if (type === "market") {
                            takerOrMaker = "taker";
                        }
                        const rate = this.safeString(market, takerOrMaker);
                        if (cost !== undefined) {
                            cost = Precise.stringMul(cost, rate);
                        }
                        return {
                            type: takerOrMaker,
                            currency: market[key],
                            rate: this.parseNumber(rate),
                            cost: this.parseNumber(cost),
                        };
                    }

                    safeTrade(trade, market = undefined) {
                        const amount = this.safeString(trade, "amount");
                        const price = this.safeString(trade, "price");
                        let cost = this.safeString(trade, "cost");
                        if (cost === undefined) {
                            // contract trading
                            const contractSize = this.safeString(
                                market,
                                "contractSize"
                            );
                            let multiplyPrice = price;
                            if (contractSize !== undefined) {
                                const inverse = this.safeValue(
                                    market,
                                    "inverse",
                                    false
                                );
                                if (inverse) {
                                    multiplyPrice = Precise.stringDiv(
                                        "1",
                                        price
                                    );
                                }
                                multiplyPrice = Precise.stringMul(
                                    multiplyPrice,
                                    contractSize
                                );
                            }
                            cost = Precise.stringMul(multiplyPrice, amount);
                        }
                        const parseFee =
                            this.safeValue(trade, "fee") === undefined;
                        const parseFees =
                            this.safeValue(trade, "fees") === undefined;
                        const shouldParseFees = parseFee || parseFees;
                        const fees = [];
                        const fee = this.safeValue(trade, "fee");
                        if (shouldParseFees) {
                            const reducedFees = this.reduceFees
                                ? this.reduceFeesByCurrency(fees)
                                : fees;
                            const reducedLength = reducedFees.length;
                            for (let i = 0; i < reducedLength; i++) {
                                reducedFees[i]["cost"] = this.safeNumber(
                                    reducedFees[i],
                                    "cost"
                                );
                                if ("rate" in reducedFees[i]) {
                                    reducedFees[i]["rate"] = this.safeNumber(
                                        reducedFees[i],
                                        "rate"
                                    );
                                }
                            }
                            if (!parseFee && reducedLength === 0) {
                                fee["cost"] = this.safeNumber(fee, "cost");
                                if ("rate" in fee) {
                                    fee["rate"] = this.safeNumber(fee, "rate");
                                }
                                reducedFees.push(fee);
                            }
                            if (parseFees) {
                                trade["fees"] = reducedFees;
                            }
                            if (parseFee && reducedLength === 1) {
                                trade["fee"] = reducedFees[0];
                            }
                            const tradeFee = this.safeValue(trade, "fee");
                            if (tradeFee !== undefined) {
                                tradeFee["cost"] = this.safeNumber(
                                    tradeFee,
                                    "cost"
                                );
                                if ("rate" in tradeFee) {
                                    tradeFee["rate"] = this.safeNumber(
                                        tradeFee,
                                        "rate"
                                    );
                                }
                                trade["fee"] = tradeFee;
                            }
                        }
                        trade["amount"] = this.parseNumber(amount);
                        trade["price"] = this.parseNumber(price);
                        trade["cost"] = this.parseNumber(cost);
                        return trade;
                    }

                    reduceFeesByCurrency(fees) {
                        //
                        // this function takes a list of fee structures having the following format
                        //
                        //     string = true
                        //
                        //     [
                        //         { 'currency': 'BTC', 'cost': '0.1' },
                        //         { 'currency': 'BTC', 'cost': '0.2'  },
                        //         { 'currency': 'BTC', 'cost': '0.2', 'rate': '0.00123' },
                        //         { 'currency': 'BTC', 'cost': '0.4', 'rate': '0.00123' },
                        //         { 'currency': 'BTC', 'cost': '0.5', 'rate': '0.00456' },
                        //         { 'currency': 'USDT', 'cost': '12.3456' },
                        //     ]
                        //
                        //     string = false
                        //
                        //     [
                        //         { 'currency': 'BTC', 'cost': 0.1 },
                        //         { 'currency': 'BTC', 'cost': 0.2 },
                        //         { 'currency': 'BTC', 'cost': 0.2, 'rate': 0.00123 },
                        //         { 'currency': 'BTC', 'cost': 0.4, 'rate': 0.00123 },
                        //         { 'currency': 'BTC', 'cost': 0.5, 'rate': 0.00456 },
                        //         { 'currency': 'USDT', 'cost': 12.3456 },
                        //     ]
                        //
                        // and returns a reduced fee list, where fees are summed per currency and rate (if any)
                        //
                        //     string = true
                        //
                        //     [
                        //         { 'currency': 'BTC', 'cost': '0.3'  },
                        //         { 'currency': 'BTC', 'cost': '0.6', 'rate': '0.00123' },
                        //         { 'currency': 'BTC', 'cost': '0.5', 'rate': '0.00456' },
                        //         { 'currency': 'USDT', 'cost': '12.3456' },
                        //     ]
                        //
                        //     string  = false
                        //
                        //     [
                        //         { 'currency': 'BTC', 'cost': 0.3  },
                        //         { 'currency': 'BTC', 'cost': 0.6, 'rate': 0.00123 },
                        //         { 'currency': 'BTC', 'cost': 0.5, 'rate': 0.00456 },
                        //         { 'currency': 'USDT', 'cost': 12.3456 },
                        //     ]
                        //
                        const reduced = {};
                        for (let i = 0; i < fees.length; i++) {
                            const fee = fees[i];
                            const feeCurrencyCode = this.safeString(
                                fee,
                                "currency"
                            );
                            if (feeCurrencyCode !== undefined) {
                                const rate = this.safeString(fee, "rate");
                                const cost = this.safeValue(fee, "cost");
                                if (Precise.stringEq(cost, "0")) {
                                    // omit zero cost fees
                                    continue;
                                }
                                if (!(feeCurrencyCode in reduced)) {
                                    reduced[feeCurrencyCode] = {};
                                }
                                const rateKey = rate === undefined ? "" : rate;
                                if (rateKey in reduced[feeCurrencyCode]) {
                                    reduced[feeCurrencyCode][rateKey]["cost"] =
                                        Precise.stringAdd(
                                            reduced[feeCurrencyCode][rateKey][
                                                "cost"
                                            ],
                                            cost
                                        );
                                } else {
                                    reduced[feeCurrencyCode][rateKey] = {
                                        currency: feeCurrencyCode,
                                        cost: cost,
                                    };
                                    if (rate !== undefined) {
                                        reduced[feeCurrencyCode][rateKey][
                                            "rate"
                                        ] = rate;
                                    }
                                }
                            }
                        }
                        let result = [];
                        const feeValues = Object.values(reduced);
                        for (let i = 0; i < feeValues.length; i++) {
                            const reducedFeeValues = Object.values(
                                feeValues[i]
                            );
                            result = this.arrayConcat(result, reducedFeeValues);
                        }
                        return result;
                    }

                    safeTicker(ticker, market = undefined) {
                        let open = this.safeValue(ticker, "open");
                        let close = this.safeValue(ticker, "close");
                        let last = this.safeValue(ticker, "last");
                        let change = this.safeValue(ticker, "change");
                        let percentage = this.safeValue(ticker, "percentage");
                        let average = this.safeValue(ticker, "average");
                        let vwap = this.safeValue(ticker, "vwap");
                        const baseVolume = this.safeValue(ticker, "baseVolume");
                        const quoteVolume = this.safeValue(
                            ticker,
                            "quoteVolume"
                        );
                        if (vwap === undefined) {
                            vwap = Precise.stringDiv(quoteVolume, baseVolume);
                        }
                        if (last !== undefined && close === undefined) {
                            close = last;
                        } else if (last === undefined && close !== undefined) {
                            last = close;
                        }
                        if (last !== undefined && open !== undefined) {
                            if (change === undefined) {
                                change = Precise.stringSub(last, open);
                            }
                            if (average === undefined) {
                                average = Precise.stringDiv(
                                    Precise.stringAdd(last, open),
                                    "2"
                                );
                            }
                        }
                        if (
                            percentage === undefined &&
                            change !== undefined &&
                            open !== undefined &&
                            Precise.stringGt(open, "0")
                        ) {
                            percentage = Precise.stringMul(
                                Precise.stringDiv(change, open),
                                "100"
                            );
                        }
                        if (
                            change === undefined &&
                            percentage !== undefined &&
                            open !== undefined
                        ) {
                            change = Precise.stringDiv(
                                Precise.stringMul(percentage, open),
                                "100"
                            );
                        }
                        if (
                            open === undefined &&
                            last !== undefined &&
                            change !== undefined
                        ) {
                            open = Precise.stringSub(last, change);
                        }
                        // timestamp and symbol operations don't belong in safeTicker
                        // they should be done in the derived classes
                        return this.extend(ticker, {
                            bid: this.safeNumber(ticker, "bid"),
                            bidVolume: this.safeNumber(ticker, "bidVolume"),
                            ask: this.safeNumber(ticker, "ask"),
                            askVolume: this.safeNumber(ticker, "askVolume"),
                            high: this.safeNumber(ticker, "high"),
                            low: this.safeNumber(ticker, "low"),
                            open: this.parseNumber(open),
                            close: this.parseNumber(close),
                            last: this.parseNumber(last),
                            change: this.parseNumber(change),
                            percentage: this.parseNumber(percentage),
                            average: this.parseNumber(average),
                            vwap: this.parseNumber(vwap),
                            baseVolume: this.parseNumber(baseVolume),
                            quoteVolume: this.parseNumber(quoteVolume),
                            previousClose: this.safeNumber(
                                ticker,
                                "previousClose"
                            ),
                        });
                    }

                    async fetchOHLCV(
                        symbol,
                        timeframe = "1m",
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        if (!this.has["fetchTrades"]) {
                            throw new NotSupported(
                                this.id + " fetchOHLCV() is not supported yet"
                            );
                        }
                        await this.loadMarkets();
                        const trades = await this.fetchTrades(
                            symbol,
                            since,
                            limit,
                            params
                        );
                        const ohlcvc = this.buildOHLCVC(
                            trades,
                            timeframe,
                            since,
                            limit
                        );
                        const result = [];
                        for (let i = 0; i < ohlcvc.length; i++) {
                            result.push([
                                this.safeInteger(ohlcvc[i], 0),
                                this.safeNumber(ohlcvc[i], 1),
                                this.safeNumber(ohlcvc[i], 2),
                                this.safeNumber(ohlcvc[i], 3),
                                this.safeNumber(ohlcvc[i], 4),
                                this.safeNumber(ohlcvc[i], 5),
                            ]);
                        }
                        return result;
                    }

                    convertTradingViewToOHLCV(
                        ohlcvs,
                        timestamp = "t",
                        open = "o",
                        high = "h",
                        low = "l",
                        close = "c",
                        volume = "v",
                        ms = false
                    ) {
                        const result = [];
                        const timestamps = this.safeValue(
                            ohlcvs,
                            timestamp,
                            []
                        );
                        const opens = this.safeValue(ohlcvs, open, []);
                        const highs = this.safeValue(ohlcvs, high, []);
                        const lows = this.safeValue(ohlcvs, low, []);
                        const closes = this.safeValue(ohlcvs, close, []);
                        const volumes = this.safeValue(ohlcvs, volume, []);
                        for (let i = 0; i < timestamps.length; i++) {
                            result.push([
                                ms
                                    ? this.safeInteger(timestamps, i)
                                    : this.safeTimestamp(timestamps, i),
                                this.safeValue(opens, i),
                                this.safeValue(highs, i),
                                this.safeValue(lows, i),
                                this.safeValue(closes, i),
                                this.safeValue(volumes, i),
                            ]);
                        }
                        return result;
                    }

                    convertOHLCVToTradingView(
                        ohlcvs,
                        timestamp = "t",
                        open = "o",
                        high = "h",
                        low = "l",
                        close = "c",
                        volume = "v",
                        ms = false
                    ) {
                        const result = {};
                        result[timestamp] = [];
                        result[open] = [];
                        result[high] = [];
                        result[low] = [];
                        result[close] = [];
                        result[volume] = [];
                        for (let i = 0; i < ohlcvs.length; i++) {
                            const ts = ms
                                ? ohlcvs[i][0]
                                : parseInt(ohlcvs[i][0] / 1000);
                            result[timestamp].push(ts);
                            result[open].push(ohlcvs[i][1]);
                            result[high].push(ohlcvs[i][2]);
                            result[low].push(ohlcvs[i][3]);
                            result[close].push(ohlcvs[i][4]);
                            result[volume].push(ohlcvs[i][5]);
                        }
                        return result;
                    }

                    marketIds(symbols) {
                        if (symbols === undefined) {
                            return symbols;
                        }
                        const result = [];
                        for (let i = 0; i < symbols.length; i++) {
                            result.push(this.marketId(symbols[i]));
                        }
                        return result;
                    }

                    marketSymbols(symbols) {
                        if (symbols === undefined) {
                            return symbols;
                        }
                        const result = [];
                        for (let i = 0; i < symbols.length; i++) {
                            result.push(this.symbol(symbols[i]));
                        }
                        return result;
                    }

                    marketCodes(codes) {
                        if (codes === undefined) {
                            return codes;
                        }
                        const result = [];
                        for (let i = 0; i < codes.length; i++) {
                            result.push(this.commonCurrencyCode(codes[i]));
                        }
                        return result;
                    }

                    parseBidsAsks(bidasks, priceKey = 0, amountKey = 1) {
                        bidasks = this.toArray(bidasks);
                        const result = [];
                        for (let i = 0; i < bidasks.length; i++) {
                            result.push(
                                this.parseBidAsk(
                                    bidasks[i],
                                    priceKey,
                                    amountKey
                                )
                            );
                        }
                        return result;
                    }

                    async fetchL2OrderBook(
                        symbol,
                        limit = undefined,
                        params = {}
                    ) {
                        const orderbook = await this.fetchOrderBook(
                            symbol,
                            limit,
                            params
                        );
                        return this.extend(orderbook, {
                            asks: this.sortBy(
                                this.aggregate(orderbook["asks"]),
                                0
                            ),
                            bids: this.sortBy(
                                this.aggregate(orderbook["bids"]),
                                0,
                                true
                            ),
                        });
                    }

                    filterBySymbol(objects, symbol = undefined) {
                        if (symbol === undefined) {
                            return objects;
                        }
                        const result = [];
                        for (let i = 0; i < objects.length; i++) {
                            const objectSymbol = this.safeString(
                                objects[i],
                                "symbol"
                            );
                            if (objectSymbol === symbol) {
                                result.push(objects[i]);
                            }
                        }
                        return result;
                    }

                    parseOHLCV(ohlcv, market = undefined) {
                        if (Array.isArray(ohlcv)) {
                            return [
                                this.safeInteger(ohlcv, 0), // timestamp
                                this.safeNumber(ohlcv, 1), // open
                                this.safeNumber(ohlcv, 2), // high
                                this.safeNumber(ohlcv, 3), // low
                                this.safeNumber(ohlcv, 4), // close
                                this.safeNumber(ohlcv, 5), // volume
                            ];
                        }
                        return ohlcv;
                    }

                    getNetwork(network, code) {
                        network = network.toUpperCase();
                        const aliases = {
                            ETHEREUM: "ETH",
                            ETHER: "ETH",
                            ERC20: "ETH",
                            ETH: "ETH",
                            TRC20: "TRX",
                            TRON: "TRX",
                            TRX: "TRX",
                            BEP20: "BSC",
                            BSC: "BSC",
                            HRC20: "HT",
                            HECO: "HT",
                            SPL: "SOL",
                            SOL: "SOL",
                            TERRA: "LUNA",
                            LUNA: "LUNA",
                            POLYGON: "MATIC",
                            MATIC: "MATIC",
                            EOS: "EOS",
                            WAVES: "WAVES",
                            AVALANCHE: "AVAX",
                            AVAX: "AVAX",
                            QTUM: "QTUM",
                            CHZ: "CHZ",
                            NEO: "NEO",
                            ONT: "ONT",
                            RON: "RON",
                        };
                        if (network === code) {
                            return network;
                        } else if (network in aliases) {
                            return aliases[network];
                        } else {
                            throw new NotSupported(
                                this.id +
                                    " network " +
                                    network +
                                    " is not yet supported"
                            );
                        }
                    }

                    networkCodeToId(networkCode, currencyCode = undefined) {
                        /**
                         * @ignore
                         * @method
                         * @name exchange#networkCodeToId
                         * @description tries to convert the provided networkCode (which is expected to be an unified network code) to a network id. In order to achieve this, derived class needs to have 'options->networks' defined.
                         * @param {string} networkCode unified network code
                         * @param {string|undefined} currencyCode unified currency code, but this argument is not required by default, unless there is an exchange (like huobi) that needs an override of the method to be able to pass currencyCode argument additionally
                         * @returns {[string|undefined]} exchange-specific network id
                         */
                        const networkIdsByCodes = this.safeValue(
                            this.options,
                            "networks",
                            {}
                        );
                        let networkId = this.safeString(
                            networkIdsByCodes,
                            networkCode
                        );
                        // for example, if 'ETH' is passed for networkCode, but 'ETH' key not defined in `options->networks` object
                        if (networkId === undefined) {
                            if (currencyCode === undefined) {
                                // if currencyCode was not provided, then we just set passed value to networkId
                                networkId = networkCode;
                            } else {
                                // if currencyCode was provided, then we try to find if that currencyCode has a replacement (i.e. ERC20 for ETH)
                                const defaultNetworkCodeReplacements =
                                    this.safeValue(
                                        this.options,
                                        "defaultNetworkCodeReplacements",
                                        {}
                                    );
                                if (
                                    currencyCode in
                                    defaultNetworkCodeReplacements
                                ) {
                                    // if there is a replacement for the passed networkCode, then we use it to find network-id in `options->networks` object
                                    const replacementObject =
                                        defaultNetworkCodeReplacements[
                                            currencyCode
                                        ]; // i.e. { 'ERC20': 'ETH' }
                                    const keys = Object.keys(replacementObject);
                                    for (let i = 0; i < keys.length; i++) {
                                        const key = keys[i];
                                        const value = replacementObject[key];
                                        // if value matches to provided unified networkCode, then we use it's key to find network-id in `options->networks` object
                                        if (value === networkCode) {
                                            networkId = this.safeString(
                                                networkIdsByCodes,
                                                key
                                            );
                                            break;
                                        }
                                    }
                                }
                                // if it wasn't found, we just set the provided value to network-id
                                if (networkId === undefined) {
                                    networkId = networkCode;
                                }
                            }
                        }
                        return networkId;
                    }

                    networkIdToCode(networkId, currencyCode = undefined) {
                        /**
                         * @ignore
                         * @method
                         * @name exchange#networkIdToCode
                         * @description tries to convert the provided exchange-specific networkId to an unified network Code. In order to achieve this, derived class needs to have 'options->networksById' defined.
                         * @param {string} networkId unified network code
                         * @param {string|undefined} currencyCode unified currency code, but this argument is not required by default, unless there is an exchange (like huobi) that needs an override of the method to be able to pass currencyCode argument additionally
                         * @returns {[string|undefined]} unified network code
                         */
                        const networkCodesByIds = this.safeValue(
                            this.options,
                            "networksById",
                            {}
                        );
                        let networkCode = this.safeString(
                            networkCodesByIds,
                            networkId,
                            networkId
                        );
                        // replace mainnet network-codes (i.e. ERC20->ETH)
                        if (currencyCode !== undefined) {
                            const defaultNetworkCodeReplacements =
                                this.safeValue(
                                    this.options,
                                    "defaultNetworkCodeReplacements",
                                    {}
                                );
                            if (
                                currencyCode in defaultNetworkCodeReplacements
                            ) {
                                const replacementObject = this.safeValue(
                                    defaultNetworkCodeReplacements,
                                    currencyCode,
                                    {}
                                );
                                networkCode = this.safeString(
                                    replacementObject,
                                    networkCode,
                                    networkCode
                                );
                            }
                        }
                        return networkCode;
                    }

                    networkCodesToIds(networkCodes = undefined) {
                        /**
                         * @ignore
                         * @method
                         * @name exchange#networkCodesToIds
                         * @description tries to convert the provided networkCode (which is expected to be an unified network code) to a network id. In order to achieve this, derived class needs to have 'options->networks' defined.
                         * @param {[string]|undefined} networkCodes unified network codes
                         * @returns {[string|undefined]} exchange-specific network ids
                         */
                        if (networkCodes === undefined) {
                            return undefined;
                        }
                        const ids = [];
                        for (let i = 0; i < networkCodes.length; i++) {
                            const networkCode = networkCodes[i];
                            ids.push(this.networkCodeToId(networkCode));
                        }
                        return ids;
                    }

                    handleNetworkCodeAndParams(params) {
                        const networkCodeInParams = this.safeString2(
                            params,
                            "networkCode",
                            "network"
                        );
                        if (networkCodeInParams !== undefined) {
                            params = this.omit(params, [
                                "networkCode",
                                "network",
                            ]);
                        }
                        // if it was not defined by user, we should not set it from 'defaultNetworks', because handleNetworkCodeAndParams is for only request-side and thus we do not fill it with anything. We can only use 'defaultNetworks' after parsing response-side
                        return [networkCodeInParams, params];
                    }

                    defaultNetworkCode(currencyCode) {
                        let defaultNetworkCode = undefined;
                        const defaultNetworks = this.safeValue(
                            this.options,
                            "defaultNetworks",
                            {}
                        );
                        if (currencyCode in defaultNetworks) {
                            // if currency had set its network in "defaultNetworks", use it
                            defaultNetworkCode = defaultNetworks[currencyCode];
                        } else {
                            // otherwise, try to use the global-scope 'defaultNetwork' value (even if that network is not supported by currency, it doesn't make any problem, this will be just used "at first" if currency supports this network at all)
                            const defaultNetwork = this.safeValue(
                                this.options,
                                "defaultNetwork"
                            );
                            if (defaultNetwork !== undefined) {
                                defaultNetworkCode = defaultNetwork;
                            }
                        }
                        return defaultNetworkCode;
                    }

                    selectNetworkCodeFromUnifiedNetworks(
                        currencyCode,
                        networkCode,
                        indexedNetworkEntries
                    ) {
                        return this.selectNetworkKeyFromNetworks(
                            currencyCode,
                            networkCode,
                            indexedNetworkEntries,
                            true
                        );
                    }

                    selectNetworkIdFromRawNetworks(
                        currencyCode,
                        networkCode,
                        indexedNetworkEntries
                    ) {
                        return this.selectNetworkKeyFromNetworks(
                            currencyCode,
                            networkCode,
                            indexedNetworkEntries,
                            false
                        );
                    }

                    selectNetworkKeyFromNetworks(
                        currencyCode,
                        networkCode,
                        indexedNetworkEntries,
                        isIndexedByUnifiedNetworkCode = false
                    ) {
                        // this method is used against raw & unparse network entries, which are just indexed by network id
                        let chosenNetworkId = undefined;
                        const availableNetworkIds = Object.keys(
                            indexedNetworkEntries
                        );
                        const responseNetworksLength =
                            availableNetworkIds.length;
                        if (networkCode !== undefined) {
                            if (responseNetworksLength === 0) {
                                throw new NotSupported(
                                    this.id +
                                        " - " +
                                        networkCode +
                                        " network did not return any result for " +
                                        currencyCode
                                );
                            } else {
                                // if networkCode was provided by user, we should check it after response, as the referenced exchange doesn't support network-code during request
                                const networkId = isIndexedByUnifiedNetworkCode
                                    ? networkCode
                                    : this.networkCodeToId(
                                          networkCode,
                                          currencyCode
                                      );
                                if (networkId in indexedNetworkEntries) {
                                    chosenNetworkId = networkId;
                                } else {
                                    throw new NotSupported(
                                        this.id +
                                            " - " +
                                            networkId +
                                            " network was not found for " +
                                            currencyCode +
                                            ", use one of " +
                                            availableNetworkIds.join(", ")
                                    );
                                }
                            }
                        } else {
                            if (responseNetworksLength === 0) {
                                throw new NotSupported(
                                    this.id +
                                        " - no networks were returned for " +
                                        currencyCode
                                );
                            } else {
                                // if networkCode was not provided by user, then we try to use the default network (if it was defined in "defaultNetworks"), otherwise, we just return the first network entry
                                const defaultNetworkCode =
                                    this.defaultNetworkCode(currencyCode);
                                const defaultNetworkId =
                                    isIndexedByUnifiedNetworkCode
                                        ? defaultNetworkCode
                                        : this.networkCodeToId(
                                              defaultNetworkCode,
                                              currencyCode
                                          );
                                chosenNetworkId =
                                    defaultNetworkId in indexedNetworkEntries
                                        ? defaultNetworkId
                                        : availableNetworkIds[0];
                            }
                        }
                        return chosenNetworkId;
                    }

                    safeNumber2(dictionary, key1, key2, d = undefined) {
                        const value = this.safeString2(dictionary, key1, key2);
                        return this.parseNumber(value, d);
                    }

                    parseOrderBook(
                        orderbook,
                        symbol,
                        timestamp = undefined,
                        bidsKey = "bids",
                        asksKey = "asks",
                        priceKey = 0,
                        amountKey = 1
                    ) {
                        const bids = this.parseBidsAsks(
                            this.safeValue(orderbook, bidsKey, []),
                            priceKey,
                            amountKey
                        );
                        const asks = this.parseBidsAsks(
                            this.safeValue(orderbook, asksKey, []),
                            priceKey,
                            amountKey
                        );
                        return {
                            symbol: symbol,
                            bids: this.sortBy(bids, 0, true),
                            asks: this.sortBy(asks, 0),
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            nonce: undefined,
                        };
                    }

                    parseOHLCVs(
                        ohlcvs,
                        market = undefined,
                        timeframe = "1m",
                        since = undefined,
                        limit = undefined
                    ) {
                        const results = [];
                        for (let i = 0; i < ohlcvs.length; i++) {
                            results.push(this.parseOHLCV(ohlcvs[i], market));
                        }
                        const sorted = this.sortBy(results, 0);
                        const tail = since === undefined;
                        return this.filterBySinceLimit(
                            sorted,
                            since,
                            limit,
                            0,
                            tail
                        );
                    }

                    parseLeverageTiers(
                        response,
                        symbols = undefined,
                        marketIdKey = undefined
                    ) {
                        // marketIdKey should only be undefined when response is a dictionary
                        symbols = this.marketSymbols(symbols);
                        const tiers = {};
                        for (let i = 0; i < response.length; i++) {
                            const item = response[i];
                            const id = this.safeString(item, marketIdKey);
                            const market = this.safeMarket(
                                id,
                                undefined,
                                undefined,
                                this.safeString(this.options, "defaultType")
                            );
                            const symbol = market["symbol"];
                            const contract = this.safeValue(
                                market,
                                "contract",
                                false
                            );
                            if (
                                contract &&
                                (symbols === undefined ||
                                    this.inArray(symbol, symbols))
                            ) {
                                tiers[symbol] = this.parseMarketLeverageTiers(
                                    item,
                                    market
                                );
                            }
                        }
                        return tiers;
                    }

                    async loadTradingLimits(
                        symbols = undefined,
                        reload = false,
                        params = {}
                    ) {
                        if (this.has["fetchTradingLimits"]) {
                            if (reload || !("limitsLoaded" in this.options)) {
                                const response = await this.fetchTradingLimits(
                                    symbols
                                );
                                for (let i = 0; i < symbols.length; i++) {
                                    const symbol = symbols[i];
                                    this.markets[symbol] = this.deepExtend(
                                        this.markets[symbol],
                                        response[symbol]
                                    );
                                }
                                this.options["limitsLoaded"] =
                                    this.milliseconds();
                            }
                        }
                        return this.markets;
                    }

                    parsePositions(
                        positions,
                        symbols = undefined,
                        params = {}
                    ) {
                        symbols = this.marketSymbols(symbols);
                        positions = this.toArray(positions);
                        const result = [];
                        for (let i = 0; i < positions.length; i++) {
                            const position = this.extend(
                                this.parsePosition(positions[i], undefined),
                                params
                            );
                            result.push(position);
                        }
                        return this.filterByArray(
                            result,
                            "symbol",
                            symbols,
                            false
                        );
                    }

                    parseAccounts(accounts, params = {}) {
                        accounts = this.toArray(accounts);
                        const result = [];
                        for (let i = 0; i < accounts.length; i++) {
                            const account = this.extend(
                                this.parseAccount(accounts[i]),
                                params
                            );
                            result.push(account);
                        }
                        return result;
                    }

                    parseTrades(
                        trades,
                        market = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        trades = this.toArray(trades);
                        let result = [];
                        for (let i = 0; i < trades.length; i++) {
                            const trade = this.extend(
                                this.parseTrade(trades[i], market),
                                params
                            );
                            result.push(trade);
                        }
                        result = this.sortBy2(result, "timestamp", "id");
                        const symbol =
                            market !== undefined ? market["symbol"] : undefined;
                        const tail = since === undefined;
                        return this.filterBySymbolSinceLimit(
                            result,
                            symbol,
                            since,
                            limit,
                            tail
                        );
                    }

                    parseTransactions(
                        transactions,
                        currency = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        transactions = this.toArray(transactions);
                        let result = [];
                        for (let i = 0; i < transactions.length; i++) {
                            const transaction = this.extend(
                                this.parseTransaction(
                                    transactions[i],
                                    currency
                                ),
                                params
                            );
                            result.push(transaction);
                        }
                        result = this.sortBy(result, "timestamp");
                        const code =
                            currency !== undefined
                                ? currency["code"]
                                : undefined;
                        const tail = since === undefined;
                        return this.filterByCurrencySinceLimit(
                            result,
                            code,
                            since,
                            limit,
                            tail
                        );
                    }

                    parseTransfers(
                        transfers,
                        currency = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        transfers = this.toArray(transfers);
                        let result = [];
                        for (let i = 0; i < transfers.length; i++) {
                            const transfer = this.extend(
                                this.parseTransfer(transfers[i], currency),
                                params
                            );
                            result.push(transfer);
                        }
                        result = this.sortBy(result, "timestamp");
                        const code =
                            currency !== undefined
                                ? currency["code"]
                                : undefined;
                        const tail = since === undefined;
                        return this.filterByCurrencySinceLimit(
                            result,
                            code,
                            since,
                            limit,
                            tail
                        );
                    }

                    parseLedger(
                        data,
                        currency = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        let result = [];
                        const arrayData = this.toArray(data);
                        for (let i = 0; i < arrayData.length; i++) {
                            const itemOrItems = this.parseLedgerEntry(
                                arrayData[i],
                                currency
                            );
                            if (Array.isArray(itemOrItems)) {
                                for (let j = 0; j < itemOrItems.length; j++) {
                                    result.push(
                                        this.extend(itemOrItems[j], params)
                                    );
                                }
                            } else {
                                result.push(this.extend(itemOrItems, params));
                            }
                        }
                        result = this.sortBy(result, "timestamp");
                        const code =
                            currency !== undefined
                                ? currency["code"]
                                : undefined;
                        const tail = since === undefined;
                        return this.filterByCurrencySinceLimit(
                            result,
                            code,
                            since,
                            limit,
                            tail
                        );
                    }

                    nonce() {
                        return this.seconds();
                    }

                    setHeaders(headers) {
                        return headers;
                    }

                    marketId(symbol) {
                        const market = this.market(symbol);
                        if (market !== undefined) {
                            return market["id"];
                        }
                        return symbol;
                    }

                    symbol(symbol) {
                        const market = this.market(symbol);
                        return this.safeString(market, "symbol", symbol);
                    }

                    resolvePath(path, params) {
                        return [
                            this.implodeParams(path, params),
                            this.omit(params, this.extractParams(path)),
                        ];
                    }

                    filterByArray(
                        objects,
                        key,
                        values = undefined,
                        indexed = true
                    ) {
                        objects = this.toArray(objects);
                        // return all of them if no values were passed
                        if (values === undefined || !values) {
                            return indexed
                                ? this.indexBy(objects, key)
                                : objects;
                        }
                        const results = [];
                        for (let i = 0; i < objects.length; i++) {
                            if (this.inArray(objects[i][key], values)) {
                                results.push(objects[i]);
                            }
                        }
                        return indexed ? this.indexBy(results, key) : results;
                    }

                    async fetch2(
                        path,
                        api = "public",
                        method = "GET",
                        params = {},
                        headers = undefined,
                        body = undefined,
                        config = {},
                        context = {}
                    ) {
                        if (this.enableRateLimit) {
                            const cost = this.calculateRateLimiterCost(
                                api,
                                method,
                                path,
                                params,
                                config,
                                context
                            );
                            await this.throttle(cost);
                        }
                        this.lastRestRequestTimestamp = this.milliseconds();
                        const request = this.sign(
                            path,
                            api,
                            method,
                            params,
                            headers,
                            body
                        );
                        return await this.fetch(
                            request["url"],
                            request["method"],
                            request["headers"],
                            request["body"]
                        );
                    }

                    async request(
                        path,
                        api = "public",
                        method = "GET",
                        params = {},
                        headers = undefined,
                        body = undefined,
                        config = {},
                        context = {}
                    ) {
                        return await this.fetch2(
                            path,
                            api,
                            method,
                            params,
                            headers,
                            body,
                            config,
                            context
                        );
                    }

                    async loadAccounts(reload = false, params = {}) {
                        if (reload) {
                            this.accounts = await this.fetchAccounts(params);
                        } else {
                            if (this.accounts) {
                                return this.accounts;
                            } else {
                                this.accounts = await this.fetchAccounts(
                                    params
                                );
                            }
                        }
                        this.accountsById = this.indexBy(this.accounts, "id");
                        return this.accounts;
                    }

                    async fetchTrades(
                        symbol,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        throw new NotSupported(
                            this.id + " fetchTrades() is not supported yet"
                        );
                    }

                    async fetchOHLCVC(
                        symbol,
                        timeframe = "1m",
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        if (!this.has["fetchTrades"]) {
                            throw new NotSupported(
                                this.id + " fetchOHLCV() is not supported yet"
                            );
                        }
                        await this.loadMarkets();
                        const trades = await this.fetchTrades(
                            symbol,
                            since,
                            limit,
                            params
                        );
                        return this.buildOHLCVC(
                            trades,
                            timeframe,
                            since,
                            limit
                        );
                    }

                    parseTradingViewOHLCV(
                        ohlcvs,
                        market = undefined,
                        timeframe = "1m",
                        since = undefined,
                        limit = undefined
                    ) {
                        const result = this.convertTradingViewToOHLCV(ohlcvs);
                        return this.parseOHLCVs(
                            result,
                            market,
                            timeframe,
                            since,
                            limit
                        );
                    }

                    async editLimitBuyOrder(
                        id,
                        symbol,
                        amount,
                        price = undefined,
                        params = {}
                    ) {
                        return await this.editLimitOrder(
                            id,
                            symbol,
                            "buy",
                            amount,
                            price,
                            params
                        );
                    }

                    async editLimitSellOrder(
                        id,
                        symbol,
                        amount,
                        price = undefined,
                        params = {}
                    ) {
                        return await this.editLimitOrder(
                            id,
                            symbol,
                            "sell",
                            amount,
                            price,
                            params
                        );
                    }

                    async editLimitOrder(
                        id,
                        symbol,
                        side,
                        amount,
                        price = undefined,
                        params = {}
                    ) {
                        return await this.editOrder(
                            id,
                            symbol,
                            "limit",
                            side,
                            amount,
                            price,
                            params
                        );
                    }

                    async editOrder(
                        id,
                        symbol,
                        type,
                        side,
                        amount,
                        price = undefined,
                        params = {}
                    ) {
                        await this.cancelOrder(id, symbol);
                        return await this.createOrder(
                            symbol,
                            type,
                            side,
                            amount,
                            price,
                            params
                        );
                    }

                    async fetchPermissions(params = {}) {
                        throw new NotSupported(
                            this.id + " fetchPermissions() is not supported yet"
                        );
                    }

                    async fetchPosition(symbol, params = {}) {
                        throw new NotSupported(
                            this.id + " fetchPosition() is not supported yet"
                        );
                    }

                    async fetchPositions(symbols = undefined, params = {}) {
                        throw new NotSupported(
                            this.id + " fetchPositions() is not supported yet"
                        );
                    }

                    async fetchPositionsRisk(symbols = undefined, params = {}) {
                        throw new NotSupported(
                            this.id +
                                " fetchPositionsRisk() is not supported yet"
                        );
                    }

                    async fetchBidsAsks(symbols = undefined, params = {}) {
                        throw new NotSupported(
                            this.id + " fetchBidsAsks() is not supported yet"
                        );
                    }

                    parseBidAsk(bidask, priceKey = 0, amountKey = 1) {
                        const price = this.safeNumber(bidask, priceKey);
                        const amount = this.safeNumber(bidask, amountKey);
                        return [price, amount];
                    }

                    safeCurrency(currencyId, currency = undefined) {
                        if (
                            currencyId === undefined &&
                            currency !== undefined
                        ) {
                            return currency;
                        }
                        if (
                            this.currencies_by_id !== undefined &&
                            currencyId in this.currencies_by_id &&
                            this.currencies_by_id[currencyId] !== undefined
                        ) {
                            return this.currencies_by_id[currencyId];
                        }
                        let code = currencyId;
                        if (currencyId !== undefined) {
                            code = this.commonCurrencyCode(
                                currencyId.toUpperCase()
                            );
                        }
                        return {
                            id: currencyId,
                            code: code,
                        };
                    }

                    safeMarket(
                        marketId = undefined,
                        market = undefined,
                        delimiter = undefined,
                        marketType = undefined
                    ) {
                        const result = {
                            id: marketId,
                            symbol: marketId,
                            base: undefined,
                            quote: undefined,
                            baseId: undefined,
                            quoteId: undefined,
                            active: undefined,
                            type: undefined,
                            linear: undefined,
                            inverse: undefined,
                            spot: false,
                            swap: false,
                            future: false,
                            option: false,
                            margin: false,
                            contract: false,
                            contractSize: undefined,
                            expiry: undefined,
                            expiryDatetime: undefined,
                            optionType: undefined,
                            strike: undefined,
                            settle: undefined,
                            settleId: undefined,
                            precision: {
                                amount: undefined,
                                price: undefined,
                            },
                            limits: {
                                amount: {
                                    min: undefined,
                                    max: undefined,
                                },
                                price: {
                                    min: undefined,
                                    max: undefined,
                                },
                                cost: {
                                    min: undefined,
                                    max: undefined,
                                },
                            },
                            info: undefined,
                        };
                        if (marketId !== undefined) {
                            if (
                                this.markets_by_id !== undefined &&
                                marketId in this.markets_by_id
                            ) {
                                const markets = this.markets_by_id[marketId];
                                const length = markets.length;
                                if (length === 1) {
                                    return markets[0];
                                } else {
                                    if (marketType === undefined) {
                                        throw new ArgumentsRequired(
                                            this.id +
                                                " safeMarket() requires a fourth argument for " +
                                                marketId +
                                                " to disambiguate between different markets with the same market id"
                                        );
                                    }
                                    for (let i = 0; i < markets.length; i++) {
                                        const market = markets[i];
                                        if (market[marketType]) {
                                            return market;
                                        }
                                    }
                                }
                            } else if (delimiter !== undefined) {
                                const parts = marketId.split(delimiter);
                                const partsLength = parts.length;
                                if (partsLength === 2) {
                                    result["baseId"] = this.safeString(
                                        parts,
                                        0
                                    );
                                    result["quoteId"] = this.safeString(
                                        parts,
                                        1
                                    );
                                    result["base"] = this.safeCurrencyCode(
                                        result["baseId"]
                                    );
                                    result["quote"] = this.safeCurrencyCode(
                                        result["quoteId"]
                                    );
                                    result["symbol"] =
                                        result["base"] + "/" + result["quote"];
                                    return result;
                                } else {
                                    return result;
                                }
                            }
                        }
                        if (market !== undefined) {
                            return market;
                        }
                        return result;
                    }

                    checkRequiredCredentials(error = true) {
                        const keys = Object.keys(this.requiredCredentials);
                        for (let i = 0; i < keys.length; i++) {
                            const key = keys[i];
                            if (this.requiredCredentials[key] && !this[key]) {
                                if (error) {
                                    throw new AuthenticationError(
                                        this.id +
                                            ' requires "' +
                                            key +
                                            '" credential'
                                    );
                                } else {
                                    return false;
                                }
                            }
                        }
                        return true;
                    }

                    oath() {
                        if (this.twofa !== undefined) {
                            return this.totp(this.twofa);
                        } else {
                            throw new ExchangeError(
                                this.id +
                                    " exchange.twofa has not been set for 2FA Two-Factor Authentication"
                            );
                        }
                    }

                    async fetchBalance(params = {}) {
                        throw new NotSupported(
                            this.id + " fetchBalance() is not supported yet"
                        );
                    }

                    async fetchPartialBalance(part, params = {}) {
                        const balance = await this.fetchBalance(params);
                        return balance[part];
                    }

                    async fetchFreeBalance(params = {}) {
                        return await this.fetchPartialBalance("free", params);
                    }

                    async fetchUsedBalance(params = {}) {
                        return await this.fetchPartialBalance("used", params);
                    }

                    async fetchTotalBalance(params = {}) {
                        return await this.fetchPartialBalance("total", params);
                    }

                    async fetchStatus(params = {}) {
                        if (this.has["fetchTime"]) {
                            const time = await this.fetchTime(params);
                            this.status = this.extend(this.status, {
                                updated: time,
                            });
                        }
                        return this.status;
                    }

                    async fetchFundingFee(code, params = {}) {
                        const warnOnFetchFundingFee = this.safeValue(
                            this.options,
                            "warnOnFetchFundingFee",
                            true
                        );
                        if (warnOnFetchFundingFee) {
                            throw new NotSupported(
                                this.id +
                                    ' fetchFundingFee() method is deprecated, it will be removed in July 2022, please, use fetchTransactionFee() or set exchange.options["warnOnFetchFundingFee"] = false to suppress this warning'
                            );
                        }
                        return await this.fetchTransactionFee(code, params);
                    }

                    async fetchFundingFees(codes = undefined, params = {}) {
                        const warnOnFetchFundingFees = this.safeValue(
                            this.options,
                            "warnOnFetchFundingFees",
                            true
                        );
                        if (warnOnFetchFundingFees) {
                            throw new NotSupported(
                                this.id +
                                    ' fetchFundingFees() method is deprecated, it will be removed in July 2022. Please, use fetchTransactionFees() or set exchange.options["warnOnFetchFundingFees"] = false to suppress this warning'
                            );
                        }
                        return await this.fetchTransactionFees(codes, params);
                    }

                    async fetchTransactionFee(code, params = {}) {
                        if (!this.has["fetchTransactionFees"]) {
                            throw new NotSupported(
                                this.id +
                                    " fetchTransactionFee() is not supported yet"
                            );
                        }
                        return await this.fetchTransactionFees([code], params);
                    }

                    async fetchTransactionFees(codes = undefined, params = {}) {
                        throw new NotSupported(
                            this.id +
                                " fetchTransactionFees() is not supported yet"
                        );
                    }

                    async fetchDepositWithdrawFee(code, params = {}) {
                        if (!this.has["fetchDepositWithdrawFees"]) {
                            throw new NotSupported(
                                this.id +
                                    " fetchDepositWithdrawFee() is not supported yet"
                            );
                        }
                        const fees = await this.fetchDepositWithdrawFees(
                            [code],
                            params
                        );
                        return this.safeValue(fees, code);
                    }

                    getSupportedMapping(key, mapping = {}) {
                        if (key in mapping) {
                            return mapping[key];
                        } else {
                            throw new NotSupported(
                                this.id +
                                    " " +
                                    key +
                                    " does not have a value in mapping"
                            );
                        }
                    }

                    async fetchBorrowRate(code, params = {}) {
                        await this.loadMarkets();
                        if (!this.has["fetchBorrowRates"]) {
                            throw new NotSupported(
                                this.id +
                                    " fetchBorrowRate() is not supported yet"
                            );
                        }
                        const borrowRates = await this.fetchBorrowRates(params);
                        const rate = this.safeValue(borrowRates, code);
                        if (rate === undefined) {
                            throw new ExchangeError(
                                this.id +
                                    " fetchBorrowRate() could not find the borrow rate for currency code " +
                                    code
                            );
                        }
                        return rate;
                    }

                    handleOptionAndParams(
                        params,
                        methodName,
                        optionName,
                        defaultValue = undefined
                    ) {
                        // This method can be used to obtain method specific properties, i.e: this.handleOptionAndParams (params, 'fetchPosition', 'marginMode', 'isolated')
                        const defaultOptionName =
                            "default" + this.capitalize(optionName); // we also need to check the 'defaultXyzWhatever'
                        // check if params contain the key
                        let value = this.safeValue2(
                            params,
                            optionName,
                            defaultOptionName
                        );
                        if (value !== undefined) {
                            params = this.omit(params, [
                                optionName,
                                defaultOptionName,
                            ]);
                        } else {
                            // check if exchange has properties for this method
                            const exchangeWideMethodOptions = this.safeValue(
                                this.options,
                                methodName
                            );
                            if (exchangeWideMethodOptions !== undefined) {
                                // check if the option is defined in this method's props
                                value = this.safeValue2(
                                    exchangeWideMethodOptions,
                                    optionName,
                                    defaultOptionName
                                );
                            }
                            if (value === undefined) {
                                // if it's still undefined, check if global exchange-wide option exists
                                value = this.safeValue2(
                                    this.options,
                                    optionName,
                                    defaultOptionName
                                );
                            }
                            // if it's still undefined, use the default value
                            value = value !== undefined ? value : defaultValue;
                        }
                        return [value, params];
                    }

                    handleOption(
                        methodName,
                        optionName,
                        defaultValue = undefined
                    ) {
                        // eslint-disable-next-line no-unused-vars
                        const [result, empty] = this.handleOptionAndParams(
                            {},
                            methodName,
                            optionName,
                            defaultValue
                        );
                        return result;
                    }

                    handleMarketTypeAndParams(
                        methodName,
                        market = undefined,
                        params = {}
                    ) {
                        const defaultType = this.safeString2(
                            this.options,
                            "defaultType",
                            "type",
                            "spot"
                        );
                        const methodOptions = this.safeValue(
                            this.options,
                            methodName
                        );
                        let methodType = defaultType;
                        if (methodOptions !== undefined) {
                            if (typeof methodOptions === "string") {
                                methodType = methodOptions;
                            } else {
                                methodType = this.safeString2(
                                    methodOptions,
                                    "defaultType",
                                    "type",
                                    methodType
                                );
                            }
                        }
                        const marketType =
                            market === undefined ? methodType : market["type"];
                        const type = this.safeString2(
                            params,
                            "defaultType",
                            "type",
                            marketType
                        );
                        params = this.omit(params, ["defaultType", "type"]);
                        return [type, params];
                    }

                    handleSubTypeAndParams(
                        methodName,
                        market = undefined,
                        params = {},
                        defaultValue = undefined
                    ) {
                        let subType = undefined;
                        // if set in params, it takes precedence
                        const subTypeInParams = this.safeString2(
                            params,
                            "subType",
                            "defaultSubType"
                        );
                        // avoid omitting if it's not present
                        if (subTypeInParams !== undefined) {
                            subType = subTypeInParams;
                            params = this.omit(params, [
                                "subType",
                                "defaultSubType",
                            ]);
                        } else {
                            // at first, check from market object
                            if (market !== undefined) {
                                if (market["linear"]) {
                                    subType = "linear";
                                } else if (market["inverse"]) {
                                    subType = "inverse";
                                }
                            }
                            // if it was not defined in market object
                            if (subType === undefined) {
                                const values = this.handleOptionAndParams(
                                    undefined,
                                    methodName,
                                    "subType",
                                    defaultValue
                                ); // no need to re-test params here
                                subType = values[0];
                            }
                        }
                        return [subType, params];
                    }

                    handleMarginModeAndParams(
                        methodName,
                        params = {},
                        defaultValue = undefined
                    ) {
                        /**
                         * @ignore
                         * @method
                         * @param {object} params extra parameters specific to the exchange api endpoint
                         * @returns {[string|undefined, object]} the marginMode in lowercase as specified by params["marginMode"], params["defaultMarginMode"] this.options["marginMode"] or this.options["defaultMarginMode"]
                         */
                        return this.handleOptionAndParams(
                            params,
                            methodName,
                            "marginMode",
                            defaultValue
                        );
                    }

                    throwExactlyMatchedException(exact, string, message) {
                        if (string in exact) {
                            throw new exact[string](message);
                        }
                    }

                    throwBroadlyMatchedException(broad, string, message) {
                        const broadKey = this.findBroadlyMatchedKey(
                            broad,
                            string
                        );
                        if (broadKey !== undefined) {
                            throw new broad[broadKey](message);
                        }
                    }

                    findBroadlyMatchedKey(broad, string) {
                        // a helper for matching error strings exactly vs broadly
                        const keys = Object.keys(broad);
                        for (let i = 0; i < keys.length; i++) {
                            const key = keys[i];
                            if (string !== undefined) {
                                // #issues/12698
                                if (string.indexOf(key) >= 0) {
                                    return key;
                                }
                            }
                        }
                        return undefined;
                    }

                    handleErrors(
                        statusCode,
                        statusText,
                        url,
                        method,
                        responseHeaders,
                        responseBody,
                        response,
                        requestHeaders,
                        requestBody
                    ) {
                        // it is a stub method that must be overrided in the derived exchange classes
                        // throw new NotSupported (this.id + ' handleErrors() not implemented yet');
                    }

                    calculateRateLimiterCost(
                        api,
                        method,
                        path,
                        params,
                        config = {},
                        context = {}
                    ) {
                        return this.safeValue(config, "cost", 1);
                    }

                    async fetchTicker(symbol, params = {}) {
                        if (this.has["fetchTickers"]) {
                            const tickers = await this.fetchTickers(
                                [symbol],
                                params
                            );
                            const ticker = this.safeValue(tickers, symbol);
                            if (ticker === undefined) {
                                throw new NullResponse(
                                    this.id +
                                        " fetchTickers() could not find a ticker for " +
                                        symbol
                                );
                            } else {
                                return ticker;
                            }
                        } else {
                            throw new NotSupported(
                                this.id + " fetchTicker() is not supported yet"
                            );
                        }
                    }

                    async fetchTickers(symbols = undefined, params = {}) {
                        throw new NotSupported(
                            this.id + " fetchTickers() is not supported yet"
                        );
                    }

                    async fetchOrder(id, symbol = undefined, params = {}) {
                        throw new NotSupported(
                            this.id + " fetchOrder() is not supported yet"
                        );
                    }

                    async fetchOrderStatus(
                        id,
                        symbol = undefined,
                        params = {}
                    ) {
                        const order = await this.fetchOrder(id, symbol, params);
                        return order["status"];
                    }

                    async fetchUnifiedOrder(order, params = {}) {
                        return await this.fetchOrder(
                            this.safeValue(order, "id"),
                            this.safeValue(order, "symbol"),
                            params
                        );
                    }

                    async createOrder(
                        symbol,
                        type,
                        side,
                        amount,
                        price = undefined,
                        params = {}
                    ) {
                        throw new NotSupported(
                            this.id + " createOrder() is not supported yet"
                        );
                    }

                    async cancelOrder(id, symbol = undefined, params = {}) {
                        throw new NotSupported(
                            this.id + " cancelOrder() is not supported yet"
                        );
                    }

                    async cancelUnifiedOrder(order, params = {}) {
                        return this.cancelOrder(
                            this.safeValue(order, "id"),
                            this.safeValue(order, "symbol"),
                            params
                        );
                    }

                    async fetchOrders(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        throw new NotSupported(
                            this.id + " fetchOrders() is not supported yet"
                        );
                    }

                    async fetchOpenOrders(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        throw new NotSupported(
                            this.id + " fetchOpenOrders() is not supported yet"
                        );
                    }

                    async fetchClosedOrders(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        throw new NotSupported(
                            this.id +
                                " fetchClosedOrders() is not supported yet"
                        );
                    }

                    async fetchMyTrades(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        throw new NotSupported(
                            this.id + " fetchMyTrades() is not supported yet"
                        );
                    }

                    async fetchTransactions(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        throw new NotSupported(
                            this.id +
                                " fetchTransactions() is not supported yet"
                        );
                    }

                    async fetchDeposits(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        throw new NotSupported(
                            this.id + " fetchDeposits() is not supported yet"
                        );
                    }

                    async fetchWithdrawals(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        throw new NotSupported(
                            this.id + " fetchWithdrawals() is not supported yet"
                        );
                    }

                    async fetchDepositAddress(code, params = {}) {
                        if (this.has["fetchDepositAddresses"]) {
                            const depositAddresses =
                                await this.fetchDepositAddresses(
                                    [code],
                                    params
                                );
                            const depositAddress = this.safeValue(
                                depositAddresses,
                                code
                            );
                            if (depositAddress === undefined) {
                                throw new InvalidAddress(
                                    this.id +
                                        " fetchDepositAddress() could not find a deposit address for " +
                                        code +
                                        ", make sure you have created a corresponding deposit address in your wallet on the exchange website"
                                );
                            } else {
                                return depositAddress;
                            }
                        } else {
                            throw new NotSupported(
                                this.id +
                                    " fetchDepositAddress() is not supported yet"
                            );
                        }
                    }

                    account() {
                        return {
                            free: undefined,
                            used: undefined,
                            total: undefined,
                        };
                    }

                    commonCurrencyCode(currency) {
                        if (!this.substituteCommonCurrencyCodes) {
                            return currency;
                        }
                        return this.safeString(
                            this.commonCurrencies,
                            currency,
                            currency
                        );
                    }

                    currency(code) {
                        if (this.currencies === undefined) {
                            throw new ExchangeError(
                                this.id + " currencies not loaded"
                            );
                        }
                        if (typeof code === "string") {
                            if (code in this.currencies) {
                                return this.currencies[code];
                            } else if (code in this.currencies_by_id) {
                                return this.currencies_by_id[code];
                            }
                        }
                        throw new ExchangeError(
                            this.id + " does not have currency code " + code
                        );
                    }

                    market(symbol) {
                        if (this.markets === undefined) {
                            throw new ExchangeError(
                                this.id + " markets not loaded"
                            );
                        }
                        if (typeof symbol === "string") {
                            if (symbol in this.markets) {
                                return this.markets[symbol];
                            } else if (symbol in this.markets_by_id) {
                                const markets = this.markets_by_id[symbol];
                                const defaultType = this.safeString2(
                                    this.options,
                                    "defaultType",
                                    "defaultSubType",
                                    "spot"
                                );
                                for (let i = 0; i < markets.length; i++) {
                                    const market = markets[i];
                                    if (market[defaultType]) {
                                        return market;
                                    }
                                }
                                return markets[0];
                            }
                        }
                        throw new BadSymbol(
                            this.id + " does not have market symbol " + symbol
                        );
                    }

                    handleWithdrawTagAndParams(tag, params) {
                        if (typeof tag === "object") {
                            params = this.extend(tag, params);
                            tag = undefined;
                        }
                        if (tag === undefined) {
                            tag = this.safeString(params, "tag");
                            if (tag !== undefined) {
                                params = this.omit(params, "tag");
                            }
                        }
                        return [tag, params];
                    }

                    async createLimitOrder(
                        symbol,
                        side,
                        amount,
                        price,
                        params = {}
                    ) {
                        return await this.createOrder(
                            symbol,
                            "limit",
                            side,
                            amount,
                            price,
                            params
                        );
                    }

                    async createMarketOrder(
                        symbol,
                        side,
                        amount,
                        price = undefined,
                        params = {}
                    ) {
                        return await this.createOrder(
                            symbol,
                            "market",
                            side,
                            amount,
                            price,
                            params
                        );
                    }

                    async createLimitBuyOrder(
                        symbol,
                        amount,
                        price,
                        params = {}
                    ) {
                        return await this.createOrder(
                            symbol,
                            "limit",
                            "buy",
                            amount,
                            price,
                            params
                        );
                    }

                    async createLimitSellOrder(
                        symbol,
                        amount,
                        price,
                        params = {}
                    ) {
                        return await this.createOrder(
                            symbol,
                            "limit",
                            "sell",
                            amount,
                            price,
                            params
                        );
                    }

                    async createMarketBuyOrder(symbol, amount, params = {}) {
                        return await this.createOrder(
                            symbol,
                            "market",
                            "buy",
                            amount,
                            undefined,
                            params
                        );
                    }

                    async createMarketSellOrder(symbol, amount, params = {}) {
                        return await this.createOrder(
                            symbol,
                            "market",
                            "sell",
                            amount,
                            undefined,
                            params
                        );
                    }

                    costToPrecision(symbol, cost) {
                        const market = this.market(symbol);
                        return this.decimalToPrecision(
                            cost,
                            TRUNCATE,
                            market["precision"]["price"],
                            this.precisionMode,
                            this.paddingMode
                        );
                    }

                    priceToPrecision(symbol, price) {
                        const market = this.market(symbol);
                        const result = this.decimalToPrecision(
                            price,
                            ROUND,
                            market["precision"]["price"],
                            this.precisionMode,
                            this.paddingMode
                        );
                        if (result === "0") {
                            throw new ArgumentsRequired(
                                this.id +
                                    " price of " +
                                    market["symbol"] +
                                    " must be greater than minimum price precision of " +
                                    this.numberToString(
                                        market["precision"]["price"]
                                    )
                            );
                        }
                        return result;
                    }

                    amountToPrecision(symbol, amount) {
                        const market = this.market(symbol);
                        const result = this.decimalToPrecision(
                            amount,
                            TRUNCATE,
                            market["precision"]["amount"],
                            this.precisionMode,
                            this.paddingMode
                        );
                        if (result === "0") {
                            throw new ArgumentsRequired(
                                this.id +
                                    " amount of " +
                                    market["symbol"] +
                                    " must be greater than minimum amount precision of " +
                                    this.numberToString(
                                        market["precision"]["amount"]
                                    )
                            );
                        }
                        return result;
                    }

                    feeToPrecision(symbol, fee) {
                        const market = this.market(symbol);
                        return this.decimalToPrecision(
                            fee,
                            ROUND,
                            market["precision"]["price"],
                            this.precisionMode,
                            this.paddingMode
                        );
                    }

                    currencyToPrecision(code, fee, networkCode = undefined) {
                        const currency = this.currencies[code];
                        let precision = this.safeValue(currency, "precision");
                        if (networkCode !== undefined) {
                            const networks = this.safeValue(
                                currency,
                                "networks",
                                {}
                            );
                            const networkItem = this.safeValue(
                                networks,
                                networkCode,
                                {}
                            );
                            precision = this.safeValue(
                                networkItem,
                                "precision",
                                precision
                            );
                        }
                        if (precision === undefined) {
                            return fee;
                        } else {
                            return this.decimalToPrecision(
                                fee,
                                ROUND,
                                precision,
                                this.precisionMode,
                                this.paddingMode
                            );
                        }
                    }

                    safeNumber(object, key, d = undefined) {
                        const value = this.safeString(object, key);
                        return this.parseNumber(value, d);
                    }

                    safeNumberN(object, arr, d = undefined) {
                        const value = this.safeStringN(object, arr);
                        return this.parseNumber(value, d);
                    }

                    parsePrecision(precision) {
                        if (precision === undefined) {
                            return undefined;
                        }
                        return "1e" + Precise.stringNeg(precision);
                    }

                    async loadTimeDifference(params = {}) {
                        const serverTime = await this.fetchTime(params);
                        const after = this.milliseconds();
                        this.options["timeDifference"] = after - serverTime;
                        return this.options["timeDifference"];
                    }

                    implodeHostname(url) {
                        return this.implodeParams(url, {
                            hostname: this.hostname,
                        });
                    }

                    async fetchMarketLeverageTiers(symbol, params = {}) {
                        if (this.has["fetchLeverageTiers"]) {
                            const market = await this.market(symbol);
                            if (!market["contract"]) {
                                throw new BadSymbol(
                                    this.id +
                                        " fetchMarketLeverageTiers() supports contract markets only"
                                );
                            }
                            const tiers = await this.fetchLeverageTiers([
                                symbol,
                            ]);
                            return this.safeValue(tiers, symbol);
                        } else {
                            throw new NotSupported(
                                this.id +
                                    " fetchMarketLeverageTiers() is not supported yet"
                            );
                        }
                    }

                    async createPostOnlyOrder(
                        symbol,
                        type,
                        side,
                        amount,
                        price,
                        params = {}
                    ) {
                        if (!this.has["createPostOnlyOrder"]) {
                            throw new NotSupported(
                                this.id +
                                    "createPostOnlyOrder() is not supported yet"
                            );
                        }
                        const query = this.extend(params, { postOnly: true });
                        return await this.createOrder(
                            symbol,
                            type,
                            side,
                            amount,
                            price,
                            query
                        );
                    }

                    async createReduceOnlyOrder(
                        symbol,
                        type,
                        side,
                        amount,
                        price,
                        params = {}
                    ) {
                        if (!this.has["createReduceOnlyOrder"]) {
                            throw new NotSupported(
                                this.id +
                                    "createReduceOnlyOrder() is not supported yet"
                            );
                        }
                        const query = this.extend(params, { reduceOnly: true });
                        return await this.createOrder(
                            symbol,
                            type,
                            side,
                            amount,
                            price,
                            query
                        );
                    }

                    async createStopOrder(
                        symbol,
                        type,
                        side,
                        amount,
                        price = undefined,
                        stopPrice = undefined,
                        params = {}
                    ) {
                        if (!this.has["createStopOrder"]) {
                            throw new NotSupported(
                                this.id +
                                    " createStopOrder() is not supported yet"
                            );
                        }
                        if (stopPrice === undefined) {
                            throw new ArgumentsRequired(
                                this.id +
                                    " create_stop_order() requires a stopPrice argument"
                            );
                        }
                        const query = this.extend(params, {
                            stopPrice: stopPrice,
                        });
                        return await this.createOrder(
                            symbol,
                            type,
                            side,
                            amount,
                            price,
                            query
                        );
                    }

                    async createStopLimitOrder(
                        symbol,
                        side,
                        amount,
                        price,
                        stopPrice,
                        params = {}
                    ) {
                        if (!this.has["createStopLimitOrder"]) {
                            throw new NotSupported(
                                this.id +
                                    " createStopLimitOrder() is not supported yet"
                            );
                        }
                        const query = this.extend(params, {
                            stopPrice: stopPrice,
                        });
                        return await this.createOrder(
                            symbol,
                            "limit",
                            side,
                            amount,
                            price,
                            query
                        );
                    }

                    async createStopMarketOrder(
                        symbol,
                        side,
                        amount,
                        stopPrice,
                        params = {}
                    ) {
                        if (!this.has["createStopMarketOrder"]) {
                            throw new NotSupported(
                                this.id +
                                    " createStopMarketOrder() is not supported yet"
                            );
                        }
                        const query = this.extend(params, {
                            stopPrice: stopPrice,
                        });
                        return await this.createOrder(
                            symbol,
                            "market",
                            side,
                            amount,
                            undefined,
                            query
                        );
                    }

                    safeCurrencyCode(currencyId, currency = undefined) {
                        currency = this.safeCurrency(currencyId, currency);
                        return currency["code"];
                    }

                    filterBySymbolSinceLimit(
                        array,
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        tail = false
                    ) {
                        return this.filterByValueSinceLimit(
                            array,
                            "symbol",
                            symbol,
                            since,
                            limit,
                            "timestamp",
                            tail
                        );
                    }

                    filterByCurrencySinceLimit(
                        array,
                        code = undefined,
                        since = undefined,
                        limit = undefined,
                        tail = false
                    ) {
                        return this.filterByValueSinceLimit(
                            array,
                            "currency",
                            code,
                            since,
                            limit,
                            "timestamp",
                            tail
                        );
                    }

                    parseTickers(tickers, symbols = undefined, params = {}) {
                        //
                        // the value of tickers is either a dict or a list
                        //
                        // dict
                        //
                        //     {
                        //         'marketId1': { ... },
                        //         'marketId2': { ... },
                        //         'marketId3': { ... },
                        //         ...
                        //     }
                        //
                        // list
                        //
                        //     [
                        //         { 'market': 'marketId1', ... },
                        //         { 'market': 'marketId2', ... },
                        //         { 'market': 'marketId3', ... },
                        //         ...
                        //     ]
                        //
                        const results = [];
                        if (Array.isArray(tickers)) {
                            for (let i = 0; i < tickers.length; i++) {
                                const ticker = this.extend(
                                    this.parseTicker(tickers[i]),
                                    params
                                );
                                results.push(ticker);
                            }
                        } else {
                            const marketIds = Object.keys(tickers);
                            for (let i = 0; i < marketIds.length; i++) {
                                const marketId = marketIds[i];
                                const market = this.safeMarket(marketId);
                                const ticker = this.extend(
                                    this.parseTicker(tickers[marketId], market),
                                    params
                                );
                                results.push(ticker);
                            }
                        }
                        symbols = this.marketSymbols(symbols);
                        return this.filterByArray(results, "symbol", symbols);
                    }

                    parseDepositAddresses(
                        addresses,
                        codes = undefined,
                        indexed = true,
                        params = {}
                    ) {
                        let result = [];
                        for (let i = 0; i < addresses.length; i++) {
                            const address = this.extend(
                                this.parseDepositAddress(addresses[i]),
                                params
                            );
                            result.push(address);
                        }
                        if (codes !== undefined) {
                            result = this.filterByArray(
                                result,
                                "currency",
                                codes,
                                false
                            );
                        }
                        result = indexed
                            ? this.indexBy(result, "currency")
                            : result;
                        return result;
                    }

                    parseBorrowInterests(response, market = undefined) {
                        const interests = [];
                        for (let i = 0; i < response.length; i++) {
                            const row = response[i];
                            interests.push(
                                this.parseBorrowInterest(row, market)
                            );
                        }
                        return interests;
                    }

                    parseFundingRateHistories(
                        response,
                        market = undefined,
                        since = undefined,
                        limit = undefined
                    ) {
                        const rates = [];
                        for (let i = 0; i < response.length; i++) {
                            const entry = response[i];
                            rates.push(
                                this.parseFundingRateHistory(entry, market)
                            );
                        }
                        const sorted = this.sortBy(rates, "timestamp");
                        const symbol =
                            market === undefined ? undefined : market["symbol"];
                        return this.filterBySymbolSinceLimit(
                            sorted,
                            symbol,
                            since,
                            limit
                        );
                    }

                    safeSymbol(
                        marketId,
                        market = undefined,
                        delimiter = undefined,
                        marketType = undefined
                    ) {
                        market = this.safeMarket(
                            marketId,
                            market,
                            delimiter,
                            marketType
                        );
                        return market["symbol"];
                    }

                    parseFundingRate(contract, market = undefined) {
                        throw new NotSupported(
                            this.id + " parseFundingRate() is not supported yet"
                        );
                    }

                    parseFundingRates(response, market = undefined) {
                        const result = {};
                        for (let i = 0; i < response.length; i++) {
                            const parsed = this.parseFundingRate(
                                response[i],
                                market
                            );
                            result[parsed["symbol"]] = parsed;
                        }
                        return result;
                    }

                    isTriggerOrder(params) {
                        const isTrigger = this.safeValue2(
                            params,
                            "trigger",
                            "stop"
                        );
                        if (isTrigger) {
                            params = this.omit(params, ["trigger", "stop"]);
                        }
                        return [isTrigger, params];
                    }

                    isPostOnly(
                        isMarketOrder,
                        exchangeSpecificParam,
                        params = {}
                    ) {
                        /**
                         * @ignore
                         * @method
                         * @param {string} type Order type
                         * @param {boolean} exchangeSpecificParam exchange specific postOnly
                         * @param {object} params exchange specific params
                         * @returns {boolean} true if a post only order, false otherwise
                         */
                        const timeInForce = this.safeStringUpper(
                            params,
                            "timeInForce"
                        );
                        let postOnly = this.safeValue2(
                            params,
                            "postOnly",
                            "post_only",
                            false
                        );
                        // we assume timeInForce is uppercase from safeStringUpper (params, 'timeInForce')
                        const ioc = timeInForce === "IOC";
                        const fok = timeInForce === "FOK";
                        const timeInForcePostOnly = timeInForce === "PO";
                        postOnly =
                            postOnly ||
                            timeInForcePostOnly ||
                            exchangeSpecificParam;
                        if (postOnly) {
                            if (ioc || fok) {
                                throw new InvalidOrder(
                                    this.id +
                                        " postOnly orders cannot have timeInForce equal to " +
                                        timeInForce
                                );
                            } else if (isMarketOrder) {
                                throw new InvalidOrder(
                                    this.id +
                                        " market orders cannot be postOnly"
                                );
                            } else {
                                return true;
                            }
                        } else {
                            return false;
                        }
                    }

                    async fetchTradingFees(params = {}) {
                        throw new NotSupported(
                            this.id + " fetchTradingFees() is not supported yet"
                        );
                    }

                    async fetchTradingFee(symbol, params = {}) {
                        if (!this.has["fetchTradingFees"]) {
                            throw new NotSupported(
                                this.id +
                                    " fetchTradingFee() is not supported yet"
                            );
                        }
                        return await this.fetchTradingFees(params);
                    }

                    parseOpenInterest(interest, market = undefined) {
                        throw new NotSupported(
                            this.id +
                                " parseOpenInterest () is not supported yet"
                        );
                    }

                    parseOpenInterests(
                        response,
                        market = undefined,
                        since = undefined,
                        limit = undefined
                    ) {
                        const interests = [];
                        for (let i = 0; i < response.length; i++) {
                            const entry = response[i];
                            const interest = this.parseOpenInterest(
                                entry,
                                market
                            );
                            interests.push(interest);
                        }
                        const sorted = this.sortBy(interests, "timestamp");
                        const symbol = this.safeString(market, "symbol");
                        return this.filterBySymbolSinceLimit(
                            sorted,
                            symbol,
                            since,
                            limit
                        );
                    }

                    async fetchFundingRate(symbol, params = {}) {
                        if (this.has["fetchFundingRates"]) {
                            await this.loadMarkets();
                            const market = this.market(symbol);
                            if (!market["contract"]) {
                                throw new BadSymbol(
                                    this.id +
                                        " fetchFundingRate() supports contract markets only"
                                );
                            }
                            const rates = await this.fetchFundingRates(
                                [symbol],
                                params
                            );
                            const rate = this.safeValue(rates, symbol);
                            if (rate === undefined) {
                                throw new NullResponse(
                                    this.id +
                                        " fetchFundingRate () returned no data for " +
                                        symbol
                                );
                            } else {
                                return rate;
                            }
                        } else {
                            throw new NotSupported(
                                this.id +
                                    " fetchFundingRate () is not supported yet"
                            );
                        }
                    }

                    async fetchMarkOHLCV(
                        symbol,
                        timeframe = "1m",
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name exchange#fetchMarkOHLCV
                         * @description fetches historical mark price candlestick data containing the open, high, low, and close price of a market
                         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
                         * @param {string} timeframe the length of time each candle represents
                         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
                         * @param {int|undefined} limit the maximum amount of candles to fetch
                         * @param {object} params extra parameters specific to the exchange api endpoint
                         * @returns {[[int|float]]} A list of candles ordered as timestamp, open, high, low, close, undefined
                         */
                        if (this.has["fetchMarkOHLCV"]) {
                            const request = {
                                price: "mark",
                            };
                            return await this.fetchOHLCV(
                                symbol,
                                timeframe,
                                since,
                                limit,
                                this.extend(request, params)
                            );
                        } else {
                            throw new NotSupported(
                                this.id +
                                    " fetchMarkOHLCV () is not supported yet"
                            );
                        }
                    }

                    async fetchIndexOHLCV(
                        symbol,
                        timeframe = "1m",
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name exchange#fetchIndexOHLCV
                         * @description fetches historical index price candlestick data containing the open, high, low, and close price of a market
                         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
                         * @param {string} timeframe the length of time each candle represents
                         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
                         * @param {int|undefined} limit the maximum amount of candles to fetch
                         * @param {object} params extra parameters specific to the exchange api endpoint
                         * @returns {[[int|float]]} A list of candles ordered as timestamp, open, high, low, close, undefined
                         */
                        if (this.has["fetchIndexOHLCV"]) {
                            const request = {
                                price: "index",
                            };
                            return await this.fetchOHLCV(
                                symbol,
                                timeframe,
                                since,
                                limit,
                                this.extend(request, params)
                            );
                        } else {
                            throw new NotSupported(
                                this.id +
                                    " fetchIndexOHLCV () is not supported yet"
                            );
                        }
                    }

                    async fetchPremiumIndexOHLCV(
                        symbol,
                        timeframe = "1m",
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name exchange#fetchPremiumIndexOHLCV
                         * @description fetches historical premium index price candlestick data containing the open, high, low, and close price of a market
                         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
                         * @param {string} timeframe the length of time each candle represents
                         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
                         * @param {int|undefined} limit the maximum amount of candles to fetch
                         * @param {object} params extra parameters specific to the exchange api endpoint
                         * @returns {[[int|float]]} A list of candles ordered as timestamp, open, high, low, close, undefined
                         */
                        if (this.has["fetchPremiumIndexOHLCV"]) {
                            const request = {
                                price: "premiumIndex",
                            };
                            return await this.fetchOHLCV(
                                symbol,
                                timeframe,
                                since,
                                limit,
                                this.extend(request, params)
                            );
                        } else {
                            throw new NotSupported(
                                this.id +
                                    " fetchPremiumIndexOHLCV () is not supported yet"
                            );
                        }
                    }

                    handleTimeInForce(params = {}) {
                        /**
                         * @ignore
                         * @method
                         * * Must add timeInForce to this.options to use this method
                         * @return {string} returns the exchange specific value for timeInForce
                         */
                        const timeInForce = this.safeStringUpper(
                            params,
                            "timeInForce"
                        ); // supported values GTC, IOC, PO
                        if (timeInForce !== undefined) {
                            const exchangeValue = this.safeString(
                                this.options["timeInForce"],
                                timeInForce
                            );
                            if (exchangeValue === undefined) {
                                throw new ExchangeError(
                                    this.id +
                                        ' does not support timeInForce "' +
                                        timeInForce +
                                        '"'
                                );
                            }
                            return exchangeValue;
                        }
                        return undefined;
                    }

                    convertTypeToAccount(account) {
                        /**
                         * @ignore
                         * @method
                         * * Must add accountsByType to this.options to use this method
                         * @param {string} account key for account name in this.options['accountsByType']
                         * @returns the exchange specific account name or the isolated margin id for transfers
                         */
                        const accountsByType = this.safeValue(
                            this.options,
                            "accountsByType",
                            {}
                        );
                        const lowercaseAccount = account.toLowerCase();
                        if (lowercaseAccount in accountsByType) {
                            return accountsByType[lowercaseAccount];
                        } else if (
                            account in this.markets ||
                            account in this.markets_by_id
                        ) {
                            const market = this.market(account);
                            return market["id"];
                        } else {
                            return account;
                        }
                    }

                    checkRequiredArgument(
                        methodName,
                        argument,
                        argumentName,
                        options = []
                    ) {
                        /**
                         * @ignore
                         * @method
                         * @param {string} argument the argument to check
                         * @param {string} argumentName the name of the argument to check
                         * @param {string} methodName the name of the method that the argument is being checked for
                         * @param {[string]} options a list of options that the argument can be
                         * @returns {undefined}
                         */
                        if (
                            argument === undefined ||
                            (options.length > 0 &&
                                !this.inArray(argument, options))
                        ) {
                            const messageOptions = options.join(", ");
                            let message =
                                this.id +
                                " " +
                                methodName +
                                "() requires a " +
                                argumentName +
                                " argument";
                            if (messageOptions !== "") {
                                message +=
                                    ", one of " + "(" + messageOptions + ")";
                            }
                            throw new ArgumentsRequired(message);
                        }
                    }

                    checkRequiredMarginArgument(
                        methodName,
                        symbol,
                        marginMode
                    ) {
                        /**
                         * @ignore
                         * @method
                         * @param {string} symbol unified symbol of the market
                         * @param {string} methodName name of the method that requires a symbol
                         * @param {string} marginMode is either 'isolated' or 'cross'
                         */
                        if (marginMode === "isolated" && symbol === undefined) {
                            throw new ArgumentsRequired(
                                this.id +
                                    " " +
                                    methodName +
                                    "() requires a symbol argument for isolated margin"
                            );
                        } else if (
                            marginMode === "cross" &&
                            symbol !== undefined
                        ) {
                            throw new ArgumentsRequired(
                                this.id +
                                    " " +
                                    methodName +
                                    "() cannot have a symbol argument for cross margin"
                            );
                        }
                    }

                    checkRequiredSymbol(methodName, symbol) {
                        /**
                         * @ignore
                         * @method
                         * @param {string} symbol unified symbol of the market
                         * @param {string} methodName name of the method that requires a symbol
                         */
                        this.checkRequiredArgument(
                            methodName,
                            symbol,
                            "symbol"
                        );
                    }

                    parseDepositWithdrawFees(
                        response,
                        codes = undefined,
                        currencyIdKey = undefined
                    ) {
                        /**
                         * @ignore
                         * @method
                         * @param {[object]|object} response unparsed response from the exchange
                         * @param {[string]|undefined} codes the unified currency codes to fetch transactions fees for, returns all currencies when undefined
                         * @param {str|undefined} currencyIdKey *should only be undefined when response is a dictionary* the object key that corresponds to the currency id
                         * @returns {object} objects with withdraw and deposit fees, indexed by currency codes
                         */
                        const depositWithdrawFees = {};
                        codes = this.marketCodes(codes);
                        const isArray = Array.isArray(response);
                        let responseKeys = response;
                        if (!isArray) {
                            responseKeys = Object.keys(response);
                        }
                        for (let i = 0; i < responseKeys.length; i++) {
                            const entry = responseKeys[i];
                            const dictionary = isArray
                                ? entry
                                : response[entry];
                            const currencyId = isArray
                                ? this.safeString(dictionary, currencyIdKey)
                                : entry;
                            const currency = this.safeValue(
                                this.currencies_by_id,
                                currencyId
                            );
                            const code = this.safeString(
                                currency,
                                "code",
                                currencyId
                            );
                            if (
                                codes === undefined ||
                                this.inArray(code, codes)
                            ) {
                                depositWithdrawFees[code] =
                                    this.parseDepositWithdrawFee(
                                        dictionary,
                                        currency
                                    );
                            }
                        }
                        return depositWithdrawFees;
                    }

                    depositWithdrawFee(info) {
                        return {
                            info: info,
                            withdraw: {
                                fee: undefined,
                                percentage: undefined,
                            },
                            deposit: {
                                fee: undefined,
                                percentage: undefined,
                            },
                            networks: {},
                        };
                    }

                    assignDefaultDepositWithdrawFees(
                        fee,
                        currency = undefined
                    ) {
                        /**
                         * @ignore
                         * @method
                         * @description Takes a depositWithdrawFee structure and assigns the default values for withdraw and deposit
                         * @param {object} fee A deposit withdraw fee structure
                         * @param {object} currency A currency structure, the response from this.currency ()
                         * @returns {object} A deposit withdraw fee structure
                         */
                        const networkKeys = Object.keys(fee["networks"]);
                        const numNetworks = networkKeys.length;
                        if (numNetworks === 1) {
                            fee["withdraw"] =
                                fee["networks"][networkKeys[0]]["withdraw"];
                            fee["deposit"] =
                                fee["networks"][networkKeys[0]]["deposit"];
                            return fee;
                        }
                        const currencyCode = this.safeString(currency, "code");
                        for (let i = 0; i < numNetworks; i++) {
                            const network = networkKeys[i];
                            if (network === currencyCode) {
                                fee["withdraw"] =
                                    fee["networks"][networkKeys[i]]["withdraw"];
                                fee["deposit"] =
                                    fee["networks"][networkKeys[i]]["deposit"];
                            }
                        }
                        return fee;
                    }
                };
            },
            {
                "../static_dependencies/BN/bn": 32,
                "./Precise": 4,
                "./errors": 6,
                "./functions": 7,
            },
        ],
        4: [
            function (require, module, exports) {
                /* eslint-disable */
                "use strict";

                const zero = BigInt(0);
                const minusOne = BigInt(-1);
                const base = BigInt(10);

                class Precise {
                    constructor(number, decimals = undefined) {
                        if (decimals === undefined) {
                            let modifier = 0;
                            number = number.toLowerCase();
                            if (number.indexOf("e") > -1) {
                                [number, modifier] = number.split("e");
                                modifier = parseInt(modifier);
                            }
                            const decimalIndex = number.indexOf(".");
                            this.decimals =
                                decimalIndex > -1
                                    ? number.length - decimalIndex - 1
                                    : 0;
                            const integerString = number.replace(".", "");
                            this.integer = BigInt(integerString);
                            this.decimals = this.decimals - modifier;
                        } else {
                            this.integer = number;
                            this.decimals = decimals;
                        }
                    }

                    mul(other) {
                        // other must be another instance of Precise
                        const integerResult = this.integer * other.integer;
                        return new Precise(
                            integerResult,
                            this.decimals + other.decimals
                        );
                    }

                    div(other, precision = 18) {
                        const distance =
                            precision - this.decimals + other.decimals;
                        let numerator;
                        if (distance === 0) {
                            numerator = this.integer;
                        } else if (distance < 0) {
                            const exponent = base ** BigInt(-distance);
                            numerator = this.integer / exponent;
                        } else {
                            const exponent = base ** BigInt(distance);
                            numerator = this.integer * exponent;
                        }
                        const result = numerator / other.integer;
                        return new Precise(result, precision);
                    }

                    add(other) {
                        if (this.decimals === other.decimals) {
                            const integerResult = this.integer + other.integer;
                            return new Precise(integerResult, this.decimals);
                        } else {
                            const [smaller, bigger] =
                                this.decimals > other.decimals
                                    ? [other, this]
                                    : [this, other];
                            const exponent = bigger.decimals - smaller.decimals;
                            const normalised =
                                smaller.integer * base ** BigInt(exponent);
                            const result = normalised + bigger.integer;
                            return new Precise(result, bigger.decimals);
                        }
                    }

                    mod(other) {
                        const rationizerNumerator = Math.max(
                            -this.decimals + other.decimals,
                            0
                        );
                        const numerator =
                            this.integer * base ** BigInt(rationizerNumerator);
                        const rationizerDenominator = Math.max(
                            -other.decimals + this.decimals,
                            0
                        );
                        const denominator =
                            other.integer *
                            base ** BigInt(rationizerDenominator);
                        const result = numerator % denominator;
                        return new Precise(
                            result,
                            rationizerDenominator + other.decimals
                        );
                    }

                    sub(other) {
                        const negative = new Precise(
                            -other.integer,
                            other.decimals
                        );
                        return this.add(negative);
                    }

                    abs() {
                        return new Precise(
                            this.integer < 0
                                ? this.integer * minusOne
                                : this.integer,
                            this.decimals
                        );
                    }

                    neg() {
                        return new Precise(-this.integer, this.decimals);
                    }

                    min(other) {
                        return this.lt(other) ? this : other;
                    }

                    max(other) {
                        return this.gt(other) ? this : other;
                    }

                    gt(other) {
                        const sum = this.sub(other);
                        return sum.integer > 0;
                    }

                    ge(other) {
                        const sum = this.sub(other);
                        return sum.integer >= 0;
                    }

                    lt(other) {
                        return other.gt(this);
                    }

                    le(other) {
                        return other.ge(this);
                    }

                    reduce() {
                        const string = this.integer.toString();
                        const start = string.length - 1;
                        if (start === 0) {
                            if (string === "0") {
                                this.decimals = 0;
                            }
                            return this;
                        }
                        let i;
                        for (i = start; i >= 0; i--) {
                            if (string.charAt(i) !== "0") {
                                break;
                            }
                        }
                        const difference = start - i;
                        if (difference === 0) {
                            return this;
                        }
                        this.decimals -= difference;
                        this.integer = BigInt(string.slice(0, i + 1));
                    }

                    equals(other) {
                        this.reduce();
                        other.reduce();
                        return (
                            this.decimals === other.decimals &&
                            this.integer === other.integer
                        );
                    }

                    toString() {
                        this.reduce();
                        let sign;
                        let abs;
                        if (this.integer < 0) {
                            sign = "-";
                            abs = -this.integer;
                        } else {
                            sign = "";
                            abs = this.integer;
                        }
                        const integerArray = Array.from(
                            abs.toString(this.base).padStart(this.decimals, "0")
                        );
                        const index = integerArray.length - this.decimals;
                        let item;
                        if (index === 0) {
                            // if we are adding to the front
                            item = "0.";
                        } else if (this.decimals < 0) {
                            item = "0".repeat(-this.decimals);
                        } else if (this.decimals === 0) {
                            item = "";
                        } else {
                            item = ".";
                        }
                        integerArray.splice(index, 0, item);
                        return sign + integerArray.join("");
                    }

                    static stringMul(string1, string2) {
                        if (string1 === undefined || string2 === undefined) {
                            return undefined;
                        }
                        return new Precise(string1)
                            .mul(new Precise(string2))
                            .toString();
                    }

                    static stringDiv(string1, string2, precision = 18) {
                        if (string1 === undefined || string2 === undefined) {
                            return undefined;
                        }
                        const string2Precise = new Precise(string2);
                        if (string2Precise.integer === zero) {
                            return undefined;
                        }
                        return new Precise(string1)
                            .div(string2Precise, precision)
                            .toString();
                    }

                    static stringAdd(string1, string2) {
                        if (string1 === undefined && string2 === undefined) {
                            return undefined;
                        }
                        if (string1 === undefined) {
                            return string2;
                        } else if (string2 === undefined) {
                            return string1;
                        }
                        return new Precise(string1)
                            .add(new Precise(string2))
                            .toString();
                    }

                    static stringSub(string1, string2) {
                        if (string1 === undefined || string2 === undefined) {
                            return undefined;
                        }
                        return new Precise(string1)
                            .sub(new Precise(string2))
                            .toString();
                    }

                    static stringAbs(string) {
                        if (string === undefined) {
                            return undefined;
                        }
                        return new Precise(string).abs().toString();
                    }

                    static stringNeg(string) {
                        if (string === undefined) {
                            return undefined;
                        }
                        return new Precise(string).neg().toString();
                    }

                    static stringMod(string1, string2) {
                        if (string1 === undefined || string2 === undefined) {
                            return undefined;
                        }
                        return new Precise(string1)
                            .mod(new Precise(string2))
                            .toString();
                    }

                    static stringEquals(string1, string2) {
                        if (string1 === undefined || string2 === undefined) {
                            return undefined;
                        }
                        return new Precise(string1).equals(
                            new Precise(string2)
                        );
                    }

                    static stringEq(string1, string2) {
                        if (string1 === undefined || string2 === undefined) {
                            return undefined;
                        }
                        return new Precise(string1).equals(
                            new Precise(string2)
                        );
                    }

                    static stringMin(string1, string2) {
                        if (string1 === undefined || string2 === undefined) {
                            return undefined;
                        }
                        return new Precise(string1)
                            .min(new Precise(string2))
                            .toString();
                    }

                    static stringMax(string1, string2) {
                        if (string1 === undefined || string2 === undefined) {
                            return undefined;
                        }
                        return new Precise(string1)
                            .max(new Precise(string2))
                            .toString();
                    }

                    static stringGt(string1, string2) {
                        if (string1 === undefined || string2 === undefined) {
                            return undefined;
                        }
                        return new Precise(string1).gt(new Precise(string2));
                    }

                    static stringGe(string1, string2) {
                        if (string1 === undefined || string2 === undefined) {
                            return undefined;
                        }
                        return new Precise(string1).ge(new Precise(string2));
                    }

                    static stringLt(string1, string2) {
                        if (string1 === undefined || string2 === undefined) {
                            return undefined;
                        }
                        return new Precise(string1).lt(new Precise(string2));
                    }

                    static stringLe(string1, string2) {
                        if (string1 === undefined || string2 === undefined) {
                            return undefined;
                        }
                        return new Precise(string1).le(new Precise(string2));
                    }
                }

                module.exports = Precise;
            },
            {},
        ],
        5: [
            function (require, module, exports) {
                "use strict";

                const errorHierarchy = {
                    BaseError: {
                        ExchangeError: {
                            AuthenticationError: {
                                PermissionDenied: {
                                    AccountNotEnabled: {},
                                },
                                AccountSuspended: {},
                            },
                            ArgumentsRequired: {},
                            BadRequest: {
                                BadSymbol: {},
                                MarginModeAlreadySet: {},
                            },
                            BadResponse: {
                                NullResponse: {},
                            },
                            InsufficientFunds: {},
                            InvalidAddress: {
                                AddressPending: {},
                            },
                            InvalidOrder: {
                                OrderNotFound: {},
                                OrderNotCached: {},
                                CancelPending: {},
                                OrderImmediatelyFillable: {},
                                OrderNotFillable: {},
                                DuplicateOrderId: {},
                            },
                            NotSupported: {},
                        },
                        NetworkError: {
                            DDoSProtection: {
                                RateLimitExceeded: {},
                            },
                            ExchangeNotAvailable: {
                                OnMaintenance: {},
                            },
                            InvalidNonce: {},
                            RequestTimeout: {},
                        },
                    },
                };

                module.exports = errorHierarchy;
            },
            {},
        ],
        6: [
            function (require, module, exports) {
                /* eslint-disable */
                "use strict";

                const errorHierarchy = require("./errorHierarchy.js");

                /*  ------------------------------------------------------------------------ */

                function subclass(BaseClass, classes, namespace = {}) {
                    for (const [className, subclasses] of Object.entries(
                        classes
                    )) {
                        const Class = Object.assign(namespace, {
                            /*  By creating a named property, we trick compiler to assign our class constructor function a name.
                Otherwise, all our error constructors would be shown as [Function: Error] in the debugger! And
                the super-useful `e.constructor.name` magic wouldn't work — we then would have no chance to
                obtain a error type string from an error instance programmatically!                               */

                            [className]: class extends BaseClass {
                                constructor(message) {
                                    super(message);

                                    /*  A workaround to make `instanceof` work on custom Error classes in transpiled ES5.
                        See my blog post for the explanation of this hack:

                        https://medium.com/@xpl/javascript-deriving-from-error-properly-8d2f8f315801        */

                                    this.constructor = Class;
                                    this.__proto__ = Class.prototype;
                                    this.name = className;
                                    this.message = message;

                                    // https://github.com/Microsoft/TypeScript/wiki/FAQ#why-doesnt-extending-built-ins-like-error-array-and-map-work

                                    Object.setPrototypeOf(
                                        this,
                                        Class.prototype
                                    );
                                }
                            },
                        })[className];

                        subclass(Class, subclasses, namespace);
                    }

                    return namespace;
                }

                /*  ------------------------------------------------------------------------ */

                module.exports = subclass(
                    // Root class
                    Error,
                    // Derived class hierarchy
                    errorHierarchy
                );
            },
            { "./errorHierarchy.js": 5 },
        ],
        7: [
            function (require, module, exports) {
                /* eslint-disable */
                "use strict";

                /*  ------------------------------------------------------------------------ */

                const { unCamelCase } = require("./functions/string");

                const unCamelCasePropertyNames = (x) => {
                    for (const k in x) x[unCamelCase(k)] = x[k]; // camel_case_method = camelCaseMethod
                    return x;
                };

                /*  ------------------------------------------------------------------------ */

                module.exports = unCamelCasePropertyNames(
                    Object.assign(
                        {},

                        require("./functions/platform"),
                        require("./functions/generic"),
                        require("./functions/string"),
                        require("./functions/type"),
                        require("./functions/number"),
                        require("./functions/encode"),
                        require("./functions/crypto"),
                        require("./functions/time"),
                        require("./functions/throttle"),
                        require("./functions/misc")
                    )
                );

                /*  ------------------------------------------------------------------------ */
            },
            {
                "./functions/crypto": 8,
                "./functions/encode": 9,
                "./functions/generic": 10,
                "./functions/misc": 11,
                "./functions/number": 12,
                "./functions/platform": 13,
                "./functions/string": 14,
                "./functions/throttle": 15,
                "./functions/time": 16,
                "./functions/type": 17,
            },
        ],
        8: [
            function (require, module, exports) {
                "use strict";

                /*  ------------------------------------------------------------------------ */

                const CryptoJS = require("../../static_dependencies/crypto-js/crypto-js");
                const { capitalize } = require("./string");
                const { stringToBase64, urlencodeBase64 } = require("./encode");
                const NodeRSA = require("./../../static_dependencies/node-rsa/NodeRSA");
                const {
                    binaryToBase58,
                    byteArrayToWordArray,
                } = require("./encode");
                const elliptic = require("./../../static_dependencies/elliptic/lib/elliptic");
                const EC = elliptic.ec;
                const EDDSA = elliptic.eddsa;
                const { ArgumentsRequired } = require("./../errors");
                const BN = require("../../static_dependencies/BN/bn.js");

                /*  ------------------------------------------------------------------------ */

                const hash = (request, hash = "md5", digest = "hex") => {
                    const options = {};
                    if (hash === "keccak") {
                        hash = "SHA3";
                        options["outputLength"] = 256;
                    }
                    const result = CryptoJS[hash.toUpperCase()](
                        request,
                        options
                    );
                    return digest === "binary"
                        ? result
                        : result.toString(CryptoJS.enc[capitalize(digest)]);
                };

                /*  .............................................   */

                const hmac = (
                    request,
                    secret,
                    hash = "sha256",
                    digest = "hex"
                ) => {
                    const result = CryptoJS["Hmac" + hash.toUpperCase()](
                        request,
                        secret
                    );
                    if (digest) {
                        const encoding =
                            digest === "binary" ? "Latin1" : capitalize(digest);
                        return result.toString(
                            CryptoJS.enc[capitalize(encoding)]
                        );
                    }
                    return result;
                };

                /*  .............................................   */

                function rsa(request, secret, alg = "RS256") {
                    const algos = {
                        RS256: "pkcs1-sha256",
                        RS512: "pkcs1-sha512",
                    };
                    if (!(alg in algos)) {
                        throw new ExchangeError(
                            alg + " is not a supported rsa signing algorithm."
                        );
                    }
                    const algorithm = algos[alg];
                    let key = new NodeRSA(secret, {
                        environment: "browser",
                        signingScheme: algorithm,
                    });
                    return key.sign(request, "base64", "binary");
                }

                /**
                 * @return {string}
                 */
                function jwt(request, secret, alg = "HS256") {
                    const algos = {
                        HS256: "sha256",
                        HS384: "sha384",
                        HS512: "sha512",
                    };
                    const encodedHeader = urlencodeBase64(
                        stringToBase64(JSON.stringify({ alg: alg, typ: "JWT" }))
                    );
                    const encodedData = urlencodeBase64(
                        stringToBase64(JSON.stringify(request))
                    );
                    const token = [encodedHeader, encodedData].join(".");
                    const algoType = alg.slice(0, 2);
                    const algorithm = algos[alg];
                    let signature = undefined;
                    if (algoType === "HS") {
                        signature = urlencodeBase64(
                            hmac(token, secret, algorithm, "base64")
                        );
                    } else if (algoType === "RS") {
                        signature = urlencodeBase64(rsa(token, secret, alg));
                    }
                    return [token, signature].join(".");
                }

                function ecdsa(
                    request,
                    secret,
                    algorithm = "p256",
                    hashFunction = undefined,
                    fixedLength = false
                ) {
                    let digest = request;
                    if (hashFunction !== undefined) {
                        digest = hash(request, hashFunction, "hex");
                    }
                    const curve = new EC(algorithm);
                    let signature = curve.sign(digest, secret, "hex", {
                        canonical: true,
                    });
                    let counter = new BN("0");
                    const minimum_size = new BN("1")
                        .shln(8 * 31)
                        .sub(new BN("1"));
                    while (
                        fixedLength &&
                        (signature.r.gt(curve.nh) ||
                            signature.r.lte(minimum_size) ||
                            signature.s.lte(minimum_size))
                    ) {
                        signature = curve.sign(digest, secret, "hex", {
                            canonical: true,
                            extraEntropy: counter.toArray("le", 32),
                        });
                        counter = counter.add(new BN("1"));
                    }
                    return {
                        r: signature.r.toString(16).padStart(64, "0"),
                        s: signature.s.toString(16).padStart(64, "0"),
                        v: signature.recoveryParam,
                    };
                }

                function eddsa(request, secret, algorithm = "ed25519") {
                    // used for waves.exchange (that's why the output is base58)
                    const curve = new EDDSA(algorithm);
                    const signature = curve.signModified(request, secret);
                    return binaryToBase58(
                        byteArrayToWordArray(signature.toBytes())
                    );
                }

                /*  ------------------------------------------------------------------------ */

                const totp = (secret) => {
                    const dec2hex = (s) =>
                            (s < 15.5 ? "0" : "") + Math.round(s).toString(16),
                        hex2dec = (s) => parseInt(s, 16),
                        leftpad = (s, p) => (p + s).slice(-p.length); // both s and p are short strings

                    const base32tohex = (base32) => {
                        let base32chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
                        let bits = "";
                        let hex = "";
                        for (let i = 0; i < base32.length; i++) {
                            let val = base32chars.indexOf(
                                base32.charAt(i).toUpperCase()
                            );
                            bits += leftpad(val.toString(2), "00000");
                        }
                        for (let i = 0; i + 4 <= bits.length; i += 4) {
                            let chunk = bits.substr(i, 4);
                            hex = hex + parseInt(chunk, 2).toString(16);
                        }
                        return hex;
                    };

                    const getOTP = (secret) => {
                        secret = secret.replace(" ", ""); // support 2fa-secrets with spaces like "4TDV WOGO" → "4TDVWOGO"
                        let epoch = Math.round(new Date().getTime() / 1000.0);
                        let time = leftpad(
                            dec2hex(Math.floor(epoch / 30)),
                            "0000000000000000"
                        );
                        let hmacRes = hmac(
                            CryptoJS.enc.Hex.parse(time),
                            CryptoJS.enc.Hex.parse(base32tohex(secret)),
                            "sha1",
                            "hex"
                        );
                        let offset = hex2dec(
                            hmacRes.substring(hmacRes.length - 1)
                        );
                        let otp =
                            (hex2dec(hmacRes.substr(offset * 2, 8)) &
                                hex2dec("7fffffff")) +
                            "";
                        otp = otp.substr(otp.length - 6, 6);
                        return otp;
                    };

                    return getOTP(secret);
                };

                /*  ------------------------------------------------------------------------ */

                // source: https://stackoverflow.com/a/18639975/1067003

                function crc32(str, signed = false) {
                    const crcTable =
                        "00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F 63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC 51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E 7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D 806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA 11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D";
                    if (crc32.table === undefined) {
                        crc32.table = crcTable
                            .split(" ")
                            .map((s) => parseInt(s, 16));
                    }
                    let crc = -1;
                    for (let i = 0; i < str.length; i++) {
                        crc =
                            (crc >>> 8) ^
                            crc32.table[(crc ^ str.charCodeAt(i)) & 0xff];
                    }
                    const unsigned = (crc ^ -1) >>> 0;
                    if (signed && unsigned >= 0x80000000) {
                        return unsigned - 0x100000000;
                    } else {
                        return unsigned;
                    }
                }

                /*  ------------------------------------------------------------------------ */

                module.exports = {
                    hash,
                    hmac,
                    jwt,
                    totp,
                    rsa,
                    ecdsa,
                    eddsa,
                    crc32,
                };

                /*  ------------------------------------------------------------------------ */
            },
            {
                "../../static_dependencies/BN/bn.js": 32,
                "../../static_dependencies/crypto-js/crypto-js": 33,
                "./../../static_dependencies/elliptic/lib/elliptic": 34,
                "./../../static_dependencies/node-rsa/NodeRSA": 52,
                "./../errors": 6,
                "./encode": 9,
                "./string": 14,
            },
        ],
        9: [
            function (require, module, exports) {
                "use strict";

                /*  ------------------------------------------------------------------------ */

                const CryptoJS = require("../../static_dependencies/crypto-js/crypto-js");
                const qs = require("../../static_dependencies/qs/index");
                const BN = require("../../static_dependencies/BN/bn");

                /*  ------------------------------------------------------------------------ */

                // global vars for base58 encoding
                const base58Alphabet =
                    "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
                let base58Decoder = null;
                let base58Encoder = null;

                /*  ------------------------------------------------------------------------ */

                module.exports = {
                    json: (data, params = undefined) => JSON.stringify(data),

                    isJsonEncodedObject: (object) =>
                        typeof object === "string" &&
                        object.length >= 2 &&
                        (object[0] === "{" || object[0] === "["),

                    stringToBinary: (string) =>
                        CryptoJS.enc.Latin1.parse(string),
                    stringToBase64: (string) =>
                        CryptoJS.enc.Latin1.parse(string).toString(
                            CryptoJS.enc.Base64
                        ),
                    base64ToBinary: (string) =>
                        CryptoJS.enc.Base64.parse(string),
                    base64ToString: (string) =>
                        CryptoJS.enc.Base64.parse(string).toString(
                            CryptoJS.enc.Utf8
                        ),
                    binaryToBase64: (binary) =>
                        binary.toString(CryptoJS.enc.Base64),
                    base16ToBinary: (string) => CryptoJS.enc.Hex.parse(string),
                    binaryToBase16: (binary) =>
                        binary.toString(CryptoJS.enc.Hex),
                    binaryConcat: (...args) =>
                        args.reduce((a, b) => a.concat(b)),
                    binaryConcatArray: (arr) =>
                        arr.reduce((a, b) => a.concat(b)),

                    urlencode: (object) => qs.stringify(object),
                    urlencodeNested: (object) => qs.stringify(object), // implemented only in python
                    urlencodeWithArrayRepeat: (object) =>
                        qs.stringify(object, { arrayFormat: "repeat" }),
                    rawencode: (object) =>
                        qs.stringify(object, { encode: false }),
                    encode: (x) => x,
                    decode: (x) => x,

                    // Url-safe-base64 without equals signs, with + replaced by - and slashes replaced by underscores

                    urlencodeBase64: (base64string) =>
                        base64string
                            .replace(/[=]+$/, "")
                            .replace(/\+/g, "-")
                            .replace(/\//g, "_"),

                    numberToLE: (n, padding) => {
                        const hexArray = new BN(n).toArray("le", padding);
                        return byteArrayToWordArray(hexArray);
                    },

                    numberToBE: (n, padding) => {
                        const hexArray = new BN(n).toArray("be", padding);
                        return byteArrayToWordArray(hexArray);
                    },

                    base58ToBinary: (string) => {
                        if (!base58Decoder) {
                            base58Decoder = {};
                            base58Encoder = {};
                            for (let i = 0; i < 58; i++) {
                                const c = base58Alphabet[i];
                                const bigNum = new BN(i);
                                base58Decoder[c] = bigNum;
                                base58Encoder[bigNum] = c;
                            }
                        }
                        let result = new BN(0);
                        const base = new BN(58);
                        for (let i = 0; i < string.length; i++) {
                            const character = string[i];
                            result.imul(base);
                            result.iadd(base58Decoder[character]);
                        }
                        return byteArrayToWordArray(result.toArray("be"));
                    },

                    binaryToBase58: (wordArray) => {
                        if (!base58Encoder) {
                            base58Decoder = {};
                            base58Encoder = {};
                            for (let i = 0; i < 58; i++) {
                                const c = base58Alphabet[i];
                                const bigNum = new BN(i);
                                base58Decoder[c] = bigNum;
                                base58Encoder[bigNum] = c;
                            }
                        }
                        const base = new BN(58);
                        // hex is only compatible encoding between cryptojs and BN
                        const hexString = wordArray.toString(CryptoJS.enc.Hex);
                        let result = new BN(hexString, 16);
                        let string = [];
                        while (!result.isZero()) {
                            const { div, mod } = result.divmod(base);
                            result = div;
                            string.push(base58Encoder[mod]);
                        }
                        return string.reverse().join("");
                    },
                };

                function byteArrayToWordArray(ba) {
                    const wa = [];
                    for (let i = 0; i < ba.length; i++) {
                        wa[(i / 4) | 0] |= ba[i] << (24 - 8 * i);
                    }
                    return CryptoJS.lib.WordArray.create(wa, ba.length);
                }

                module.exports["byteArrayToWordArray"] = byteArrayToWordArray;

                /*  ------------------------------------------------------------------------ */
            },
            {
                "../../static_dependencies/BN/bn": 32,
                "../../static_dependencies/crypto-js/crypto-js": 33,
                "../../static_dependencies/qs/index": 68,
            },
        ],
        10: [
            function (require, module, exports) {
                "use strict";

                // ----------------------------------------------------------------------------

                const { isNumber, isDictionary, isArray } = require("./type");

                // ----------------------------------------------------------------------------

                const keys = Object.keys; // eslint-disable-line padding-line-between-statements
                const values = (x) => (!isArray(x) ? Object.values(x) : x); // don't copy arrays if they're already arrays
                const index = (x) => new Set(values(x));
                const extend = (...args) => Object.assign({}, ...args); // NB: side-effect free
                const clone = (x) => (isArray(x) ? Array.from(x) : extend(x)); // clone arrays or objects

                // ----------------------------------------------------------------------------

                module.exports = {
                    keys,
                    values,
                    extend,
                    clone,
                    index,
                    ordered: (x) => x, // a stub to keep assoc keys in order (in JS it does nothing, it's mostly for Python)
                    unique: (x) => Array.from(index(x)),
                    arrayConcat: (a, b) => a.concat(b),

                    // ------------------------------------------------------------------------

                    inArray(needle, haystack) {
                        return haystack.includes(needle);
                    },

                    toArray(object) {
                        return Object.values(object);
                    },

                    isEmpty(object) {
                        if (!object) {
                            return true;
                        }
                        return (
                            (Array.isArray(object)
                                ? object
                                : Object.keys(object)
                            ).length < 1
                        );
                    },

                    // ------------------------------------------------------------------------

                    keysort(x, out = {}) {
                        for (const k of keys(x).sort()) {
                            out[k] = x[k];
                        }

                        return out;
                    },

                    // ------------------------------------------------------------------------

                    /*
            Accepts a map/array of objects and a key name to be used as an index:
            array = [
                { someKey: 'value1', anotherKey: 'anotherValue1' },
                { someKey: 'value2', anotherKey: 'anotherValue2' },
                { someKey: 'value3', anotherKey: 'anotherValue3' },
            ]
            key = 'someKey'

            Returns a map:
            {
                value1: { someKey: 'value1', anotherKey: 'anotherValue1' },
                value2: { someKey: 'value2', anotherKey: 'anotherValue2' },
                value3: { someKey: 'value3', anotherKey: 'anotherValue3' },
            }
        */

                    indexBy(x, k, out = {}) {
                        for (const v of values(x)) {
                            if (k in v) {
                                out[v[k]] = v;
                            }
                        }

                        return out;
                    },

                    // ------------------------------------------------------------------------

                    /*
            Accepts a map/array of objects and a key name to be used as a grouping parameter:
            array = [
                { someKey: 'value1', anotherKey: 'anotherValue1' },
                { someKey: 'value1', anotherKey: 'anotherValue2' },
                { someKey: 'value3', anotherKey: 'anotherValue3' },
            ]
            key = 'someKey'

            Returns a map:
            {
                value1: [
                    { someKey: 'value1', anotherKey: 'anotherValue1' },
                    { someKey: 'value1', anotherKey: 'anotherValue2' },
                ]
                value3: [
                    { someKey: 'value3', anotherKey: 'anotherValue3' }
                ],
            }
        */

                    groupBy(x, k, out = {}) {
                        for (const v of values(x)) {
                            if (k in v) {
                                const p = v[k];
                                out[p] = out[p] || [];
                                out[p].push(v);
                            }
                        }
                        return out;
                    },

                    // ------------------------------------------------------------------------

                    /*
            Accepts a map/array of objects, a key name and a key value to be used as a filter:
            array = [
                { someKey: 'value1', anotherKey: 'anotherValue1' },
                { someKey: 'value2', anotherKey: 'anotherValue2' },
                { someKey: 'value3', anotherKey: 'anotherValue3' },
            ]
            key = 'someKey'
            value = 'value1'

            Returns an array:
            [
                value1: { someKey: 'value1', anotherKey: 'anotherValue1' },
            ]
        */

                    filterBy(x, k, value = undefined, out = []) {
                        for (const v of values(x)) {
                            if (v[k] === value) {
                                out.push(v);
                            }
                        }

                        return out;
                    },

                    // ------------------------------------------------------------------------
                    // NB: MUTATES ARRAY!

                    sortBy: (
                        array,
                        key,
                        descending = false,
                        direction = descending ? -1 : 1
                    ) =>
                        array.sort((a, b) => {
                            if (a[key] < b[key]) {
                                return -direction;
                            } else if (a[key] > b[key]) {
                                return direction;
                            } else {
                                return 0;
                            }
                        }),

                    sortBy2: (
                        array,
                        key1,
                        key2,
                        descending = false,
                        direction = descending ? -1 : 1
                    ) =>
                        array.sort((a, b) => {
                            if (a[key1] < b[key1]) {
                                return -direction;
                            } else if (a[key1] > b[key1]) {
                                return direction;
                            } else {
                                if (a[key2] < b[key2]) {
                                    return -direction;
                                } else if (a[key2] > b[key2]) {
                                    return direction;
                                } else {
                                    return 0;
                                }
                            }
                        }),

                    // ------------------------------------------------------------------------

                    flatten: function flatten(x, out = []) {
                        for (const v of x) {
                            if (isArray(v)) {
                                flatten(v, out);
                            } else {
                                out.push(v);
                            }
                        }

                        return out;
                    },

                    // ------------------------------------------------------------------------

                    pluck: (x, k) =>
                        values(x)
                            .filter((v) => k in v)
                            .map((v) => v[k]),

                    // ------------------------------------------------------------------------

                    omit(x, ...args) {
                        if (!Array.isArray(x)) {
                            const out = clone(x);

                            for (const k of args) {
                                if (isArray(k)) {
                                    // omit (x, ['a', 'b'])
                                    for (const kk of k) {
                                        delete out[kk];
                                    }
                                } else {
                                    delete out[k]; // omit (x, 'a', 'b')
                                }
                            }

                            return out;
                        }

                        return x;
                    },

                    // ------------------------------------------------------------------------

                    sum(...xs) {
                        const ns = xs.filter(isNumber); // leave only numbers
                        return ns.length > 0
                            ? ns.reduce((a, b) => a + b, 0)
                            : undefined;
                    },

                    // ------------------------------------------------------------------------

                    deepExtend: function deepExtend(...xs) {
                        let out = undefined;
                        for (const x of xs) {
                            if (isDictionary(x)) {
                                if (!isDictionary(out)) {
                                    out = {};
                                }
                                for (const k in x) {
                                    // eslint-disable-line guard-for-in
                                    out[k] = deepExtend(out[k], x[k]);
                                }
                            } else {
                                out = x;
                            }
                        }
                        return out;
                    },
                };
            },
            { "./type": 17 },
        ],
        11: [
            function (require, module, exports) {
                "use strict";

                const { ROUND_UP, ROUND_DOWN } = require("./number");
                const { NotSupported } = require("../errors");

                //-------------------------------------------------------------------------
                // converts timeframe to seconds
                const parseTimeframe = (timeframe) => {
                    const amount = timeframe.slice(0, -1);
                    const unit = timeframe.slice(-1);
                    let scale = undefined;

                    if (unit === "y") {
                        scale = 60 * 60 * 24 * 365;
                    } else if (unit === "M") {
                        scale = 60 * 60 * 24 * 30;
                    } else if (unit === "w") {
                        scale = 60 * 60 * 24 * 7;
                    } else if (unit === "d") {
                        scale = 60 * 60 * 24;
                    } else if (unit === "h") {
                        scale = 60 * 60;
                    } else if (unit === "m") {
                        scale = 60;
                    } else if (unit === "s") {
                        scale = 1;
                    } else {
                        throw new NotSupported(
                            "timeframe unit " + unit + " is not supported"
                        );
                    }

                    return amount * scale;
                };

                const roundTimeframe = (
                    timeframe,
                    timestamp,
                    direction = ROUND_DOWN
                ) => {
                    const ms = parseTimeframe(timeframe) * 1000;
                    // Get offset based on timeframe in milliseconds
                    const offset = timestamp % ms;
                    return (
                        timestamp - offset + (direction === ROUND_UP ? ms : 0)
                    );
                };

                // given a sorted arrays of trades (recent last) and a timeframe builds an array of OHLCV candles
                const buildOHLCVC = (
                    trades,
                    timeframe = "1m",
                    since = -Infinity,
                    limit = Infinity
                ) => {
                    const ms = parseTimeframe(timeframe) * 1000;
                    const ohlcvs = [];
                    const [
                        timestamp /* open */,
                        ,
                        high,
                        low,
                        close,
                        volume,
                        count,
                    ] = [0, 1, 2, 3, 4, 5, 6];
                    const oldest = Math.min(trades.length - 1, limit);

                    for (let i = 0; i <= oldest; i++) {
                        const trade = trades[i];
                        if (trade.timestamp < since) {
                            continue;
                        }
                        const openingTime =
                            Math.floor(trade.timestamp / ms) * ms; // shift to the edge of m/h/d (but not M)
                        const candle = ohlcvs.length - 1;

                        if (
                            candle === -1 ||
                            openingTime >= ohlcvs[candle][timestamp] + ms
                        ) {
                            // moved to a new timeframe -> create a new candle from opening trade
                            ohlcvs.push([
                                openingTime, // timestamp
                                trade.price, // O
                                trade.price, // H
                                trade.price, // L
                                trade.price, // C
                                trade.amount, // V
                                1, // count
                            ]);
                        } else {
                            // still processing the same timeframe -> update opening trade
                            ohlcvs[candle][high] = Math.max(
                                ohlcvs[candle][high],
                                trade.price
                            );
                            ohlcvs[candle][low] = Math.min(
                                ohlcvs[candle][low],
                                trade.price
                            );
                            ohlcvs[candle][close] = trade.price;
                            ohlcvs[candle][volume] += trade.amount;
                            ohlcvs[candle][count]++;
                        } // if
                    } // for
                    return ohlcvs;
                };

                const extractParams = (string) => {
                    const re = /{([\w-]+)}/g;
                    const matches = [];
                    let match = re.exec(string);
                    while (match) {
                        matches.push(match[1]);
                        match = re.exec(string);
                    }
                    return matches;
                };

                const implodeParams = (string, params) => {
                    if (!Array.isArray(params)) {
                        const keys = Object.keys(params);
                        for (let i = 0; i < keys.length; i++) {
                            const key = keys[i];
                            if (!Array.isArray(params[key])) {
                                string = string.replace(
                                    "{" + key + "}",
                                    params[key]
                                );
                            }
                        }
                    }
                    return string;
                };

                function vwap(baseVolume, quoteVolume) {
                    return baseVolume !== undefined &&
                        quoteVolume !== undefined &&
                        baseVolume > 0
                        ? quoteVolume / baseVolume
                        : undefined;
                }

                /*  ------------------------------------------------------------------------ */

                module.exports = {
                    aggregate(bidasks) {
                        const result = {};

                        for (let i = 0; i < bidasks.length; i++) {
                            const [price, volume] = bidasks[i];
                            if (volume > 0) {
                                result[price] = (result[price] || 0) + volume;
                            }
                        }

                        return Object.keys(result).map((price) => [
                            parseFloat(price),
                            parseFloat(result[price]),
                        ]);
                    },

                    parseTimeframe,
                    roundTimeframe,
                    buildOHLCVC,
                    ROUND_UP,
                    ROUND_DOWN,

                    implodeParams,
                    extractParams,

                    vwap,
                };

                /*  ------------------------------------------------------------------------ */
            },
            { "../errors": 6, "./number": 12 },
        ],
        12: [
            function (require, module, exports) {
                "use strict";

                /*  ------------------------------------------------------------------------

        NB: initially, I used objects for options passing:

                decimalToPrecision ('123.456', { digits: 2, round: true, afterPoint: true })

        ...but it turns out it's hard to port that across different languages and it is also
           probably has a performance penalty -- while it's a performance critical code! So
           I switched to using named constants instead, as it is actually more readable and
           succinct, and surely doesn't come with any inherent performance downside:

                decimalToPrecision ('123.456', ROUND, 2, DECIMAL_PLACES)                     */

                const ROUND = 0, // rounding mode
                    TRUNCATE = 1,
                    ROUND_UP = 2,
                    ROUND_DOWN = 3;

                const DECIMAL_PLACES = 0, // digits counting mode
                    SIGNIFICANT_DIGITS = 1,
                    TICK_SIZE = 2;

                const NO_PADDING = 0, // zero-padding mode
                    PAD_WITH_ZERO = 1;

                const precisionConstants = {
                    ROUND,
                    TRUNCATE,
                    ROUND_UP,
                    ROUND_DOWN,
                    DECIMAL_PLACES,
                    SIGNIFICANT_DIGITS,
                    TICK_SIZE,
                    NO_PADDING,
                    PAD_WITH_ZERO,
                };

                /*  ------------------------------------------------------------------------ */

                // See https://stackoverflow.com/questions/1685680/how-to-avoid-scientific-notation-for-large-numbers-in-javascript for discussion

                function numberToString(x) {
                    // avoids scientific notation for too large and too small numbers
                    if (x === undefined) return undefined;

                    if (typeof x !== "number") return x.toString();

                    const s = x.toString();
                    if (Math.abs(x) < 1.0) {
                        const n_e = s.split("e-");
                        const n = n_e[0].replace(".", "");
                        const e = parseInt(n_e[1]);
                        const neg = s[0] === "-";
                        if (e) {
                            x =
                                (neg ? "-" : "") +
                                "0." +
                                new Array(e).join("0") +
                                n.substring(neg);
                            return x;
                        }
                    } else {
                        const parts = s.split("e");
                        if (parts[1]) {
                            let e = parseInt(parts[1]);
                            const m = parts[0].split(".");
                            let part = "";
                            if (m[1]) {
                                e -= m[1].length;
                                part = m[1];
                            }
                            return m[0] + part + new Array(e + 1).join("0");
                        }
                    }
                    return s;
                }

                //-----------------------------------------------------------------------------
                // expects non-scientific notation

                const truncate_regExpCache = [],
                    truncate_to_string = (num, precision = 0) => {
                        num = numberToString(num);
                        if (precision > 0) {
                            const re =
                                truncate_regExpCache[precision] ||
                                (truncate_regExpCache[precision] = new RegExp(
                                    "([-]*\\d+\\.\\d{" + precision + "})(\\d)"
                                ));
                            const [, result] = num.toString().match(re) || [
                                null,
                                num,
                            ];
                            return result.toString();
                        }
                        return parseInt(num).toString();
                    },
                    truncate = (num, precision = 0) =>
                        parseFloat(truncate_to_string(num, precision));

                function precisionFromString(str) {
                    // support string formats like '1e-4'
                    if (str.indexOf("e") > -1) {
                        const numStr = str.replace(/\de/, "");
                        return parseInt(numStr) * -1;
                    }
                    // support integer formats (without dot) like '1', '10' etc [Note: bug in decimalToPrecision, so this should not be used atm]
                    // if (str.indexOf ('.') === -1) {
                    //     return str.length * -1
                    // }
                    // default strings like '0.0001'
                    const split = str.replace(/0+$/g, "").split(".");
                    return split.length > 1 ? split[1].length : 0;
                }

                /*  ------------------------------------------------------------------------ */

                const decimalToPrecision = (
                    x,
                    roundingMode,
                    numPrecisionDigits,
                    countingMode = DECIMAL_PLACES,
                    paddingMode = NO_PADDING
                ) => {
                    if (countingMode === TICK_SIZE) {
                        if (numPrecisionDigits <= 0) {
                            throw new Error(
                                "TICK_SIZE cant be used with negative or zero numPrecisionDigits"
                            );
                        }
                    }

                    if (numPrecisionDigits < 0) {
                        const toNearest = Math.pow(10, -numPrecisionDigits);
                        if (roundingMode === ROUND) {
                            return (
                                toNearest *
                                decimalToPrecision(
                                    x / toNearest,
                                    roundingMode,
                                    0,
                                    countingMode,
                                    paddingMode
                                )
                            ).toString();
                        }
                        if (roundingMode === TRUNCATE) {
                            return (x - (x % toNearest)).toString();
                        }
                    }

                    /*  handle tick size */
                    if (countingMode === TICK_SIZE) {
                        const precisionDigitsString = decimalToPrecision(
                            numPrecisionDigits,
                            ROUND,
                            22,
                            DECIMAL_PLACES,
                            NO_PADDING
                        );
                        const newNumPrecisionDigits = precisionFromString(
                            precisionDigitsString
                        );
                        let missing = x % numPrecisionDigits;
                        // See: https://github.com/ccxt/ccxt/pull/6486
                        missing = Number(
                            decimalToPrecision(
                                missing,
                                ROUND,
                                8,
                                DECIMAL_PLACES,
                                NO_PADDING
                            )
                        );
                        const fpError = decimalToPrecision(
                            missing / numPrecisionDigits,
                            ROUND,
                            Math.max(newNumPrecisionDigits, 8),
                            DECIMAL_PLACES,
                            NO_PADDING
                        );
                        if (precisionFromString(fpError) !== 0) {
                            if (roundingMode === ROUND) {
                                if (x > 0) {
                                    if (missing >= numPrecisionDigits / 2) {
                                        x = x - missing + numPrecisionDigits;
                                    } else {
                                        x = x - missing;
                                    }
                                } else {
                                    if (missing >= numPrecisionDigits / 2) {
                                        x = Number(x) - missing;
                                    } else {
                                        x =
                                            Number(x) -
                                            missing -
                                            numPrecisionDigits;
                                    }
                                }
                            } else if (roundingMode === TRUNCATE) {
                                x = x - missing;
                            }
                        }
                        return decimalToPrecision(
                            x,
                            ROUND,
                            newNumPrecisionDigits,
                            DECIMAL_PLACES,
                            paddingMode
                        );
                    }

                    /*  Convert to a string (if needed), skip leading minus sign (if any)   */

                    const str = numberToString(x),
                        isNegative = str[0] === "-",
                        strStart = isNegative ? 1 : 0,
                        strEnd = str.length;

                    /*  Find the dot position in the source buffer   */

                    for (var strDot = 0; strDot < strEnd; strDot++)
                        if (str[strDot] === ".") break;

                    const hasDot = strDot < str.length;

                    /*  Char code constants         */

                    const MINUS = 45,
                        DOT = 46,
                        ZERO = 48,
                        ONE = ZERO + 1,
                        FIVE = ZERO + 5,
                        NINE = ZERO + 9;

                    /*  For -123.4567 the `chars` array will hold 01234567 (leading zero is reserved for rounding cases when 099 → 100)    */

                    const chars = new Uint8Array(
                        strEnd - strStart + (hasDot ? 0 : 1)
                    );
                    chars[0] = ZERO;

                    /*  Validate & copy digits, determine certain locations in the resulting buffer  */

                    let afterDot = chars.length,
                        digitsStart = -1, // significant digits
                        digitsEnd = -1;

                    for (var i = 1, j = strStart; j < strEnd; j++, i++) {
                        const c = str.charCodeAt(j);

                        if (c === DOT) {
                            afterDot = i--;
                        } else if (c < ZERO || c > NINE) {
                            throw new Error(
                                `${str}: invalid number (contains an illegal character '${
                                    str[i - 1]
                                }')`
                            );
                        } else {
                            chars[i] = c;
                            if (c !== ZERO && digitsStart < 0) digitsStart = i;
                        }
                    }

                    if (digitsStart < 0) digitsStart = 1;

                    /*  Determine the range to cut  */

                    let precisionStart =
                            countingMode === DECIMAL_PLACES
                                ? afterDot // 0.(0)001234567
                                : digitsStart, // 0.00(1)234567
                        precisionEnd = precisionStart + numPrecisionDigits;

                    /*  Reset the last significant digit index, as it will change during the rounding/truncation.   */

                    digitsEnd = -1;

                    /*  Perform rounding/truncation per digit, from digitsEnd to digitsStart, by using the following
        algorithm (rounding 999 → 1000, as an example):

            step  =          i=3      i=2      i=1      i=0

            chars =         0999     0999     0900     1000
            memo  =         ---0     --1-     -1--     0---                     */

                    let allZeros = true;
                    let signNeeded = isNegative;

                    for (let i = chars.length - 1, memo = 0; i >= 0; i--) {
                        let c = chars[i];

                        if (i !== 0) {
                            c += memo;

                            if (i >= precisionStart + numPrecisionDigits) {
                                const ceil =
                                    roundingMode === ROUND &&
                                    c >= FIVE &&
                                    !(c === FIVE && memo); // prevents rounding of 1.45 to 2

                                c = ceil ? NINE + 1 : ZERO;
                            }
                            if (c > NINE) {
                                c = ZERO;
                                memo = 1;
                            } else memo = 0;
                        } else if (memo) c = ONE; // leading extra digit (0900 → 1000)

                        chars[i] = c;

                        if (c !== ZERO) {
                            allZeros = false;
                            digitsStart = i;
                            digitsEnd = digitsEnd < 0 ? i + 1 : digitsEnd;
                        }
                    }

                    /*  Update the precision range, as `digitsStart` may have changed... & the need for a negative sign if it is only 0    */

                    if (countingMode === SIGNIFICANT_DIGITS) {
                        precisionStart = digitsStart;
                        precisionEnd = precisionStart + numPrecisionDigits;
                    }

                    if (allZeros) {
                        signNeeded = false;
                    }

                    /*  Determine the input character range     */

                    const readStart =
                            digitsStart >= afterDot || allZeros
                                ? afterDot - 1
                                : digitsStart, // 0.000(1)234  ----> (0).0001234
                        readEnd = digitsEnd < afterDot ? afterDot : digitsEnd; // 12(3)000     ----> 123000( )

                    /*  Compute various sub-ranges       */

                    const nSign = signNeeded ? 1 : 0, // (-)123.456
                        nBeforeDot = nSign + (afterDot - readStart), // (-123).456
                        nAfterDot = Math.max(readEnd - afterDot, 0), // -123.(456)
                        actualLength = readEnd - readStart, // -(123.456)
                        desiredLength =
                            paddingMode === NO_PADDING
                                ? actualLength // -(123.456)
                                : precisionEnd - readStart, // -(123.456    )
                        pad = Math.max(desiredLength - actualLength, 0), //  -123.456(    )
                        padStart = nBeforeDot + 1 + nAfterDot, //  -123.456( )
                        padEnd = padStart + pad, //  -123.456     ( )
                        isInteger = nAfterDot + pad === 0; //  -123

                    /*  Fill the output buffer with characters    */

                    const out = new Uint8Array(
                        nBeforeDot + (isInteger ? 0 : 1) + nAfterDot + pad
                    );
                    // ------------------------------------------------------------------------------------------ // ---------------------
                    if (signNeeded) out[0] = MINUS; // -     minus sign
                    for (i = nSign, j = readStart; i < nBeforeDot; i++, j++)
                        out[i] = chars[j]; // 123   before dot
                    if (!isInteger) out[nBeforeDot] = DOT; // .     dot
                    for (
                        i = nBeforeDot + 1, j = afterDot;
                        i < padStart;
                        i++, j++
                    )
                        out[i] = chars[j]; // 456   after dot
                    for (i = padStart; i < padEnd; i++) out[i] = ZERO; // 000   padding

                    /*  Build a string from the output buffer     */

                    return String.fromCharCode(...out);
                };

                function omitZero(stringNumber) {
                    if (stringNumber === undefined || stringNumber === "") {
                        return undefined;
                    }
                    if (parseFloat(stringNumber) === 0) {
                        return undefined;
                    }
                    return stringNumber;
                }

                /*  ------------------------------------------------------------------------ */

                module.exports = {
                    numberToString,
                    precisionFromString,
                    decimalToPrecision,
                    truncate_to_string,
                    truncate,
                    omitZero,
                    precisionConstants,
                    ROUND,
                    TRUNCATE,
                    ROUND_UP,
                    ROUND_DOWN,
                    DECIMAL_PLACES,
                    SIGNIFICANT_DIGITS,
                    TICK_SIZE,
                    NO_PADDING,
                    PAD_WITH_ZERO,
                };

                /*  ------------------------------------------------------------------------ */
            },
            {},
        ],
        13: [
            function (require, module, exports) {
                (function (process) {
                    (function () {
                        "use strict";

                        // ----------------------------------------------------------------------------
                        // There's been a lot of messing with this code...
                        // The problem is to satisfy the following requirements:
                        // - properly detect isNode == true on server side and isNode == false in the browser (on client side)
                        // - make sure create-react-app, react-starter-kit and other react frameworks work
                        // - make sure it does not break the browserified version (when linked into a html from a cdn)
                        // - make sure it does not break the webpacking and babel-transpiled scripts
                        // - make sure it works in Electron
                        // - make sure it works with Angular.js
                        // - make sure it does not break other possible usage scenarios

                        const isBrowser = typeof window !== "undefined";

                        const isElectron =
                            typeof process !== "undefined" &&
                            typeof process.versions !== "undefined" &&
                            typeof process.versions.electron !== "undefined";

                        const isWebWorker =
                            typeof WorkerGlobalScope !== "undefined" &&
                            self instanceof WorkerGlobalScope;

                        const isWindows =
                            typeof process !== "undefined" &&
                            process.platform === "win32";

                        const isNode = !(isBrowser || isWebWorker);

                        const defaultFetch = isNode
                            ? require("../../static_dependencies/fetch-ponyfill/fetch-node")()
                                  .fetch
                            : fetch;

                        // ----------------------------------------------------------------------------

                        module.exports = {
                            isBrowser,
                            isElectron,
                            isWebWorker,
                            isNode,
                            isWindows,
                            defaultFetch,
                        };
                    }.call(this));
                }.call(this, require("_process")));
            },
            {
                "../../static_dependencies/fetch-ponyfill/fetch-node": 50,
                _process: 102,
            },
        ],
        14: [
            function (require, module, exports) {
                "use strict";

                const uuid = (a) =>
                    a
                        ? (a ^ ((Math.random() * 16) >> (a / 4))).toString(16)
                        : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(
                              /[018]/g,
                              uuid
                          );
                const uuid16 = (a) =>
                    a
                        ? (a ^ ((Math.random() * 16) >> (a / 4))).toString(16)
                        : ([1e5] + 1e2 + 4e2 + 8e3).replace(/[018]/g, uuid16);
                const uuid22 = (a) =>
                    a
                        ? (a ^ ((Math.random() * 16) >> (a / 4))).toString(16)
                        : ([1e7] + 1e3 + 4e3 + 8e5).replace(/[018]/g, uuid22);

                module.exports = {
                    uuid,
                    uuid16,
                    uuid22,
                    // unCamelCase has to work with the following edge cases
                    //
                    //     parseOHLCVs               > parse_ohlcvs
                    //     safeString2               > safe_string_2
                    //     safeStringN               > safe_string_n
                    //     convertOHLCVToTradingView > convert_ohlcv_to_trading_view
                    //     fetchL2OrderBook          > fetch_l2_order_book
                    //     stringToBase64            > string_to_base64
                    //     base64ToString            > base64_to_string
                    //     parseHTTPResponse         > parse_http_response
                    //     hasFetchOHLCV             > has_fetch_ohlcv
                    //
                    unCamelCase: (s) =>
                        s.match(/[A-Z]/)
                            ? s
                                  .replace(
                                      /[a-z0-9][A-Z]/g,
                                      (x) => x[0] + "_" + x[1]
                                  )
                                  .replace(
                                      /[A-Z0-9][A-Z0-9][a-z][^$]/g,
                                      (x) => x[0] + "_" + x[1] + x[2] + x[3]
                                  )
                                  .replace(
                                      /[a-z][0-9]$/g,
                                      (x) => x[0] + "_" + x[1]
                                  )
                                  .toLowerCase()
                            : s,
                    capitalize: (s) =>
                        s.length ? s.charAt(0).toUpperCase() + s.slice(1) : s,
                    strip: (s) => s.replace(/^\s+|\s+$/g, ""),
                };
            },
            {},
        ],
        15: [
            function (require, module, exports) {
                "use strict";

                /*  ------------------------------------------------------------------------ */

                const { now, sleep } = require("./time");

                /*  ------------------------------------------------------------------------ */

                class Throttle {
                    constructor(config) {
                        this.config = {
                            refillRate: 1.0,
                            delay: 0.001,
                            capacity: 1.0,
                            maxCapacity: 2000,
                            tokens: 0,
                            cost: 1.0,
                        };
                        Object.assign(this.config, config);
                        this.queue = [];
                        this.running = false;
                    }

                    async loop() {
                        let lastTimestamp = now();
                        while (this.running) {
                            const { resolver, cost } = this.queue[0];
                            if (this.config["tokens"] >= 0) {
                                this.config["tokens"] -= cost;
                                resolver();
                                this.queue.shift();
                                // contextswitch
                                await Promise.resolve();
                                if (this.queue.length === 0) {
                                    this.running = false;
                                }
                            } else {
                                await sleep(this.config["delay"] * 1000);
                                const current = now();
                                const elapsed = current - lastTimestamp;
                                lastTimestamp = current;
                                const tokens =
                                    this.config["tokens"] +
                                    this.config["refillRate"] * elapsed;
                                this.config["tokens"] = Math.min(
                                    tokens,
                                    this.config["capacity"]
                                );
                            }
                        }
                    }
                }

                function throttle(config) {
                    function inner(cost = undefined) {
                        let resolver;
                        const promise = new Promise((resolve, reject) => {
                            resolver = resolve;
                        });
                        if (this.queue.length > this.config["maxCapacity"]) {
                            throw new Error(
                                "throttle queue is over maxCapacity (" +
                                    this.config["maxCapacity"].toString() +
                                    "), see https://github.com/ccxt/ccxt/issues/11645#issuecomment-1195695526"
                            );
                        }
                        cost = cost === undefined ? this.config["cost"] : cost;
                        this.queue.push({ resolver, cost });
                        if (!this.running) {
                            this.running = true;
                            this.loop();
                        }
                        return promise;
                    }
                    const instance = new Throttle(config);
                    const bound = inner.bind(instance);
                    // useful for inspecting the tokenBucket
                    bound.config = instance.config;
                    bound.queue = instance.queue;
                    return bound;
                }

                module.exports = {
                    throttle,
                };

                // ----------------------------------------
            },
            { "./time": 16 },
        ],
        16: [
            function (require, module, exports) {
                "use strict";

                const now = Date.now; // TODO: figure out how to utilize performance.now () properly – it's not as easy as it does not return a unix timestamp...
                const microseconds = () => now() * 1000; // TODO: utilize performance.now for that purpose
                const milliseconds = now;
                const seconds = () => Math.floor(now() / 1000);
                const uuidv1 = () => {
                    const biasSeconds = 12219292800; // seconds from 15th Oct 1572 to Jan 1st 1970
                    const bias = biasSeconds * 10000000; // in hundreds of nanoseconds
                    const time = microseconds() * 10 + bias;
                    const timeHex = time.toString(16);
                    const arranged =
                        timeHex.slice(7, 15) +
                        timeHex.slice(3, 7) +
                        "1" +
                        timeHex.slice(0, 3);
                    // these should be random, but we're not making more than 10 requests per microsecond so who cares
                    const clockId = "9696"; // a 14 bit number
                    const macAddress = "ff".repeat(6);
                    return arranged + clockId + macAddress;
                };

                const setTimeout_original = setTimeout;
                const setTimeout_safe = (
                    done,
                    ms,
                    setTimeout = setTimeout_original /* overrideable for mocking purposes */,
                    targetTime = now() + ms
                ) => {
                    // avoid MAX_INT issue https://github.com/ccxt/ccxt/issues/10761
                    if (ms >= 2147483647) {
                        throw new Error(
                            "setTimeout() function was called with unrealistic value of " +
                                ms.toString()
                        );
                    }
                    // The built-in setTimeout function can fire its callback earlier than specified, so we
                    // need to ensure that it does not happen: sleep recursively until `targetTime` is reached...
                    let clearInnerTimeout = () => {};
                    let active = true;
                    const id = setTimeout(() => {
                        active = true;
                        const rest = targetTime - now();
                        if (rest > 0) {
                            clearInnerTimeout = setTimeout_safe(
                                done,
                                rest,
                                setTimeout,
                                targetTime
                            ); // try sleep more
                        } else {
                            done();
                        }
                    }, ms);
                    return function clear() {
                        if (active) {
                            active = false; // dunno if IDs are unique on various platforms, so it's better to rely on this flag to exclude the possible cancellation of the wrong timer (if called after completion)
                            clearTimeout(id);
                        }
                        clearInnerTimeout();
                    };
                };

                class TimedOut extends Error {
                    constructor() {
                        const message = "timed out";
                        super(message);
                        this.constructor = TimedOut;
                        this.__proto__ = TimedOut.prototype;
                        this.message = message;
                    }
                }

                const iso8601 = (timestamp) => {
                    let _timestampNumber = undefined;
                    if (typeof timestamp === "number") {
                        _timestampNumber = Math.floor(timestamp);
                    } else {
                        _timestampNumber = parseInt(timestamp, 10);
                    }
                    // undefined, null and lots of nasty non-numeric values yield NaN
                    if (
                        Number.isNaN(_timestampNumber) ||
                        _timestampNumber < 0
                    ) {
                        return undefined;
                    }
                    // last line of defence
                    try {
                        return new Date(_timestampNumber).toISOString();
                    } catch (e) {
                        return undefined;
                    }
                };

                const parse8601 = (x) => {
                    if (typeof x !== "string" || !x) {
                        return undefined;
                    }
                    if (x.match(/^[0-9]+$/)) {
                        // a valid number in a string, not a date.
                        return undefined;
                    }
                    if (x.indexOf("-") < 0 || x.indexOf(":") < 0) {
                        // no date can be without a dash and a colon
                        return undefined;
                    }
                    // last line of defence
                    try {
                        const candidate = Date.parse(
                            x.indexOf("+") >= 0 || x.slice(-1) === "Z"
                                ? x
                                : (x + "Z").replace(/\s(\d\d):/, "T$1:")
                        );
                        if (Number.isNaN(candidate)) {
                            return undefined;
                        }
                        return candidate;
                    } catch (e) {
                        return undefined;
                    }
                };

                const parseDate = (x) => {
                    if (typeof x !== "string" || !x) {
                        return undefined;
                    }
                    if (x.indexOf("GMT") >= 0) {
                        try {
                            return Date.parse(x);
                        } catch (e) {
                            return undefined;
                        }
                    }
                    return parse8601(x);
                };

                const rfc2616 = (timestamp = undefined) =>
                    new Date(timestamp).toUTCString();

                const mdy = (timestamp, infix = "-") => {
                    infix = infix || "";
                    const date = new Date(timestamp);
                    const Y = date.getUTCFullYear().toString();
                    let m = date.getUTCMonth() + 1;
                    let d = date.getUTCDate();
                    m = m < 10 ? "0" + m : m.toString();
                    d = d < 10 ? "0" + d : d.toString();
                    return m + infix + d + infix + Y;
                };

                const ymd = (timestamp, infix, fullYear = true) => {
                    infix = infix || "";
                    const date = new Date(timestamp);
                    const intYear = date.getUTCFullYear();
                    const year = fullYear ? intYear : intYear - 2000;
                    const Y = year.toString();
                    let m = date.getUTCMonth() + 1;
                    let d = date.getUTCDate();
                    m = m < 10 ? "0" + m : m.toString();
                    d = d < 10 ? "0" + d : d.toString();
                    return Y + infix + m + infix + d;
                };

                const yymmdd = (timestamp, infix = "") =>
                    ymd(timestamp, infix, false);
                const yyyymmdd = (timestamp, infix = "-") =>
                    ymd(timestamp, infix, true);

                const ymdhms = (timestamp, infix = " ") => {
                    const date = new Date(timestamp);
                    const Y = date.getUTCFullYear();
                    let m = date.getUTCMonth() + 1;
                    let d = date.getUTCDate();
                    let H = date.getUTCHours();
                    let M = date.getUTCMinutes();
                    let S = date.getUTCSeconds();
                    m = m < 10 ? "0" + m : m;
                    d = d < 10 ? "0" + d : d;
                    H = H < 10 ? "0" + H : H;
                    M = M < 10 ? "0" + M : M;
                    S = S < 10 ? "0" + S : S;
                    return (
                        Y + "-" + m + "-" + d + infix + H + ":" + M + ":" + S
                    );
                };

                module.exports = {
                    now,
                    microseconds,
                    milliseconds,
                    seconds,
                    iso8601,
                    parse8601,
                    rfc2616,
                    uuidv1,
                    parseDate,
                    mdy,
                    ymd,
                    yymmdd,
                    yyyymmdd,
                    ymdhms,
                    setTimeout_safe,
                    sleep: (ms) =>
                        new Promise((resolve) => setTimeout_safe(resolve, ms)),
                    TimedOut,
                    timeout: async (ms, promise) => {
                        let clear = () => {};
                        const expires = new Promise(
                            (resolve) => (clear = setTimeout_safe(resolve, ms))
                        );

                        try {
                            return await Promise.race([
                                promise,
                                expires.then(() => {
                                    throw new TimedOut();
                                }),
                            ]);
                        } finally {
                            clear(); // fixes https://github.com/ccxt/ccxt/issues/749
                        }
                    },
                };
            },
            {},
        ],
        17: [
            function (require, module, exports) {
                "use strict";

                /*  ------------------------------------------------------------------------ */

                const isNumber = Number.isFinite,
                    isInteger = Number.isInteger,
                    isArray = Array.isArray,
                    hasProps = (o) => o !== undefined && o !== null,
                    isString = (s) => typeof s === "string",
                    isObject = (o) => o !== null && typeof o === "object",
                    isRegExp = (o) => o instanceof RegExp,
                    isDictionary = (o) =>
                        isObject(o) &&
                        Object.getPrototypeOf(o) === Object.prototype &&
                        !isArray(o) &&
                        !isRegExp(o),
                    isStringCoercible = (x) =>
                        (hasProps(x) && x.toString) || isNumber(x);

                /*  .............................................   */

                const prop = (o, k) =>
                        isObject(o) && o[k] !== "" && o[k] !== null
                            ? o[k]
                            : undefined,
                    prop2 = (o, k1, k2) =>
                        !isObject(o)
                            ? undefined
                            : o[k1] !== undefined &&
                              o[k1] !== "" &&
                              o[k1] !== null
                            ? o[k1]
                            : o[k2] !== "" && o[k2] !== null
                            ? o[k2]
                            : undefined,
                    getValueFromKeysInArray = (object, array) =>
                        object[
                            array.find((k) => prop(object, k) !== undefined)
                        ];

                /*  .............................................   */

                const asFloat = (x) =>
                        isNumber(x) || (isString(x) && x.length !== 0)
                            ? parseFloat(x)
                            : NaN,
                    asInteger = (x) =>
                        isNumber(x) || (isString(x) && x.length !== 0)
                            ? Math.trunc(Number(x))
                            : NaN;

                /*  .............................................   */

                module.exports = {
                    isNumber,
                    isInteger,
                    isArray,
                    isObject,
                    isString,
                    isStringCoercible,
                    isDictionary,

                    hasProps,
                    prop,

                    asFloat,
                    asInteger,

                    safeFloat: (o, k, $default, n = asFloat(prop(o, k))) =>
                        isNumber(n) ? n : $default,
                    safeInteger: (o, k, $default, n = asInteger(prop(o, k))) =>
                        isNumber(n) ? n : $default,
                    safeIntegerProduct: (
                        o,
                        k,
                        $factor,
                        $default,
                        n = asInteger(prop(o, k))
                    ) => (isNumber(n) ? parseInt(n * $factor) : $default),
                    safeTimestamp: (o, k, $default, n = asFloat(prop(o, k))) =>
                        isNumber(n) ? parseInt(n * 1000) : $default,
                    safeValue: (o, k, $default, x = prop(o, k)) =>
                        hasProps(x) ? x : $default,
                    safeString: (o, k, $default, x = prop(o, k)) =>
                        isStringCoercible(x) ? String(x) : $default,
                    safeStringLower: (o, k, $default, x = prop(o, k)) =>
                        isStringCoercible(x)
                            ? String(x).toLowerCase()
                            : $default
                            ? $default.toLowerCase()
                            : $default,
                    safeStringUpper: (o, k, $default, x = prop(o, k)) =>
                        isStringCoercible(x)
                            ? String(x).toUpperCase()
                            : $default
                            ? $default.toUpperCase()
                            : $default,

                    // not using safeFloats with an array argument as we're trying to save some cycles here
                    // we're not using safeFloat3 either because those cases are too rare to deserve their own optimization

                    safeFloat2: (
                        o,
                        k1,
                        k2,
                        $default,
                        n = asFloat(prop2(o, k1, k2))
                    ) => (isNumber(n) ? n : $default),
                    safeInteger2: (
                        o,
                        k1,
                        k2,
                        $default,
                        n = asInteger(prop2(o, k1, k2))
                    ) => (isNumber(n) ? n : $default),
                    safeIntegerProduct2: (
                        o,
                        k1,
                        k2,
                        $factor,
                        $default,
                        n = asInteger(prop2(o, k1, k2))
                    ) => (isNumber(n) ? parseInt(n * $factor) : $default),
                    safeTimestamp2: (
                        o,
                        k1,
                        k2,
                        $default,
                        n = asFloat(prop2(o, k1, k2))
                    ) => (isNumber(n) ? parseInt(n * 1000) : $default),
                    safeValue2: (o, k1, k2, $default, x = prop2(o, k1, k2)) =>
                        hasProps(x) ? x : $default,
                    safeString2: (o, k1, k2, $default, x = prop2(o, k1, k2)) =>
                        isStringCoercible(x) ? String(x) : $default,
                    safeStringLower2: (
                        o,
                        k1,
                        k2,
                        $default,
                        x = prop2(o, k1, k2)
                    ) =>
                        isStringCoercible(x)
                            ? String(x).toLowerCase()
                            : $default
                            ? $default.toLowerCase()
                            : $default,
                    safeStringUpper2: (
                        o,
                        k1,
                        k2,
                        $default,
                        x = prop2(o, k1, k2)
                    ) =>
                        isStringCoercible(x)
                            ? String(x).toUpperCase()
                            : $default
                            ? $default.toUpperCase()
                            : $default,

                    // safeMethodN
                    safeFloatN: (
                        o,
                        k,
                        $default,
                        n = asFloat(getValueFromKeysInArray(o, k))
                    ) => (isNumber(n) ? n : $default),
                    safeIntegerN: (
                        o,
                        k,
                        $default,
                        n = asInteger(getValueFromKeysInArray(o, k))
                    ) => (isNumber(n) ? n : $default),
                    safeIntegerProductN: (
                        o,
                        k,
                        $factor,
                        $default,
                        n = asInteger(getValueFromKeysInArray(o, k))
                    ) => (isNumber(n) ? parseInt(n * $factor) : $default),
                    safeTimestampN: (
                        o,
                        k,
                        $default,
                        n = asFloat(getValueFromKeysInArray(o, k))
                    ) => (isNumber(n) ? parseInt(n * 1000) : $default),
                    safeValueN: (
                        o,
                        k,
                        $default,
                        x = getValueFromKeysInArray(o, k)
                    ) => (hasProps(x) ? x : $default),
                    safeStringN: (
                        o,
                        k,
                        $default,
                        x = getValueFromKeysInArray(o, k)
                    ) => (isStringCoercible(x) ? String(x) : $default),
                    safeStringLowerN: (
                        o,
                        k,
                        $default,
                        x = getValueFromKeysInArray(o, k)
                    ) =>
                        isStringCoercible(x)
                            ? String(x).toLowerCase()
                            : $default
                            ? $default.toLowerCase()
                            : $default,
                    safeStringUpperN: (
                        o,
                        k,
                        $default,
                        x = getValueFromKeysInArray(o, k)
                    ) =>
                        isStringCoercible(x)
                            ? String(x).toUpperCase()
                            : $default
                            ? $default.toUpperCase()
                            : $default,
                };

                /*  ------------------------------------------------------------------------ */
            },
            {},
        ],
        18: [
            function (require, module, exports) {
                "use strict";

                //  ---------------------------------------------------------------------------

                const Exchange = require("./base/Exchange");
                const {
                    ExchangeError,
                    ArgumentsRequired,
                    ExchangeNotAvailable,
                    InsufficientFunds,
                    OrderNotFound,
                    InvalidOrder,
                    DDoSProtection,
                    InvalidNonce,
                    AuthenticationError,
                    RateLimitExceeded,
                    PermissionDenied,
                    NotSupported,
                    BadRequest,
                    BadSymbol,
                    AccountSuspended,
                    OrderImmediatelyFillable,
                    OnMaintenance,
                    BadResponse,
                    RequestTimeout,
                    OrderNotFillable,
                    MarginModeAlreadySet,
                } = require("./base/errors");
                const {
                    TRUNCATE,
                    DECIMAL_PLACES,
                } = require("./base/functions/number");
                const Precise = require("./base/Precise");

                //  ---------------------------------------------------------------------------

                module.exports = class binance extends Exchange {
                    describe() {
                        return this.deepExtend(super.describe(), {
                            id: "binance",
                            name: "Binance",
                            countries: ["JP", "MT"], // Japan, Malta
                            rateLimit: 50,
                            certified: true,
                            pro: true,
                            // new metainfo interface
                            has: {
                                CORS: undefined,
                                spot: true,
                                margin: true,
                                swap: true,
                                future: true,
                                option: undefined,
                                addMargin: true,
                                borrowMargin: true,
                                cancelAllOrders: true,
                                cancelOrder: true,
                                cancelOrders: undefined,
                                createDepositAddress: false,
                                createOrder: true,
                                createReduceOnlyOrder: true,
                                createStopLimitOrder: true,
                                createStopMarketOrder: false,
                                createStopOrder: true,
                                editOrder: true,
                                fetchAccounts: undefined,
                                fetchBalance: true,
                                fetchBidsAsks: true,
                                fetchBorrowInterest: true,
                                fetchBorrowRate: true,
                                fetchBorrowRateHistories: false,
                                fetchBorrowRateHistory: true,
                                fetchBorrowRates: false,
                                fetchBorrowRatesPerSymbol: false,
                                fetchCanceledOrders: false,
                                fetchClosedOrder: false,
                                fetchClosedOrders: "emulated",
                                fetchCurrencies: true,
                                fetchDeposit: false,
                                fetchDepositAddress: true,
                                fetchDepositAddresses: false,
                                fetchDepositAddressesByNetwork: false,
                                fetchDeposits: true,
                                fetchDepositWithdrawFee: "emulated",
                                fetchDepositWithdrawFees: true,
                                fetchFundingHistory: true,
                                fetchFundingRate: true,
                                fetchFundingRateHistory: true,
                                fetchFundingRates: true,
                                fetchIndexOHLCV: true,
                                fetchL3OrderBook: false,
                                fetchLedger: undefined,
                                fetchLeverage: false,
                                fetchLeverageTiers: true,
                                fetchMarketLeverageTiers: "emulated",
                                fetchMarkets: true,
                                fetchMarkOHLCV: true,
                                fetchMyTrades: true,
                                fetchOHLCV: true,
                                fetchOpenInterestHistory: true,
                                fetchOpenOrder: false,
                                fetchOpenOrders: true,
                                fetchOrder: true,
                                fetchOrderBook: true,
                                fetchOrderBooks: false,
                                fetchOrders: true,
                                fetchOrderTrades: true,
                                fetchPosition: undefined,
                                fetchPositions: true,
                                fetchPositionsRisk: true,
                                fetchPremiumIndexOHLCV: false,
                                fetchStatus: true,
                                fetchTicker: true,
                                fetchTickers: true,
                                fetchTime: true,
                                fetchTrades: true,
                                fetchTradingFee: true,
                                fetchTradingFees: true,
                                fetchTradingLimits: undefined,
                                fetchTransactionFee: undefined,
                                fetchTransactionFees: true,
                                fetchTransactions: false,
                                fetchTransfers: true,
                                fetchWithdrawal: false,
                                fetchWithdrawals: true,
                                fetchWithdrawalWhitelist: false,
                                reduceMargin: true,
                                repayMargin: true,
                                setLeverage: true,
                                setMargin: false,
                                setMarginMode: true,
                                setPositionMode: true,
                                signIn: false,
                                transfer: true,
                                withdraw: true,
                            },
                            timeframes: {
                                "1s": "1s", // spot only for now
                                "1m": "1m",
                                "3m": "3m",
                                "5m": "5m",
                                "15m": "15m",
                                "30m": "30m",
                                "1h": "1h",
                                "2h": "2h",
                                "4h": "4h",
                                "6h": "6h",
                                "8h": "8h",
                                "12h": "12h",
                                "1d": "1d",
                                "3d": "3d",
                                "1w": "1w",
                                "1M": "1M",
                            },
                            urls: {
                                logo: "https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg",
                                test: {
                                    dapiPublic:
                                        "https://testnet.binancefuture.com/dapi/v1",
                                    dapiPrivate:
                                        "https://testnet.binancefuture.com/dapi/v1",
                                    eapiPublic:
                                        "https://testnet.binanceops.com/eapi/v1",
                                    eapiPrivate:
                                        "https://testnet.binanceops.com/eapi/v1",
                                    fapiPublic:
                                        "https://testnet.binancefuture.com/fapi/v1",
                                    fapiPrivate:
                                        "https://testnet.binancefuture.com/fapi/v1",
                                    fapiPrivateV2:
                                        "https://testnet.binancefuture.com/fapi/v2",
                                    public: "https://testnet.binance.vision/api/v3",
                                    private:
                                        "https://testnet.binance.vision/api/v3",
                                    v1: "https://testnet.binance.vision/api/v1",
                                },
                                api: {
                                    wapi: "https://api.binance.com/wapi/v3",
                                    sapi: "https://api.binance.com/sapi/v1",
                                    sapiV2: "https://api.binance.com/sapi/v2",
                                    sapiV3: "https://api.binance.com/sapi/v3",
                                    dapiPublic:
                                        "https://dapi.binance.com/dapi/v1",
                                    dapiPrivate:
                                        "https://dapi.binance.com/dapi/v1",
                                    eapiPublic:
                                        "https://eapi.binance.com/eapi/v1",
                                    eapiPrivate:
                                        "https://eapi.binance.com/eapi/v1",
                                    dapiPrivateV2:
                                        "https://dapi.binance.com/dapi/v2",
                                    dapiData:
                                        "https://dapi.binance.com/futures/data",
                                    fapiPublic:
                                        "https://fapi.binance.com/fapi/v1",
                                    fapiPrivate:
                                        "https://fapi.binance.com/fapi/v1",
                                    fapiData:
                                        "https://fapi.binance.com/futures/data",
                                    fapiPrivateV2:
                                        "https://fapi.binance.com/fapi/v2",
                                    public: "https://api.binance.com/api/v3",
                                    private: "https://api.binance.com/api/v3",
                                    v1: "https://api.binance.com/api/v1",
                                },
                                www: "https://www.binance.com",
                                referral: {
                                    url: "https://accounts.binance.com/en/register?ref=D7YA7CLY",
                                    discount: 0.1,
                                },
                                doc: [
                                    "https://binance-docs.github.io/apidocs/spot/en",
                                ],
                                api_management:
                                    "https://www.binance.com/en/usercenter/settings/api-management",
                                fees: "https://www.binance.com/en/fee/schedule",
                            },
                            depth: 1,
                            api: {
                                // the API structure below will need 3-layer apidefs
                                sapi: {
                                    // IP (api) = 1200 per minute => (rateLimit = 50)
                                    // IP (sapi) request rate limit of 12 000 per minute
                                    // 1 IP (sapi) => cost = 0.1
                                    // 10 IP (sapi) => cost = 1
                                    // UID (sapi) request rate limit of 180 000 per minute
                                    // 1 UID (sapi) => cost = 1200 / 180 000 = 0.006667
                                    get: {
                                        "system/status": 0.1,
                                        // these endpoints require this.apiKey
                                        accountSnapshot: 240, // Weight(IP): 2400 => cost = 0.1 * 2400 = 240
                                        "margin/asset": 1, // Weight(IP): 10 => cost = 0.1 * 10 = 1
                                        "margin/pair": 1,
                                        "margin/allAssets": 0.1,
                                        "margin/allPairs": 0.1,
                                        "margin/priceIndex": 1,
                                        // these endpoints require this.apiKey + this.secret
                                        "asset/assetDividend": 1,
                                        "asset/dribblet": 0.1,
                                        "asset/transfer": 0.1,
                                        "asset/assetDetail": 0.1,
                                        "asset/tradeFee": 0.1,
                                        "asset/ledger-transfer/cloud-mining/queryByPage": 4,
                                        "margin/loan": 1,
                                        "margin/repay": 1,
                                        "margin/account": 1,
                                        "margin/transfer": 0.1,
                                        "margin/interestHistory": 0.1,
                                        "margin/forceLiquidationRec": 0.1,
                                        "margin/order": 1,
                                        "margin/openOrders": 1,
                                        "margin/allOrders": 20, // Weight(IP): 200 => cost = 0.1 * 200 = 20
                                        "margin/myTrades": 1,
                                        "margin/maxBorrowable": 5, // Weight(IP): 50 => cost = 0.1 * 50 = 5
                                        "margin/maxTransferable": 5,
                                        "margin/tradeCoeff": 1,
                                        "margin/isolated/transfer": 0.1,
                                        "margin/isolated/account": 1,
                                        "margin/isolated/pair": 1,
                                        "margin/isolated/allPairs": 1,
                                        "margin/isolated/accountLimit": 0.1,
                                        "margin/interestRateHistory": 0.1,
                                        "margin/orderList": 1,
                                        "margin/allOrderList": 20, // Weight(IP): 200 => cost = 0.1 * 200 = 20
                                        "margin/openOrderList": 1,
                                        "margin/crossMarginData": {
                                            cost: 0.1,
                                            noCoin: 0.5,
                                        },
                                        "margin/isolatedMarginData": {
                                            cost: 0.1,
                                            noCoin: 1,
                                        },
                                        "margin/isolatedMarginTier": 0.1,
                                        "margin/rateLimit/order": 2,
                                        "margin/dribblet": 0.1,
                                        "loan/income": 40, // Weight(UID): 6000 => cost = 0.006667 * 6000 = 40
                                        "loan/ongoing/orders": 40, // Weight(IP): 400 => cost = 0.1 * 400 = 40
                                        "loan/ltv/adjustment/history": 40, // Weight(IP): 400 => cost = 0.1 * 400 = 40
                                        "loan/borrow/history": 40, // Weight(IP): 400 => cost = 0.1 * 400 = 40
                                        "loan/repay/history": 40, // Weight(IP): 400 => cost = 0.1 * 400 = 40
                                        "loan/loanable/data": 40, // Weight(IP): 400 => cost = 0.1 * 400 = 40
                                        "loan/collateral/data": 40, // Weight(IP): 400 => cost = 0.1 * 400 = 40
                                        "loan/repay/collateral/rate": 600, // Weight(IP): 6000 => cost = 0.1 * 6000 = 600
                                        "loan/vip/ongoing/orders": 40, // Weight(IP): 400 => cost = 0.1 * 400 = 40
                                        "loan/vip/repay/history": 40, // Weight(IP): 400 => cost = 0.1 * 400 = 40
                                        "loan/vip/collateral/account": 600, // Weight(IP): 6000 => cost = 0.1 * 6000 = 600
                                        "fiat/orders": 600.03, // Weight(UID): 90000 => cost = 0.006667 * 90000 = 600.03
                                        "fiat/payments": 0.1,
                                        "futures/transfer": 1,
                                        "futures/loan/borrow/history": 1,
                                        "futures/loan/repay/history": 1,
                                        "futures/loan/wallet": 1,
                                        "futures/loan/adjustCollateral/history": 1,
                                        "futures/loan/liquidationHistory": 1,
                                        "rebate/taxQuery": 20.001, // Weight(UID): 3000 => cost = 0.006667 * 3000 = 20.001
                                        // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi
                                        "capital/config/getall": 1, // get networks for withdrawing USDT ERC20 vs USDT Omni
                                        "capital/deposit/address": 1,
                                        "capital/deposit/hisrec": 0.1,
                                        "capital/deposit/subAddress": 0.1,
                                        "capital/deposit/subHisrec": 0.1,
                                        "capital/withdraw/history": 0.1,
                                        "capital/contract/convertible-coins": 4.0002,
                                        "convert/tradeFlow": 0.6667, // Weight(UID): 100 => cost = 0.006667 * 100 = 0.6667
                                        "convert/exchangeInfo": 50,
                                        "convert/assetInfo": 10,
                                        "convert/orderStatus": 0.6667,
                                        "account/status": 0.1,
                                        "account/apiTradingStatus": 0.1,
                                        "account/apiRestrictions/ipRestriction": 0.1,
                                        bnbBurn: 0.1,
                                        // 'sub-account/assets': 1, (v3 endpoint)
                                        "sub-account/futures/account": 1,
                                        "sub-account/futures/accountSummary": 0.1,
                                        "sub-account/futures/positionRisk": 1,
                                        "sub-account/futures/internalTransfer": 0.1,
                                        "sub-account/list": 0.1,
                                        "sub-account/margin/account": 1,
                                        "sub-account/margin/accountSummary": 1,
                                        "sub-account/spotSummary": 0.1,
                                        "sub-account/status": 1,
                                        "sub-account/sub/transfer/history": 0.1,
                                        "sub-account/transfer/subUserHistory": 0.1,
                                        "sub-account/universalTransfer": 0.1,
                                        "sub-account/apiRestrictions/ipRestriction/thirdPartyList": 1,
                                        "managed-subaccount/asset": 0.1,
                                        "managed-subaccount/accountSnapshot": 240,
                                        "managed-subaccount/queryTransLogForInvestor": 0.1,
                                        "managed-subaccount/queryTransLogForTradeParent": 0.1,
                                        // lending endpoints
                                        "lending/daily/product/list": 0.1,
                                        "lending/daily/userLeftQuota": 0.1,
                                        "lending/daily/userRedemptionQuota": 0.1,
                                        "lending/daily/token/position": 0.1,
                                        "lending/union/account": 0.1,
                                        "lending/union/purchaseRecord": 0.1,
                                        "lending/union/redemptionRecord": 0.1,
                                        "lending/union/interestHistory": 0.1,
                                        "lending/project/list": 0.1,
                                        "lending/project/position/list": 0.1,
                                        // mining endpoints
                                        "mining/pub/algoList": 0.1,
                                        "mining/pub/coinList": 0.1,
                                        "mining/worker/detail": 0.5, // Weight(IP): 5 => cost = 0.1 * 5 = 0.5
                                        "mining/worker/list": 0.5,
                                        "mining/payment/list": 0.5,
                                        "mining/statistics/user/status": 0.5,
                                        "mining/statistics/user/list": 0.5,
                                        "mining/payment/uid": 0.5,
                                        // liquid swap endpoints
                                        "bswap/pools": 0.1,
                                        "bswap/liquidity": {
                                            cost: 0.1,
                                            noPoolId: 1,
                                        },
                                        "bswap/liquidityOps": 20.001, // Weight(UID): 3000 => cost = 0.006667 * 3000 = 20.001
                                        "bswap/quote": 1.00005, // Weight(UID): 150 => cost = 0.006667 * 150 = 1.00005
                                        "bswap/swap": 20.001, // Weight(UID): 3000 => cost = 0.006667 * 3000 = 20.001
                                        "bswap/poolConfigure": 1.00005, // Weight(UID): 150 => cost = 0.006667 * 150 = 1.00005
                                        "bswap/addLiquidityPreview": 1.00005, // Weight(UID): 150 => cost = 0.006667 * 150 = 1.00005
                                        "bswap/removeLiquidityPreview": 1.00005, // Weight(UID): 150 => cost = 0.006667 * 150 = 1.00005
                                        "bswap/unclaimedRewards": 6.667, // Weight(UID): 1000 => cost = 0.006667 * 1000 = 6.667
                                        "bswap/claimedHistory": 6.667, // Weight(UID): 1000 => cost = 0.006667 * 1000 = 6.667
                                        // leveraged token endpoints
                                        "blvt/tokenInfo": 0.1,
                                        "blvt/subscribe/record": 0.1,
                                        "blvt/redeem/record": 0.1,
                                        "blvt/userLimit": 0.1,
                                        // broker api TODO (NOT IN DOCS)
                                        "apiReferral/ifNewUser": 1,
                                        "apiReferral/customization": 1,
                                        "apiReferral/userCustomization": 1,
                                        "apiReferral/rebate/recentRecord": 1,
                                        "apiReferral/rebate/historicalRecord": 1,
                                        "apiReferral/kickback/recentRecord": 1,
                                        "apiReferral/kickback/historicalRecord": 1,
                                        // brokerage API TODO https://binance-docs.github.io/Brokerage-API/General/ does not state ratelimits
                                        "broker/subAccountApi": 1,
                                        "broker/subAccount": 1,
                                        "broker/subAccountApi/commission/futures": 1,
                                        "broker/subAccountApi/commission/coinFutures": 1,
                                        "broker/info": 1,
                                        "broker/transfer": 1,
                                        "broker/transfer/futures": 1,
                                        "broker/rebate/recentRecord": 1,
                                        "broker/rebate/historicalRecord": 1,
                                        "broker/subAccount/bnbBurn/status": 1,
                                        "broker/subAccount/depositHist": 1,
                                        "broker/subAccount/spotSummary": 1,
                                        "broker/subAccount/marginSummary": 1,
                                        "broker/subAccount/futuresSummary": 1,
                                        "broker/rebate/futures/recentRecord": 1,
                                        "broker/subAccountApi/ipRestriction": 1,
                                        "broker/universalTransfer": 1,
                                        // v2 not supported yet
                                        // GET /sapi/v2/broker/subAccount/futuresSummary
                                        "account/apiRestrictions": 0.1,
                                        // c2c / p2p
                                        "c2c/orderMatch/listUserOrderHistory": 0.1,
                                        // nft endpoints
                                        "nft/history/transactions": 20.001, // Weight(UID): 3000 => cost = 0.006667 * 3000 = 20.001
                                        "nft/history/deposit": 20.001,
                                        "nft/history/withdraw": 20.001,
                                        "nft/user/getAsset": 20.001,
                                        "pay/transactions": 20.001, // Weight(UID): 3000 => cost = 0.006667 * 3000 = 20.001
                                        "giftcard/verify": 0.1,
                                        "giftcard/cryptography/rsa-public-key": 0.1,
                                        "giftcard/buyCode/token-limit": 0.1,
                                        "algo/futures/openOrders": 0.1,
                                        "algo/futures/historicalOrders": 0.1,
                                        "algo/futures/subOrders": 0.1,
                                        "portfolio/account": 0.1,
                                        "portfolio/collateralRate": 5,
                                        "portfolio/pmLoan": 3.3335,
                                        // staking
                                        "staking/productList": 0.1,
                                        "staking/position": 0.1,
                                        "staking/stakingRecord": 0.1,
                                        "staking/personalLeftQuota": 0.1,
                                    },
                                    post: {
                                        "asset/dust": 1,
                                        "asset/dust-btc": 0.1,
                                        "asset/transfer": 0.1,
                                        "asset/get-funding-asset": 0.1,
                                        "asset/convert-transfer": 0.033335,
                                        "asset/convert-transfer/queryByPage": 0.033335,
                                        "account/disableFastWithdrawSwitch": 0.1,
                                        "account/enableFastWithdrawSwitch": 0.1,
                                        // 'account/apiRestrictions/ipRestriction': 1, discontinued
                                        // 'account/apiRestrictions/ipRestriction/ipList': 1, discontinued
                                        "capital/withdraw/apply": 4.0002, // Weight(UID): 600 => cost = 0.006667 * 600 = 4.0002
                                        "capital/contract/convertible-coins": 4.0002,
                                        "margin/transfer": 1, // Weight(IP): 600 => cost = 0.1 * 600 = 60
                                        "margin/loan": 20.001, // Weight(UID): 3000 => cost = 0.006667 * 3000 = 20.001
                                        "margin/repay": 20.001,
                                        "margin/order": 0.040002, // Weight(UID): 6 => cost = 0.006667 * 6 = 0.040002
                                        "margin/order/oco": 0.040002,
                                        // 'margin/isolated/create': 1, discontinued
                                        "margin/isolated/transfer": 4.0002, // Weight(UID): 600 => cost = 0.006667 * 600 = 4.0002
                                        "margin/isolated/account": 2.0001, // Weight(UID): 300 => cost = 0.006667 * 300 = 2.0001
                                        bnbBurn: 0.1,
                                        "sub-account/virtualSubAccount": 0.1,
                                        "sub-account/margin/transfer": 4.0002, // Weight(UID): 600 => cost =  0.006667 * 600 = 4.0002
                                        "sub-account/margin/enable": 0.1,
                                        "sub-account/futures/enable": 0.1,
                                        "sub-account/futures/transfer": 0.1,
                                        "sub-account/futures/internalTransfer": 0.1,
                                        "sub-account/transfer/subToSub": 0.1,
                                        "sub-account/transfer/subToMaster": 0.1,
                                        "sub-account/universalTransfer": 0.1,
                                        // v2 not supported yet
                                        // 'sub-account/subAccountApi/ipRestriction': 20,
                                        "managed-subaccount/deposit": 0.1,
                                        "managed-subaccount/withdraw": 0.1,
                                        userDataStream: 0.1,
                                        "userDataStream/isolated": 0.1,
                                        "futures/transfer": 0.1,
                                        // lending
                                        "lending/customizedFixed/purchase": 0.1,
                                        "lending/daily/purchase": 0.1,
                                        "lending/daily/redeem": 0.1,
                                        // liquid swap endpoints
                                        "bswap/liquidityAdd": 60, // Weight(UID): 1000 + (Additional: 1 request every 3 seconds =  0.333 requests per second) => cost = ( 1000 / rateLimit ) / 0.333 = 60.0000006
                                        "bswap/liquidityRemove": 60, // Weight(UID): 1000 + (Additional: 1 request every three seconds)
                                        "bswap/swap": 60, // Weight(UID): 1000 + (Additional: 1 request every three seconds)
                                        "bswap/claimRewards": 6.667, // Weight(UID): 1000 => cost = 0.006667 * 1000 = 6.667
                                        // leveraged token endpoints
                                        "blvt/subscribe": 0.1,
                                        "blvt/redeem": 0.1,
                                        // brokerage API TODO: NO MENTION OF RATELIMITS IN BROKERAGE DOCS
                                        "apiReferral/customization": 1,
                                        "apiReferral/userCustomization": 1,
                                        "apiReferral/rebate/historicalRecord": 1,
                                        "apiReferral/kickback/historicalRecord": 1,
                                        "broker/subAccount": 1,
                                        "broker/subAccount/margin": 1,
                                        "broker/subAccount/futures": 1,
                                        "broker/subAccountApi": 1,
                                        "broker/subAccountApi/permission": 1,
                                        "broker/subAccountApi/commission": 1,
                                        "broker/subAccountApi/commission/futures": 1,
                                        "broker/subAccountApi/commission/coinFutures": 1,
                                        "broker/transfer": 1,
                                        "broker/transfer/futures": 1,
                                        "broker/rebate/historicalRecord": 1,
                                        "broker/subAccount/bnbBurn/spot": 1,
                                        "broker/subAccount/bnbBurn/marginInterest": 1,
                                        "broker/subAccount/blvt": 1,
                                        "broker/subAccountApi/ipRestriction": 1,
                                        "broker/subAccountApi/ipRestriction/ipList": 1,
                                        "broker/universalTransfer": 1,
                                        "broker/subAccountApi/permission/universalTransfer": 1,
                                        "broker/subAccountApi/permission/vanillaOptions": 1,
                                        //
                                        "giftcard/createCode": 0.1,
                                        "giftcard/redeemCode": 0.1,
                                        "giftcard/buyCode": 0.1,
                                        "algo/futures/newOrderVp": 20.001,
                                        "algo/futures/newOrderTwap": 20.001,
                                        // staking
                                        "staking/purchase": 0.1,
                                        "staking/redeem": 0.1,
                                        "staking/setAutoStaking": 0.1,
                                        "portfolio/repay": 20.001,
                                        "loan/borrow": 40, // Weight(UID): 6000 => cost = 0.006667 * 6000 = 40
                                        "loan/repay": 40, // Weight(UID): 6000 => cost = 0.006667 * 6000 = 40
                                        "loan/adjust/ltv": 40, // Weight(UID): 6000 => cost = 0.006667 * 6000 = 40
                                        "loan/customize/margin_call": 40, // Weight(UID): 6000 => cost = 0.006667 * 6000 = 40
                                        "loan/vip/repay": 40, // Weight(UID): 6000 => cost = 0.006667 * 6000 = 40
                                        "convert/getQuote": 20.001,
                                        "convert/acceptQuote": 3.3335,
                                    },
                                    put: {
                                        userDataStream: 0.1,
                                        "userDataStream/isolated": 0.1,
                                    },
                                    delete: {
                                        // 'account/apiRestrictions/ipRestriction/ipList': 1, discontinued
                                        "margin/openOrders": 0.1,
                                        "margin/order": 0.0066667, // Weight(UID): 1 => cost = 0.006667
                                        "margin/orderList": 0.0066667,
                                        "margin/isolated/account": 2.0001, // Weight(UID): 300 => cost =  0.006667 * 300 = 2.0001
                                        userDataStream: 0.1,
                                        "userDataStream/isolated": 0.1,
                                        // brokerage API TODO NO MENTION OF RATELIMIT IN BROKERAGE DOCS
                                        "broker/subAccountApi": 1,
                                        "broker/subAccountApi/ipRestriction/ipList": 1,
                                        "algo/futures/order": 0.1,
                                    },
                                },
                                sapiV2: {
                                    get: {
                                        "sub-account/futures/account": 0.1,
                                        "sub-account/futures/positionRisk": 0.1,
                                    },
                                },
                                sapiV3: {
                                    get: {
                                        "sub-account/assets": 1,
                                    },
                                    post: {
                                        "asset/getUserAsset": 0.5,
                                    },
                                },
                                // deprecated
                                wapi: {
                                    post: {
                                        withdraw: 1,
                                        "sub-account/transfer": 1,
                                    },
                                    get: {
                                        depositHistory: 1,
                                        withdrawHistory: 1,
                                        depositAddress: 1,
                                        accountStatus: 1,
                                        systemStatus: 1,
                                        apiTradingStatus: 1,
                                        userAssetDribbletLog: 1,
                                        tradeFee: 1,
                                        assetDetail: 1,
                                        "sub-account/list": 1,
                                        "sub-account/transfer/history": 1,
                                        "sub-account/assets": 1,
                                    },
                                },
                                dapiPublic: {
                                    get: {
                                        ping: 1,
                                        time: 1,
                                        exchangeInfo: 1,
                                        depth: {
                                            cost: 2,
                                            byLimit: [
                                                [50, 2],
                                                [100, 5],
                                                [500, 10],
                                                [1000, 20],
                                            ],
                                        },
                                        trades: 5,
                                        historicalTrades: 20,
                                        aggTrades: 20,
                                        premiumIndex: 10,
                                        fundingRate: 1,
                                        klines: {
                                            cost: 1,
                                            byLimit: [
                                                [99, 1],
                                                [499, 2],
                                                [1000, 5],
                                                [10000, 10],
                                            ],
                                        },
                                        continuousKlines: {
                                            cost: 1,
                                            byLimit: [
                                                [99, 1],
                                                [499, 2],
                                                [1000, 5],
                                                [10000, 10],
                                            ],
                                        },
                                        indexPriceKlines: {
                                            cost: 1,
                                            byLimit: [
                                                [99, 1],
                                                [499, 2],
                                                [1000, 5],
                                                [10000, 10],
                                            ],
                                        },
                                        markPriceKlines: {
                                            cost: 1,
                                            byLimit: [
                                                [99, 1],
                                                [499, 2],
                                                [1000, 5],
                                                [10000, 10],
                                            ],
                                        },
                                        "ticker/24hr": {
                                            cost: 1,
                                            noSymbol: 40,
                                        },
                                        "ticker/price": {
                                            cost: 1,
                                            noSymbol: 2,
                                        },
                                        "ticker/bookTicker": {
                                            cost: 1,
                                            noSymbol: 2,
                                        },
                                        openInterest: 1,
                                        pmExchangeInfo: 1,
                                    },
                                },
                                dapiData: {
                                    get: {
                                        openInterestHist: 1,
                                        topLongShortAccountRatio: 1,
                                        topLongShortPositionRatio: 1,
                                        globalLongShortAccountRatio: 1,
                                        takerBuySellVol: 1,
                                        basis: 1,
                                    },
                                },
                                dapiPrivate: {
                                    get: {
                                        "positionSide/dual": 30,
                                        order: 1,
                                        openOrder: 1,
                                        openOrders: { cost: 1, noSymbol: 5 },
                                        allOrders: { cost: 20, noSymbol: 40 },
                                        balance: 1,
                                        account: 5,
                                        "positionMargin/history": 1,
                                        positionRisk: 1,
                                        userTrades: { cost: 20, noSymbol: 40 },
                                        income: 20,
                                        leverageBracket: 1,
                                        forceOrders: { cost: 20, noSymbol: 50 },
                                        adlQuantile: 5,
                                        orderAmendment: 1,
                                        pmAccountInfo: 5,
                                    },
                                    post: {
                                        "positionSide/dual": 1,
                                        order: 4,
                                        batchOrders: 5,
                                        countdownCancelAll: 10,
                                        leverage: 1,
                                        marginType: 1,
                                        positionMargin: 1,
                                        listenKey: 1,
                                    },
                                    put: {
                                        listenKey: 1,
                                        order: 1,
                                        batchOrders: 5,
                                    },
                                    delete: {
                                        order: 1,
                                        allOpenOrders: 1,
                                        batchOrders: 5,
                                        listenKey: 1,
                                    },
                                },
                                dapiPrivateV2: {
                                    get: {
                                        leverageBracket: 1,
                                    },
                                },
                                fapiPublic: {
                                    get: {
                                        ping: 1,
                                        time: 1,
                                        exchangeInfo: 1,
                                        depth: {
                                            cost: 2,
                                            byLimit: [
                                                [50, 2],
                                                [100, 5],
                                                [500, 10],
                                                [1000, 20],
                                            ],
                                        },
                                        trades: 5,
                                        historicalTrades: 20,
                                        aggTrades: 20,
                                        klines: {
                                            cost: 1,
                                            byLimit: [
                                                [99, 1],
                                                [499, 2],
                                                [1000, 5],
                                                [10000, 10],
                                            ],
                                        },
                                        continuousKlines: {
                                            cost: 1,
                                            byLimit: [
                                                [99, 1],
                                                [499, 2],
                                                [1000, 5],
                                                [10000, 10],
                                            ],
                                        },
                                        markPriceKlines: {
                                            cost: 1,
                                            byLimit: [
                                                [99, 1],
                                                [499, 2],
                                                [1000, 5],
                                                [10000, 10],
                                            ],
                                        },
                                        indexPriceKlines: {
                                            cost: 1,
                                            byLimit: [
                                                [99, 1],
                                                [499, 2],
                                                [1000, 5],
                                                [10000, 10],
                                            ],
                                        },
                                        fundingRate: 1,
                                        premiumIndex: 1,
                                        "ticker/24hr": {
                                            cost: 1,
                                            noSymbol: 40,
                                        },
                                        "ticker/price": {
                                            cost: 1,
                                            noSymbol: 2,
                                        },
                                        "ticker/bookTicker": {
                                            cost: 1,
                                            noSymbol: 2,
                                        },
                                        openInterest: 1,
                                        indexInfo: 1,
                                        apiTradingStatus: {
                                            cost: 1,
                                            noSymbol: 10,
                                        },
                                        lvtKlines: 1,
                                        pmExchangeInfo: 1,
                                    },
                                },
                                fapiData: {
                                    get: {
                                        openInterestHist: 1,
                                        topLongShortAccountRatio: 1,
                                        topLongShortPositionRatio: 1,
                                        globalLongShortAccountRatio: 1,
                                        takerlongshortRatio: 1,
                                    },
                                },
                                fapiPrivate: {
                                    get: {
                                        forceOrders: { cost: 20, noSymbol: 50 },
                                        allOrders: 5,
                                        openOrder: 1,
                                        openOrders: 1,
                                        order: 1,
                                        account: 5,
                                        balance: 5,
                                        leverageBracket: 1,
                                        "positionMargin/history": 1,
                                        positionRisk: 5,
                                        "positionSide/dual": 30,
                                        userTrades: 5,
                                        income: 30,
                                        commissionRate: 20,
                                        apiTradingStatus: 1,
                                        multiAssetsMargin: 30,
                                        // broker endpoints
                                        "apiReferral/ifNewUser": 1,
                                        "apiReferral/customization": 1,
                                        "apiReferral/userCustomization": 1,
                                        "apiReferral/traderNum": 1,
                                        "apiReferral/overview": 1,
                                        "apiReferral/tradeVol": 1,
                                        "apiReferral/rebateVol": 1,
                                        "apiReferral/traderSummary": 1,
                                        adlQuantile: 5,
                                        pmAccountInfo: 5,
                                    },
                                    post: {
                                        batchOrders: 5,
                                        "positionSide/dual": 1,
                                        positionMargin: 1,
                                        marginType: 1,
                                        order: 4,
                                        leverage: 1,
                                        listenKey: 1,
                                        countdownCancelAll: 10,
                                        multiAssetsMargin: 1,
                                        // broker endpoints
                                        "apiReferral/customization": 1,
                                        "apiReferral/userCustomization": 1,
                                    },
                                    put: {
                                        listenKey: 1,
                                    },
                                    delete: {
                                        batchOrders: 1,
                                        order: 1,
                                        allOpenOrders: 1,
                                        listenKey: 1,
                                    },
                                },
                                fapiPrivateV2: {
                                    get: {
                                        account: 1,
                                        balance: 1,
                                        positionRisk: 1,
                                    },
                                },
                                eapiPublic: {
                                    get: {
                                        ping: 1,
                                        time: 1,
                                        exchangeInfo: 1,
                                        index: 1,
                                        ticker: 5,
                                        mark: 5,
                                        depth: 1,
                                        klines: 1,
                                        trades: 5,
                                        historicalTrades: 20,
                                        exerciseHistory: 3,
                                        openInterest: 3,
                                    },
                                },
                                eapiPrivate: {
                                    get: {
                                        account: 3,
                                        position: 5,
                                        openOrders: { cost: 1, noSymbol: 40 },
                                        historyOrders: 3,
                                        userTrades: 5,
                                        exerciseRecord: 5,
                                        bill: 1,
                                        marginAccount: 3,
                                        mmp: 1,
                                        countdownCancelAll: 1,
                                    },
                                    post: {
                                        transfer: 1,
                                        order: 1,
                                        batchOrders: 5,
                                        listenKey: 1,
                                        mmpSet: 1,
                                        mmpReset: 1,
                                        countdownCancelAll: 1,
                                        countdownCancelAllHeartBeat: 10,
                                    },
                                    put: {
                                        listenKey: 1,
                                    },
                                    delete: {
                                        order: 1,
                                        batchOrders: 1,
                                        allOpenOrders: 1,
                                        allOpenOrdersByUnderlying: 1,
                                        listenKey: 1,
                                    },
                                },
                                public: {
                                    get: {
                                        ping: 1,
                                        time: 1,
                                        depth: {
                                            cost: 1,
                                            byLimit: [
                                                [100, 1],
                                                [500, 5],
                                                [1000, 10],
                                                [5000, 50],
                                            ],
                                        },
                                        trades: 1,
                                        aggTrades: 1,
                                        historicalTrades: 5,
                                        klines: 1,
                                        "ticker/24hr": {
                                            cost: 1,
                                            noSymbol: 40,
                                        },
                                        "ticker/price": {
                                            cost: 1,
                                            noSymbol: 2,
                                        },
                                        "ticker/bookTicker": {
                                            cost: 1,
                                            noSymbol: 2,
                                        },
                                        exchangeInfo: 10,
                                    },
                                    put: {
                                        userDataStream: 1,
                                    },
                                    post: {
                                        userDataStream: 1,
                                    },
                                    delete: {
                                        userDataStream: 1,
                                    },
                                },
                                private: {
                                    get: {
                                        allOrderList: 10, // oco
                                        openOrderList: 3, // oco
                                        orderList: 2, // oco
                                        order: 2,
                                        openOrders: { cost: 3, noSymbol: 40 },
                                        allOrders: 10,
                                        account: 10,
                                        myTrades: 10,
                                        "rateLimit/order": 20,
                                    },
                                    post: {
                                        "order/oco": 1,
                                        order: 1,
                                        "order/cancelReplace": 1,
                                        "order/test": 1,
                                    },
                                    delete: {
                                        openOrders: 1, // added on 2020-04-25 for canceling all open orders per symbol
                                        orderList: 1, // oco
                                        order: 1,
                                    },
                                },
                            },
                            fees: {
                                trading: {
                                    feeSide: "get",
                                    tierBased: false,
                                    percentage: true,
                                    taker: this.parseNumber("0.001"),
                                    maker: this.parseNumber("0.001"),
                                },
                                future: {
                                    trading: {
                                        feeSide: "quote",
                                        tierBased: true,
                                        percentage: true,
                                        taker: this.parseNumber("0.000400"),
                                        maker: this.parseNumber("0.000200"),
                                        tiers: {
                                            taker: [
                                                [
                                                    this.parseNumber("0"),
                                                    this.parseNumber(
                                                        "0.000400"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("250"),
                                                    this.parseNumber(
                                                        "0.000400"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("2500"),
                                                    this.parseNumber(
                                                        "0.000350"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("7500"),
                                                    this.parseNumber(
                                                        "0.000320"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("22500"),
                                                    this.parseNumber(
                                                        "0.000300"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("50000"),
                                                    this.parseNumber(
                                                        "0.000270"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("100000"),
                                                    this.parseNumber(
                                                        "0.000250"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("200000"),
                                                    this.parseNumber(
                                                        "0.000220"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("400000"),
                                                    this.parseNumber(
                                                        "0.000200"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("750000"),
                                                    this.parseNumber(
                                                        "0.000170"
                                                    ),
                                                ],
                                            ],
                                            maker: [
                                                [
                                                    this.parseNumber("0"),
                                                    this.parseNumber(
                                                        "0.000200"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("250"),
                                                    this.parseNumber(
                                                        "0.000160"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("2500"),
                                                    this.parseNumber(
                                                        "0.000140"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("7500"),
                                                    this.parseNumber(
                                                        "0.000120"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("22500"),
                                                    this.parseNumber(
                                                        "0.000100"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("50000"),
                                                    this.parseNumber(
                                                        "0.000080"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("100000"),
                                                    this.parseNumber(
                                                        "0.000060"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("200000"),
                                                    this.parseNumber(
                                                        "0.000040"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("400000"),
                                                    this.parseNumber(
                                                        "0.000020"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("750000"),
                                                    this.parseNumber("0"),
                                                ],
                                            ],
                                        },
                                    },
                                },
                                delivery: {
                                    trading: {
                                        feeSide: "base",
                                        tierBased: true,
                                        percentage: true,
                                        taker: this.parseNumber("0.000500"),
                                        maker: this.parseNumber("0.000100"),
                                        tiers: {
                                            taker: [
                                                [
                                                    this.parseNumber("0"),
                                                    this.parseNumber(
                                                        "0.000500"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("250"),
                                                    this.parseNumber(
                                                        "0.000450"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("2500"),
                                                    this.parseNumber(
                                                        "0.000400"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("7500"),
                                                    this.parseNumber(
                                                        "0.000300"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("22500"),
                                                    this.parseNumber(
                                                        "0.000250"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("50000"),
                                                    this.parseNumber(
                                                        "0.000240"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("100000"),
                                                    this.parseNumber(
                                                        "0.000240"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("200000"),
                                                    this.parseNumber(
                                                        "0.000240"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("400000"),
                                                    this.parseNumber(
                                                        "0.000240"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("750000"),
                                                    this.parseNumber(
                                                        "0.000240"
                                                    ),
                                                ],
                                            ],
                                            maker: [
                                                [
                                                    this.parseNumber("0"),
                                                    this.parseNumber(
                                                        "0.000100"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("250"),
                                                    this.parseNumber(
                                                        "0.000080"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("2500"),
                                                    this.parseNumber(
                                                        "0.000050"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("7500"),
                                                    this.parseNumber(
                                                        "0.0000030"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("22500"),
                                                    this.parseNumber("0"),
                                                ],
                                                [
                                                    this.parseNumber("50000"),
                                                    this.parseNumber(
                                                        "-0.000050"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("100000"),
                                                    this.parseNumber(
                                                        "-0.000060"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("200000"),
                                                    this.parseNumber(
                                                        "-0.000070"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("400000"),
                                                    this.parseNumber(
                                                        "-0.000080"
                                                    ),
                                                ],
                                                [
                                                    this.parseNumber("750000"),
                                                    this.parseNumber(
                                                        "-0.000090"
                                                    ),
                                                ],
                                            ],
                                        },
                                    },
                                },
                                option: {},
                            },
                            commonCurrencies: {
                                BCC: "BCC", // kept for backward-compatibility https://github.com/ccxt/ccxt/issues/4848
                                YOYO: "YOYOW",
                            },
                            precisionMode: DECIMAL_PLACES,
                            // exchange-specific options
                            options: {
                                fetchCurrencies: true, // this is a private call and it requires API keys
                                // 'fetchTradesMethod': 'publicGetAggTrades', // publicGetTrades, publicGetHistoricalTrades
                                defaultTimeInForce: "GTC", // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel
                                defaultType: "spot", // 'spot', 'future', 'margin', 'delivery'
                                hasAlreadyAuthenticatedSuccessfully: false,
                                warnOnFetchOpenOrdersWithoutSymbol: true,
                                // not an error
                                // https://github.com/ccxt/ccxt/issues/11268
                                // https://github.com/ccxt/ccxt/pull/11624
                                // POST https://fapi.binance.com/fapi/v1/marginType 400 Bad Request
                                // binanceusdm
                                throwMarginModeAlreadySet: false,
                                fetchPositions: "positionRisk", // or 'account'
                                recvWindow: 10 * 1000, // 10 sec
                                timeDifference: 0, // the difference between system clock and Binance clock
                                adjustForTimeDifference: false, // controls the adjustment logic upon instantiation
                                newOrderRespType: {
                                    market: "FULL", // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
                                    limit: "FULL", // we change it from 'ACK' by default to 'FULL' (returns immediately if limit is not hit)
                                },
                                quoteOrderQty: true, // whether market orders support amounts in quote currency
                                broker: {
                                    spot: "x-R4BD3S82",
                                    margin: "x-R4BD3S82",
                                    future: "x-xcKtGhcu",
                                    delivery: "x-xcKtGhcu",
                                },
                                accountsByType: {
                                    main: "MAIN",
                                    spot: "MAIN",
                                    funding: "FUNDING",
                                    margin: "MARGIN",
                                    cross: "MARGIN",
                                    future: "UMFUTURE",
                                    delivery: "CMFUTURE",
                                },
                                accountsById: {
                                    MAIN: "spot",
                                    FUNDING: "funding",
                                    MARGIN: "margin",
                                    UMFUTURE: "future",
                                    CMFUTURE: "delivery",
                                },
                                networks: {
                                    ERC20: "ETH",
                                    TRC20: "TRX",
                                    BEP2: "BNB",
                                    BEP20: "BSC",
                                    OMNI: "OMNI",
                                    EOS: "EOS",
                                    SPL: "SOL",
                                },
                                // keeping this object for backward-compatibility
                                reverseNetworks: {
                                    "tronscan.org": "TRC20",
                                    "etherscan.io": "ERC20",
                                    "bscscan.com": "BSC",
                                    "explorer.binance.org": "BEP2",
                                    "bithomp.com": "XRP",
                                    "bloks.io": "EOS",
                                    "stellar.expert": "XLM",
                                    "blockchair.com/bitcoin": "BTC",
                                    "blockchair.com/bitcoin-cash": "BCH",
                                    "blockchair.com/ecash": "XEC",
                                    "explorer.litecoin.net": "LTC",
                                    "explorer.avax.network": "AVAX",
                                    "solscan.io": "SOL",
                                    "polkadot.subscan.io": "DOT",
                                    "dashboard.internetcomputer.org": "ICP",
                                    "explorer.chiliz.com": "CHZ",
                                    "cardanoscan.io": "ADA",
                                    "mainnet.theoan.com": "AION",
                                    "algoexplorer.io": "ALGO",
                                    "explorer.ambrosus.com": "AMB",
                                    "viewblock.io/zilliqa": "ZIL",
                                    "viewblock.io/arweave": "AR",
                                    "explorer.ark.io": "ARK",
                                    "atomscan.com": "ATOM",
                                    "www.mintscan.io": "CTK",
                                    "explorer.bitcoindiamond.org": "BCD",
                                    "btgexplorer.com": "BTG",
                                    "bts.ai": "BTS",
                                    "explorer.celo.org": "CELO",
                                    "explorer.nervos.org": "CKB",
                                    "cerebro.cortexlabs.ai": "CTXC",
                                    "chainz.cryptoid.info": "VIA",
                                    "explorer.dcrdata.org": "DCR",
                                    "digiexplorer.info": "DGB",
                                    "dock.subscan.io": "DOCK",
                                    "dogechain.info": "DOGE",
                                    "explorer.elrond.com": "EGLD",
                                    "blockscout.com": "ETC",
                                    "explore-fetchhub.fetch.ai": "FET",
                                    "filfox.info": "FIL",
                                    "fio.bloks.io": "FIO",
                                    "explorer.firo.org": "FIRO",
                                    "neoscan.io": "NEO",
                                    "ftmscan.com": "FTM",
                                    "explorer.gochain.io": "GO",
                                    "block.gxb.io": "GXS",
                                    "hash-hash.info": "HBAR",
                                    "www.hiveblockexplorer.com": "HIVE",
                                    "explorer.helium.com": "HNT",
                                    "tracker.icon.foundation": "ICX",
                                    "www.iostabc.com": "IOST",
                                    "explorer.iota.org": "IOTA",
                                    "iotexscan.io": "IOTX",
                                    "irishub.iobscan.io": "IRIS",
                                    "kava.mintscan.io": "KAVA",
                                    "scope.klaytn.com": "KLAY",
                                    "kmdexplorer.io": "KMD",
                                    "kusama.subscan.io": "KSM",
                                    "explorer.lto.network": "LTO",
                                    "polygonscan.com": "POLYGON",
                                    "explorer.ont.io": "ONT",
                                    "minaexplorer.com": "MINA",
                                    "nanolooker.com": "NANO",
                                    "explorer.nebulas.io": "NAS",
                                    "explorer.nbs.plus": "NBS",
                                    "explorer.nebl.io": "NEBL",
                                    "nulscan.io": "NULS",
                                    "nxscan.com": "NXS",
                                    "explorer.harmony.one": "ONE",
                                    "explorer.poa.network": "POA",
                                    "qtum.info": "QTUM",
                                    "explorer.rsk.co": "RSK",
                                    "www.oasisscan.com": "ROSE",
                                    "ravencoin.network": "RVN",
                                    "sc.tokenview.com": "SC",
                                    "secretnodes.com": "SCRT",
                                    "explorer.skycoin.com": "SKY",
                                    "steemscan.com": "STEEM",
                                    "explorer.stacks.co": "STX",
                                    "www.thetascan.io": "THETA",
                                    "scan.tomochain.com": "TOMO",
                                    "explore.vechain.org": "VET",
                                    "explorer.vite.net": "VITE",
                                    "www.wanscan.org": "WAN",
                                    "wavesexplorer.com": "WAVES",
                                    "wax.eosx.io": "WAXP",
                                    "waltonchain.pro": "WTC",
                                    "chain.nem.ninja": "XEM",
                                    "verge-blockchain.info": "XVG",
                                    "explorer.yoyow.org": "YOYOW",
                                    "explorer.zcha.in": "ZEC",
                                    "explorer.zensystem.io": "ZEN",
                                },
                                networksById: {
                                    "tronscan.org": "TRC20",
                                    "etherscan.io": "ERC20",
                                    "bscscan.com": "BSC",
                                    "explorer.binance.org": "BEP2",
                                    "bithomp.com": "XRP",
                                    "bloks.io": "EOS",
                                    "stellar.expert": "XLM",
                                    "blockchair.com/bitcoin": "BTC",
                                    "blockchair.com/bitcoin-cash": "BCH",
                                    "blockchair.com/ecash": "XEC",
                                    "explorer.litecoin.net": "LTC",
                                    "explorer.avax.network": "AVAX",
                                    "solscan.io": "SOL",
                                    "polkadot.subscan.io": "DOT",
                                    "dashboard.internetcomputer.org": "ICP",
                                    "explorer.chiliz.com": "CHZ",
                                    "cardanoscan.io": "ADA",
                                    "mainnet.theoan.com": "AION",
                                    "algoexplorer.io": "ALGO",
                                    "explorer.ambrosus.com": "AMB",
                                    "viewblock.io/zilliqa": "ZIL",
                                    "viewblock.io/arweave": "AR",
                                    "explorer.ark.io": "ARK",
                                    "atomscan.com": "ATOM",
                                    "www.mintscan.io": "CTK",
                                    "explorer.bitcoindiamond.org": "BCD",
                                    "btgexplorer.com": "BTG",
                                    "bts.ai": "BTS",
                                    "explorer.celo.org": "CELO",
                                    "explorer.nervos.org": "CKB",
                                    "cerebro.cortexlabs.ai": "CTXC",
                                    "chainz.cryptoid.info": "VIA",
                                    "explorer.dcrdata.org": "DCR",
                                    "digiexplorer.info": "DGB",
                                    "dock.subscan.io": "DOCK",
                                    "dogechain.info": "DOGE",
                                    "explorer.elrond.com": "EGLD",
                                    "blockscout.com": "ETC",
                                    "explore-fetchhub.fetch.ai": "FET",
                                    "filfox.info": "FIL",
                                    "fio.bloks.io": "FIO",
                                    "explorer.firo.org": "FIRO",
                                    "neoscan.io": "NEO",
                                    "ftmscan.com": "FTM",
                                    "explorer.gochain.io": "GO",
                                    "block.gxb.io": "GXS",
                                    "hash-hash.info": "HBAR",
                                    "www.hiveblockexplorer.com": "HIVE",
                                    "explorer.helium.com": "HNT",
                                    "tracker.icon.foundation": "ICX",
                                    "www.iostabc.com": "IOST",
                                    "explorer.iota.org": "IOTA",
                                    "iotexscan.io": "IOTX",
                                    "irishub.iobscan.io": "IRIS",
                                    "kava.mintscan.io": "KAVA",
                                    "scope.klaytn.com": "KLAY",
                                    "kmdexplorer.io": "KMD",
                                    "kusama.subscan.io": "KSM",
                                    "explorer.lto.network": "LTO",
                                    "polygonscan.com": "POLYGON",
                                    "explorer.ont.io": "ONT",
                                    "minaexplorer.com": "MINA",
                                    "nanolooker.com": "NANO",
                                    "explorer.nebulas.io": "NAS",
                                    "explorer.nbs.plus": "NBS",
                                    "explorer.nebl.io": "NEBL",
                                    "nulscan.io": "NULS",
                                    "nxscan.com": "NXS",
                                    "explorer.harmony.one": "ONE",
                                    "explorer.poa.network": "POA",
                                    "qtum.info": "QTUM",
                                    "explorer.rsk.co": "RSK",
                                    "www.oasisscan.com": "ROSE",
                                    "ravencoin.network": "RVN",
                                    "sc.tokenview.com": "SC",
                                    "secretnodes.com": "SCRT",
                                    "explorer.skycoin.com": "SKY",
                                    "steemscan.com": "STEEM",
                                    "explorer.stacks.co": "STX",
                                    "www.thetascan.io": "THETA",
                                    "scan.tomochain.com": "TOMO",
                                    "explore.vechain.org": "VET",
                                    "explorer.vite.net": "VITE",
                                    "www.wanscan.org": "WAN",
                                    "wavesexplorer.com": "WAVES",
                                    "wax.eosx.io": "WAXP",
                                    "waltonchain.pro": "WTC",
                                    "chain.nem.ninja": "XEM",
                                    "verge-blockchain.info": "XVG",
                                    "explorer.yoyow.org": "YOYOW",
                                    "explorer.zcha.in": "ZEC",
                                    "explorer.zensystem.io": "ZEN",
                                },
                                impliedNetworks: {
                                    ETH: { ERC20: "ETH" },
                                    TRX: { TRC20: "TRX" },
                                },
                                legalMoney: {
                                    MXN: true,
                                    UGX: true,
                                    SEK: true,
                                    CHF: true,
                                    VND: true,
                                    AED: true,
                                    DKK: true,
                                    KZT: true,
                                    HUF: true,
                                    PEN: true,
                                    PHP: true,
                                    USD: true,
                                    TRY: true,
                                    EUR: true,
                                    NGN: true,
                                    PLN: true,
                                    BRL: true,
                                    ZAR: true,
                                    KES: true,
                                    ARS: true,
                                    RUB: true,
                                    AUD: true,
                                    NOK: true,
                                    CZK: true,
                                    GBP: true,
                                    UAH: true,
                                    GHS: true,
                                    HKD: true,
                                    CAD: true,
                                    INR: true,
                                    JPY: true,
                                    NZD: true,
                                },
                                legalMoneyCurrenciesById: {
                                    BUSD: "USD",
                                },
                            },
                            // https://binance-docs.github.io/apidocs/spot/en/#error-codes-2
                            exceptions: {
                                exact: {
                                    "System is under maintenance.":
                                        OnMaintenance, // {"code":1,"msg":"System is under maintenance."}
                                    "System abnormality": ExchangeError, // {"code":-1000,"msg":"System abnormality"}
                                    "You are not authorized to execute this request.":
                                        PermissionDenied, // {"msg":"You are not authorized to execute this request."}
                                    "API key does not exist":
                                        AuthenticationError,
                                    "Order would trigger immediately.":
                                        OrderImmediatelyFillable,
                                    "Stop price would trigger immediately.":
                                        OrderImmediatelyFillable, // {"code":-2010,"msg":"Stop price would trigger immediately."}
                                    "Order would immediately match and take.":
                                        OrderImmediatelyFillable, // {"code":-2010,"msg":"Order would immediately match and take."}
                                    "Account has insufficient balance for requested action.":
                                        InsufficientFunds,
                                    "Rest API trading is not enabled.":
                                        ExchangeNotAvailable,
                                    "You don't have permission.":
                                        PermissionDenied, // {"msg":"You don't have permission.","success":false}
                                    "Market is closed.": ExchangeNotAvailable, // {"code":-1013,"msg":"Market is closed."}
                                    "Too many requests. Please try again later.":
                                        DDoSProtection, // {"msg":"Too many requests. Please try again later.","success":false}
                                    "This action is disabled on this account.":
                                        AccountSuspended, // {"code":-2011,"msg":"This action is disabled on this account."}
                                    "This type of sub-account exceeds the maximum number limit":
                                        BadRequest, // {"code":-9000,"msg":"This type of sub-account exceeds the maximum number limit"}
                                    "This symbol is not permitted for this account.":
                                        PermissionDenied, // {"code":-2010,"msg":"This symbol is not permitted for this account."}
                                    "-1000": ExchangeNotAvailable, // {"code":-1000,"msg":"An unknown error occured while processing the request."}
                                    "-1001": ExchangeNotAvailable, // {"code":-1001,"msg":"'Internal error; unable to process your request. Please try again.'"}
                                    "-1002": AuthenticationError, // {"code":-1002,"msg":"'You are not authorized to execute this request.'"}
                                    "-1003": RateLimitExceeded, // {"code":-1003,"msg":"Too much request weight used, current limit is 1200 request weight per 1 MINUTE. Please use the websocket for live updates to avoid polling the API."}
                                    "-1004": DDoSProtection, // {"code":-1004,"msg":"Server is busy, please wait and try again"}
                                    "-1005": PermissionDenied, // {"code":-1005,"msg":"No such IP has been white listed"}
                                    "-1006": BadResponse, // {"code":-1006,"msg":"An unexpected response was received from the message bus. Execution status unknown."}
                                    "-1007": RequestTimeout, // {"code":-1007,"msg":"Timeout waiting for response from backend server. Send status unknown; execution status unknown."}
                                    "-1010": BadResponse, // {"code":-1010,"msg":"ERROR_MSG_RECEIVED."}
                                    "-1011": PermissionDenied, // {"code":-1011,"msg":"This IP cannot access this route."}
                                    "-1013": InvalidOrder, // {"code":-1013,"msg":"createOrder -> 'invalid quantity'/'invalid price'/MIN_NOTIONAL"}
                                    "-1014": InvalidOrder, // {"code":-1014,"msg":"Unsupported order combination."}
                                    "-1015": RateLimitExceeded, // {"code":-1015,"msg":"'Too many new orders; current limit is %s orders per %s.'"}
                                    "-1016": ExchangeNotAvailable, // {"code":-1016,"msg":"'This service is no longer available.',"}
                                    "-1020": BadRequest, // {"code":-1020,"msg":"'This operation is not supported.'"}
                                    "-1021": InvalidNonce, // {"code":-1021,"msg":"'your time is ahead of server'"}
                                    "-1022": AuthenticationError, // {"code":-1022,"msg":"Signature for this request is not valid."}
                                    "-1023": BadRequest, // {"code":-1023,"msg":"Start time is greater than end time."}
                                    "-1099": AuthenticationError, // {"code":-1099,"msg":"Not found, authenticated, or authorized"}
                                    "-1100": BadRequest, // {"code":-1100,"msg":"createOrder(symbol, 1, asdf) -> 'Illegal characters found in parameter 'price'"}
                                    "-1101": BadRequest, // {"code":-1101,"msg":"Too many parameters; expected %s and received %s."}
                                    "-1102": BadRequest, // {"code":-1102,"msg":"Param %s or %s must be sent, but both were empty"}
                                    "-1103": BadRequest, // {"code":-1103,"msg":"An unknown parameter was sent."}
                                    "-1104": BadRequest, // {"code":-1104,"msg":"Not all sent parameters were read, read 8 parameters but was sent 9"}
                                    "-1105": BadRequest, // {"code":-1105,"msg":"Parameter %s was empty."}
                                    "-1106": BadRequest, // {"code":-1106,"msg":"Parameter %s sent when not required."}
                                    "-1108": BadRequest, // {"code":-1108,"msg":"Invalid asset."}
                                    "-1109": AuthenticationError, // {"code":-1109,"msg":"Invalid account."}
                                    "-1110": BadRequest, // {"code":-1110,"msg":"Invalid symbolType."}
                                    "-1111": BadRequest, // {"code":-1111,"msg":"Precision is over the maximum defined for this asset."}
                                    "-1112": InvalidOrder, // {"code":-1112,"msg":"No orders on book for symbol."}
                                    "-1113": BadRequest, // {"code":-1113,"msg":"Withdrawal amount must be negative."}
                                    "-1114": BadRequest, // {"code":-1114,"msg":"TimeInForce parameter sent when not required."}
                                    "-1115": BadRequest, // {"code":-1115,"msg":"Invalid timeInForce."}
                                    "-1116": BadRequest, // {"code":-1116,"msg":"Invalid orderType."}
                                    "-1117": BadRequest, // {"code":-1117,"msg":"Invalid side."}
                                    "-1118": BadRequest, // {"code":-1118,"msg":"New client order ID was empty."}
                                    "-1119": BadRequest, // {"code":-1119,"msg":"Original client order ID was empty."}
                                    "-1120": BadRequest, // {"code":-1120,"msg":"Invalid interval."}
                                    "-1121": BadSymbol, // {"code":-1121,"msg":"Invalid symbol."}
                                    "-1125": AuthenticationError, // {"code":-1125,"msg":"This listenKey does not exist."}
                                    "-1127": BadRequest, // {"code":-1127,"msg":"More than %s hours between startTime and endTime."}
                                    "-1128": BadRequest, // {"code":-1128,"msg":"{"code":-1128,"msg":"Combination of optional parameters invalid."}"}
                                    "-1130": BadRequest, // {"code":-1130,"msg":"Data sent for paramter %s is not valid."}
                                    "-1131": BadRequest, // {"code":-1131,"msg":"recvWindow must be less than 60000"}
                                    "-1135": BadRequest, // This error code will occur if a parameter requiring a JSON object is invalid.
                                    "-1136": BadRequest, // {"code":-1136,"msg":"Invalid newOrderRespType"}
                                    "-2008": AuthenticationError, // {"code":-2008,"msg":"Invalid Api-Key ID."}
                                    "-2010": ExchangeError, // {"code":-2010,"msg":"generic error code for createOrder -> 'Account has insufficient balance for requested action.', {"code":-2010,"msg":"Rest API trading is not enabled."}, etc..."}
                                    "-2011": OrderNotFound, // {"code":-2011,"msg":"cancelOrder(1, 'BTC/USDT') -> 'UNKNOWN_ORDER'"}
                                    "-2013": OrderNotFound, // {"code":-2013,"msg":"fetchOrder (1, 'BTC/USDT') -> 'Order does not exist'"}
                                    "-2014": AuthenticationError, // {"code":-2014,"msg":"API-key format invalid."}
                                    "-2015": AuthenticationError, // {"code":-2015,"msg":"Invalid API-key, IP, or permissions for action."}
                                    "-2016": BadRequest, // {"code":-2016,"msg":"No trading window could be found for the symbol. Try ticker/24hrs instead."}
                                    "-2018": InsufficientFunds, // {"code":-2018,"msg":"Balance is insufficient"}
                                    "-2019": InsufficientFunds, // {"code":-2019,"msg":"Margin is insufficient."}
                                    "-2020": OrderNotFillable, // {"code":-2020,"msg":"Unable to fill."}
                                    "-2021": OrderImmediatelyFillable, // {"code":-2021,"msg":"Order would immediately trigger."}
                                    "-2022": InvalidOrder, // {"code":-2022,"msg":"ReduceOnly Order is rejected."}
                                    "-2023": InsufficientFunds, // {"code":-2023,"msg":"User in liquidation mode now."}
                                    "-2024": InsufficientFunds, // {"code":-2024,"msg":"Position is not sufficient."}
                                    "-2025": InvalidOrder, // {"code":-2025,"msg":"Reach max open order limit."}
                                    "-2026": InvalidOrder, // {"code":-2026,"msg":"This OrderType is not supported when reduceOnly."}
                                    "-2027": InvalidOrder, // {"code":-2027,"msg":"Exceeded the maximum allowable position at current leverage."}
                                    "-2028": InsufficientFunds, // {"code":-2028,"msg":"Leverage is smaller than permitted: insufficient margin balance"}
                                    "-3000": ExchangeError, // {"code":-3000,"msg":"Internal server error."}
                                    "-3001": AuthenticationError, // {"code":-3001,"msg":"Please enable 2FA first."}
                                    "-3002": BadSymbol, // {"code":-3002,"msg":"We don't have this asset."}
                                    "-3003": BadRequest, // {"code":-3003,"msg":"Margin account does not exist."}
                                    "-3004": ExchangeError, // {"code":-3004,"msg":"Trade not allowed."}
                                    "-3005": InsufficientFunds, // {"code":-3005,"msg":"Transferring out not allowed. Transfer out amount exceeds max amount."}
                                    "-3006": InsufficientFunds, // {"code":-3006,"msg":"Your borrow amount has exceed maximum borrow amount."}
                                    "-3007": ExchangeError, // {"code":-3007,"msg":"You have pending transaction, please try again later.."}
                                    "-3008": InsufficientFunds, // {"code":-3008,"msg":"Borrow not allowed. Your borrow amount has exceed maximum borrow amount."}
                                    "-3009": BadRequest, // {"code":-3009,"msg":"This asset are not allowed to transfer into margin account currently."}
                                    "-3010": BadRequest, // {"code":-3010,"msg":"Repay not allowed. Repay amount exceeds borrow amount."}
                                    "-3011": BadRequest, // {"code":-3011,"msg":"Your input date is invalid."}
                                    "-3012": InsufficientFunds, // {"code":-3012,"msg":"Borrow is banned for this asset."}
                                    "-3013": BadRequest, // {"code":-3013,"msg":"Borrow amount less than minimum borrow amount."}
                                    "-3014": AccountSuspended, // {"code":-3014,"msg":"Borrow is banned for this account."}
                                    "-3015": BadRequest, // {"code":-3015,"msg":"Repay amount exceeds borrow amount."}
                                    "-3016": BadRequest, // {"code":-3016,"msg":"Repay amount less than minimum repay amount."}
                                    "-3017": ExchangeError, // {"code":-3017,"msg":"This asset are not allowed to transfer into margin account currently."}
                                    "-3018": AccountSuspended, // {"code":-3018,"msg":"Transferring in has been banned for this account."}
                                    "-3019": AccountSuspended, // {"code":-3019,"msg":"Transferring out has been banned for this account."}
                                    "-3020": InsufficientFunds, // {"code":-3020,"msg":"Transfer out amount exceeds max amount."}
                                    "-3021": BadRequest, // {"code":-3021,"msg":"Margin account are not allowed to trade this trading pair."}
                                    "-3022": AccountSuspended, // {"code":-3022,"msg":"You account's trading is banned."}
                                    "-3023": BadRequest, // {"code":-3023,"msg":"You can't transfer out/place order under current margin level."}
                                    "-3024": ExchangeError, // {"code":-3024,"msg":"The unpaid debt is too small after this repayment."}
                                    "-3025": BadRequest, // {"code":-3025,"msg":"Your input date is invalid."}
                                    "-3026": BadRequest, // {"code":-3026,"msg":"Your input param is invalid."}
                                    "-3027": BadSymbol, // {"code":-3027,"msg":"Not a valid margin asset."}
                                    "-3028": BadSymbol, // {"code":-3028,"msg":"Not a valid margin pair."}
                                    "-3029": ExchangeError, // {"code":-3029,"msg":"Transfer failed."}
                                    "-3036": AccountSuspended, // {"code":-3036,"msg":"This account is not allowed to repay."}
                                    "-3037": ExchangeError, // {"code":-3037,"msg":"PNL is clearing. Wait a second."}
                                    "-3038": BadRequest, // {"code":-3038,"msg":"Listen key not found."}
                                    "-3041": InsufficientFunds, // {"code":-3041,"msg":"Balance is not enough"}
                                    "-3042": BadRequest, // {"code":-3042,"msg":"PriceIndex not available for this margin pair."}
                                    "-3043": BadRequest, // {"code":-3043,"msg":"Transferring in not allowed."}
                                    "-3044": DDoSProtection, // {"code":-3044,"msg":"System busy."}
                                    "-3045": ExchangeError, // {"code":-3045,"msg":"The system doesn't have enough asset now."}
                                    "-3999": ExchangeError, // {"code":-3999,"msg":"This function is only available for invited users."}
                                    "-4001": BadRequest, // {"code":-4001 ,"msg":"Invalid operation."}
                                    "-4002": BadRequest, // {"code":-4002 ,"msg":"Invalid get."}
                                    "-4003": BadRequest, // {"code":-4003 ,"msg":"Your input email is invalid."}
                                    "-4004": AuthenticationError, // {"code":-4004,"msg":"You don't login or auth."}
                                    "-4005": RateLimitExceeded, // {"code":-4005 ,"msg":"Too many new requests."}
                                    "-4006": BadRequest, // {"code":-4006 ,"msg":"Support main account only."}
                                    "-4007": BadRequest, // {"code":-4007 ,"msg":"Address validation is not passed."}
                                    "-4008": BadRequest, // {"code":-4008 ,"msg":"Address tag validation is not passed."}
                                    "-4010": BadRequest, // {"code":-4010 ,"msg":"White list mail has been confirmed."} // [TODO] possible bug: it should probably be "has not been confirmed"
                                    "-4011": BadRequest, // {"code":-4011 ,"msg":"White list mail is invalid."}
                                    "-4012": BadRequest, // {"code":-4012 ,"msg":"White list is not opened."}
                                    "-4013": AuthenticationError, // {"code":-4013 ,"msg":"2FA is not opened."}
                                    "-4014": PermissionDenied, // {"code":-4014 ,"msg":"Withdraw is not allowed within 2 min login."}
                                    "-4015": ExchangeError, // {"code":-4015 ,"msg":"Withdraw is limited."}
                                    "-4016": PermissionDenied, // {"code":-4016 ,"msg":"Within 24 hours after password modification, withdrawal is prohibited."}
                                    "-4017": PermissionDenied, // {"code":-4017 ,"msg":"Within 24 hours after the release of 2FA, withdrawal is prohibited."}
                                    "-4018": BadSymbol, // {"code":-4018,"msg":"We don't have this asset."}
                                    "-4019": BadSymbol, // {"code":-4019,"msg":"Current asset is not open for withdrawal."}
                                    "-4021": BadRequest, // {"code":-4021,"msg":"Asset withdrawal must be an %s multiple of %s."}
                                    "-4022": BadRequest, // {"code":-4022,"msg":"Not less than the minimum pick-up quantity %s."}
                                    "-4023": ExchangeError, // {"code":-4023,"msg":"Within 24 hours, the withdrawal exceeds the maximum amount."}
                                    "-4024": InsufficientFunds, // {"code":-4024,"msg":"You don't have this asset."}
                                    "-4025": InsufficientFunds, // {"code":-4025,"msg":"The number of hold asset is less than zero."}
                                    "-4026": InsufficientFunds, // {"code":-4026,"msg":"You have insufficient balance."}
                                    "-4027": ExchangeError, // {"code":-4027,"msg":"Failed to obtain tranId."}
                                    "-4028": BadRequest, // {"code":-4028,"msg":"The amount of withdrawal must be greater than the Commission."}
                                    "-4029": BadRequest, // {"code":-4029,"msg":"The withdrawal record does not exist."}
                                    "-4030": ExchangeError, // {"code":-4030,"msg":"Confirmation of successful asset withdrawal. [TODO] possible bug in docs"}
                                    "-4031": ExchangeError, // {"code":-4031,"msg":"Cancellation failed."}
                                    "-4032": ExchangeError, // {"code":-4032,"msg":"Withdraw verification exception."}
                                    "-4033": BadRequest, // {"code":-4033,"msg":"Illegal address."}
                                    "-4034": ExchangeError, // {"code":-4034,"msg":"The address is suspected of fake."}
                                    "-4035": PermissionDenied, // {"code":-4035,"msg":"This address is not on the whitelist. Please join and try again."}
                                    "-4036": BadRequest, // {"code":-4036,"msg":"The new address needs to be withdrawn in {0} hours."}
                                    "-4037": ExchangeError, // {"code":-4037,"msg":"Re-sending Mail failed."}
                                    "-4038": ExchangeError, // {"code":-4038,"msg":"Please try again in 5 minutes."}
                                    "-4039": BadRequest, // {"code":-4039,"msg":"The user does not exist."}
                                    "-4040": BadRequest, // {"code":-4040,"msg":"This address not charged."}
                                    "-4041": ExchangeError, // {"code":-4041,"msg":"Please try again in one minute."}
                                    "-4042": ExchangeError, // {"code":-4042,"msg":"This asset cannot get deposit address again."}
                                    "-4043": BadRequest, // {"code":-4043,"msg":"More than 100 recharge addresses were used in 24 hours."}
                                    "-4044": BadRequest, // {"code":-4044,"msg":"This is a blacklist country."}
                                    "-4045": ExchangeError, // {"code":-4045,"msg":"Failure to acquire assets."}
                                    "-4046": AuthenticationError, // {"code":-4046,"msg":"Agreement not confirmed."}
                                    "-4047": BadRequest, // {"code":-4047,"msg":"Time interval must be within 0-90 days"}
                                    "-5001": BadRequest, // {"code":-5001,"msg":"Don't allow transfer to micro assets."}
                                    "-5002": InsufficientFunds, // {"code":-5002,"msg":"You have insufficient balance."}
                                    "-5003": InsufficientFunds, // {"code":-5003,"msg":"You don't have this asset."}
                                    "-5004": BadRequest, // {"code":-5004,"msg":"The residual balances of %s have exceeded 0.001BTC, Please re-choose."}
                                    "-5005": InsufficientFunds, // {"code":-5005,"msg":"The residual balances of %s is too low, Please re-choose."}
                                    "-5006": BadRequest, // {"code":-5006,"msg":"Only transfer once in 24 hours."}
                                    "-5007": BadRequest, // {"code":-5007,"msg":"Quantity must be greater than zero."}
                                    "-5008": InsufficientFunds, // {"code":-5008,"msg":"Insufficient amount of returnable assets."}
                                    "-5009": BadRequest, // {"code":-5009,"msg":"Product does not exist."}
                                    "-5010": ExchangeError, // {"code":-5010,"msg":"Asset transfer fail."}
                                    "-5011": BadRequest, // {"code":-5011,"msg":"future account not exists."}
                                    "-5012": ExchangeError, // {"code":-5012,"msg":"Asset transfer is in pending."}
                                    "-5013": InsufficientFunds, // {"code":-5013,"msg":"Asset transfer failed: insufficient balance""} // undocumented
                                    "-5021": BadRequest, // {"code":-5021,"msg":"This parent sub have no relation"}
                                    "-6001": BadRequest, // {"code":-6001,"msg":"Daily product not exists."}
                                    "-6003": BadRequest, // {"code":-6003,"msg":"Product not exist or you don't have permission"}
                                    "-6004": ExchangeError, // {"code":-6004,"msg":"Product not in purchase status"}
                                    "-6005": InvalidOrder, // {"code":-6005,"msg":"Smaller than min purchase limit"}
                                    "-6006": BadRequest, // {"code":-6006,"msg":"Redeem amount error"}
                                    "-6007": BadRequest, // {"code":-6007,"msg":"Not in redeem time"}
                                    "-6008": BadRequest, // {"code":-6008,"msg":"Product not in redeem status"}
                                    "-6009": RateLimitExceeded, // {"code":-6009,"msg":"Request frequency too high"}
                                    "-6011": BadRequest, // {"code":-6011,"msg":"Exceeding the maximum num allowed to purchase per user"}
                                    "-6012": InsufficientFunds, // {"code":-6012,"msg":"Balance not enough"}
                                    "-6013": ExchangeError, // {"code":-6013,"msg":"Purchasing failed"}
                                    "-6014": BadRequest, // {"code":-6014,"msg":"Exceed up-limit allowed to purchased"}
                                    "-6015": BadRequest, // {"code":-6015,"msg":"Empty request body"}
                                    "-6016": BadRequest, // {"code":-6016,"msg":"Parameter err"}
                                    "-6017": BadRequest, // {"code":-6017,"msg":"Not in whitelist"}
                                    "-6018": BadRequest, // {"code":-6018,"msg":"Asset not enough"}
                                    "-6019": AuthenticationError, // {"code":-6019,"msg":"Need confirm"}
                                    "-6020": BadRequest, // {"code":-6020,"msg":"Project not exists"}
                                    "-7001": BadRequest, // {"code":-7001,"msg":"Date range is not supported."}
                                    "-7002": BadRequest, // {"code":-7002,"msg":"Data request type is not supported."}
                                    "-9000": InsufficientFunds, // {"code":-9000,"msg":"user have no avaliable amount"}"
                                    "-10017": BadRequest, // {"code":-10017,"msg":"Repay amount should not be larger than liability."}
                                    "-11008": InsufficientFunds, // {"code":-11008,"msg":"Exceeding the account's maximum borrowable limit."} // undocumented
                                    "-12014": RateLimitExceeded, // {"code":-12014,"msg":"More than 1 request in 3 seconds"}
                                    "-13000": BadRequest, // {"code":-13000,"msg":"Redeption of the token is forbiden now"}
                                    "-13001": BadRequest, // {"code":-13001,"msg":"Exceeds individual 24h redemption limit of the token"}
                                    "-13002": BadRequest, // {"code":-13002,"msg":"Exceeds total 24h redemption limit of the token"}
                                    "-13003": BadRequest, // {"code":-13003,"msg":"Subscription of the token is forbiden now"}
                                    "-13004": BadRequest, // {"code":-13004,"msg":"Exceeds individual 24h subscription limit of the token"}
                                    "-13005": BadRequest, // {"code":-13005,"msg":"Exceeds total 24h subscription limit of the token"}
                                    "-13006": InvalidOrder, // {"code":-13006,"msg":"Subscription amount is too small"}
                                    "-13007": AuthenticationError, // {"code":-13007,"msg":"The Agreement is not signed"}
                                    "-21001": BadRequest, // {"code":-21001,"msg":"USER_IS_NOT_UNIACCOUNT"}
                                    "-21002": BadRequest, // {"code":-21002,"msg":"UNI_ACCOUNT_CANT_TRANSFER_FUTURE"}
                                    "-21003": BadRequest, // {"code":-21003,"msg":"NET_ASSET_MUST_LTE_RATIO"}
                                    100001003: BadRequest, // {"code":100001003,"msg":"Verification failed"} // undocumented
                                },
                                broad: {
                                    "has no operation privilege":
                                        PermissionDenied,
                                    MAX_POSITION: InvalidOrder, // {"code":-2010,"msg":"Filter failure: MAX_POSITION"}
                                },
                            },
                        });
                    }

                    costToPrecision(symbol, cost) {
                        return this.decimalToPrecision(
                            cost,
                            TRUNCATE,
                            this.markets[symbol]["precision"]["quote"],
                            this.precisionMode,
                            this.paddingMode
                        );
                    }

                    currencyToPrecision(code, fee, networkCode = undefined) {
                        // info is available in currencies only if the user has configured his api keys
                        if (
                            this.safeValue(
                                this.currencies[code],
                                "precision"
                            ) !== undefined
                        ) {
                            return this.decimalToPrecision(
                                fee,
                                TRUNCATE,
                                this.currencies[code]["precision"],
                                this.precisionMode,
                                this.paddingMode
                            );
                        } else {
                            return this.numberToString(fee);
                        }
                    }

                    nonce() {
                        return (
                            this.milliseconds() - this.options["timeDifference"]
                        );
                    }

                    async fetchTime(params = {}) {
                        /**
                         * @method
                         * @name binance#fetchTime
                         * @description fetches the current integer timestamp in milliseconds from the exchange server
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {int} the current integer timestamp in milliseconds from the exchange server
                         */
                        const defaultType = this.safeString2(
                            this.options,
                            "fetchTime",
                            "defaultType",
                            "spot"
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        const query = this.omit(params, "type");
                        let method = "publicGetTime";
                        if (type === "future") {
                            method = "fapiPublicGetTime";
                        } else if (type === "delivery") {
                            method = "dapiPublicGetTime";
                        }
                        const response = await this[method](query);
                        return this.safeInteger(response, "serverTime");
                    }

                    async fetchCurrencies(params = {}) {
                        /**
                         * @method
                         * @name binance#fetchCurrencies
                         * @description fetches all available currencies on an exchange
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} an associative dictionary of currencies
                         */
                        const fetchCurrenciesEnabled = this.safeValue(
                            this.options,
                            "fetchCurrencies"
                        );
                        if (!fetchCurrenciesEnabled) {
                            return undefined;
                        }
                        // this endpoint requires authentication
                        // while fetchCurrencies is a public API method by design
                        // therefore we check the keys here
                        // and fallback to generating the currencies from the markets
                        if (!this.checkRequiredCredentials(false)) {
                            return undefined;
                        }
                        // sandbox/testnet does not support sapi endpoints
                        const apiBackup = this.safeString(
                            this.urls,
                            "apiBackup"
                        );
                        if (apiBackup !== undefined) {
                            return undefined;
                        }
                        const response = await this.sapiGetCapitalConfigGetall(
                            params
                        );
                        const result = {};
                        for (let i = 0; i < response.length; i++) {
                            //
                            //    {
                            //        "coin": "LINK",
                            //        "depositAllEnable": true,
                            //        "withdrawAllEnable": true,
                            //        "name": "ChainLink",
                            //        "free": "0",
                            //        "locked": "0",
                            //        "freeze": "0",
                            //        "withdrawing": "0",
                            //        "ipoing": "0",
                            //        "ipoable": "0",
                            //        "storage": "0",
                            //        "isLegalMoney": false,
                            //        "trading": true,
                            //        "networkList": [
                            //            {
                            //                "network": "BSC",
                            //                "coin": "LINK",
                            //                "withdrawIntegerMultiple": "0.00000001",
                            //                "isDefault": false,
                            //                "depositEnable": true,
                            //                "withdrawEnable": true,
                            //                "depositDesc": "",
                            //                "withdrawDesc": "",
                            //                "specialTips": "",
                            //                "specialWithdrawTips": "The network you have selected is BSC. Please ensure that the withdrawal address supports the Binance Smart Chain network. You will lose your assets if the chosen platform does not support retrievals.",
                            //                "name": "BNB Smart Chain (BEP20)",
                            //                "resetAddressStatus": false,
                            //                "addressRegex": "^(0x)[0-9A-Fa-f]{40}$",
                            //                "addressRule": "",
                            //                "memoRegex": "",
                            //                "withdrawFee": "0.012",
                            //                "withdrawMin": "0.024",
                            //                "withdrawMax": "9999999999.99999999",
                            //                "minConfirm": "15",
                            //                "unLockConfirm": "0",
                            //                "sameAddress": false,
                            //                "estimatedArrivalTime": "5",
                            //                "busy": false,
                            //                "country": "AE,BINANCE_BAHRAIN_BSC"
                            //            },
                            //            {
                            //                "network": "BNB",
                            //                "coin": "LINK",
                            //                "withdrawIntegerMultiple": "0.00000001",
                            //                "isDefault": false,
                            //                "depositEnable": true,
                            //                "withdrawEnable": true,
                            //                "depositDesc": "",
                            //                "withdrawDesc": "",
                            //                "specialTips": "Both a MEMO and an Address are required to successfully deposit your LINK BEP2 tokens to Binance.",
                            //                "specialWithdrawTips": "",
                            //                "name": "BNB Beacon Chain (BEP2)",
                            //                "resetAddressStatus": false,
                            //                "addressRegex": "^(bnb1)[0-9a-z]{38}$",
                            //                "addressRule": "",
                            //                "memoRegex": "^[0-9A-Za-z\\-_]{1,120}$",
                            //                "withdrawFee": "0.002",
                            //                "withdrawMin": "0.01",
                            //                "withdrawMax": "10000000000",
                            //                "minConfirm": "1",
                            //                "unLockConfirm": "0",
                            //                "sameAddress": true,
                            //                "estimatedArrivalTime": "5",
                            //                "busy": false,
                            //                "country": "AE,BINANCE_BAHRAIN_BSC"
                            //            },
                            //            {
                            //                "network": "ETH",
                            //                "coin": "LINK",
                            //                "withdrawIntegerMultiple": "0.00000001",
                            //                "isDefault": true,
                            //                "depositEnable": true,
                            //                "withdrawEnable": true,
                            //                "depositDesc": "",
                            //                "withdrawDesc": "",
                            //                "name": "Ethereum (ERC20)",
                            //                "resetAddressStatus": false,
                            //                "addressRegex": "^(0x)[0-9A-Fa-f]{40}$",
                            //                "addressRule": "",
                            //                "memoRegex": "",
                            //                "withdrawFee": "0.55",
                            //                "withdrawMin": "1.1",
                            //                "withdrawMax": "10000000000",
                            //                "minConfirm": "12",
                            //                "unLockConfirm": "0",
                            //                "sameAddress": false,
                            //                "estimatedArrivalTime": "5",
                            //                "busy": false,
                            //                "country": "AE,BINANCE_BAHRAIN_BSC"
                            //            }
                            //        ]
                            //    }
                            //
                            const entry = response[i];
                            const id = this.safeString(entry, "coin");
                            const name = this.safeString(entry, "name");
                            const code = this.safeCurrencyCode(id);
                            let minPrecision = undefined;
                            let isWithdrawEnabled = true;
                            let isDepositEnabled = true;
                            const networkList = this.safeValue(
                                entry,
                                "networkList",
                                []
                            );
                            const fees = {};
                            let fee = undefined;
                            for (let j = 0; j < networkList.length; j++) {
                                const networkItem = networkList[j];
                                const network = this.safeString(
                                    networkItem,
                                    "network"
                                );
                                // const name = this.safeString (networkItem, 'name');
                                const withdrawFee = this.safeNumber(
                                    networkItem,
                                    "withdrawFee"
                                );
                                const depositEnable = this.safeValue(
                                    networkItem,
                                    "depositEnable"
                                );
                                const withdrawEnable = this.safeValue(
                                    networkItem,
                                    "withdrawEnable"
                                );
                                isDepositEnabled =
                                    isDepositEnabled || depositEnable;
                                isWithdrawEnabled =
                                    isWithdrawEnabled || withdrawEnable;
                                fees[network] = withdrawFee;
                                const isDefault = this.safeValue(
                                    networkItem,
                                    "isDefault"
                                );
                                if (isDefault || fee === undefined) {
                                    fee = withdrawFee;
                                }
                                const precisionTick = this.safeString(
                                    networkItem,
                                    "withdrawIntegerMultiple"
                                );
                                // avoid zero values, which are mostly from fiat or leveraged tokens : https://github.com/ccxt/ccxt/pull/14902#issuecomment-1271636731
                                // so, when there is zero instead of i.e. 0.001, then we skip those cases, because we don't know the precision - it might be because of network is suspended or other reasons
                                if (!Precise.stringEq(precisionTick, "0")) {
                                    minPrecision =
                                        minPrecision === undefined
                                            ? precisionTick
                                            : Precise.stringMin(
                                                  minPrecision,
                                                  precisionTick
                                              );
                                }
                            }
                            const trading = this.safeValue(entry, "trading");
                            const active =
                                isWithdrawEnabled &&
                                isDepositEnabled &&
                                trading;
                            let maxDecimalPlaces = undefined;
                            if (minPrecision !== undefined) {
                                maxDecimalPlaces = parseInt(
                                    this.numberToString(
                                        this.precisionFromString(minPrecision)
                                    )
                                );
                            }
                            result[code] = {
                                id: id,
                                name: name,
                                code: code,
                                precision: maxDecimalPlaces,
                                info: entry,
                                active: active,
                                deposit: isDepositEnabled,
                                withdraw: isWithdrawEnabled,
                                networks: networkList,
                                fee: fee,
                                fees: fees,
                                limits: this.limits,
                            };
                        }
                        return result;
                    }

                    async fetchMarkets(params = {}) {
                        /**
                         * @method
                         * @name binance#fetchMarkets
                         * @description retrieves data on all markets for binance
                         * @param {object} params extra parameters specific to the exchange api endpoint
                         * @returns {[object]} an array of objects representing market data
                         */
                        const defaultType = this.safeString2(
                            this.options,
                            "fetchMarkets",
                            "defaultType",
                            "spot"
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        const query = this.omit(params, "type");
                        const spot = type === "spot";
                        const margin = type === "margin";
                        const future = type === "future";
                        const delivery = type === "delivery";
                        if (!spot && !margin && !future && !delivery) {
                            throw new ExchangeError(
                                this.id +
                                    " does not support '" +
                                    type +
                                    "' type, set exchange.options['defaultType'] to 'spot', 'margin', 'delivery' or 'future'"
                            ); // eslint-disable-line quotes
                        }
                        let method = "publicGetExchangeInfo";
                        if (future) {
                            method = "fapiPublicGetExchangeInfo";
                        } else if (delivery) {
                            method = "dapiPublicGetExchangeInfo";
                        }
                        const response = await this[method](query);
                        //
                        // spot / margin
                        //
                        //     {
                        //         "timezone":"UTC",
                        //         "serverTime":1575416692969,
                        //         "rateLimits":[
                        //             {"rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":1200},
                        //             {"rateLimitType":"ORDERS","interval":"SECOND","intervalNum":10,"limit":100},
                        //             {"rateLimitType":"ORDERS","interval":"DAY","intervalNum":1,"limit":200000}
                        //         ],
                        //         "exchangeFilters":[],
                        //         "symbols":[
                        //             {
                        //                 "symbol":"ETHBTC",
                        //                 "status":"TRADING",
                        //                 "baseAsset":"ETH",
                        //                 "baseAssetPrecision":8,
                        //                 "quoteAsset":"BTC",
                        //                 "quotePrecision":8,
                        //                 "baseCommissionPrecision":8,
                        //                 "quoteCommissionPrecision":8,
                        //                 "orderTypes":["LIMIT","LIMIT_MAKER","MARKET","STOP_LOSS_LIMIT","TAKE_PROFIT_LIMIT"],
                        //                 "icebergAllowed":true,
                        //                 "ocoAllowed":true,
                        //                 "quoteOrderQtyMarketAllowed":true,
                        //                 "allowTrailingStop":false,
                        //                 "isSpotTradingAllowed":true,
                        //                 "isMarginTradingAllowed":true,
                        //                 "filters":[
                        //                     {"filterType":"PRICE_FILTER","minPrice":"0.00000100","maxPrice":"100000.00000000","tickSize":"0.00000100"},
                        //                     {"filterType":"PERCENT_PRICE","multiplierUp":"5","multiplierDown":"0.2","avgPriceMins":5},
                        //                     {"filterType":"LOT_SIZE","minQty":"0.00100000","maxQty":"100000.00000000","stepSize":"0.00100000"},
                        //                     {"filterType":"MIN_NOTIONAL","minNotional":"0.00010000","applyToMarket":true,"avgPriceMins":5},
                        //                     {"filterType":"ICEBERG_PARTS","limit":10},
                        //                     {"filterType":"MARKET_LOT_SIZE","minQty":"0.00000000","maxQty":"63100.00000000","stepSize":"0.00000000"},
                        //                     {"filterType":"MAX_NUM_ORDERS","maxNumOrders":200},
                        //                     {"filterType":"MAX_NUM_ALGO_ORDERS","maxNumAlgoOrders":5}
                        //                 ],
                        //                 "permissions":["SPOT","MARGIN"]}
                        //             },
                        //         ],
                        //     }
                        //
                        // futures/usdt-margined (fapi)
                        //
                        //     {
                        //         "timezone":"UTC",
                        //         "serverTime":1575417244353,
                        //         "rateLimits":[
                        //             {"rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":1200},
                        //             {"rateLimitType":"ORDERS","interval":"MINUTE","intervalNum":1,"limit":1200}
                        //         ],
                        //         "exchangeFilters":[],
                        //         "symbols":[
                        //             {
                        //                 "symbol":"BTCUSDT",
                        //                 "status":"TRADING",
                        //                 "maintMarginPercent":"2.5000",
                        //                 "requiredMarginPercent":"5.0000",
                        //                 "baseAsset":"BTC",
                        //                 "quoteAsset":"USDT",
                        //                 "pricePrecision":2,
                        //                 "quantityPrecision":3,
                        //                 "baseAssetPrecision":8,
                        //                 "quotePrecision":8,
                        //                 "filters":[
                        //                     {"minPrice":"0.01","maxPrice":"100000","filterType":"PRICE_FILTER","tickSize":"0.01"},
                        //                     {"stepSize":"0.001","filterType":"LOT_SIZE","maxQty":"1000","minQty":"0.001"},
                        //                     {"stepSize":"0.001","filterType":"MARKET_LOT_SIZE","maxQty":"1000","minQty":"0.001"},
                        //                     {"limit":200,"filterType":"MAX_NUM_ORDERS"},
                        //                     {"multiplierDown":"0.8500","multiplierUp":"1.1500","multiplierDecimal":"4","filterType":"PERCENT_PRICE"}
                        //                 ],
                        //                 "orderTypes":["LIMIT","MARKET","STOP"],
                        //                 "timeInForce":["GTC","IOC","FOK","GTX"]
                        //             }
                        //         ]
                        //     }
                        //
                        // delivery/coin-margined (dapi)
                        //
                        //     {
                        //         "timezone": "UTC",
                        //         "serverTime": 1597667052958,
                        //         "rateLimits": [
                        //             {"rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":6000},
                        //             {"rateLimitType":"ORDERS","interval":"MINUTE","intervalNum":1,"limit":6000}
                        //         ],
                        //         "exchangeFilters": [],
                        //         "symbols": [
                        //             {
                        //                 "symbol": "BTCUSD_200925",
                        //                 "pair": "BTCUSD",
                        //                 "contractType": "CURRENT_QUARTER",
                        //                 "deliveryDate": 1601020800000,
                        //                 "onboardDate": 1590739200000,
                        //                 "contractStatus": "TRADING",
                        //                 "contractSize": 100,
                        //                 "marginAsset": "BTC",
                        //                 "maintMarginPercent": "2.5000",
                        //                 "requiredMarginPercent": "5.0000",
                        //                 "baseAsset": "BTC",
                        //                 "quoteAsset": "USD",
                        //                 "pricePrecision": 1,
                        //                 "quantityPrecision": 0,
                        //                 "baseAssetPrecision": 8,
                        //                 "quotePrecision": 8,
                        //                 "equalQtyPrecision": 4,
                        //                 "filters": [
                        //                     {"minPrice":"0.1","maxPrice":"100000","filterType":"PRICE_FILTER","tickSize":"0.1"},
                        //                     {"stepSize":"1","filterType":"LOT_SIZE","maxQty":"100000","minQty":"1"},
                        //                     {"stepSize":"0","filterType":"MARKET_LOT_SIZE","maxQty":"100000","minQty":"1"},
                        //                     {"limit":200,"filterType":"MAX_NUM_ORDERS"},
                        //                     {"multiplierDown":"0.9500","multiplierUp":"1.0500","multiplierDecimal":"4","filterType":"PERCENT_PRICE"}
                        //                 ],
                        //                 "orderTypes": ["LIMIT","MARKET","STOP","STOP_MARKET","TAKE_PROFIT","TAKE_PROFIT_MARKET","TRAILING_STOP_MARKET"],
                        //                 "timeInForce": ["GTC","IOC","FOK","GTX"]
                        //             },
                        //             {
                        //                 "symbol": "BTCUSD_PERP",
                        //                 "pair": "BTCUSD",
                        //                 "contractType": "PERPETUAL",
                        //                 "deliveryDate": 4133404800000,
                        //                 "onboardDate": 1596006000000,
                        //                 "contractStatus": "TRADING",
                        //                 "contractSize": 100,
                        //                 "marginAsset": "BTC",
                        //                 "maintMarginPercent": "2.5000",
                        //                 "requiredMarginPercent": "5.0000",
                        //                 "baseAsset": "BTC",
                        //                 "quoteAsset": "USD",
                        //                 "pricePrecision": 1,
                        //                 "quantityPrecision": 0,
                        //                 "baseAssetPrecision": 8,
                        //                 "quotePrecision": 8,
                        //                 "equalQtyPrecision": 4,
                        //                 "filters": [
                        //                     {"minPrice":"0.1","maxPrice":"100000","filterType":"PRICE_FILTER","tickSize":"0.1"},
                        //                     {"stepSize":"1","filterType":"LOT_SIZE","maxQty":"100000","minQty":"1"},
                        //                     {"stepSize":"1","filterType":"MARKET_LOT_SIZE","maxQty":"100000","minQty":"1"},
                        //                     {"limit":200,"filterType":"MAX_NUM_ORDERS"},
                        //                     {"multiplierDown":"0.8500","multiplierUp":"1.1500","multiplierDecimal":"4","filterType":"PERCENT_PRICE"}
                        //                 ],
                        //                 "orderTypes": ["LIMIT","MARKET","STOP","STOP_MARKET","TAKE_PROFIT","TAKE_PROFIT_MARKET","TRAILING_STOP_MARKET"],
                        //                 "timeInForce": ["GTC","IOC","FOK","GTX"]
                        //             }
                        //         ]
                        //     }
                        //
                        if (this.options["adjustForTimeDifference"]) {
                            await this.loadTimeDifference();
                        }
                        const markets = this.safeValue(response, "symbols", []);
                        const result = [];
                        for (let i = 0; i < markets.length; i++) {
                            const market = markets[i];
                            const id = this.safeString(market, "symbol");
                            const lowercaseId = this.safeStringLower(
                                market,
                                "symbol"
                            );
                            const baseId = this.safeString(market, "baseAsset");
                            const quoteId = this.safeString(
                                market,
                                "quoteAsset"
                            );
                            const settleId = this.safeString(
                                market,
                                "marginAsset"
                            );
                            const base = this.safeCurrencyCode(baseId);
                            const quote = this.safeCurrencyCode(quoteId);
                            const settle = this.safeCurrencyCode(settleId);
                            const contract = future || delivery;
                            const contractType = this.safeString(
                                market,
                                "contractType"
                            );
                            const idSymbol =
                                contract && contractType !== "PERPETUAL";
                            let symbol = undefined;
                            let expiry = undefined;
                            if (idSymbol) {
                                symbol = id;
                                expiry = this.safeInteger(
                                    market,
                                    "deliveryDate"
                                );
                            } else {
                                symbol = base + "/" + quote;
                            }
                            const filters = this.safeValue(
                                market,
                                "filters",
                                []
                            );
                            const filtersByType = this.indexBy(
                                filters,
                                "filterType"
                            );
                            const status = this.safeString2(
                                market,
                                "status",
                                "contractStatus"
                            );
                            let contractSize = undefined;
                            let fees = this.fees;
                            let linear = undefined;
                            let inverse = undefined;
                            if (contract) {
                                contractSize = this.safeNumber(
                                    market,
                                    "contractSize",
                                    this.parseNumber("1")
                                );
                                fees = this.fees[type];
                                linear = settle === quote;
                                inverse = settle === base;
                            }
                            let active = status === "TRADING";
                            if (spot) {
                                const permissions = this.safeValue(
                                    market,
                                    "permissions",
                                    []
                                );
                                for (let j = 0; j < permissions.length; j++) {
                                    if (permissions[j] === "TRD_GRP_003") {
                                        active = false;
                                        break;
                                    }
                                }
                            }
                            const isMarginTradingAllowed = this.safeValue(
                                market,
                                "isMarginTradingAllowed",
                                false
                            );
                            const entry = {
                                id: id,
                                lowercaseId: lowercaseId,
                                symbol: symbol,
                                base: base,
                                quote: quote,
                                settle: settle,
                                baseId: baseId,
                                quoteId: quoteId,
                                settleId: settleId,
                                type: type,
                                spot: spot,
                                margin: spot && isMarginTradingAllowed,
                                swap: future,
                                future: future,
                                delivery: delivery,
                                option: false,
                                active: active,
                                contract: contract,
                                linear: linear,
                                inverse: inverse,
                                taker: fees["trading"]["taker"],
                                maker: fees["trading"]["maker"],
                                contractSize: contractSize,
                                expiry: expiry,
                                expiryDatetime: this.iso8601(expiry),
                                strike: undefined,
                                optionType: undefined,
                                precision: {
                                    amount: this.safeInteger(
                                        market,
                                        "quantityPrecision"
                                    ),
                                    price: this.safeInteger(
                                        market,
                                        "pricePrecision"
                                    ),
                                    base: this.safeInteger(
                                        market,
                                        "baseAssetPrecision"
                                    ),
                                    quote: this.safeInteger(
                                        market,
                                        "quotePrecision"
                                    ),
                                },
                                limits: {
                                    leverage: {
                                        min: undefined,
                                        max: undefined,
                                    },
                                    amount: {
                                        min: undefined,
                                        max: undefined,
                                    },
                                    price: {
                                        min: undefined,
                                        max: undefined,
                                    },
                                    cost: {
                                        min: undefined,
                                        max: undefined,
                                    },
                                },
                                info: market,
                            };
                            if ("PRICE_FILTER" in filtersByType) {
                                const filter = this.safeValue(
                                    filtersByType,
                                    "PRICE_FILTER",
                                    {}
                                );
                                // PRICE_FILTER reports zero values for maxPrice
                                // since they updated filter types in November 2018
                                // https://github.com/ccxt/ccxt/issues/4286
                                // therefore limits['price']['max'] doesn't have any meaningful value except undefined
                                entry["limits"]["price"] = {
                                    min: this.safeNumber(filter, "minPrice"),
                                    max: this.safeNumber(filter, "maxPrice"),
                                };
                                entry["precision"]["price"] =
                                    this.precisionFromString(
                                        filter["tickSize"]
                                    );
                            }
                            if ("LOT_SIZE" in filtersByType) {
                                const filter = this.safeValue(
                                    filtersByType,
                                    "LOT_SIZE",
                                    {}
                                );
                                const stepSize = this.safeString(
                                    filter,
                                    "stepSize"
                                );
                                entry["precision"]["amount"] =
                                    this.precisionFromString(stepSize);
                                entry["limits"]["amount"] = {
                                    min: this.safeNumber(filter, "minQty"),
                                    max: this.safeNumber(filter, "maxQty"),
                                };
                            }
                            if ("MARKET_LOT_SIZE" in filtersByType) {
                                const filter = this.safeValue(
                                    filtersByType,
                                    "MARKET_LOT_SIZE",
                                    {}
                                );
                                entry["limits"]["market"] = {
                                    min: this.safeNumber(filter, "minQty"),
                                    max: this.safeNumber(filter, "maxQty"),
                                };
                            }
                            if ("MIN_NOTIONAL" in filtersByType) {
                                const filter = this.safeValue(
                                    filtersByType,
                                    "MIN_NOTIONAL",
                                    {}
                                );
                                entry["limits"]["cost"]["min"] =
                                    this.safeNumber2(
                                        filter,
                                        "minNotional",
                                        "notional"
                                    );
                            }
                            result.push(entry);
                        }
                        return result;
                    }

                    parseBalanceHelper(entry) {
                        const account = this.account();
                        account["used"] = this.safeString(entry, "locked");
                        account["free"] = this.safeString(entry, "free");
                        const interest = this.safeString(entry, "interest");
                        const debt = this.safeString(entry, "borrowed");
                        account["debt"] = Precise.stringAdd(debt, interest);
                        return account;
                    }

                    parseBalance(
                        response,
                        type = undefined,
                        marginMode = undefined
                    ) {
                        const result = {
                            info: response,
                        };
                        let timestamp = undefined;
                        const isolated = marginMode === "isolated";
                        const cross =
                            type === "margin" || marginMode === "cross";
                        if (!isolated && (type === "spot" || cross)) {
                            timestamp = this.safeInteger(
                                response,
                                "updateTime"
                            );
                            const balances = this.safeValue2(
                                response,
                                "balances",
                                "userAssets",
                                []
                            );
                            for (let i = 0; i < balances.length; i++) {
                                const balance = balances[i];
                                const currencyId = this.safeString(
                                    balance,
                                    "asset"
                                );
                                const code = this.safeCurrencyCode(currencyId);
                                const account = this.account();
                                account["free"] = this.safeString(
                                    balance,
                                    "free"
                                );
                                account["used"] = this.safeString(
                                    balance,
                                    "locked"
                                );
                                if (cross) {
                                    const debt = this.safeString(
                                        balance,
                                        "borrowed"
                                    );
                                    const interest = this.safeString(
                                        balance,
                                        "interest"
                                    );
                                    account["debt"] = Precise.stringAdd(
                                        debt,
                                        interest
                                    );
                                }
                                result[code] = account;
                            }
                        } else if (isolated) {
                            const assets = this.safeValue(response, "assets");
                            for (let i = 0; i < assets.length; i++) {
                                const asset = assets[i];
                                const marketId = this.safeValue(
                                    asset,
                                    "symbol"
                                );
                                const symbol = this.safeSymbol(marketId);
                                const base = this.safeValue(
                                    asset,
                                    "baseAsset",
                                    {}
                                );
                                const quote = this.safeValue(
                                    asset,
                                    "quoteAsset",
                                    {}
                                );
                                const baseCode = this.safeCurrencyCode(
                                    this.safeString(base, "asset")
                                );
                                const quoteCode = this.safeCurrencyCode(
                                    this.safeString(quote, "asset")
                                );
                                const subResult = {};
                                subResult[baseCode] =
                                    this.parseBalanceHelper(base);
                                subResult[quoteCode] =
                                    this.parseBalanceHelper(quote);
                                result[symbol] = this.safeBalance(subResult);
                            }
                        } else if (type === "savings") {
                            const positionAmountVos = this.safeValue(
                                response,
                                "positionAmountVos",
                                []
                            );
                            for (let i = 0; i < positionAmountVos.length; i++) {
                                const entry = positionAmountVos[i];
                                const currencyId = this.safeString(
                                    entry,
                                    "asset"
                                );
                                const code = this.safeCurrencyCode(currencyId);
                                const account = this.account();
                                const usedAndTotal = this.safeString(
                                    entry,
                                    "amount"
                                );
                                account["total"] = usedAndTotal;
                                account["used"] = usedAndTotal;
                                result[code] = account;
                            }
                        } else if (type === "funding") {
                            for (let i = 0; i < response.length; i++) {
                                const entry = response[i];
                                const account = this.account();
                                const currencyId = this.safeString(
                                    entry,
                                    "asset"
                                );
                                const code = this.safeCurrencyCode(currencyId);
                                account["free"] = this.safeString(
                                    entry,
                                    "free"
                                );
                                const frozen = this.safeString(entry, "freeze");
                                const withdrawing = this.safeString(
                                    entry,
                                    "withdrawing"
                                );
                                const locked = this.safeString(entry, "locked");
                                account["used"] = Precise.stringAdd(
                                    frozen,
                                    Precise.stringAdd(locked, withdrawing)
                                );
                                result[code] = account;
                            }
                        } else {
                            let balances = response;
                            if (!Array.isArray(response)) {
                                balances = this.safeValue(
                                    response,
                                    "assets",
                                    []
                                );
                            }
                            for (let i = 0; i < balances.length; i++) {
                                const balance = balances[i];
                                const currencyId = this.safeString(
                                    balance,
                                    "asset"
                                );
                                const code = this.safeCurrencyCode(currencyId);
                                const account = this.account();
                                account["free"] = this.safeString(
                                    balance,
                                    "availableBalance"
                                );
                                account["used"] = this.safeString(
                                    balance,
                                    "initialMargin"
                                );
                                account["total"] = this.safeString2(
                                    balance,
                                    "marginBalance",
                                    "balance"
                                );
                                result[code] = account;
                            }
                        }
                        result["timestamp"] = timestamp;
                        result["datetime"] = this.iso8601(timestamp);
                        return isolated ? result : this.safeBalance(result);
                    }

                    async fetchBalance(params = {}) {
                        /**
                         * @method
                         * @name binance#fetchBalance
                         * @description query for balance and get the amount of funds available for trading or funds locked in orders
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @param {string|undefined} params.type 'future', 'delivery', 'savings', 'funding', or 'spot'
                         * @param {string|undefined} params.marginMode 'cross' or 'isolated', for margin trading, uses this.options.defaultMarginMode if not passed, defaults to undefined/None/null
                         * @param {[string]|undefined} params.symbols unified market symbols, only used in isolated margin mode
                         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
                         */
                        await this.loadMarkets();
                        const defaultType = this.safeString2(
                            this.options,
                            "fetchBalance",
                            "defaultType",
                            "spot"
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        const [marginMode, query] =
                            this.handleMarginModeAndParams(
                                "fetchBalance",
                                params
                            );
                        let method = "privateGetAccount";
                        const request = {};
                        if (type === "future") {
                            const options = this.safeValue(
                                this.options,
                                type,
                                {}
                            );
                            const fetchBalanceOptions = this.safeValue(
                                options,
                                "fetchBalance",
                                {}
                            );
                            method = this.safeString(
                                fetchBalanceOptions,
                                "method",
                                "fapiPrivateV2GetAccount"
                            );
                        } else if (type === "delivery") {
                            const options = this.safeValue(
                                this.options,
                                type,
                                {}
                            );
                            const fetchBalanceOptions = this.safeValue(
                                options,
                                "fetchBalance",
                                {}
                            );
                            method = this.safeString(
                                fetchBalanceOptions,
                                "method",
                                "dapiPrivateGetAccount"
                            );
                        } else if (
                            type === "margin" ||
                            marginMode === "cross"
                        ) {
                            method = "sapiGetMarginAccount";
                        } else if (type === "savings") {
                            method = "sapiGetLendingUnionAccount";
                        } else if (type === "funding") {
                            method = "sapiPostAssetGetFundingAsset";
                        } else if (marginMode === "isolated") {
                            method = "sapiGetMarginIsolatedAccount";
                            const paramSymbols = this.safeValue(
                                params,
                                "symbols"
                            );
                            if (paramSymbols !== undefined) {
                                let symbols = "";
                                if (Array.isArray(paramSymbols)) {
                                    symbols = this.marketId(paramSymbols[0]);
                                    for (
                                        let i = 1;
                                        i < paramSymbols.length;
                                        i++
                                    ) {
                                        const symbol = paramSymbols[i];
                                        const id = this.marketId(symbol);
                                        symbols += "," + id;
                                    }
                                } else {
                                    symbols = paramSymbols;
                                }
                                request["symbols"] = symbols;
                            }
                        }
                        const requestParams = this.omit(query, [
                            "type",
                            "symbols",
                        ]);
                        const response = await this[method](
                            this.extend(request, requestParams)
                        );
                        //
                        // spot
                        //
                        //     {
                        //         makerCommission: 10,
                        //         takerCommission: 10,
                        //         buyerCommission: 0,
                        //         sellerCommission: 0,
                        //         canTrade: true,
                        //         canWithdraw: true,
                        //         canDeposit: true,
                        //         updateTime: 1575357359602,
                        //         accountType: "MARGIN",
                        //         balances: [
                        //             { asset: "BTC", free: "0.00219821", locked: "0.00000000"  },
                        //         ]
                        //     }
                        //
                        // margin (cross)
                        //
                        //     {
                        //         "borrowEnabled":true,
                        //         "marginLevel":"999.00000000",
                        //         "totalAssetOfBtc":"0.00000000",
                        //         "totalLiabilityOfBtc":"0.00000000",
                        //         "totalNetAssetOfBtc":"0.00000000",
                        //         "tradeEnabled":true,
                        //         "transferEnabled":true,
                        //         "userAssets":[
                        //             {"asset":"MATIC","borrowed":"0.00000000","free":"0.00000000","interest":"0.00000000","locked":"0.00000000","netAsset":"0.00000000"},
                        //             {"asset":"VET","borrowed":"0.00000000","free":"0.00000000","interest":"0.00000000","locked":"0.00000000","netAsset":"0.00000000"},
                        //             {"asset":"USDT","borrowed":"0.00000000","free":"0.00000000","interest":"0.00000000","locked":"0.00000000","netAsset":"0.00000000"}
                        //         ],
                        //     }
                        //
                        // margin (isolated)
                        //
                        //    {
                        //        info: {
                        //            assets: [
                        //                {
                        //                    baseAsset: {
                        //                        asset: '1INCH',
                        //                        borrowEnabled: true,
                        //                        borrowed: '0',
                        //                        free: '0',
                        //                        interest: '0',
                        //                        locked: '0',
                        //                        netAsset: '0',
                        //                        netAssetOfBtc: '0',
                        //                        repayEnabled: true,
                        //                        totalAsset: '0'
                        //                    },
                        //                    quoteAsset: {
                        //                        asset: 'USDT',
                        //                        borrowEnabled: true,
                        //                        borrowed: '0',
                        //                        free: '11',
                        //                        interest: '0',
                        //                        locked: '0',
                        //                        netAsset: '11',
                        //                        netAssetOfBtc: '0.00054615',
                        //                        repayEnabled: true,
                        //                        totalAsset: '11'
                        //                    },
                        //                    symbol: '1INCHUSDT',
                        //                    isolatedCreated: true,
                        //                    marginLevel: '999',
                        //                    marginLevelStatus: 'EXCESSIVE',
                        //                    marginRatio: '5',
                        //                    indexPrice: '0.59184331',
                        //                    liquidatePrice: '0',
                        //                    liquidateRate: '0',
                        //                    tradeEnabled: true,
                        //                    enabled: true
                        //                },
                        //            ]
                        //        }
                        //    }
                        //
                        // futures (fapi)
                        //
                        //     fapiPrivateGetAccount
                        //
                        //     {
                        //         "feeTier":0,
                        //         "canTrade":true,
                        //         "canDeposit":true,
                        //         "canWithdraw":true,
                        //         "updateTime":0,
                        //         "totalInitialMargin":"0.00000000",
                        //         "totalMaintMargin":"0.00000000",
                        //         "totalWalletBalance":"4.54000000",
                        //         "totalUnrealizedProfit":"0.00000000",
                        //         "totalMarginBalance":"4.54000000",
                        //         "totalPositionInitialMargin":"0.00000000",
                        //         "totalOpenOrderInitialMargin":"0.00000000",
                        //         "maxWithdrawAmount":"4.54000000",
                        //         "assets":[
                        //             {
                        //                 "asset":"USDT",
                        //                 "walletBalance":"4.54000000",
                        //                 "unrealizedProfit":"0.00000000",
                        //                 "marginBalance":"4.54000000",
                        //                 "maintMargin":"0.00000000",
                        //                 "initialMargin":"0.00000000",
                        //                 "positionInitialMargin":"0.00000000",
                        //                 "openOrderInitialMargin":"0.00000000",
                        //                 "maxWithdrawAmount":"4.54000000"
                        //             }
                        //         ],
                        //         "positions":[
                        //             {
                        //                 "symbol":"BTCUSDT",
                        //                 "initialMargin":"0.00000",
                        //                 "maintMargin":"0.00000",
                        //                 "unrealizedProfit":"0.00000000",
                        //                 "positionInitialMargin":"0.00000",
                        //                 "openOrderInitialMargin":"0.00000"
                        //             }
                        //         ]
                        //     }
                        //
                        //     fapiPrivateV2GetAccount
                        //
                        //     {
                        //         "feeTier":0,
                        //         "canTrade":true,
                        //         "canDeposit":true,
                        //         "canWithdraw":true,
                        //         "updateTime":0,
                        //         "totalInitialMargin":"0.00000000",
                        //         "totalMaintMargin":"0.00000000",
                        //         "totalWalletBalance":"0.00000000",
                        //         "totalUnrealizedProfit":"0.00000000",
                        //         "totalMarginBalance":"0.00000000",
                        //         "totalPositionInitialMargin":"0.00000000",
                        //         "totalOpenOrderInitialMargin":"0.00000000",
                        //         "totalCrossWalletBalance":"0.00000000",
                        //         "totalCrossUnPnl":"0.00000000",
                        //         "availableBalance":"0.00000000",
                        //         "maxWithdrawAmount":"0.00000000",
                        //         "assets":[
                        //             {
                        //                 "asset":"BNB",
                        //                 "walletBalance":"0.01000000",
                        //                 "unrealizedProfit":"0.00000000",
                        //                 "marginBalance":"0.01000000",
                        //                 "maintMargin":"0.00000000",
                        //                 "initialMargin":"0.00000000",
                        //                 "positionInitialMargin":"0.00000000",
                        //                 "openOrderInitialMargin":"0.00000000",
                        //                 "maxWithdrawAmount":"0.01000000",
                        //                 "crossWalletBalance":"0.01000000",
                        //                 "crossUnPnl":"0.00000000",
                        //                 "availableBalance":"0.01000000"
                        //             }
                        //         ],
                        //         "positions":[
                        //             {
                        //                 "symbol":"BTCUSDT",
                        //                 "initialMargin":"0",
                        //                 "maintMargin":"0",
                        //                 "unrealizedProfit":"0.00000000",
                        //                 "positionInitialMargin":"0",
                        //                 "openOrderInitialMargin":"0",
                        //                 "leverage":"20",
                        //                 "isolated":false,
                        //                 "entryPrice":"0.00000",
                        //                 "maxNotional":"5000000",
                        //                 "positionSide":"BOTH"
                        //             },
                        //         ]
                        //     }
                        //
                        //     fapiPrivateV2GetBalance
                        //
                        //     [
                        //         {
                        //             "accountAlias":"FzFzXquXXqoC",
                        //             "asset":"BNB",
                        //             "balance":"0.01000000",
                        //             "crossWalletBalance":"0.01000000",
                        //             "crossUnPnl":"0.00000000",
                        //             "availableBalance":"0.01000000",
                        //             "maxWithdrawAmount":"0.01000000"
                        //         }
                        //     ]
                        //
                        // savings
                        //
                        //     {
                        //       "totalAmountInBTC": "0.3172",
                        //       "totalAmountInUSDT": "10000",
                        //       "totalFixedAmountInBTC": "0.3172",
                        //       "totalFixedAmountInUSDT": "10000",
                        //       "totalFlexibleInBTC": "0",
                        //       "totalFlexibleInUSDT": "0",
                        //       "positionAmountVos": [
                        //         {
                        //           "asset": "USDT",
                        //           "amount": "10000",
                        //           "amountInBTC": "0.3172",
                        //           "amountInUSDT": "10000"
                        //         },
                        //         {
                        //           "asset": "BUSD",
                        //           "amount": "0",
                        //           "amountInBTC": "0",
                        //           "amountInUSDT": "0"
                        //         }
                        //       ]
                        //     }
                        //
                        // binance pay
                        //
                        //     [
                        //       {
                        //         "asset": "BUSD",
                        //         "free": "1129.83",
                        //         "locked": "0",
                        //         "freeze": "0",
                        //         "withdrawing": "0"
                        //       }
                        //     ]
                        //
                        return this.parseBalance(response, type, marginMode);
                    }

                    async fetchOrderBook(
                        symbol,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchOrderBook
                         * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
                         * @param {string} symbol unified symbol of the market to fetch the order book for
                         * @param {int|undefined} limit the maximum amount of order book entries to return
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure} indexed by market symbols
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const request = {
                            symbol: market["id"],
                        };
                        if (limit !== undefined) {
                            request["limit"] = limit; // default 100, max 5000, see https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#order-book
                        }
                        let method = "publicGetDepth";
                        if (market["linear"]) {
                            method = "fapiPublicGetDepth";
                        } else if (market["inverse"]) {
                            method = "dapiPublicGetDepth";
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        //
                        // future
                        //
                        //     {
                        //         "lastUpdateId":333598053905,
                        //         "E":1618631511986,
                        //         "T":1618631511964,
                        //         "bids":[
                        //             ["2493.56","20.189"],
                        //             ["2493.54","1.000"],
                        //             ["2493.51","0.005"]
                        //         ],
                        //         "asks":[
                        //             ["2493.57","0.877"],
                        //             ["2493.62","0.063"],
                        //             ["2493.71","12.054"],
                        //         ]
                        //     }
                        const timestamp = this.safeInteger(response, "T");
                        const orderbook = this.parseOrderBook(
                            response,
                            symbol,
                            timestamp
                        );
                        orderbook["nonce"] = this.safeInteger(
                            response,
                            "lastUpdateId"
                        );
                        return orderbook;
                    }

                    parseTicker(ticker, market = undefined) {
                        //
                        //     {
                        //         symbol: 'ETHBTC',
                        //         priceChange: '0.00068700',
                        //         priceChangePercent: '2.075',
                        //         weightedAvgPrice: '0.03342681',
                        //         prevClosePrice: '0.03310300',
                        //         lastPrice: '0.03378900',
                        //         lastQty: '0.07700000',
                        //         bidPrice: '0.03378900',
                        //         bidQty: '7.16800000',
                        //         askPrice: '0.03379000',
                        //         askQty: '24.00000000',
                        //         openPrice: '0.03310200',
                        //         highPrice: '0.03388900',
                        //         lowPrice: '0.03306900',
                        //         volume: '205478.41000000',
                        //         quoteVolume: '6868.48826294',
                        //         openTime: 1601469986932,
                        //         closeTime: 1601556386932,
                        //         firstId: 196098772,
                        //         lastId: 196186315,
                        //         count: 87544
                        //     }
                        //
                        // coinm
                        //     {
                        //         baseVolume: '214549.95171161',
                        //         closeTime: '1621965286847',
                        //         count: '1283779',
                        //         firstId: '152560106',
                        //         highPrice: '39938.3',
                        //         lastId: '153843955',
                        //         lastPrice: '37993.4',
                        //         lastQty: '1',
                        //         lowPrice: '36457.2',
                        //         openPrice: '37783.4',
                        //         openTime: '1621878840000',
                        //         pair: 'BTCUSD',
                        //         priceChange: '210.0',
                        //         priceChangePercent: '0.556',
                        //         symbol: 'BTCUSD_PERP',
                        //         volume: '81990451',
                        //         weightedAvgPrice: '38215.08713747'
                        //     }
                        //
                        const timestamp = this.safeInteger(ticker, "closeTime");
                        const marketId = this.safeString(ticker, "symbol");
                        const symbol = this.safeSymbol(marketId, market);
                        const last = this.safeString(ticker, "lastPrice");
                        const isCoinm = "baseVolume" in ticker;
                        let baseVolume = undefined;
                        let quoteVolume = undefined;
                        if (isCoinm) {
                            baseVolume = this.safeString(ticker, "baseVolume");
                            quoteVolume = this.safeString(ticker, "volume");
                        } else {
                            baseVolume = this.safeString(ticker, "volume");
                            quoteVolume = this.safeString(
                                ticker,
                                "quoteVolume"
                            );
                        }
                        return this.safeTicker(
                            {
                                symbol: symbol,
                                timestamp: timestamp,
                                datetime: this.iso8601(timestamp),
                                high: this.safeString(ticker, "highPrice"),
                                low: this.safeString(ticker, "lowPrice"),
                                bid: this.safeString(ticker, "bidPrice"),
                                bidVolume: this.safeString(ticker, "bidQty"),
                                ask: this.safeString(ticker, "askPrice"),
                                askVolume: this.safeString(ticker, "askQty"),
                                vwap: this.safeString(
                                    ticker,
                                    "weightedAvgPrice"
                                ),
                                open: this.safeString(ticker, "openPrice"),
                                close: last,
                                last: last,
                                previousClose: this.safeString(
                                    ticker,
                                    "prevClosePrice"
                                ), // previous day close
                                change: this.safeString(ticker, "priceChange"),
                                percentage: this.safeString(
                                    ticker,
                                    "priceChangePercent"
                                ),
                                average: undefined,
                                baseVolume: baseVolume,
                                quoteVolume: quoteVolume,
                                info: ticker,
                            },
                            market
                        );
                    }

                    async fetchStatus(params = {}) {
                        /**
                         * @method
                         * @name binance#fetchStatus
                         * @description the latest known information on the availability of the exchange API
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} a [status structure]{@link https://docs.ccxt.com/en/latest/manual.html#exchange-status-structure}
                         */
                        const response = await this.sapiGetSystemStatus(params);
                        //
                        //     {
                        //         "status": 0,              // 0: normal，1：system maintenance
                        //         "msg": "normal"           // "normal", "system_maintenance"
                        //     }
                        //
                        const statusRaw = this.safeString(response, "status");
                        return {
                            status: this.safeString(
                                { 0: "ok", 1: "maintenance" },
                                statusRaw,
                                statusRaw
                            ),
                            updated: undefined,
                            eta: undefined,
                            url: undefined,
                            info: response,
                        };
                    }

                    async fetchTicker(symbol, params = {}) {
                        /**
                         * @method
                         * @name binance#fetchTicker
                         * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
                         * @param {string} symbol unified symbol of the market to fetch the ticker for
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure}
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const request = {
                            symbol: market["id"],
                        };
                        let method = "publicGetTicker24hr";
                        if (market["linear"]) {
                            method = "fapiPublicGetTicker24hr";
                        } else if (market["inverse"]) {
                            method = "dapiPublicGetTicker24hr";
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        if (Array.isArray(response)) {
                            const firstTicker = this.safeValue(response, 0, {});
                            return this.parseTicker(firstTicker, market);
                        }
                        return this.parseTicker(response, market);
                    }

                    async fetchBidsAsks(symbols = undefined, params = {}) {
                        /**
                         * @method
                         * @name binance#fetchBidsAsks
                         * @description fetches the bid and ask price and volume for multiple markets
                         * @param {[string]|undefined} symbols unified symbols of the markets to fetch the bids and asks for, all markets are returned if not assigned
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} an array of [ticker structures]{@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure}
                         */
                        await this.loadMarkets();
                        const defaultType = this.safeString2(
                            this.options,
                            "fetchBidsAsks",
                            "defaultType",
                            "spot"
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        const query = this.omit(params, "type");
                        let method = undefined;
                        if (type === "future") {
                            method = "fapiPublicGetTickerBookTicker";
                        } else if (type === "delivery") {
                            method = "dapiPublicGetTickerBookTicker";
                        } else {
                            method = "publicGetTickerBookTicker";
                        }
                        const response = await this[method](query);
                        return this.parseTickers(response, symbols);
                    }

                    async fetchTickers(symbols = undefined, params = {}) {
                        /**
                         * @method
                         * @name binance#fetchTickers
                         * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
                         * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} an array of [ticker structures]{@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure}
                         */
                        await this.loadMarkets();
                        const defaultType = this.safeString2(
                            this.options,
                            "fetchTickers",
                            "defaultType",
                            "spot"
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        const query = this.omit(params, "type");
                        let defaultMethod = undefined;
                        if (type === "future") {
                            defaultMethod = "fapiPublicGetTicker24hr";
                        } else if (type === "delivery") {
                            defaultMethod = "dapiPublicGetTicker24hr";
                        } else {
                            defaultMethod = "publicGetTicker24hr";
                        }
                        const method = this.safeString(
                            this.options,
                            "fetchTickersMethod",
                            defaultMethod
                        );
                        const response = await this[method](query);
                        return this.parseTickers(response, symbols);
                    }

                    parseOHLCV(ohlcv, market = undefined) {
                        // when api method = publicGetKlines || fapiPublicGetKlines || dapiPublicGetKlines
                        //     [
                        //         1591478520000, // open time
                        //         "0.02501300",  // open
                        //         "0.02501800",  // high
                        //         "0.02500000",  // low
                        //         "0.02500000",  // close
                        //         "22.19000000", // volume
                        //         1591478579999, // close time
                        //         "0.55490906",  // quote asset volume
                        //         40,            // number of trades
                        //         "10.92900000", // taker buy base asset volume
                        //         "0.27336462",  // taker buy quote asset volume
                        //         "0"            // ignore
                        //     ]
                        //
                        //  when api method = fapiPublicGetMarkPriceKlines || fapiPublicGetIndexPriceKlines
                        //     [
                        //         [
                        //         1591256460000,          // Open time
                        //         "9653.29201333",        // Open
                        //         "9654.56401333",        // High
                        //         "9653.07367333",        // Low
                        //         "9653.07367333",        // Close (or latest price)
                        //         "0",                    // Ignore
                        //         1591256519999,          // Close time
                        //         "0",                    // Ignore
                        //         60,                     // Number of bisic data
                        //         "0",                    // Ignore
                        //         "0",                    // Ignore
                        //         "0"                     // Ignore
                        //         ]
                        //     ]
                        //
                        return [
                            this.safeInteger(ohlcv, 0),
                            this.safeNumber(ohlcv, 1),
                            this.safeNumber(ohlcv, 2),
                            this.safeNumber(ohlcv, 3),
                            this.safeNumber(ohlcv, 4),
                            this.safeNumber(ohlcv, 5),
                        ];
                    }

                    async fetchOHLCV(
                        symbol,
                        timeframe = "1m",
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchOHLCV
                         * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
                         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
                         * @param {string} timeframe the length of time each candle represents
                         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
                         * @param {int|undefined} limit the maximum amount of candles to fetch
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @param {string|undefined} params.price "mark" or "index" for mark price and index price candles
                         * @param {int|undefined} params.until timestamp in ms of the latest candle to fetch
                         * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        // binance docs say that the default limit 500, max 1500 for futures, max 1000 for spot markets
                        // the reality is that the time range wider than 500 candles won't work right
                        const defaultLimit = 500;
                        const maxLimit = 1500;
                        const price = this.safeString(params, "price");
                        const until = this.safeInteger(params, "until");
                        params = this.omit(params, ["price", "until"]);
                        limit =
                            limit === undefined
                                ? defaultLimit
                                : Math.min(limit, maxLimit);
                        const request = {
                            interval: this.timeframes[timeframe],
                            limit: limit,
                        };
                        if (price === "index") {
                            request["pair"] = market["id"]; // Index price takes this argument instead of symbol
                        } else {
                            request["symbol"] = market["id"];
                        }
                        // const duration = this.parseTimeframe (timeframe);
                        if (since !== undefined) {
                            request["startTime"] = since;
                            //
                            // It didn't work before without the endTime
                            // https://github.com/ccxt/ccxt/issues/8454
                            //
                            if (market["inverse"]) {
                                if (since > 0) {
                                    const duration =
                                        this.parseTimeframe(timeframe);
                                    const endTime = this.sum(
                                        since,
                                        limit * duration * 1000 - 1
                                    );
                                    const now = this.milliseconds();
                                    request["endTime"] = Math.min(now, endTime);
                                }
                            }
                        }
                        if (until !== undefined) {
                            request["endTime"] = until;
                        }
                        let method = "publicGetKlines";
                        if (price === "mark") {
                            if (market["inverse"]) {
                                method = "dapiPublicGetMarkPriceKlines";
                            } else {
                                method = "fapiPublicGetMarkPriceKlines";
                            }
                        } else if (price === "index") {
                            if (market["inverse"]) {
                                method = "dapiPublicGetIndexPriceKlines";
                            } else {
                                method = "fapiPublicGetIndexPriceKlines";
                            }
                        } else if (market["linear"]) {
                            method = "fapiPublicGetKlines";
                        } else if (market["inverse"]) {
                            method = "dapiPublicGetKlines";
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        //
                        //     [
                        //         [1591478520000,"0.02501300","0.02501800","0.02500000","0.02500000","22.19000000",1591478579999,"0.55490906",40,"10.92900000","0.27336462","0"],
                        //         [1591478580000,"0.02499600","0.02500900","0.02499400","0.02500300","21.34700000",1591478639999,"0.53370468",24,"7.53800000","0.18850725","0"],
                        //         [1591478640000,"0.02500800","0.02501100","0.02500300","0.02500800","154.14200000",1591478699999,"3.85405839",97,"5.32300000","0.13312641","0"],
                        //     ]
                        //
                        return this.parseOHLCVs(
                            response,
                            market,
                            timeframe,
                            since,
                            limit
                        );
                    }

                    parseTrade(trade, market = undefined) {
                        if ("isDustTrade" in trade) {
                            return this.parseDustTrade(trade, market);
                        }
                        //
                        // aggregate trades
                        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list
                        //
                        //     {
                        //         "a": 26129,         // Aggregate tradeId
                        //         "p": "0.01633102",  // Price
                        //         "q": "4.70443515",  // Quantity
                        //         "f": 27781,         // First tradeId
                        //         "l": 27781,         // Last tradeId
                        //         "T": 1498793709153, // Timestamp
                        //         "m": true,          // Was the buyer the maker?
                        //         "M": true           // Was the trade the best price match?
                        //     }
                        //
                        // recent public trades and old public trades
                        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#recent-trades-list
                        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#old-trade-lookup-market_data
                        //
                        //     {
                        //         "id": 28457,
                        //         "price": "4.00000100",
                        //         "qty": "12.00000000",
                        //         "time": 1499865549590,
                        //         "isBuyerMaker": true,
                        //         "isBestMatch": true
                        //     }
                        //
                        // private trades
                        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#account-trade-list-user_data
                        //
                        //     {
                        //         "symbol": "BNBBTC",
                        //         "id": 28457,
                        //         "orderId": 100234,
                        //         "price": "4.00000100",
                        //         "qty": "12.00000000",
                        //         "commission": "10.10000000",
                        //         "commissionAsset": "BNB",
                        //         "time": 1499865549590,
                        //         "isBuyer": true,
                        //         "isMaker": false,
                        //         "isBestMatch": true
                        //     }
                        //
                        // futures trades
                        // https://binance-docs.github.io/apidocs/futures/en/#account-trade-list-user_data
                        //
                        //     {
                        //       "accountId": 20,
                        //       "buyer": False,
                        //       "commission": "-0.07819010",
                        //       "commissionAsset": "USDT",
                        //       "counterPartyId": 653,
                        //       "id": 698759,
                        //       "maker": False,
                        //       "orderId": 25851813,
                        //       "price": "7819.01",
                        //       "qty": "0.002",
                        //       "quoteQty": "0.01563",
                        //       "realizedPnl": "-0.91539999",
                        //       "side": "SELL",
                        //       "symbol": "BTCUSDT",
                        //       "time": 1569514978020
                        //     }
                        //     {
                        //       "symbol": "BTCUSDT",
                        //       "id": 477128891,
                        //       "orderId": 13809777875,
                        //       "side": "SELL",
                        //       "price": "38479.55",
                        //       "qty": "0.001",
                        //       "realizedPnl": "-0.00009534",
                        //       "marginAsset": "USDT",
                        //       "quoteQty": "38.47955",
                        //       "commission": "-0.00076959",
                        //       "commissionAsset": "USDT",
                        //       "time": 1612733566708,
                        //       "positionSide": "BOTH",
                        //       "maker": true,
                        //       "buyer": false
                        //     }
                        //
                        // { respType: FULL }
                        //
                        //     {
                        //       "price": "4000.00000000",
                        //       "qty": "1.00000000",
                        //       "commission": "4.00000000",
                        //       "commissionAsset": "USDT",
                        //       "tradeId": "1234",
                        //     }
                        //
                        const timestamp = this.safeInteger2(trade, "T", "time");
                        const price = this.safeString2(trade, "p", "price");
                        const amount = this.safeString2(trade, "q", "qty");
                        const cost = this.safeString2(
                            trade,
                            "quoteQty",
                            "baseQty"
                        ); // inverse futures
                        const marketId = this.safeString(trade, "symbol");
                        const symbol = this.safeSymbol(marketId, market);
                        let id = this.safeString2(trade, "t", "a");
                        id = this.safeString2(trade, "id", "tradeId", id);
                        let side = undefined;
                        const orderId = this.safeString(trade, "orderId");
                        const buyerMaker = this.safeValue2(
                            trade,
                            "m",
                            "isBuyerMaker"
                        );
                        let takerOrMaker = undefined;
                        if (buyerMaker !== undefined) {
                            side = buyerMaker ? "sell" : "buy"; // this is reversed intentionally
                        } else if ("side" in trade) {
                            side = this.safeStringLower(trade, "side");
                        } else {
                            if ("isBuyer" in trade) {
                                side = trade["isBuyer"] ? "buy" : "sell"; // this is a true side
                            }
                        }
                        let fee = undefined;
                        if ("commission" in trade) {
                            fee = {
                                cost: this.safeString(trade, "commission"),
                                currency: this.safeCurrencyCode(
                                    this.safeString(trade, "commissionAsset")
                                ),
                            };
                        }
                        if ("isMaker" in trade) {
                            takerOrMaker = trade["isMaker"] ? "maker" : "taker";
                        }
                        if ("maker" in trade) {
                            takerOrMaker = trade["maker"] ? "maker" : "taker";
                        }
                        return this.safeTrade(
                            {
                                info: trade,
                                timestamp: timestamp,
                                datetime: this.iso8601(timestamp),
                                symbol: symbol,
                                id: id,
                                order: orderId,
                                type: undefined,
                                side: side,
                                takerOrMaker: takerOrMaker,
                                price: price,
                                amount: amount,
                                cost: cost,
                                fee: fee,
                            },
                            market
                        );
                    }

                    async fetchTrades(
                        symbol,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchTrades
                         * @description get the list of most recent trades for a particular symbol
                         * @param {string} symbol unified symbol of the market to fetch trades for
                         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
                         * @param {int|undefined} limit the maximum amount of trades to fetch
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const request = {
                            symbol: market["id"],
                            // 'fromId': 123,    // ID to get aggregate trades from INCLUSIVE.
                            // 'startTime': 456, // Timestamp in ms to get aggregate trades from INCLUSIVE.
                            // 'endTime': 789,   // Timestamp in ms to get aggregate trades until INCLUSIVE.
                            // 'limit': 500,     // default = 500, maximum = 1000
                        };
                        const [type, query] = this.handleMarketTypeAndParams(
                            "fetchTrades",
                            market,
                            params
                        );
                        let defaultMethod = undefined;
                        if (type === "future") {
                            if (market["linear"]) {
                                defaultMethod = "fapiPublicGetAggTrades";
                            } else if (market["inverse"]) {
                                defaultMethod = "dapiPublicGetAggTrades";
                            }
                        } else if (type === "delivery") {
                            defaultMethod = "dapiPublicGetAggTrades";
                        } else {
                            defaultMethod = "publicGetAggTrades";
                        }
                        let method = this.safeString(
                            this.options,
                            "fetchTradesMethod",
                            defaultMethod
                        );
                        if (method === "publicGetAggTrades") {
                            if (type === "future") {
                                if (market["linear"]) {
                                    method = "fapiPublicGetAggTrades";
                                } else if (market["inverse"]) {
                                    method = "dapiPublicGetAggTrades";
                                }
                            } else if (type === "delivery") {
                                method = "dapiPublicGetAggTrades";
                            }
                        } else if (method === "publicGetHistoricalTrades") {
                            if (type === "future") {
                                if (market["linear"]) {
                                    method = "fapiPublicGetHistoricalTrades";
                                } else if (market["inverse"]) {
                                    method = "dapiPublicGetHistoricalTrades";
                                }
                            } else if (type === "delivery") {
                                method = "dapiPublicGetHistoricalTrades";
                            }
                        }
                        if (since !== undefined) {
                            request["startTime"] = since;
                            // https://github.com/ccxt/ccxt/issues/6400
                            // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list
                            request["endTime"] = this.sum(since, 3600000);
                        }
                        if (limit !== undefined) {
                            request["limit"] = limit; // default = 500, maximum = 1000
                        }
                        //
                        // Caveats:
                        // - default limit (500) applies only if no other parameters set, trades up
                        //   to the maximum limit may be returned to satisfy other parameters
                        // - if both limit and time window is set and time window contains more
                        //   trades than the limit then the last trades from the window are returned
                        // - 'tradeId' accepted and returned by this method is "aggregate" trade id
                        //   which is different from actual trade id
                        // - setting both fromId and time window results in error
                        const response = await this[method](
                            this.extend(request, query)
                        );
                        //
                        // aggregate trades
                        //
                        //     [
                        //         {
                        //             "a": 26129,         // Aggregate tradeId
                        //             "p": "0.01633102",  // Price
                        //             "q": "4.70443515",  // Quantity
                        //             "f": 27781,         // First tradeId
                        //             "l": 27781,         // Last tradeId
                        //             "T": 1498793709153, // Timestamp
                        //             "m": true,          // Was the buyer the maker?
                        //             "M": true           // Was the trade the best price match?
                        //         }
                        //     ]
                        //
                        // recent public trades and historical public trades
                        //
                        //     [
                        //         {
                        //             "id": 28457,
                        //             "price": "4.00000100",
                        //             "qty": "12.00000000",
                        //             "time": 1499865549590,
                        //             "isBuyerMaker": true,
                        //             "isBestMatch": true
                        //         }
                        //     ]
                        //
                        return this.parseTrades(response, market, since, limit);
                    }

                    async editOrder(
                        id,
                        symbol,
                        type,
                        side,
                        amount,
                        price = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#editOrder
                         * @description edit a trade order
                         * @see https://binance-docs.github.io/apidocs/spot/en/#cancel-an-existing-order-and-send-a-new-order-trade
                         * @param {string} id cancel order id
                         * @param {string} symbol unified symbol of the market to create an order in
                         * @param {string} type 'market' or 'limit'
                         * @param {string} side 'buy' or 'sell'
                         * @param {float} amount how much of currency you want to trade in units of base currency
                         * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the base currency, ignored in market orders
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} an [order structure]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        if (!market["spot"]) {
                            throw new NotSupported(
                                this.id +
                                    " editOrder() does not support " +
                                    market["type"] +
                                    " orders, only spot orders are accepted"
                            );
                        }
                        const request = {
                            symbol: market["id"],
                            side: side.toUpperCase(),
                            cancelOrderId: id,
                            cancelReplaceMode: "STOP_ON_FAILURE",
                            // STOP_ON_FAILURE - If the cancel request fails, the new order placement will not be attempted.
                            // ALLOW_FAILURE - new order placement will be attempted even if cancel request fails.
                        };
                        const clientOrderId = this.safeString2(
                            params,
                            "newClientOrderId",
                            "clientOrderId"
                        );
                        const postOnly = this.safeValue(
                            params,
                            "postOnly",
                            false
                        );
                        if (postOnly) {
                            type = "LIMIT_MAKER";
                        }
                        const initialUppercaseType = type.toUpperCase();
                        let uppercaseType = initialUppercaseType;
                        request["type"] = uppercaseType;
                        const stopPrice = this.safeNumber(params, "stopPrice");
                        if (stopPrice !== undefined) {
                            if (uppercaseType === "MARKET") {
                                uppercaseType = "STOP_LOSS";
                            } else if (uppercaseType === "LIMIT") {
                                uppercaseType = "STOP_LOSS_LIMIT";
                            }
                        }
                        const validOrderTypes = this.safeValue(
                            market["info"],
                            "orderTypes"
                        );
                        if (!this.inArray(uppercaseType, validOrderTypes)) {
                            if (initialUppercaseType !== uppercaseType) {
                                throw new InvalidOrder(
                                    this.id +
                                        " stopPrice parameter is not allowed for " +
                                        symbol +
                                        " " +
                                        type +
                                        " orders"
                                );
                            } else {
                                throw new InvalidOrder(
                                    this.id +
                                        " " +
                                        type +
                                        " is not a valid order type for the " +
                                        symbol +
                                        " market"
                                );
                            }
                        }
                        if (clientOrderId === undefined) {
                            const broker = this.safeValue(
                                this.options,
                                "broker"
                            );
                            if (broker !== undefined) {
                                const brokerId = this.safeString(
                                    broker,
                                    "spot"
                                );
                                if (brokerId !== undefined) {
                                    request["newClientOrderId"] =
                                        brokerId + this.uuid22();
                                }
                            }
                        } else {
                            request["newClientOrderId"] = clientOrderId;
                        }
                        request["newOrderRespType"] = this.safeValue(
                            this.options["newOrderRespType"],
                            type,
                            "RESULT"
                        ); // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
                        let timeInForceIsRequired = false;
                        let priceIsRequired = false;
                        let stopPriceIsRequired = false;
                        let quantityIsRequired = false;
                        if (uppercaseType === "MARKET") {
                            const quoteOrderQty = this.safeValue(
                                this.options,
                                "quoteOrderQty",
                                true
                            );
                            if (quoteOrderQty) {
                                const quoteOrderQty = this.safeValue2(
                                    params,
                                    "quoteOrderQty",
                                    "cost"
                                );
                                const precision = market["precision"]["price"];
                                if (quoteOrderQty !== undefined) {
                                    request["quoteOrderQty"] =
                                        this.decimalToPrecision(
                                            quoteOrderQty,
                                            TRUNCATE,
                                            precision,
                                            this.precisionMode
                                        );
                                } else if (price !== undefined) {
                                    const amountString =
                                        this.numberToString(amount);
                                    const priceString =
                                        this.numberToString(price);
                                    const quoteOrderQuantity =
                                        Precise.stringMul(
                                            amountString,
                                            priceString
                                        );
                                    request["quoteOrderQty"] =
                                        this.decimalToPrecision(
                                            quoteOrderQuantity,
                                            TRUNCATE,
                                            precision,
                                            this.precisionMode
                                        );
                                } else {
                                    quantityIsRequired = true;
                                }
                            } else {
                                quantityIsRequired = true;
                            }
                        } else if (uppercaseType === "LIMIT") {
                            priceIsRequired = true;
                            timeInForceIsRequired = true;
                            quantityIsRequired = true;
                        } else if (
                            uppercaseType === "STOP_LOSS" ||
                            uppercaseType === "TAKE_PROFIT"
                        ) {
                            stopPriceIsRequired = true;
                            quantityIsRequired = true;
                        } else if (
                            uppercaseType === "STOP_LOSS_LIMIT" ||
                            uppercaseType === "TAKE_PROFIT_LIMIT"
                        ) {
                            quantityIsRequired = true;
                            stopPriceIsRequired = true;
                            priceIsRequired = true;
                            timeInForceIsRequired = true;
                        } else if (uppercaseType === "LIMIT_MAKER") {
                            priceIsRequired = true;
                            quantityIsRequired = true;
                        }
                        if (quantityIsRequired) {
                            request["quantity"] = this.amountToPrecision(
                                symbol,
                                amount
                            );
                        }
                        if (priceIsRequired) {
                            if (price === undefined) {
                                throw new InvalidOrder(
                                    this.id +
                                        " editOrder() requires a price argument for a " +
                                        type +
                                        " order"
                                );
                            }
                            request["price"] = this.priceToPrecision(
                                symbol,
                                price
                            );
                        }
                        if (timeInForceIsRequired) {
                            request["timeInForce"] =
                                this.options["defaultTimeInForce"]; // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel
                        }
                        if (stopPriceIsRequired) {
                            if (stopPrice === undefined) {
                                throw new InvalidOrder(
                                    this.id +
                                        " editOrder() requires a stopPrice extra param for a " +
                                        type +
                                        " order"
                                );
                            } else {
                                request["stopPrice"] = this.priceToPrecision(
                                    symbol,
                                    stopPrice
                                );
                            }
                        }
                        const requestParams = this.omit(params, [
                            "quoteOrderQty",
                            "cost",
                            "stopPrice",
                            "newClientOrderId",
                            "clientOrderId",
                            "postOnly",
                        ]);
                        const response =
                            await this.privatePostOrderCancelReplace(
                                this.extend(request, requestParams)
                            );
                        //
                        //     {
                        //         "cancelResult": "SUCCESS",
                        //         "newOrderResult": "SUCCESS",
                        //         "cancelResponse": {
                        //             "symbol": "BTCUSDT",
                        //             "origClientOrderId": "web_3f6286480b194b079870ac75fb6978b7",
                        //             "orderId": 16383156620,
                        //             "orderListId": -1,
                        //             "clientOrderId": "Azt6foVTTgHPNhqBf41TTt",
                        //             "price": "14000.00000000",
                        //             "origQty": "0.00110000",
                        //             "executedQty": "0.00000000",
                        //             "cummulativeQuoteQty": "0.00000000",
                        //             "status": "CANCELED",
                        //             "timeInForce": "GTC",
                        //             "type": "LIMIT",
                        //             "side": "BUY"
                        //         },
                        //         "newOrderResponse": {
                        //             "symbol": "BTCUSDT",
                        //             "orderId": 16383176297,
                        //             "orderListId": -1,
                        //             "clientOrderId": "x-R4BD3S8222ecb58eb9074fb1be018c",
                        //             "transactTime": 1670891847932,
                        //             "price": "13500.00000000",
                        //             "origQty": "0.00085000",
                        //             "executedQty": "0.00000000",
                        //             "cummulativeQuoteQty": "0.00000000",
                        //             "status": "NEW",
                        //             "timeInForce": "GTC",
                        //             "type": "LIMIT",
                        //             "side": "BUY",
                        //             "fills": []
                        //         }
                        //     }
                        //
                        const data = this.safeValue(
                            response,
                            "newOrderResponse"
                        );
                        return this.parseOrder(data, market);
                    }

                    parseOrderStatus(status) {
                        const statuses = {
                            NEW: "open",
                            PARTIALLY_FILLED: "open",
                            FILLED: "closed",
                            CANCELED: "canceled",
                            PENDING_CANCEL: "canceling", // currently unused
                            REJECTED: "rejected",
                            EXPIRED: "expired",
                        };
                        return this.safeString(statuses, status, status);
                    }

                    parseOrder(order, market = undefined) {
                        //
                        // spot
                        //
                        //     {
                        //         "symbol": "LTCBTC",
                        //         "orderId": 1,
                        //         "clientOrderId": "myOrder1",
                        //         "price": "0.1",
                        //         "origQty": "1.0",
                        //         "executedQty": "0.0",
                        //         "cummulativeQuoteQty": "0.0",
                        //         "status": "NEW",
                        //         "timeInForce": "GTC",
                        //         "type": "LIMIT",
                        //         "side": "BUY",
                        //         "stopPrice": "0.0",
                        //         "icebergQty": "0.0",
                        //         "time": 1499827319559,
                        //         "updateTime": 1499827319559,
                        //         "isWorking": true
                        //     }
                        //
                        // spot: editOrder
                        //
                        //     {
                        //         "symbol": "BTCUSDT",
                        //         "orderId": 16383176297,
                        //         "orderListId": -1,
                        //         "clientOrderId": "x-R4BD3S8222ecb58eb9074fb1be018c",
                        //         "transactTime": 1670891847932,
                        //         "price": "13500.00000000",
                        //         "origQty": "0.00085000",
                        //         "executedQty": "0.00000000",
                        //         "cummulativeQuoteQty": "0.00000000",
                        //         "status": "NEW",
                        //         "timeInForce": "GTC",
                        //         "type": "LIMIT",
                        //         "side": "BUY",
                        //         "fills": []
                        //     }
                        //
                        // futures
                        //
                        //     {
                        //         "symbol": "BTCUSDT",
                        //         "orderId": 1,
                        //         "clientOrderId": "myOrder1",
                        //         "price": "0.1",
                        //         "origQty": "1.0",
                        //         "executedQty": "1.0",
                        //         "cumQuote": "10.0",
                        //         "status": "NEW",
                        //         "timeInForce": "GTC",
                        //         "type": "LIMIT",
                        //         "side": "BUY",
                        //         "stopPrice": "0.0",
                        //         "updateTime": 1499827319559
                        //     }
                        //
                        // createOrder with { "newOrderRespType": "FULL" }
                        //
                        //     {
                        //       "symbol": "BTCUSDT",
                        //       "orderId": 5403233939,
                        //       "orderListId": -1,
                        //       "clientOrderId": "x-R4BD3S825e669e75b6c14f69a2c43e",
                        //       "transactTime": 1617151923742,
                        //       "price": "0.00000000",
                        //       "origQty": "0.00050000",
                        //       "executedQty": "0.00050000",
                        //       "cummulativeQuoteQty": "29.47081500",
                        //       "status": "FILLED",
                        //       "timeInForce": "GTC",
                        //       "type": "MARKET",
                        //       "side": "BUY",
                        //       "fills": [
                        //         {
                        //           "price": "58941.63000000",
                        //           "qty": "0.00050000",
                        //           "commission": "0.00007050",
                        //           "commissionAsset": "BNB",
                        //           "tradeId": 737466631
                        //         }
                        //       ]
                        //     }
                        //
                        // delivery
                        //
                        //     {
                        //       "orderId": "18742727411",
                        //       "symbol": "ETHUSD_PERP",
                        //       "pair": "ETHUSD",
                        //       "status": "FILLED",
                        //       "clientOrderId": "x-xcKtGhcu3e2d1503fdd543b3b02419",
                        //       "price": "0",
                        //       "avgPrice": "4522.14",
                        //       "origQty": "1",
                        //       "executedQty": "1",
                        //       "cumBase": "0.00221134",
                        //       "timeInForce": "GTC",
                        //       "type": "MARKET",
                        //       "reduceOnly": false,
                        //       "closePosition": false,
                        //       "side": "SELL",
                        //       "positionSide": "BOTH",
                        //       "stopPrice": "0",
                        //       "workingType": "CONTRACT_PRICE",
                        //       "priceProtect": false,
                        //       "origType": "MARKET",
                        //       "time": "1636061952660",
                        //       "updateTime": "1636061952660"
                        //     }
                        //
                        const status = this.parseOrderStatus(
                            this.safeString(order, "status")
                        );
                        const marketId = this.safeString(order, "symbol");
                        const symbol = this.safeSymbol(marketId, market);
                        const filled = this.safeString(
                            order,
                            "executedQty",
                            "0"
                        );
                        let timestamp = undefined;
                        let lastTradeTimestamp = undefined;
                        if ("time" in order) {
                            timestamp = this.safeInteger(order, "time");
                        } else if ("workingTime" in order) {
                            lastTradeTimestamp = this.safeInteger(
                                order,
                                "transactTime"
                            );
                            timestamp = this.safeInteger(order, "workingTime");
                        } else if ("transactTime" in order) {
                            lastTradeTimestamp = this.safeInteger(
                                order,
                                "transactTime"
                            );
                            timestamp = this.safeInteger(order, "transactTime");
                        } else if ("updateTime" in order) {
                            if (status === "open") {
                                if (Precise.stringGt(filled, "0")) {
                                    lastTradeTimestamp = this.safeInteger(
                                        order,
                                        "updateTime"
                                    );
                                } else {
                                    timestamp = this.safeInteger(
                                        order,
                                        "updateTime"
                                    );
                                }
                            }
                        }
                        const average = this.safeString(order, "avgPrice");
                        const price = this.safeString(order, "price");
                        const amount = this.safeString(order, "origQty");
                        // - Spot/Margin market: cummulativeQuoteQty
                        // - Futures market: cumQuote.
                        //   Note this is not the actual cost, since Binance futures uses leverage to calculate margins.
                        let cost = this.safeString2(
                            order,
                            "cummulativeQuoteQty",
                            "cumQuote"
                        );
                        cost = this.safeString(order, "cumBase", cost);
                        const id = this.safeString(order, "orderId");
                        let type = this.safeStringLower(order, "type");
                        const side = this.safeStringLower(order, "side");
                        const fills = this.safeValue(order, "fills", []);
                        const clientOrderId = this.safeString(
                            order,
                            "clientOrderId"
                        );
                        let timeInForce = this.safeString(order, "timeInForce");
                        if (timeInForce === "GTX") {
                            // GTX means "Good Till Crossing" and is an equivalent way of saying Post Only
                            timeInForce = "PO";
                        }
                        const postOnly =
                            type === "limit_maker" || timeInForce === "PO";
                        if (type === "limit_maker") {
                            type = "limit";
                        }
                        const stopPriceString = this.safeString(
                            order,
                            "stopPrice"
                        );
                        const stopPrice = this.parseNumber(
                            this.omitZero(stopPriceString)
                        );
                        return this.safeOrder(
                            {
                                info: order,
                                id: id,
                                clientOrderId: clientOrderId,
                                timestamp: timestamp,
                                datetime: this.iso8601(timestamp),
                                lastTradeTimestamp: lastTradeTimestamp,
                                symbol: symbol,
                                type: type,
                                timeInForce: timeInForce,
                                postOnly: postOnly,
                                reduceOnly: this.safeValue(order, "reduceOnly"),
                                side: side,
                                price: price,
                                triggerPrice: stopPrice,
                                amount: amount,
                                cost: cost,
                                average: average,
                                filled: filled,
                                remaining: undefined,
                                status: status,
                                fee: undefined,
                                trades: fills,
                            },
                            market
                        );
                    }

                    async createOrder(
                        symbol,
                        type,
                        side,
                        amount,
                        price = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#createOrder
                         * @description create a trade order
                         * @param {string} symbol unified symbol of the market to create an order in
                         * @param {string} type 'market' or 'limit'
                         * @param {string} side 'buy' or 'sell'
                         * @param {float} amount how much of currency you want to trade in units of base currency
                         * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @param {string|undefined} params.marginMode 'cross' or 'isolated', for spot margin trading
                         * @returns {object} an [order structure]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const defaultType = this.safeString2(
                            this.options,
                            "createOrder",
                            "defaultType",
                            "spot"
                        );
                        const marketType = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        const clientOrderId = this.safeString2(
                            params,
                            "newClientOrderId",
                            "clientOrderId"
                        );
                        const initialUppercaseType = type.toUpperCase();
                        const isMarketOrder = initialUppercaseType === "MARKET";
                        const isLimitOrder = initialUppercaseType === "LIMIT";
                        const postOnly = this.isPostOnly(
                            isMarketOrder,
                            initialUppercaseType === "LIMIT_MAKER",
                            params
                        );
                        const triggerPrice = this.safeValue2(
                            params,
                            "triggerPrice",
                            "stopPrice"
                        );
                        const stopLossPrice = this.safeValue(
                            params,
                            "stopLossPrice",
                            triggerPrice
                        ); // fallback to stopLoss
                        const takeProfitPrice = this.safeValue(
                            params,
                            "takeProfitPrice"
                        );
                        const isStopLoss = stopLossPrice !== undefined;
                        const isTakeProfit = takeProfitPrice !== undefined;
                        params = this.omit(params, [
                            "type",
                            "newClientOrderId",
                            "clientOrderId",
                            "postOnly",
                            "stopLossPrice",
                            "takeProfitPrice",
                            "stopPrice",
                            "triggerPrice",
                        ]);
                        const [marginMode, query] =
                            this.handleMarginModeAndParams(
                                "createOrder",
                                params
                            );
                        const request = {
                            symbol: market["id"],
                            side: side.toUpperCase(),
                        };
                        let method = "privatePostOrder";
                        if (marketType === "future") {
                            method = "fapiPrivatePostOrder";
                        } else if (marketType === "delivery") {
                            method = "dapiPrivatePostOrder";
                        } else if (
                            marketType === "margin" ||
                            marginMode !== undefined
                        ) {
                            method = "sapiPostMarginOrder";
                            const reduceOnly = this.safeValue(
                                params,
                                "reduceOnly"
                            );
                            if (reduceOnly) {
                                request["sideEffectType"] = "AUTO_REPAY";
                                params = this.omit(params, "reduceOnly");
                            }
                        }
                        if (market["spot"] || marketType === "margin") {
                            // support for testing orders
                            const test = this.safeValue(query, "test", false);
                            if (test) {
                                method += "Test";
                            }
                            // only supported for spot/margin api (all margin markets are spot markets)
                            if (postOnly) {
                                type = "LIMIT_MAKER";
                            }
                        }
                        let uppercaseType = initialUppercaseType;
                        let stopPrice = undefined;
                        if (isStopLoss) {
                            stopPrice = stopLossPrice;
                            if (isMarketOrder) {
                                // spot STOP_LOSS market orders are not a valid order type
                                uppercaseType = market["contract"]
                                    ? "STOP_MARKET"
                                    : "STOP_LOSS";
                            } else if (isLimitOrder) {
                                uppercaseType = market["contract"]
                                    ? "STOP"
                                    : "STOP_LOSS_LIMIT";
                            }
                        } else if (isTakeProfit) {
                            stopPrice = takeProfitPrice;
                            if (isMarketOrder) {
                                // spot TAKE_PROFIT market orders are not a valid order type
                                uppercaseType = market["contract"]
                                    ? "TAKE_PROFIT_MARKET"
                                    : "TAKE_PROFIT";
                            } else if (isLimitOrder) {
                                uppercaseType = market["contract"]
                                    ? "TAKE_PROFIT"
                                    : "TAKE_PROFIT_LIMIT";
                            }
                        }
                        const validOrderTypes = this.safeValue(
                            market["info"],
                            "orderTypes"
                        );
                        if (!this.inArray(uppercaseType, validOrderTypes)) {
                            if (initialUppercaseType !== uppercaseType) {
                                throw new InvalidOrder(
                                    this.id +
                                        " stopPrice parameter is not allowed for " +
                                        symbol +
                                        " " +
                                        type +
                                        " orders"
                                );
                            } else {
                                throw new InvalidOrder(
                                    this.id +
                                        " " +
                                        type +
                                        " is not a valid order type for the " +
                                        symbol +
                                        " market"
                                );
                            }
                        }
                        if (marginMode === "isolated") {
                            request["isIsolated"] = true;
                        }
                        if (clientOrderId === undefined) {
                            const broker = this.safeValue(
                                this.options,
                                "broker"
                            );
                            if (broker !== undefined) {
                                const brokerId = this.safeString(
                                    broker,
                                    marketType
                                );
                                if (brokerId !== undefined) {
                                    request["newClientOrderId"] =
                                        brokerId + this.uuid22();
                                }
                            }
                        } else {
                            request["newClientOrderId"] = clientOrderId;
                        }
                        if (marketType === "spot" || marketType === "margin") {
                            request["newOrderRespType"] = this.safeValue(
                                this.options["newOrderRespType"],
                                type,
                                "RESULT"
                            ); // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
                        } else {
                            // delivery and future
                            request["newOrderRespType"] = "RESULT"; // "ACK", "RESULT", default "ACK"
                        }
                        request["type"] = uppercaseType;
                        // additional required fields depending on the order type
                        let timeInForceIsRequired = false;
                        let priceIsRequired = false;
                        let stopPriceIsRequired = false;
                        let quantityIsRequired = false;
                        //
                        // spot/margin
                        //
                        //     LIMIT                timeInForce, quantity, price
                        //     MARKET               quantity or quoteOrderQty
                        //     STOP_LOSS            quantity, stopPrice
                        //     STOP_LOSS_LIMIT      timeInForce, quantity, price, stopPrice
                        //     TAKE_PROFIT          quantity, stopPrice
                        //     TAKE_PROFIT_LIMIT    timeInForce, quantity, price, stopPrice
                        //     LIMIT_MAKER          quantity, price
                        //
                        // futures
                        //
                        //     LIMIT                timeInForce, quantity, price
                        //     MARKET               quantity
                        //     STOP/TAKE_PROFIT     quantity, price, stopPrice
                        //     STOP_MARKET          stopPrice
                        //     TAKE_PROFIT_MARKET   stopPrice
                        //     TRAILING_STOP_MARKET callbackRate
                        //
                        if (uppercaseType === "MARKET") {
                            if (market["spot"]) {
                                const quoteOrderQty = this.safeValue(
                                    this.options,
                                    "quoteOrderQty",
                                    true
                                );
                                if (quoteOrderQty) {
                                    const quoteOrderQty = this.safeValue2(
                                        query,
                                        "quoteOrderQty",
                                        "cost"
                                    );
                                    const precision =
                                        market["precision"]["price"];
                                    if (quoteOrderQty !== undefined) {
                                        request["quoteOrderQty"] =
                                            this.decimalToPrecision(
                                                quoteOrderQty,
                                                TRUNCATE,
                                                precision,
                                                this.precisionMode
                                            );
                                    } else if (price !== undefined) {
                                        const amountString =
                                            this.numberToString(amount);
                                        const priceString =
                                            this.numberToString(price);
                                        const quoteOrderQuantity =
                                            Precise.stringMul(
                                                amountString,
                                                priceString
                                            );
                                        request["quoteOrderQty"] =
                                            this.decimalToPrecision(
                                                quoteOrderQuantity,
                                                TRUNCATE,
                                                precision,
                                                this.precisionMode
                                            );
                                    } else {
                                        quantityIsRequired = true;
                                    }
                                } else {
                                    quantityIsRequired = true;
                                }
                            } else {
                                quantityIsRequired = true;
                            }
                        } else if (uppercaseType === "LIMIT") {
                            priceIsRequired = true;
                            timeInForceIsRequired = true;
                            quantityIsRequired = true;
                        } else if (
                            uppercaseType === "STOP_LOSS" ||
                            uppercaseType === "TAKE_PROFIT"
                        ) {
                            stopPriceIsRequired = true;
                            quantityIsRequired = true;
                            if (market["linear"] || market["inverse"]) {
                                priceIsRequired = true;
                            }
                        } else if (
                            uppercaseType === "STOP_LOSS_LIMIT" ||
                            uppercaseType === "TAKE_PROFIT_LIMIT"
                        ) {
                            quantityIsRequired = true;
                            stopPriceIsRequired = true;
                            priceIsRequired = true;
                            timeInForceIsRequired = true;
                        } else if (uppercaseType === "LIMIT_MAKER") {
                            priceIsRequired = true;
                            quantityIsRequired = true;
                        } else if (uppercaseType === "STOP") {
                            quantityIsRequired = true;
                            stopPriceIsRequired = true;
                            priceIsRequired = true;
                        } else if (
                            uppercaseType === "STOP_MARKET" ||
                            uppercaseType === "TAKE_PROFIT_MARKET"
                        ) {
                            const closePosition = this.safeValue(
                                query,
                                "closePosition"
                            );
                            if (closePosition === undefined) {
                                quantityIsRequired = true;
                            }
                            stopPriceIsRequired = true;
                        } else if (uppercaseType === "TRAILING_STOP_MARKET") {
                            quantityIsRequired = true;
                            const callbackRate = this.safeNumber(
                                query,
                                "callbackRate"
                            );
                            if (callbackRate === undefined) {
                                throw new InvalidOrder(
                                    this.id +
                                        " createOrder() requires a callbackRate extra param for a " +
                                        type +
                                        " order"
                                );
                            }
                        }
                        if (quantityIsRequired) {
                            request["quantity"] = this.amountToPrecision(
                                symbol,
                                amount
                            );
                        }
                        if (priceIsRequired) {
                            if (price === undefined) {
                                throw new InvalidOrder(
                                    this.id +
                                        " createOrder() requires a price argument for a " +
                                        type +
                                        " order"
                                );
                            }
                            request["price"] = this.priceToPrecision(
                                symbol,
                                price
                            );
                        }
                        if (timeInForceIsRequired) {
                            request["timeInForce"] =
                                this.options["defaultTimeInForce"]; // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel
                        }
                        if (stopPriceIsRequired) {
                            if (stopPrice === undefined) {
                                throw new InvalidOrder(
                                    this.id +
                                        " createOrder() requires a stopPrice extra param for a " +
                                        type +
                                        " order"
                                );
                            } else {
                                request["stopPrice"] = this.priceToPrecision(
                                    symbol,
                                    stopPrice
                                );
                            }
                        }
                        const requestParams = this.omit(params, [
                            "quoteOrderQty",
                            "cost",
                            "stopPrice",
                            "test",
                            "type",
                            "newClientOrderId",
                            "clientOrderId",
                            "postOnly",
                        ]);
                        const response = await this[method](
                            this.extend(request, requestParams)
                        );
                        return this.parseOrder(response, market);
                    }

                    async fetchOrder(id, symbol = undefined, params = {}) {
                        /**
                         * @method
                         * @name binance#fetchOrder
                         * @description fetches information on an order made by the user
                         * @param {string} symbol unified symbol of the market the order was made in
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @param {string|undefined} params.marginMode 'cross' or 'isolated', for spot margin trading
                         * @returns {object} An [order structure]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        if (symbol === undefined) {
                            throw new ArgumentsRequired(
                                this.id +
                                    " fetchOrder() requires a symbol argument"
                            );
                        }
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const defaultType = this.safeString2(
                            this.options,
                            "fetchOrder",
                            "defaultType",
                            "spot"
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        const [marginMode, query] =
                            this.handleMarginModeAndParams(
                                "fetchOrder",
                                params
                            );
                        const request = {
                            symbol: market["id"],
                        };
                        let method = "privateGetOrder";
                        if (type === "future") {
                            method = "fapiPrivateGetOrder";
                        } else if (type === "delivery") {
                            method = "dapiPrivateGetOrder";
                        } else if (
                            type === "margin" ||
                            marginMode !== undefined
                        ) {
                            method = "sapiGetMarginOrder";
                            if (marginMode === "isolated") {
                                request["isIsolated"] = true;
                            }
                        }
                        const clientOrderId = this.safeValue2(
                            params,
                            "origClientOrderId",
                            "clientOrderId"
                        );
                        if (clientOrderId !== undefined) {
                            request["origClientOrderId"] = clientOrderId;
                        } else {
                            request["orderId"] = id;
                        }
                        const requestParams = this.omit(query, [
                            "type",
                            "clientOrderId",
                            "origClientOrderId",
                        ]);
                        const response = await this[method](
                            this.extend(request, requestParams)
                        );
                        return this.parseOrder(response, market);
                    }

                    async fetchOrders(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchOrders
                         * @description fetches information on multiple orders made by the user
                         * @param {string} symbol unified market symbol of the market orders were made in
                         * @param {int|undefined} since the earliest time in ms to fetch orders for
                         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @param {string|undefined} params.marginMode 'cross' or 'isolated', for spot margin trading
                         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        if (symbol === undefined) {
                            throw new ArgumentsRequired(
                                this.id +
                                    " fetchOrders() requires a symbol argument"
                            );
                        }
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const defaultType = this.safeString2(
                            this.options,
                            "fetchOrders",
                            "defaultType",
                            "spot"
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        const [marginMode, query] =
                            this.handleMarginModeAndParams(
                                "fetchOrders",
                                params
                            );
                        const request = {
                            symbol: market["id"],
                        };
                        let method = "privateGetAllOrders";
                        if (type === "future") {
                            method = "fapiPrivateGetAllOrders";
                        } else if (type === "delivery") {
                            method = "dapiPrivateGetAllOrders";
                        } else if (
                            type === "margin" ||
                            marginMode !== undefined
                        ) {
                            method = "sapiGetMarginAllOrders";
                            if (marginMode === "isolated") {
                                request["isIsolated"] = true;
                            }
                        }
                        if (since !== undefined) {
                            request["startTime"] = since;
                        }
                        if (limit !== undefined) {
                            request["limit"] = limit;
                        }
                        const requestParams = this.omit(query, ["type"]);
                        const response = await this[method](
                            this.extend(request, requestParams)
                        );
                        //
                        //  spot
                        //
                        //     [
                        //         {
                        //             "symbol": "LTCBTC",
                        //             "orderId": 1,
                        //             "clientOrderId": "myOrder1",
                        //             "price": "0.1",
                        //             "origQty": "1.0",
                        //             "executedQty": "0.0",
                        //             "cummulativeQuoteQty": "0.0",
                        //             "status": "NEW",
                        //             "timeInForce": "GTC",
                        //             "type": "LIMIT",
                        //             "side": "BUY",
                        //             "stopPrice": "0.0",
                        //             "icebergQty": "0.0",
                        //             "time": 1499827319559,
                        //             "updateTime": 1499827319559,
                        //             "isWorking": true
                        //         }
                        //     ]
                        //
                        //  futures
                        //
                        //     [
                        //         {
                        //             "symbol": "BTCUSDT",
                        //             "orderId": 1,
                        //             "clientOrderId": "myOrder1",
                        //             "price": "0.1",
                        //             "origQty": "1.0",
                        //             "executedQty": "1.0",
                        //             "cumQuote": "10.0",
                        //             "status": "NEW",
                        //             "timeInForce": "GTC",
                        //             "type": "LIMIT",
                        //             "side": "BUY",
                        //             "stopPrice": "0.0",
                        //             "updateTime": 1499827319559
                        //         }
                        //     ]
                        //
                        return this.parseOrders(response, market, since, limit);
                    }

                    async fetchOpenOrders(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchOpenOrders
                         * @description fetch all unfilled currently open orders
                         * @param {string|undefined} symbol unified market symbol
                         * @param {int|undefined} since the earliest time in ms to fetch open orders for
                         * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @param {string|undefined} params.marginMode 'cross' or 'isolated', for spot margin trading
                         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        await this.loadMarkets();
                        let market = undefined;
                        let type = undefined;
                        const request = {};
                        const [marginMode, query] =
                            this.handleMarginModeAndParams(
                                "fetchOpenOrders",
                                params
                            );
                        if (symbol !== undefined) {
                            market = this.market(symbol);
                            request["symbol"] = market["id"];
                            const defaultType = this.safeString2(
                                this.options,
                                "fetchOpenOrders",
                                "defaultType",
                                "spot"
                            );
                            const marketType =
                                "type" in market ? market["type"] : defaultType;
                            type = this.safeString(query, "type", marketType);
                        } else if (
                            this.options["warnOnFetchOpenOrdersWithoutSymbol"]
                        ) {
                            const symbols = this.symbols;
                            const numSymbols = symbols.length;
                            const fetchOpenOrdersRateLimit = parseInt(
                                numSymbols / 2
                            );
                            throw new ExchangeError(
                                this.id +
                                    " fetchOpenOrders() WARNING: fetching open orders without specifying a symbol is rate-limited to one call per " +
                                    fetchOpenOrdersRateLimit.toString() +
                                    " seconds. Do not call this method frequently to avoid ban. Set " +
                                    this.id +
                                    '.options["warnOnFetchOpenOrdersWithoutSymbol"] = false to suppress this warning message.'
                            );
                        } else {
                            const defaultType = this.safeString2(
                                this.options,
                                "fetchOpenOrders",
                                "defaultType",
                                "spot"
                            );
                            type = this.safeString(query, "type", defaultType);
                        }
                        const requestParams = this.omit(query, "type");
                        let method = "privateGetOpenOrders";
                        if (type === "future") {
                            method = "fapiPrivateGetOpenOrders";
                        } else if (type === "delivery") {
                            method = "dapiPrivateGetOpenOrders";
                        } else if (
                            type === "margin" ||
                            marginMode !== undefined
                        ) {
                            method = "sapiGetMarginOpenOrders";
                            if (marginMode === "isolated") {
                                request["isIsolated"] = true;
                                if (symbol === undefined) {
                                    throw new ArgumentsRequired(
                                        this.id +
                                            " fetchOpenOrders() requires a symbol argument for isolated markets"
                                    );
                                }
                            }
                        }
                        const response = await this[method](
                            this.extend(request, requestParams)
                        );
                        return this.parseOrders(response, market, since, limit);
                    }

                    async fetchClosedOrders(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchClosedOrders
                         * @description fetches information on multiple closed orders made by the user
                         * @param {string} symbol unified market symbol of the market orders were made in
                         * @param {int|undefined} since the earliest time in ms to fetch orders for
                         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        const orders = await this.fetchOrders(
                            symbol,
                            since,
                            limit,
                            params
                        );
                        return this.filterBy(orders, "status", "closed");
                    }

                    async cancelOrder(id, symbol = undefined, params = {}) {
                        /**
                         * @method
                         * @name binance#cancelOrder
                         * @description cancels an open order
                         * @param {string} id order id
                         * @param {string} symbol unified symbol of the market the order was made in
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} An [order structure]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        if (symbol === undefined) {
                            throw new ArgumentsRequired(
                                this.id +
                                    " cancelOrder() requires a symbol argument"
                            );
                        }
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const defaultType = this.safeString2(
                            this.options,
                            "cancelOrder",
                            "defaultType",
                            "spot"
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        // https://github.com/ccxt/ccxt/issues/6507
                        const origClientOrderId = this.safeValue2(
                            params,
                            "origClientOrderId",
                            "clientOrderId"
                        );
                        const [marginMode, query] =
                            this.handleMarginModeAndParams(
                                "cancelOrder",
                                params
                            );
                        const request = {
                            symbol: market["id"],
                            // 'orderId': id,
                            // 'origClientOrderId': id,
                        };
                        if (origClientOrderId === undefined) {
                            request["orderId"] = id;
                        } else {
                            request["origClientOrderId"] = origClientOrderId;
                        }
                        let method = "privateDeleteOrder";
                        if (type === "future") {
                            method = "fapiPrivateDeleteOrder";
                        } else if (type === "delivery") {
                            method = "dapiPrivateDeleteOrder";
                        } else if (
                            type === "margin" ||
                            marginMode !== undefined
                        ) {
                            method = "sapiDeleteMarginOrder";
                            if (marginMode === "isolated") {
                                request["isIsolated"] = true;
                                if (symbol === undefined) {
                                    throw new ArgumentsRequired(
                                        this.id +
                                            " cancelOrder() requires a symbol argument for isolated markets"
                                    );
                                }
                            }
                        }
                        const requestParams = this.omit(query, [
                            "type",
                            "origClientOrderId",
                            "clientOrderId",
                        ]);
                        const response = await this[method](
                            this.extend(request, requestParams)
                        );
                        return this.parseOrder(response, market);
                    }

                    async cancelAllOrders(symbol = undefined, params = {}) {
                        /**
                         * @method
                         * @name binance#cancelAllOrders
                         * @description cancel all open orders in a market
                         * @param {string} symbol unified market symbol of the market to cancel orders in
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @param {string|undefined} params.marginMode 'cross' or 'isolated', for spot margin trading
                         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        if (symbol === undefined) {
                            throw new ArgumentsRequired(
                                this.id +
                                    " cancelAllOrders () requires a symbol argument"
                            );
                        }
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const request = {
                            symbol: market["id"],
                        };
                        const defaultType = this.safeString2(
                            this.options,
                            "cancelAllOrders",
                            "defaultType",
                            "spot"
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        params = this.omit(params, ["type"]);
                        const [marginMode, query] =
                            this.handleMarginModeAndParams(
                                "cancelAllOrders",
                                params
                            );
                        let method = "privateDeleteOpenOrders";
                        if (type === "future") {
                            method = "fapiPrivateDeleteAllOpenOrders";
                        } else if (type === "delivery") {
                            method = "dapiPrivateDeleteAllOpenOrders";
                        } else if (
                            type === "margin" ||
                            marginMode !== undefined
                        ) {
                            method = "sapiDeleteMarginOpenOrders";
                            if (marginMode === "isolated") {
                                request["isIsolated"] = true;
                            }
                        }
                        const response = await this[method](
                            this.extend(request, query)
                        );
                        if (Array.isArray(response)) {
                            return this.parseOrders(response, market);
                        } else {
                            return response;
                        }
                    }

                    async fetchOrderTrades(
                        id,
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchOrderTrades
                         * @description fetch all the trades made from a single order
                         * @param {string} id order id
                         * @param {string} symbol unified market symbol
                         * @param {int|undefined} since the earliest time in ms to fetch trades for
                         * @param {int|undefined} limit the maximum number of trades to retrieve
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html#trade-structure}
                         */
                        if (symbol === undefined) {
                            throw new ArgumentsRequired(
                                this.id +
                                    " fetchOrderTrades() requires a symbol argument"
                            );
                        }
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const type = this.safeString(
                            params,
                            "type",
                            market["type"]
                        );
                        params = this.omit(params, "type");
                        if (type !== "spot") {
                            throw new NotSupported(
                                this.id +
                                    " fetchOrderTrades() supports spot markets only"
                            );
                        }
                        const request = {
                            orderId: id,
                        };
                        return await this.fetchMyTrades(
                            symbol,
                            since,
                            limit,
                            this.extend(request, params)
                        );
                    }

                    async fetchMyTrades(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchMyTrades
                         * @description fetch all trades made by the user
                         * @param {string} symbol unified market symbol
                         * @param {int|undefined} since the earliest time in ms to fetch trades for
                         * @param {int|undefined} limit the maximum number of trades structures to retrieve
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html#trade-structure}
                         */
                        if (symbol === undefined) {
                            throw new ArgumentsRequired(
                                this.id +
                                    " fetchMyTrades() requires a symbol argument"
                            );
                        }
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const request = {
                            symbol: market["id"],
                        };
                        const type = this.safeString(
                            params,
                            "type",
                            market["type"]
                        );
                        params = this.omit(params, "type");
                        let method = undefined;
                        const linear = type === "future";
                        const inverse = type === "delivery";
                        let marginMode = undefined;
                        [marginMode, params] = this.handleMarginModeAndParams(
                            "fetchMyTrades",
                            params
                        );
                        if (type === "spot" || type === "margin") {
                            method = "privateGetMyTrades";
                            if (type === "margin" || marginMode !== undefined) {
                                method = "sapiGetMarginMyTrades";
                                if (marginMode === "isolated") {
                                    request["isIsolated"] = true;
                                }
                            }
                        } else if (linear) {
                            method = "fapiPrivateGetUserTrades";
                        } else if (inverse) {
                            method = "dapiPrivateGetUserTrades";
                        }
                        let endTime = this.safeInteger2(
                            params,
                            "until",
                            "endTime"
                        );
                        if (since !== undefined) {
                            const startTime = parseInt(since);
                            request["startTime"] = startTime;
                            // https://binance-docs.github.io/apidocs/futures/en/#account-trade-list-user_data
                            // If startTime and endTime are both not sent, then the last 7 days' data will be returned.
                            // The time between startTime and endTime cannot be longer than 7 days.
                            // The parameter fromId cannot be sent with startTime or endTime.
                            const currentTimestamp = this.milliseconds();
                            const oneWeek = 7 * 24 * 60 * 60 * 1000;
                            if (currentTimestamp - startTime >= oneWeek) {
                                if (endTime === undefined && linear) {
                                    endTime = this.sum(startTime, oneWeek);
                                    endTime = Math.min(
                                        endTime,
                                        currentTimestamp
                                    );
                                }
                            }
                        }
                        if (endTime !== undefined) {
                            request["endTime"] = endTime;
                            params = this.omit(params, ["endTime", "until"]);
                        }
                        if (limit !== undefined) {
                            if (type === "future" || type === "delivery") {
                                limit = Math.min(limit, 1000); // above 1000, returns error
                            }
                            request["limit"] = limit;
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        //
                        // spot trade
                        //
                        //     [
                        //         {
                        //             "symbol": "BNBBTC",
                        //             "id": 28457,
                        //             "orderId": 100234,
                        //             "price": "4.00000100",
                        //             "qty": "12.00000000",
                        //             "commission": "10.10000000",
                        //             "commissionAsset": "BNB",
                        //             "time": 1499865549590,
                        //             "isBuyer": true,
                        //             "isMaker": false,
                        //             "isBestMatch": true,
                        //         }
                        //     ]
                        //
                        // futures trade
                        //
                        //     [
                        //         {
                        //             "accountId": 20,
                        //             "buyer": False,
                        //             "commission": "-0.07819010",
                        //             "commissionAsset": "USDT",
                        //             "counterPartyId": 653,
                        //             "id": 698759,
                        //             "maker": False,
                        //             "orderId": 25851813,
                        //             "price": "7819.01",
                        //             "qty": "0.002",
                        //             "quoteQty": "0.01563",
                        //             "realizedPnl": "-0.91539999",
                        //             "side": "SELL",
                        //             "symbol": "BTCUSDT",
                        //             "time": 1569514978020
                        //         }
                        //     ]
                        //
                        return this.parseTrades(response, market, since, limit);
                    }

                    async fetchMyDustTrades(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchMyDustTrades
                         * @description fetch all dust trades made by the user
                         * @param {string|undefined} symbol not used by binance fetchMyDustTrades ()
                         * @param {int|undefined} since the earliest time in ms to fetch my dust trades for
                         * @param {int|undefined} limit the maximum number of dust trades to retrieve
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html#trade-structure}
                         */
                        //
                        // Binance provides an opportunity to trade insignificant (i.e. non-tradable and non-withdrawable)
                        // token leftovers (of any asset) into `BNB` coin which in turn can be used to pay trading fees with it.
                        // The corresponding trades history is called the `Dust Log` and can be requested via the following end-point:
                        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/wapi-api.md#dustlog-user_data
                        //
                        await this.loadMarkets();
                        const request = {};
                        if (since !== undefined) {
                            request["startTime"] = since;
                            request["endTime"] = this.sum(since, 7776000000);
                        }
                        const response = await this.sapiGetAssetDribblet(
                            this.extend(request, params)
                        );
                        //     {
                        //       "total": "4",
                        //       "userAssetDribblets": [
                        //         {
                        //           "operateTime": "1627575731000",
                        //           "totalServiceChargeAmount": "0.00001453",
                        //           "totalTransferedAmount": "0.00072693",
                        //           "transId": "70899815863",
                        //           "userAssetDribbletDetails": [
                        //             {
                        //               "fromAsset": "LTC",
                        //               "amount": "0.000006",
                        //               "transferedAmount": "0.00000267",
                        //               "serviceChargeAmount": "0.00000005",
                        //               "operateTime": "1627575731000",
                        //               "transId": "70899815863"
                        //             },
                        //             {
                        //               "fromAsset": "GBP",
                        //               "amount": "0.15949157",
                        //               "transferedAmount": "0.00072426",
                        //               "serviceChargeAmount": "0.00001448",
                        //               "operateTime": "1627575731000",
                        //               "transId": "70899815863"
                        //             }
                        //           ]
                        //         },
                        //       ]
                        //     }
                        const results = this.safeValue(
                            response,
                            "userAssetDribblets",
                            []
                        );
                        const rows = this.safeInteger(response, "total", 0);
                        const data = [];
                        for (let i = 0; i < rows; i++) {
                            const logs = this.safeValue(
                                results[i],
                                "userAssetDribbletDetails",
                                []
                            );
                            for (let j = 0; j < logs.length; j++) {
                                logs[j]["isDustTrade"] = true;
                                data.push(logs[j]);
                            }
                        }
                        const trades = this.parseTrades(
                            data,
                            undefined,
                            since,
                            limit
                        );
                        return this.filterBySinceLimit(trades, since, limit);
                    }

                    parseDustTrade(trade, market = undefined) {
                        //
                        //     {
                        //       "fromAsset": "USDT",
                        //       "amount": "0.009669",
                        //       "transferedAmount": "0.00002992",
                        //       "serviceChargeAmount": "0.00000059",
                        //       "operateTime": "1628076010000",
                        //       "transId": "71416578712",
                        //       "isDustTrade": true
                        //     }
                        //
                        const orderId = this.safeString(trade, "transId");
                        const timestamp = this.safeInteger(
                            trade,
                            "operateTime"
                        );
                        const currencyId = this.safeString(trade, "fromAsset");
                        const tradedCurrency =
                            this.safeCurrencyCode(currencyId);
                        const bnb = this.currency("BNB");
                        const earnedCurrency = bnb["code"];
                        const applicantSymbol =
                            earnedCurrency + "/" + tradedCurrency;
                        let tradedCurrencyIsQuote = false;
                        if (applicantSymbol in this.markets) {
                            tradedCurrencyIsQuote = true;
                        }
                        const feeCostString = this.safeString(
                            trade,
                            "serviceChargeAmount"
                        );
                        const fee = {
                            currency: earnedCurrency,
                            cost: this.parseNumber(feeCostString),
                        };
                        let symbol = undefined;
                        let amountString = undefined;
                        let costString = undefined;
                        let side = undefined;
                        if (tradedCurrencyIsQuote) {
                            symbol = applicantSymbol;
                            amountString = this.safeString(
                                trade,
                                "transferedAmount"
                            );
                            costString = this.safeString(trade, "amount");
                            side = "buy";
                        } else {
                            symbol = tradedCurrency + "/" + earnedCurrency;
                            amountString = this.safeString(trade, "amount");
                            costString = this.safeString(
                                trade,
                                "transferedAmount"
                            );
                            side = "sell";
                        }
                        let priceString = undefined;
                        if (costString !== undefined) {
                            if (amountString) {
                                priceString = Precise.stringDiv(
                                    costString,
                                    amountString
                                );
                            }
                        }
                        const id = undefined;
                        const amount = this.parseNumber(amountString);
                        const price = this.parseNumber(priceString);
                        const cost = this.parseNumber(costString);
                        const type = undefined;
                        const takerOrMaker = undefined;
                        return {
                            id: id,
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            symbol: symbol,
                            order: orderId,
                            type: type,
                            takerOrMaker: takerOrMaker,
                            side: side,
                            amount: amount,
                            price: price,
                            cost: cost,
                            fee: fee,
                            info: trade,
                        };
                    }

                    async fetchDeposits(
                        code = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchDeposits
                         * @description fetch all deposits made to an account
                         * @param {string|undefined} code unified currency code
                         * @param {int|undefined} since the earliest time in ms to fetch deposits for
                         * @param {int|undefined} limit the maximum number of deposits structures to retrieve
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @param {bool} params.fiat if true, only fiat deposits will be returned
                         * @param {int|undefined} params.until the latest time in ms to fetch deposits for
                         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure}
                         */
                        await this.loadMarkets();
                        let currency = undefined;
                        let response = undefined;
                        const request = {};
                        const legalMoney = this.safeValue(
                            this.options,
                            "legalMoney",
                            {}
                        );
                        const fiatOnly = this.safeValue(params, "fiat", false);
                        params = this.omit(params, "fiatOnly");
                        const until = this.safeInteger(params, "until");
                        if (fiatOnly || code in legalMoney) {
                            if (code !== undefined) {
                                currency = this.currency(code);
                            }
                            request["transactionType"] = 0;
                            if (since !== undefined) {
                                request["beginTime"] = since;
                            }
                            if (until !== undefined) {
                                request["endTime"] = until;
                            }
                            const raw = await this.sapiGetFiatOrders(
                                this.extend(request, params)
                            );
                            response = this.safeValue(raw, "data");
                            //     {
                            //       "code": "000000",
                            //       "message": "success",
                            //       "data": [
                            //         {
                            //           "orderNo": "25ced37075c1470ba8939d0df2316e23",
                            //           "fiatCurrency": "EUR",
                            //           "indicatedAmount": "15.00",
                            //           "amount": "15.00",
                            //           "totalFee": "0.00",
                            //           "method": "card",
                            //           "status": "Failed",
                            //           "createTime": 1627501026000,
                            //           "updateTime": 1627501027000
                            //         }
                            //       ],
                            //       "total": 1,
                            //       "success": true
                            //     }
                        } else {
                            if (code !== undefined) {
                                currency = this.currency(code);
                                request["coin"] = currency["id"];
                            }
                            if (since !== undefined) {
                                request["startTime"] = since;
                                // max 3 months range https://github.com/ccxt/ccxt/issues/6495
                                let endTime = this.sum(since, 7776000000);
                                if (until !== undefined) {
                                    endTime = Math.min(endTime, until);
                                }
                                request["endTime"] = endTime;
                            }
                            if (limit !== undefined) {
                                request["limit"] = limit;
                            }
                            response = await this.sapiGetCapitalDepositHisrec(
                                this.extend(request, params)
                            );
                            //     [
                            //       {
                            //         "amount": "0.01844487",
                            //         "coin": "BCH",
                            //         "network": "BCH",
                            //         "status": 1,
                            //         "address": "1NYxAJhW2281HK1KtJeaENBqHeygA88FzR",
                            //         "addressTag": "",
                            //         "txId": "bafc5902504d6504a00b7d0306a41154cbf1d1b767ab70f3bc226327362588af",
                            //         "insertTime": 1610784980000,
                            //         "transferType": 0,
                            //         "confirmTimes": "2/2"
                            //       },
                            //       {
                            //         "amount": "4500",
                            //         "coin": "USDT",
                            //         "network": "BSC",
                            //         "status": 1,
                            //         "address": "0xc9c923c87347ca0f3451d6d308ce84f691b9f501",
                            //         "addressTag": "",
                            //         "txId": "Internal transfer 51376627901",
                            //         "insertTime": 1618394381000,
                            //         "transferType": 1,
                            //         "confirmTimes": "1/15"
                            //     }
                            //   ]
                        }
                        return this.parseTransactions(
                            response,
                            currency,
                            since,
                            limit
                        );
                    }

                    async fetchWithdrawals(
                        code = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchWithdrawals
                         * @description fetch all withdrawals made from an account
                         * @param {string|undefined} code unified currency code
                         * @param {int|undefined} since the earliest time in ms to fetch withdrawals for
                         * @param {int|undefined} limit the maximum number of withdrawals structures to retrieve
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @param {bool} params.fiat if true, only fiat withdrawals will be returned
                         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure}
                         */
                        await this.loadMarkets();
                        const legalMoney = this.safeValue(
                            this.options,
                            "legalMoney",
                            {}
                        );
                        const fiatOnly = this.safeValue(params, "fiat", false);
                        params = this.omit(params, "fiatOnly");
                        const request = {};
                        let response = undefined;
                        let currency = undefined;
                        if (fiatOnly || code in legalMoney) {
                            if (code !== undefined) {
                                currency = this.currency(code);
                            }
                            request["transactionType"] = 1;
                            if (since !== undefined) {
                                request["beginTime"] = since;
                            }
                            const raw = await this.sapiGetFiatOrders(
                                this.extend(request, params)
                            );
                            response = this.safeValue(raw, "data");
                            //     {
                            //       "code": "000000",
                            //       "message": "success",
                            //       "data": [
                            //         {
                            //           "orderNo": "CJW706452266115170304",
                            //           "fiatCurrency": "GBP",
                            //           "indicatedAmount": "10001.50",
                            //           "amount": "100.00",
                            //           "totalFee": "1.50",
                            //           "method": "bank transfer",
                            //           "status": "Successful",
                            //           "createTime": 1620037745000,
                            //           "updateTime": 1620038480000
                            //         },
                            //         {
                            //           "orderNo": "CJW706287492781891584",
                            //           "fiatCurrency": "GBP",
                            //           "indicatedAmount": "10001.50",
                            //           "amount": "100.00",
                            //           "totalFee": "1.50",
                            //           "method": "bank transfer",
                            //           "status": "Successful",
                            //           "createTime": 1619998460000,
                            //           "updateTime": 1619998823000
                            //         }
                            //       ],
                            //       "total": 39,
                            //       "success": true
                            //     }
                        } else {
                            if (code !== undefined) {
                                currency = this.currency(code);
                                request["coin"] = currency["id"];
                            }
                            if (since !== undefined) {
                                request["startTime"] = since;
                                // max 3 months range https://github.com/ccxt/ccxt/issues/6495
                                request["endTime"] = this.sum(
                                    since,
                                    7776000000
                                );
                            }
                            if (limit !== undefined) {
                                request["limit"] = limit;
                            }
                            response = await this.sapiGetCapitalWithdrawHistory(
                                this.extend(request, params)
                            );
                            //     [
                            //       {
                            //         "id": "69e53ad305124b96b43668ceab158a18",
                            //         "amount": "28.75",
                            //         "transactionFee": "0.25",
                            //         "coin": "XRP",
                            //         "status": 6,
                            //         "address": "r3T75fuLjX51mmfb5Sk1kMNuhBgBPJsjza",
                            //         "addressTag": "101286922",
                            //         "txId": "19A5B24ED0B697E4F0E9CD09FCB007170A605BC93C9280B9E6379C5E6EF0F65A",
                            //         "applyTime": "2021-04-15 12:09:16",
                            //         "network": "XRP",
                            //         "transferType": 0
                            //       },
                            //       {
                            //         "id": "9a67628b16ba4988ae20d329333f16bc",
                            //         "amount": "20",
                            //         "transactionFee": "20",
                            //         "coin": "USDT",
                            //         "status": 6,
                            //         "address": "0x0AB991497116f7F5532a4c2f4f7B1784488628e1",
                            //         "txId": "0x77fbf2cf2c85b552f0fd31fd2e56dc95c08adae031d96f3717d8b17e1aea3e46",
                            //         "applyTime": "2021-04-15 12:06:53",
                            //         "network": "ETH",
                            //         "transferType": 0
                            //       },
                            //       {
                            //         "id": "a7cdc0afbfa44a48bd225c9ece958fe2",
                            //         "amount": "51",
                            //         "transactionFee": "1",
                            //         "coin": "USDT",
                            //         "status": 6,
                            //         "address": "TYDmtuWL8bsyjvcauUTerpfYyVhFtBjqyo",
                            //         "txId": "168a75112bce6ceb4823c66726ad47620ad332e69fe92d9cb8ceb76023f9a028",
                            //         "applyTime": "2021-04-13 12:46:59",
                            //         "network": "TRX",
                            //         "transferType": 0
                            //       }
                            //     ]
                        }
                        return this.parseTransactions(
                            response,
                            currency,
                            since,
                            limit
                        );
                    }

                    parseTransactionStatusByType(status, type = undefined) {
                        const statusesByType = {
                            deposit: {
                                0: "pending",
                                1: "ok",
                                // Fiat
                                // Processing, Failed, Successful, Finished, Refunding, Refunded, Refund Failed, Order Partial credit Stopped
                                Processing: "pending",
                                Failed: "failed",
                                Successful: "ok",
                                Refunding: "canceled",
                                Refunded: "canceled",
                                "Refund Failed": "failed",
                            },
                            withdrawal: {
                                0: "pending", // Email Sent
                                1: "canceled", // Cancelled (different from 1 = ok in deposits)
                                2: "pending", // Awaiting Approval
                                3: "failed", // Rejected
                                4: "pending", // Processing
                                5: "failed", // Failure
                                6: "ok", // Completed
                                // Fiat
                                // Processing, Failed, Successful, Finished, Refunding, Refunded, Refund Failed, Order Partial credit Stopped
                                Processing: "pending",
                                Failed: "failed",
                                Successful: "ok",
                                Refunding: "canceled",
                                Refunded: "canceled",
                                "Refund Failed": "failed",
                            },
                        };
                        const statuses = this.safeValue(
                            statusesByType,
                            type,
                            {}
                        );
                        return this.safeString(statuses, status, status);
                    }

                    parseTransaction(transaction, currency = undefined) {
                        //
                        // fetchDeposits
                        //
                        //     {
                        //       "amount": "4500",
                        //       "coin": "USDT",
                        //       "network": "BSC",
                        //       "status": 1,
                        //       "address": "0xc9c923c87347ca0f3451d6d308ce84f691b9f501",
                        //       "addressTag": "",
                        //       "txId": "Internal transfer 51376627901",
                        //       "insertTime": 1618394381000,
                        //       "transferType": 1,
                        //       "confirmTimes": "1/15"
                        //     }
                        //
                        // fetchWithdrawals
                        //
                        //     {
                        //       "id": "69e53ad305124b96b43668ceab158a18",
                        //       "amount": "28.75",
                        //       "transactionFee": "0.25",
                        //       "coin": "XRP",
                        //       "status": 6,
                        //       "address": "r3T75fuLjX51mmfb5Sk1kMNuhBgBPJsjza",
                        //       "addressTag": "101286922",
                        //       "txId": "19A5B24ED0B697E4F0E9CD09FCB007170A605BC93C9280B9E6379C5E6EF0F65A",
                        //       "applyTime": "2021-04-15 12:09:16",
                        //       "network": "XRP",
                        //       "transferType": 0
                        //     }
                        //
                        // fiat transaction
                        // withdraw
                        //     {
                        //       "orderNo": "CJW684897551397171200",
                        //       "fiatCurrency": "GBP",
                        //       "indicatedAmount": "29.99",
                        //       "amount": "28.49",
                        //       "totalFee": "1.50",
                        //       "method": "bank transfer",
                        //       "status": "Successful",
                        //       "createTime": 1614898701000,
                        //       "updateTime": 1614898820000
                        //     }
                        //
                        // deposit
                        //     {
                        //       "orderNo": "25ced37075c1470ba8939d0df2316e23",
                        //       "fiatCurrency": "EUR",
                        //       "transactionType": 0,
                        //       "indicatedAmount": "15.00",
                        //       "amount": "15.00",
                        //       "totalFee": "0.00",
                        //       "method": "card",
                        //       "status": "Failed",
                        //       "createTime": "1627501026000",
                        //       "updateTime": "1627501027000"
                        //     }
                        //
                        // withdraw
                        //
                        //    { id: '9a67628b16ba4988ae20d329333f16bc' }
                        //
                        const id = this.safeString2(
                            transaction,
                            "id",
                            "orderNo"
                        );
                        const address = this.safeString(transaction, "address");
                        let tag = this.safeString(transaction, "addressTag"); // set but unused
                        if (tag !== undefined) {
                            if (tag.length < 1) {
                                tag = undefined;
                            }
                        }
                        let txid = this.safeString(transaction, "txId");
                        if (
                            txid !== undefined &&
                            txid.indexOf("Internal transfer ") >= 0
                        ) {
                            txid = txid.slice(18);
                        }
                        const currencyId = this.safeString2(
                            transaction,
                            "coin",
                            "fiatCurrency"
                        );
                        let code = this.safeCurrencyCode(currencyId, currency);
                        let timestamp = undefined;
                        const insertTime = this.safeInteger2(
                            transaction,
                            "insertTime",
                            "createTime"
                        );
                        const updated = this.safeInteger2(
                            transaction,
                            "successTime",
                            "updateTime"
                        );
                        let type = this.safeString(transaction, "type");
                        if (type === undefined) {
                            const txType = this.safeString(
                                transaction,
                                "transactionType"
                            );
                            type = txType === "0" ? "deposit" : "withdrawal";
                            timestamp = insertTime;
                            const legalMoneyCurrenciesById = this.safeValue(
                                this.options,
                                "legalMoneyCurrenciesById"
                            );
                            code = this.safeString(
                                legalMoneyCurrenciesById,
                                code,
                                code
                            );
                        }
                        const status = this.parseTransactionStatusByType(
                            this.safeString(transaction, "status"),
                            type
                        );
                        const amount = this.safeNumber(transaction, "amount");
                        const feeCost = this.safeNumber2(
                            transaction,
                            "transactionFee",
                            "totalFee"
                        );
                        let fee = undefined;
                        if (feeCost !== undefined) {
                            fee = { currency: code, cost: feeCost };
                        }
                        let internal = this.safeInteger(
                            transaction,
                            "transferType"
                        );
                        if (internal !== undefined) {
                            internal = internal ? true : false;
                        }
                        const network = this.safeString(transaction, "network");
                        return {
                            info: transaction,
                            id: id,
                            txid: txid,
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            network: network,
                            address: address,
                            addressTo: address,
                            addressFrom: undefined,
                            tag: tag,
                            tagTo: tag,
                            tagFrom: undefined,
                            type: type,
                            amount: amount,
                            currency: code,
                            status: status,
                            updated: updated,
                            internal: internal,
                            fee: fee,
                        };
                    }

                    parseTransferStatus(status) {
                        const statuses = {
                            CONFIRMED: "ok",
                        };
                        return this.safeString(statuses, status, status);
                    }

                    parseTransfer(transfer, currency = undefined) {
                        //
                        // transfer
                        //
                        //     {
                        //         "tranId":13526853623
                        //     }
                        //
                        // fetchTransfers
                        //
                        //     {
                        //         timestamp: 1614640878000,
                        //         asset: 'USDT',
                        //         amount: '25',
                        //         type: 'MAIN_UMFUTURE',
                        //         status: 'CONFIRMED',
                        //         tranId: 43000126248
                        //     }
                        //
                        const id = this.safeString(transfer, "tranId");
                        const currencyId = this.safeString(transfer, "asset");
                        const code = this.safeCurrencyCode(
                            currencyId,
                            currency
                        );
                        const amount = this.safeNumber(transfer, "amount");
                        const type = this.safeString(transfer, "type");
                        let fromAccount = undefined;
                        let toAccount = undefined;
                        const accountsById = this.safeValue(
                            this.options,
                            "accountsById",
                            {}
                        );
                        if (type !== undefined) {
                            const parts = type.split("_");
                            fromAccount = this.safeValue(parts, 0);
                            toAccount = this.safeValue(parts, 1);
                            fromAccount = this.safeString(
                                accountsById,
                                fromAccount,
                                fromAccount
                            );
                            toAccount = this.safeString(
                                accountsById,
                                toAccount,
                                toAccount
                            );
                        }
                        const timestamp = this.safeInteger(
                            transfer,
                            "timestamp"
                        );
                        const status = this.parseTransferStatus(
                            this.safeString(transfer, "status")
                        );
                        return {
                            info: transfer,
                            id: id,
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            currency: code,
                            amount: amount,
                            fromAccount: fromAccount,
                            toAccount: toAccount,
                            status: status,
                        };
                    }

                    parseIncome(income, market = undefined) {
                        //
                        //     {
                        //       "symbol": "ETHUSDT",
                        //       "incomeType": "FUNDING_FEE",
                        //       "income": "0.00134317",
                        //       "asset": "USDT",
                        //       "time": "1621584000000",
                        //       "info": "FUNDING_FEE",
                        //       "tranId": "4480321991774044580",
                        //       "tradeId": ""
                        //     }
                        //
                        const marketId = this.safeString(income, "symbol");
                        const symbol = this.safeSymbol(marketId, market);
                        const amount = this.safeNumber(income, "income");
                        const currencyId = this.safeString(income, "asset");
                        const code = this.safeCurrencyCode(currencyId);
                        const id = this.safeString(income, "tranId");
                        const timestamp = this.safeInteger(income, "time");
                        return {
                            info: income,
                            symbol: symbol,
                            code: code,
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            id: id,
                            amount: amount,
                        };
                    }

                    parseIncomes(
                        incomes,
                        market = undefined,
                        since = undefined,
                        limit = undefined
                    ) {
                        const result = [];
                        for (let i = 0; i < incomes.length; i++) {
                            const entry = incomes[i];
                            const parsed = this.parseIncome(entry, market);
                            result.push(parsed);
                        }
                        const sorted = this.sortBy(result, "timestamp");
                        return this.filterBySinceLimit(sorted, since, limit);
                    }

                    async transfer(
                        code,
                        amount,
                        fromAccount,
                        toAccount,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#transfer
                         * @description transfer currency internally between wallets on the same account
                         * @see https://binance-docs.github.io/apidocs/spot/en/#user-universal-transfer-user_data
                         * @see https://binance-docs.github.io/apidocs/spot/en/#isolated-margin-account-transfer-margin
                         * @param {string} code unified currency code
                         * @param {float} amount amount to transfer
                         * @param {string} fromAccount account to transfer from
                         * @param {string} toAccount account to transfer to
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/en/latest/manual.html#transfer-structure}
                         */
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const request = {
                            asset: currency["id"],
                            amount: this.currencyToPrecision(code, amount),
                        };
                        request["type"] = this.safeString(params, "type");
                        let method = "sapiPostAssetTransfer";
                        if (request["type"] === undefined) {
                            const symbol = this.safeString(params, "symbol");
                            if (symbol !== undefined) {
                                params = this.omit(params, "symbol");
                            }
                            let fromId =
                                this.convertTypeToAccount(
                                    fromAccount
                                ).toUpperCase();
                            let toId =
                                this.convertTypeToAccount(
                                    toAccount
                                ).toUpperCase();
                            if (fromId === "ISOLATED") {
                                if (symbol === undefined) {
                                    throw new ArgumentsRequired(
                                        this.id +
                                            ' transfer () requires params["symbol"] when fromAccount is ' +
                                            fromAccount
                                    );
                                } else {
                                    fromId = this.marketId(symbol);
                                }
                            }
                            if (toId === "ISOLATED") {
                                if (symbol === undefined) {
                                    throw new ArgumentsRequired(
                                        this.id +
                                            ' transfer () requires params["symbol"] when toAccount is ' +
                                            toAccount
                                    );
                                } else {
                                    toId = this.marketId(symbol);
                                }
                            }
                            const accountsById = this.safeValue(
                                this.options,
                                "accountsById",
                                {}
                            );
                            const fromIsolated = !(fromId in accountsById);
                            const toIsolated = !(toId in accountsById);
                            if (fromIsolated || toIsolated) {
                                // Isolated margin transfer
                                const fromFuture =
                                    fromId === "UMFUTURE" ||
                                    fromId === "CMFUTURE";
                                const toFuture =
                                    toId === "UMFUTURE" || toId === "CMFUTURE";
                                const fromSpot = fromId === "MAIN";
                                const toSpot = toId === "MAIN";
                                const funding =
                                    fromId === "FUNDING" || toId === "FUNDING";
                                const mining =
                                    fromId === "MINING" || toId === "MINING";
                                const prohibitedWithIsolated =
                                    fromFuture || toFuture || mining || funding;
                                if (
                                    (fromIsolated || toIsolated) &&
                                    prohibitedWithIsolated
                                ) {
                                    throw new BadRequest(
                                        this.id +
                                            " transfer () does not allow transfers between " +
                                            fromAccount +
                                            " and " +
                                            toAccount
                                    );
                                } else if (toSpot && fromIsolated) {
                                    method = "sapiPostMarginIsolatedTransfer";
                                    request["transFrom"] = "ISOLATED_MARGIN";
                                    request["transTo"] = "SPOT";
                                    request["symbol"] = fromId;
                                } else if (fromSpot && toIsolated) {
                                    method = "sapiPostMarginIsolatedTransfer";
                                    request["transFrom"] = "SPOT";
                                    request["transTo"] = "ISOLATED_MARGIN";
                                    request["symbol"] = toId;
                                } else {
                                    if (fromIsolated) {
                                        request["fromSymbol"] = fromId;
                                        fromId = "ISOLATEDMARGIN";
                                    }
                                    if (toIsolated) {
                                        request["toSymbol"] = toId;
                                        toId = "ISOLATEDMARGIN";
                                    }
                                    request["type"] = fromId + "_" + toId;
                                }
                            } else {
                                request["type"] = fromId + "_" + toId;
                            }
                        }
                        params = this.omit(params, "type");
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         "tranId":13526853623
                        //     }
                        //
                        const transfer = this.parseTransfer(response, currency);
                        return this.extend(transfer, {
                            amount: amount,
                            currency: code,
                            fromAccount: fromAccount,
                            toAccount: toAccount,
                        });
                    }

                    async fetchTransfers(
                        code = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchTransfers
                         * @description fetch a history of internal transfers made on an account
                         * @param {string|undefined} code unified currency code of the currency transferred
                         * @param {int|undefined} since the earliest time in ms to fetch transfers for
                         * @param {int|undefined} limit the maximum number of  transfers structures to retrieve
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {[object]} a list of [transfer structures]{@link https://docs.ccxt.com/en/latest/manual.html#transfer-structure}
                         */
                        await this.loadMarkets();
                        let currency = undefined;
                        if (code !== undefined) {
                            currency = this.currency(code);
                        }
                        const defaultType = this.safeString2(
                            this.options,
                            "fetchTransfers",
                            "defaultType",
                            "spot"
                        );
                        const fromAccount = this.safeString(
                            params,
                            "fromAccount",
                            defaultType
                        );
                        const defaultTo =
                            fromAccount === "future" ? "spot" : "future";
                        const toAccount = this.safeString(
                            params,
                            "toAccount",
                            defaultTo
                        );
                        let type = this.safeString(params, "type");
                        const accountsByType = this.safeValue(
                            this.options,
                            "accountsByType",
                            {}
                        );
                        const fromId = this.safeString(
                            accountsByType,
                            fromAccount
                        );
                        const toId = this.safeString(accountsByType, toAccount);
                        if (type === undefined) {
                            if (fromId === undefined) {
                                const keys = Object.keys(accountsByType);
                                throw new ExchangeError(
                                    this.id +
                                        " fromAccount parameter must be one of " +
                                        keys.join(", ")
                                );
                            }
                            if (toId === undefined) {
                                const keys = Object.keys(accountsByType);
                                throw new ExchangeError(
                                    this.id +
                                        " toAccount parameter must be one of " +
                                        keys.join(", ")
                                );
                            }
                            type = fromId + "_" + toId;
                        }
                        const request = {
                            type: type,
                        };
                        if (since !== undefined) {
                            request["startTime"] = since;
                        }
                        if (limit !== undefined) {
                            request["size"] = limit;
                        }
                        const response = await this.sapiGetAssetTransfer(
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         total: 3,
                        //         rows: [
                        //             {
                        //                 timestamp: 1614640878000,
                        //                 asset: 'USDT',
                        //                 amount: '25',
                        //                 type: 'MAIN_UMFUTURE',
                        //                 status: 'CONFIRMED',
                        //                 tranId: 43000126248
                        //             },
                        //         ]
                        //     }
                        //
                        const rows = this.safeValue(response, "rows", []);
                        return this.parseTransfers(
                            rows,
                            currency,
                            since,
                            limit
                        );
                    }

                    async fetchDepositAddress(code, params = {}) {
                        /**
                         * @method
                         * @name binance#fetchDepositAddress
                         * @description fetch the deposit address for a currency associated with this account
                         * @param {string} code unified currency code
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} an [address structure]{@link https://docs.ccxt.com/en/latest/manual.html#address-structure}
                         */
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const request = {
                            coin: currency["id"],
                            // 'network': 'ETH', // 'BSC', 'XMR', you can get network and isDefault in networkList in the response of sapiGetCapitalConfigDetail
                        };
                        const networks = this.safeValue(
                            this.options,
                            "networks",
                            {}
                        );
                        let network = this.safeStringUpper(params, "network"); // this line allows the user to specify either ERC20 or ETH
                        network = this.safeString(networks, network, network); // handle ERC20>ETH alias
                        if (network !== undefined) {
                            request["network"] = network;
                            params = this.omit(params, "network");
                        }
                        // has support for the 'network' parameter
                        // https://binance-docs.github.io/apidocs/spot/en/#deposit-address-supporting-network-user_data
                        const response =
                            await this.sapiGetCapitalDepositAddress(
                                this.extend(request, params)
                            );
                        //
                        //     {
                        //         currency: 'XRP',
                        //         address: 'rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh',
                        //         tag: '108618262',
                        //         info: {
                        //             coin: 'XRP',
                        //             address: 'rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh',
                        //             tag: '108618262',
                        //             url: 'https://bithomp.com/explorer/rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh'
                        //         }
                        //     }
                        //
                        const address = this.safeString(response, "address");
                        const url = this.safeString(response, "url");
                        let impliedNetwork = undefined;
                        if (url !== undefined) {
                            const reverseNetworks = this.safeValue(
                                this.options,
                                "reverseNetworks",
                                {}
                            );
                            const parts = url.split("/");
                            let topLevel = this.safeString(parts, 2);
                            if (
                                topLevel === "blockchair.com" ||
                                topLevel === "viewblock.io"
                            ) {
                                const subLevel = this.safeString(parts, 3);
                                if (subLevel !== undefined) {
                                    topLevel = topLevel + "/" + subLevel;
                                }
                            }
                            impliedNetwork = this.safeString(
                                reverseNetworks,
                                topLevel
                            );
                            const impliedNetworks = this.safeValue(
                                this.options,
                                "impliedNetworks",
                                {
                                    ETH: { ERC20: "ETH" },
                                    TRX: { TRC20: "TRX" },
                                }
                            );
                            if (code in impliedNetworks) {
                                const conversion = this.safeValue(
                                    impliedNetworks,
                                    code,
                                    {}
                                );
                                impliedNetwork = this.safeString(
                                    conversion,
                                    impliedNetwork,
                                    impliedNetwork
                                );
                            }
                        }
                        let tag = this.safeString(response, "tag", "");
                        if (tag.length === 0) {
                            tag = undefined;
                        }
                        this.checkAddress(address);
                        return {
                            currency: code,
                            address: address,
                            tag: tag,
                            network: impliedNetwork,
                            info: response,
                        };
                    }

                    async fetchTransactionFees(codes = undefined, params = {}) {
                        /**
                         * @method
                         * @name binance#fetchTransactionFees
                         * @description *DEPRECATED* please use fetchDepositWithdrawFees instead
                         * @param {[string]|undefined} codes not used by binance fetchTransactionFees ()
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {[object]} a list of [fee structures]{@link https://docs.ccxt.com/en/latest/manual.html#fee-structure}
                         */
                        await this.loadMarkets();
                        const response = await this.sapiGetCapitalConfigGetall(
                            params
                        );
                        //
                        //  [
                        //     {
                        //       coin: 'BAT',
                        //       depositAllEnable: true,
                        //       withdrawAllEnable: true,
                        //       name: 'Basic Attention Token',
                        //       free: '0',
                        //       locked: '0',
                        //       freeze: '0',
                        //       withdrawing: '0',
                        //       ipoing: '0',
                        //       ipoable: '0',
                        //       storage: '0',
                        //       isLegalMoney: false,
                        //       trading: true,
                        //       networkList: [
                        //         {
                        //           network: 'BNB',
                        //           coin: 'BAT',
                        //           withdrawIntegerMultiple: '0.00000001',
                        //           isDefault: false,
                        //           depositEnable: true,
                        //           withdrawEnable: true,
                        //           depositDesc: '',
                        //           withdrawDesc: '',
                        //           specialTips: 'The name of this asset is Basic Attention Token (BAT). Both a MEMO and an Address are required to successfully deposit your BEP2 tokens to Binance.',
                        //           name: 'BEP2',
                        //           resetAddressStatus: false,
                        //           addressRegex: '^(bnb1)[0-9a-z]{38}$',
                        //           memoRegex: '^[0-9A-Za-z\\-_]{1,120}$',
                        //           withdrawFee: '0.27',
                        //           withdrawMin: '0.54',
                        //           withdrawMax: '10000000000',
                        //           minConfirm: '1',
                        //           unLockConfirm: '0'
                        //         },
                        //         {
                        //           network: 'BSC',
                        //           coin: 'BAT',
                        //           withdrawIntegerMultiple: '0.00000001',
                        //           isDefault: false,
                        //           depositEnable: true,
                        //           withdrawEnable: true,
                        //           depositDesc: '',
                        //           withdrawDesc: '',
                        //           specialTips: 'The name of this asset is Basic Attention Token. Please ensure you are depositing Basic Attention Token (BAT) tokens under the contract address ending in 9766e.',
                        //           name: 'BEP20 (BSC)',
                        //           resetAddressStatus: false,
                        //           addressRegex: '^(0x)[0-9A-Fa-f]{40}$',
                        //           memoRegex: '',
                        //           withdrawFee: '0.27',
                        //           withdrawMin: '0.54',
                        //           withdrawMax: '10000000000',
                        //           minConfirm: '15',
                        //           unLockConfirm: '0'
                        //         },
                        //         {
                        //           network: 'ETH',
                        //           coin: 'BAT',
                        //           withdrawIntegerMultiple: '0.00000001',
                        //           isDefault: true,
                        //           depositEnable: true,
                        //           withdrawEnable: true,
                        //           depositDesc: '',
                        //           withdrawDesc: '',
                        //           specialTips: 'The name of this asset is Basic Attention Token. Please ensure you are depositing Basic Attention Token (BAT) tokens under the contract address ending in 887ef.',
                        //           name: 'ERC20',
                        //           resetAddressStatus: false,
                        //           addressRegex: '^(0x)[0-9A-Fa-f]{40}$',
                        //           memoRegex: '',
                        //           withdrawFee: '27',
                        //           withdrawMin: '54',
                        //           withdrawMax: '10000000000',
                        //           minConfirm: '12',
                        //           unLockConfirm: '0'
                        //         }
                        //       ]
                        //     }
                        //  ]
                        //
                        const withdrawFees = {};
                        for (let i = 0; i < response.length; i++) {
                            const entry = response[i];
                            const currencyId = this.safeString(entry, "coin");
                            const code = this.safeCurrencyCode(currencyId);
                            const networkList = this.safeValue(
                                entry,
                                "networkList",
                                []
                            );
                            withdrawFees[code] = {};
                            for (let j = 0; j < networkList.length; j++) {
                                const networkEntry = networkList[j];
                                const networkId = this.safeString(
                                    networkEntry,
                                    "network"
                                );
                                const networkCode =
                                    this.safeCurrencyCode(networkId);
                                const fee = this.safeNumber(
                                    networkEntry,
                                    "withdrawFee"
                                );
                                withdrawFees[code][networkCode] = fee;
                            }
                        }
                        return {
                            withdraw: withdrawFees,
                            deposit: {},
                            info: response,
                        };
                    }

                    async fetchDepositWithdrawFees(
                        codes = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchDepositWithdrawFees
                         * @description fetch deposit and withdraw fees
                         * @param {[string]|undefined} codes not used by binance fetchDepositWithdrawFees ()
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {[object]} a list of [fee structures]{@link https://docs.ccxt.com/en/latest/manual.html#fee-structure}
                         */
                        await this.loadMarkets();
                        const response = await this.sapiGetCapitalConfigGetall(
                            params
                        );
                        //
                        //    [
                        //        {
                        //            coin: 'BAT',
                        //            depositAllEnable: true,
                        //            withdrawAllEnable: true,
                        //            name: 'Basic Attention Token',
                        //            free: '0',
                        //            locked: '0',
                        //            freeze: '0',
                        //            withdrawing: '0',
                        //            ipoing: '0',
                        //            ipoable: '0',
                        //            storage: '0',
                        //            isLegalMoney: false,
                        //            trading: true,
                        //            networkList: [
                        //                {
                        //                    network: 'BNB',
                        //                    coin: 'BAT',
                        //                    withdrawIntegerMultiple: '0.00000001',
                        //                    isDefault: false,
                        //                    depositEnable: true,
                        //                    withdrawEnable: true,
                        //                    depositDesc: '',
                        //                    withdrawDesc: '',
                        //                    specialTips: 'The name of this asset is Basic Attention Token (BAT). Both a MEMO and an Address are required to successfully deposit your BEP2 tokens to Binance.',
                        //                    name: 'BEP2',
                        //                    resetAddressStatus: false,
                        //                    addressRegex: '^(bnb1)[0-9a-z]{38}$',
                        //                    memoRegex: '^[0-9A-Za-z\\-_]{1,120}$',
                        //                    withdrawFee: '0.27',
                        //                    withdrawMin: '0.54',
                        //                    withdrawMax: '10000000000',
                        //                    minConfirm: '1',
                        //                    unLockConfirm: '0'
                        //                },
                        //                ...
                        //            ]
                        //        }
                        //    ]
                        //
                        return this.parseDepositWithdrawFees(
                            response,
                            codes,
                            "coin"
                        );
                    }

                    parseDepositWithdrawFee(fee, currency = undefined) {
                        //
                        //    {
                        //        coin: 'BAT',
                        //        depositAllEnable: true,
                        //        withdrawAllEnable: true,
                        //        name: 'Basic Attention Token',
                        //        free: '0',
                        //        locked: '0',
                        //        freeze: '0',
                        //        withdrawing: '0',
                        //        ipoing: '0',
                        //        ipoable: '0',
                        //        storage: '0',
                        //        isLegalMoney: false,
                        //        trading: true,
                        //        networkList: [
                        //            {
                        //                network: 'BNB',
                        //                coin: 'BAT',
                        //                withdrawIntegerMultiple: '0.00000001',
                        //                isDefault: false,
                        //                depositEnable: true,
                        //                withdrawEnable: true,
                        //                depositDesc: '',
                        //                withdrawDesc: '',
                        //                specialTips: 'The name of this asset is Basic Attention Token (BAT). Both a MEMO and an Address are required to successfully deposit your BEP2 tokens to Binance.',
                        //                name: 'BEP2',
                        //                resetAddressStatus: false,
                        //                addressRegex: '^(bnb1)[0-9a-z]{38}$',
                        //                memoRegex: '^[0-9A-Za-z\\-_]{1,120}$',
                        //                withdrawFee: '0.27',
                        //                withdrawMin: '0.54',
                        //                withdrawMax: '10000000000',
                        //                minConfirm: '1',
                        //                unLockConfirm: '0'
                        //            },
                        //            ...
                        //        ]
                        //    }
                        //
                        const networkList = this.safeValue(
                            fee,
                            "networkList",
                            []
                        );
                        const result = this.depositWithdrawFee(fee);
                        for (let j = 0; j < networkList.length; j++) {
                            const networkEntry = networkList[j];
                            const networkId = this.safeString(
                                networkEntry,
                                "network"
                            );
                            const networkCode = this.networkIdToCode(networkId);
                            const withdrawFee = this.safeNumber(
                                networkEntry,
                                "withdrawFee"
                            );
                            const isDefault = this.safeValue(
                                networkEntry,
                                "isDefault"
                            );
                            if (isDefault === true) {
                                result["withdraw"] = {
                                    fee: withdrawFee,
                                    percentage: undefined,
                                };
                            }
                            result["networks"][networkCode] = {
                                withdraw: {
                                    fee: withdrawFee,
                                    percentage: undefined,
                                },
                                deposit: {
                                    fee: undefined,
                                    percentage: undefined,
                                },
                            };
                        }
                        return result;
                    }

                    async withdraw(
                        code,
                        amount,
                        address,
                        tag = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#withdraw
                         * @description make a withdrawal
                         * @param {string} code unified currency code
                         * @param {float} amount the amount to withdraw
                         * @param {string} address the address to withdraw to
                         * @param {string|undefined} tag
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure}
                         */
                        [tag, params] = this.handleWithdrawTagAndParams(
                            tag,
                            params
                        );
                        this.checkAddress(address);
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const request = {
                            coin: currency["id"],
                            address: address,
                            amount: amount,
                            // https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi
                            // issue sapiGetCapitalConfigGetall () to get networks for withdrawing USDT ERC20 vs USDT Omni
                            // 'network': 'ETH', // 'BTC', 'TRX', etc, optional
                        };
                        if (tag !== undefined) {
                            request["addressTag"] = tag;
                        }
                        const networks = this.safeValue(
                            this.options,
                            "networks",
                            {}
                        );
                        let network = this.safeStringUpper(params, "network"); // this line allows the user to specify either ERC20 or ETH
                        network = this.safeString(networks, network, network); // handle ERC20>ETH alias
                        if (network !== undefined) {
                            request["network"] = network;
                            params = this.omit(params, "network");
                        }
                        const response =
                            await this.sapiPostCapitalWithdrawApply(
                                this.extend(request, params)
                            );
                        //     { id: '9a67628b16ba4988ae20d329333f16bc' }
                        return this.parseTransaction(response, currency);
                    }

                    parseTradingFee(fee, market = undefined) {
                        //
                        //     {
                        //         "symbol": "ADABNB",
                        //         "makerCommission": 0.001,
                        //         "takerCommission": 0.001
                        //     }
                        //
                        const marketId = this.safeString(fee, "symbol");
                        const symbol = this.safeSymbol(marketId);
                        return {
                            info: fee,
                            symbol: symbol,
                            maker: this.safeNumber(fee, "makerCommission"),
                            taker: this.safeNumber(fee, "takerCommission"),
                        };
                    }

                    async fetchTradingFee(symbol, params = {}) {
                        /**
                         * @method
                         * @name binance#fetchTradingFee
                         * @description fetch the trading fees for a market
                         * @param {string} symbol unified market symbol
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} a [fee structure]{@link https://docs.ccxt.com/en/latest/manual.html#fee-structure}
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const request = {
                            symbol: market["id"],
                        };
                        const response = await this.sapiGetAssetTradeFee(
                            this.extend(request, params)
                        );
                        //
                        //     [
                        //       {
                        //         "symbol": "BTCUSDT",
                        //         "makerCommission": "0.001",
                        //         "takerCommission": "0.001"
                        //       }
                        //     ]
                        //
                        const first = this.safeValue(response, 0, {});
                        return this.parseTradingFee(first);
                    }

                    async fetchTradingFees(params = {}) {
                        /**
                         * @method
                         * @name binance#fetchTradingFees
                         * @description fetch the trading fees for multiple markets
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/en/latest/manual.html#fee-structure} indexed by market symbols
                         */
                        await this.loadMarkets();
                        let method = undefined;
                        const defaultType = this.safeString2(
                            this.options,
                            "fetchTradingFees",
                            "defaultType",
                            "future"
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        const query = this.omit(params, "type");
                        if (type === "spot" || type === "margin") {
                            method = "sapiGetAssetTradeFee";
                        } else if (type === "future") {
                            method = "fapiPrivateGetAccount";
                        } else if (type === "delivery") {
                            method = "dapiPrivateGetAccount";
                        }
                        const response = await this[method](query);
                        //
                        // sapi / spot
                        //
                        //    [
                        //       {
                        //         "symbol": "ZRXBNB",
                        //         "makerCommission": "0.001",
                        //         "takerCommission": "0.001"
                        //       },
                        //       {
                        //         "symbol": "ZRXBTC",
                        //         "makerCommission": "0.001",
                        //         "takerCommission": "0.001"
                        //       },
                        //    ]
                        //
                        // fapi / future / linear
                        //
                        //     {
                        //         "feeTier": 0,       // account commisssion tier
                        //         "canTrade": true,   // if can trade
                        //         "canDeposit": true,     // if can transfer in asset
                        //         "canWithdraw": true,    // if can transfer out asset
                        //         "updateTime": 0,
                        //         "totalInitialMargin": "0.00000000",    // total initial margin required with current mark price (useless with isolated positions), only for USDT asset
                        //         "totalMaintMargin": "0.00000000",     // total maintenance margin required, only for USDT asset
                        //         "totalWalletBalance": "23.72469206",     // total wallet balance, only for USDT asset
                        //         "totalUnrealizedProfit": "0.00000000",   // total unrealized profit, only for USDT asset
                        //         "totalMarginBalance": "23.72469206",     // total margin balance, only for USDT asset
                        //         "totalPositionInitialMargin": "0.00000000",    // initial margin required for positions with current mark price, only for USDT asset
                        //         "totalOpenOrderInitialMargin": "0.00000000",   // initial margin required for open orders with current mark price, only for USDT asset
                        //         "totalCrossWalletBalance": "23.72469206",      // crossed wallet balance, only for USDT asset
                        //         "totalCrossUnPnl": "0.00000000",      // unrealized profit of crossed positions, only for USDT asset
                        //         "availableBalance": "23.72469206",       // available balance, only for USDT asset
                        //         "maxWithdrawAmount": "23.72469206"     // maximum amount for transfer out, only for USDT asset
                        //         ...
                        //     }
                        //
                        // dapi / delivery / inverse
                        //
                        //     {
                        //         "canDeposit": true,
                        //         "canTrade": true,
                        //         "canWithdraw": true,
                        //         "feeTier": 2,
                        //         "updateTime": 0
                        //     }
                        //
                        if (type === "spot" || type === "margin") {
                            //
                            //    [
                            //       {
                            //         "symbol": "ZRXBNB",
                            //         "makerCommission": "0.001",
                            //         "takerCommission": "0.001"
                            //       },
                            //       {
                            //         "symbol": "ZRXBTC",
                            //         "makerCommission": "0.001",
                            //         "takerCommission": "0.001"
                            //       },
                            //    ]
                            //
                            const result = {};
                            for (let i = 0; i < response.length; i++) {
                                const fee = this.parseTradingFee(response[i]);
                                const symbol = fee["symbol"];
                                result[symbol] = fee;
                            }
                            return result;
                        } else if (type === "future") {
                            //
                            //     {
                            //         "feeTier": 0,       // account commisssion tier
                            //         "canTrade": true,   // if can trade
                            //         "canDeposit": true,     // if can transfer in asset
                            //         "canWithdraw": true,    // if can transfer out asset
                            //         "updateTime": 0,
                            //         "totalInitialMargin": "0.00000000",    // total initial margin required with current mark price (useless with isolated positions), only for USDT asset
                            //         "totalMaintMargin": "0.00000000",     // total maintenance margin required, only for USDT asset
                            //         "totalWalletBalance": "23.72469206",     // total wallet balance, only for USDT asset
                            //         "totalUnrealizedProfit": "0.00000000",   // total unrealized profit, only for USDT asset
                            //         "totalMarginBalance": "23.72469206",     // total margin balance, only for USDT asset
                            //         "totalPositionInitialMargin": "0.00000000",    // initial margin required for positions with current mark price, only for USDT asset
                            //         "totalOpenOrderInitialMargin": "0.00000000",   // initial margin required for open orders with current mark price, only for USDT asset
                            //         "totalCrossWalletBalance": "23.72469206",      // crossed wallet balance, only for USDT asset
                            //         "totalCrossUnPnl": "0.00000000",      // unrealized profit of crossed positions, only for USDT asset
                            //         "availableBalance": "23.72469206",       // available balance, only for USDT asset
                            //         "maxWithdrawAmount": "23.72469206"     // maximum amount for transfer out, only for USDT asset
                            //         ...
                            //     }
                            //
                            const symbols = Object.keys(this.markets);
                            const result = {};
                            const feeTier = this.safeInteger(
                                response,
                                "feeTier"
                            );
                            const feeTiers =
                                this.fees[type]["trading"]["tiers"];
                            const maker = feeTiers["maker"][feeTier][1];
                            const taker = feeTiers["taker"][feeTier][1];
                            for (let i = 0; i < symbols.length; i++) {
                                const symbol = symbols[i];
                                result[symbol] = {
                                    info: {
                                        feeTier: feeTier,
                                    },
                                    symbol: symbol,
                                    maker: maker,
                                    taker: taker,
                                };
                            }
                            return result;
                        } else if (type === "delivery") {
                            //
                            //     {
                            //         "canDeposit": true,
                            //         "canTrade": true,
                            //         "canWithdraw": true,
                            //         "feeTier": 2,
                            //         "updateTime": 0
                            //     }
                            //
                            const symbols = Object.keys(this.markets);
                            const result = {};
                            const feeTier = this.safeInteger(
                                response,
                                "feeTier"
                            );
                            const feeTiers =
                                this.fees[type]["trading"]["tiers"];
                            const maker = feeTiers["maker"][feeTier][1];
                            const taker = feeTiers["taker"][feeTier][1];
                            for (let i = 0; i < symbols.length; i++) {
                                const symbol = symbols[i];
                                result[symbol] = {
                                    info: {
                                        feeTier: feeTier,
                                    },
                                    symbol: symbol,
                                    maker: maker,
                                    taker: taker,
                                };
                            }
                            return result;
                        }
                    }

                    async futuresTransfer(code, amount, type, params = {}) {
                        /**
                         * @method
                         * @name binance#futuresTransfer
                         * @description transfer between futures account
                         * @param {string} code unified currency code
                         * @param {float} amount the amount to transfer
                         * @param {string} type 1 - transfer from spot account to USDT-Ⓜ futures account, 2 - transfer from USDT-Ⓜ futures account to spot account, 3 - transfer from spot account to COIN-Ⓜ futures account, 4 - transfer from COIN-Ⓜ futures account to spot account
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @param {float|undefined} params.recvWindow
                         * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/en/latest/manual.html#futures-transfer-structure}
                         */
                        if (type < 1 || type > 4) {
                            throw new ArgumentsRequired(
                                this.id + " type must be between 1 and 4"
                            );
                        }
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const request = {
                            asset: currency["id"],
                            amount: amount,
                            type: type,
                        };
                        const response = await this.sapiPostFuturesTransfer(
                            this.extend(request, params)
                        );
                        //
                        //   {
                        //       "tranId": 100000001
                        //   }
                        //
                        return this.parseTransfer(response, currency);
                    }

                    async fetchFundingRate(symbol, params = {}) {
                        /**
                         * @method
                         * @name binance#fetchFundingRate
                         * @description fetch the current funding rate
                         * @param {string} symbol unified market symbol
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} a [funding rate structure]{@link https://docs.ccxt.com/en/latest/manual.html#funding-rate-structure}
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const request = {
                            symbol: market["id"],
                        };
                        let method = undefined;
                        if (market["linear"]) {
                            method = "fapiPublicGetPremiumIndex";
                        } else if (market["inverse"]) {
                            method = "dapiPublicGetPremiumIndex";
                        } else {
                            throw new NotSupported(
                                this.id +
                                    " fetchFundingRate() supports linear and inverse contracts only"
                            );
                        }
                        let response = await this[method](
                            this.extend(request, params)
                        );
                        if (market["inverse"]) {
                            response = response[0];
                        }
                        //
                        //     {
                        //         "symbol": "BTCUSDT",
                        //         "markPrice": "45802.81129892",
                        //         "indexPrice": "45745.47701915",
                        //         "estimatedSettlePrice": "45133.91753671",
                        //         "lastFundingRate": "0.00063521",
                        //         "interestRate": "0.00010000",
                        //         "nextFundingTime": "1621267200000",
                        //         "time": "1621252344001"
                        //     }
                        //
                        return this.parseFundingRate(response, market);
                    }

                    async fetchFundingRateHistory(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchFundingRateHistory
                         * @description fetches historical funding rate prices
                         * @param {string|undefined} symbol unified symbol of the market to fetch the funding rate history for
                         * @param {int|undefined} since timestamp in ms of the earliest funding rate to fetch
                         * @param {int|undefined} limit the maximum amount of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure} to fetch
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @param {int|undefined} params.until timestamp in ms of the latest funding rate
                         * @returns {[object]} a list of [funding rate structures]{@link https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure}
                         */
                        await this.loadMarkets();
                        const request = {};
                        let method = undefined;
                        const defaultType = this.safeString2(
                            this.options,
                            "fetchFundingRateHistory",
                            "defaultType",
                            "future"
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        params = this.omit(params, "type");
                        if (type === "future") {
                            method = "fapiPublicGetFundingRate";
                        } else if (type === "delivery") {
                            method = "dapiPublicGetFundingRate";
                        }
                        if (symbol !== undefined) {
                            const market = this.market(symbol);
                            symbol = market["symbol"];
                            request["symbol"] = market["id"];
                            if (market["linear"]) {
                                method = "fapiPublicGetFundingRate";
                            } else if (market["inverse"]) {
                                method = "dapiPublicGetFundingRate";
                            }
                        }
                        if (method === undefined) {
                            throw new NotSupported(
                                this.id +
                                    " fetchFundingRateHistory() is not supported for " +
                                    type +
                                    " markets"
                            );
                        }
                        if (since !== undefined) {
                            request["startTime"] = since;
                        }
                        const until = this.safeInteger2(
                            params,
                            "until",
                            "till"
                        ); // unified in milliseconds
                        const endTime = this.safeInteger(
                            params,
                            "endTime",
                            until
                        ); // exchange-specific in milliseconds
                        params = this.omit(params, [
                            "endTime",
                            "till",
                            "until",
                        ]);
                        if (endTime !== undefined) {
                            request["endTime"] = endTime;
                        }
                        if (limit !== undefined) {
                            request["limit"] = limit;
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         "symbol": "BTCUSDT",
                        //         "fundingRate": "0.00063521",
                        //         "fundingTime": "1621267200000",
                        //     }
                        //
                        const rates = [];
                        for (let i = 0; i < response.length; i++) {
                            const entry = response[i];
                            const timestamp = this.safeInteger(
                                entry,
                                "fundingTime"
                            );
                            rates.push({
                                info: entry,
                                symbol: this.safeSymbol(
                                    this.safeString(entry, "symbol")
                                ),
                                fundingRate: this.safeNumber(
                                    entry,
                                    "fundingRate"
                                ),
                                timestamp: timestamp,
                                datetime: this.iso8601(timestamp),
                            });
                        }
                        const sorted = this.sortBy(rates, "timestamp");
                        return this.filterBySymbolSinceLimit(
                            sorted,
                            symbol,
                            since,
                            limit
                        );
                    }

                    async fetchFundingRates(symbols = undefined, params = {}) {
                        /**
                         * @method
                         * @name binance#fetchFundingRates
                         * @description fetch the funding rate for multiple markets
                         * @param {[string]|undefined} symbols list of unified market symbols
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} a dictionary of [funding rates structures]{@link https://docs.ccxt.com/en/latest/manual.html#funding-rates-structure}, indexe by market symbols
                         */
                        await this.loadMarkets();
                        symbols = this.marketSymbols(symbols);
                        let method = undefined;
                        const defaultType = this.safeString2(
                            this.options,
                            "fetchFundingRates",
                            "defaultType",
                            "future"
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        const query = this.omit(params, "type");
                        if (type === "future") {
                            method = "fapiPublicGetPremiumIndex";
                        } else if (type === "delivery") {
                            method = "dapiPublicGetPremiumIndex";
                        } else {
                            throw new NotSupported(
                                this.id +
                                    " fetchFundingRates() supports linear and inverse contracts only"
                            );
                        }
                        const response = await this[method](query);
                        const result = [];
                        for (let i = 0; i < response.length; i++) {
                            const entry = response[i];
                            const parsed = this.parseFundingRate(entry);
                            result.push(parsed);
                        }
                        return this.filterByArray(result, "symbol", symbols);
                    }

                    parseFundingRate(contract, market = undefined) {
                        // ensure it matches with https://www.binance.com/en/futures/funding-history/0
                        //
                        //   {
                        //     "symbol": "BTCUSDT",
                        //     "markPrice": "45802.81129892",
                        //     "indexPrice": "45745.47701915",
                        //     "estimatedSettlePrice": "45133.91753671",
                        //     "lastFundingRate": "0.00063521",
                        //     "interestRate": "0.00010000",
                        //     "nextFundingTime": "1621267200000",
                        //     "time": "1621252344001"
                        //  }
                        //
                        const timestamp = this.safeInteger(contract, "time");
                        const marketId = this.safeString(contract, "symbol");
                        const symbol = this.safeSymbol(marketId, market);
                        const markPrice = this.safeNumber(
                            contract,
                            "markPrice"
                        );
                        const indexPrice = this.safeNumber(
                            contract,
                            "indexPrice"
                        );
                        const interestRate = this.safeNumber(
                            contract,
                            "interestRate"
                        );
                        const estimatedSettlePrice = this.safeNumber(
                            contract,
                            "estimatedSettlePrice"
                        );
                        const fundingRate = this.safeNumber(
                            contract,
                            "lastFundingRate"
                        );
                        const fundingTime = this.safeInteger(
                            contract,
                            "nextFundingTime"
                        );
                        return {
                            info: contract,
                            symbol: symbol,
                            markPrice: markPrice,
                            indexPrice: indexPrice,
                            interestRate: interestRate,
                            estimatedSettlePrice: estimatedSettlePrice,
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            fundingRate: fundingRate,
                            fundingTimestamp: fundingTime,
                            fundingDatetime: this.iso8601(fundingTime),
                            nextFundingRate: undefined,
                            nextFundingTimestamp: undefined,
                            nextFundingDatetime: undefined,
                            previousFundingRate: undefined,
                            previousFundingTimestamp: undefined,
                            previousFundingDatetime: undefined,
                        };
                    }

                    parseAccountPositions(account) {
                        const positions = this.safeValue(account, "positions");
                        const assets = this.safeValue(account, "assets", []);
                        const balances = {};
                        for (let i = 0; i < assets.length; i++) {
                            const entry = assets[i];
                            const currencyId = this.safeString(entry, "asset");
                            const code = this.safeCurrencyCode(currencyId);
                            const crossWalletBalance = this.safeString(
                                entry,
                                "crossWalletBalance"
                            );
                            const crossUnPnl = this.safeString(
                                entry,
                                "crossUnPnl"
                            );
                            balances[code] = {
                                crossMargin: Precise.stringAdd(
                                    crossWalletBalance,
                                    crossUnPnl
                                ),
                                crossWalletBalance: crossWalletBalance,
                            };
                        }
                        const result = [];
                        for (let i = 0; i < positions.length; i++) {
                            const position = positions[i];
                            const marketId = this.safeString(
                                position,
                                "symbol"
                            );
                            const market = this.safeMarket(marketId);
                            const code =
                                this.options["defaultType"] === "future"
                                    ? market["quote"]
                                    : market["base"];
                            // sometimes not all the codes are correctly returned...
                            if (code in balances) {
                                const parsed = this.parseAccountPosition(
                                    this.extend(position, {
                                        crossMargin:
                                            balances[code]["crossMargin"],
                                        crossWalletBalance:
                                            balances[code][
                                                "crossWalletBalance"
                                            ],
                                    }),
                                    market
                                );
                                result.push(parsed);
                            }
                        }
                        return result;
                    }

                    parseAccountPosition(position, market = undefined) {
                        //
                        // usdm
                        //    {
                        //       "symbol": "BTCBUSD",
                        //       "initialMargin": "0",
                        //       "maintMargin": "0",
                        //       "unrealizedProfit": "0.00000000",
                        //       "positionInitialMargin": "0",
                        //       "openOrderInitialMargin": "0",
                        //       "leverage": "20",
                        //       "isolated": false,
                        //       "entryPrice": "0.0000",
                        //       "maxNotional": "100000",
                        //       "positionSide": "BOTH",
                        //       "positionAmt": "0.000",
                        //       "notional": "0",
                        //       "isolatedWallet": "0",
                        //       "updateTime": "0",
                        //       "crossMargin": "100.93634809",
                        //     }
                        //
                        // coinm
                        //     {
                        //       "symbol": "BTCUSD_210625",
                        //       "initialMargin": "0.00024393",
                        //       "maintMargin": "0.00002439",
                        //       "unrealizedProfit": "-0.00000163",
                        //       "positionInitialMargin": "0.00024393",
                        //       "openOrderInitialMargin": "0",
                        //       "leverage": "10",
                        //       "isolated": false,
                        //       "positionSide": "BOTH",
                        //       "entryPrice": "41021.20000069",
                        //       "maxQty": "100",
                        //       "notionalValue": "0.00243939",
                        //       "isolatedWallet": "0",
                        //       "crossMargin": "0.314"
                        //       "crossWalletBalance": "34",
                        //     }
                        //
                        const marketId = this.safeString(position, "symbol");
                        market = this.safeMarket(marketId, market);
                        const symbol = this.safeString(market, "symbol");
                        const leverageString = this.safeString(
                            position,
                            "leverage"
                        );
                        const leverage = parseInt(leverageString);
                        const initialMarginString = this.safeString(
                            position,
                            "initialMargin"
                        );
                        const initialMargin =
                            this.parseNumber(initialMarginString);
                        let initialMarginPercentageString = Precise.stringDiv(
                            "1",
                            leverageString,
                            8
                        );
                        const rational = 1000 % leverage === 0;
                        if (!rational) {
                            initialMarginPercentageString = Precise.stringDiv(
                                Precise.stringAdd(
                                    initialMarginPercentageString,
                                    "1e-8"
                                ),
                                "1",
                                8
                            );
                        }
                        // as oppose to notionalValue
                        const usdm = "notional" in position;
                        const maintenanceMarginString = this.safeString(
                            position,
                            "maintMargin"
                        );
                        const maintenanceMargin = this.parseNumber(
                            maintenanceMarginString
                        );
                        const entryPriceString = this.safeString(
                            position,
                            "entryPrice"
                        );
                        let entryPrice = this.parseNumber(entryPriceString);
                        const notionalString = this.safeString2(
                            position,
                            "notional",
                            "notionalValue"
                        );
                        const notionalStringAbs =
                            Precise.stringAbs(notionalString);
                        const notional = this.parseNumber(notionalStringAbs);
                        let contractsString = this.safeString(
                            position,
                            "positionAmt"
                        );
                        let contractsStringAbs =
                            Precise.stringAbs(contractsString);
                        if (contractsString === undefined) {
                            const entryNotional = Precise.stringMul(
                                Precise.stringMul(
                                    leverageString,
                                    initialMarginString
                                ),
                                entryPriceString
                            );
                            const contractSize = this.safeString(
                                market,
                                "contractSize"
                            );
                            contractsString = Precise.stringDiv(
                                entryNotional,
                                contractSize
                            );
                            contractsStringAbs = Precise.stringDiv(
                                Precise.stringAdd(contractsString, "0.5"),
                                "1",
                                0
                            );
                        }
                        const contracts = this.parseNumber(contractsStringAbs);
                        const leverageBrackets = this.safeValue(
                            this.options,
                            "leverageBrackets",
                            {}
                        );
                        const leverageBracket = this.safeValue(
                            leverageBrackets,
                            symbol,
                            []
                        );
                        let maintenanceMarginPercentageString = undefined;
                        for (let i = 0; i < leverageBracket.length; i++) {
                            const bracket = leverageBracket[i];
                            if (
                                Precise.stringLt(notionalStringAbs, bracket[0])
                            ) {
                                break;
                            }
                            maintenanceMarginPercentageString = bracket[1];
                        }
                        const maintenanceMarginPercentage = this.parseNumber(
                            maintenanceMarginPercentageString
                        );
                        const unrealizedPnlString = this.safeString(
                            position,
                            "unrealizedProfit"
                        );
                        const unrealizedPnl =
                            this.parseNumber(unrealizedPnlString);
                        let timestamp = this.safeInteger(
                            position,
                            "updateTime"
                        );
                        if (timestamp === 0) {
                            timestamp = undefined;
                        }
                        const isolated = this.safeValue(position, "isolated");
                        let marginMode = undefined;
                        let collateralString = undefined;
                        let walletBalance = undefined;
                        if (isolated) {
                            marginMode = "isolated";
                            walletBalance = this.safeString(
                                position,
                                "isolatedWallet"
                            );
                            collateralString = Precise.stringAdd(
                                walletBalance,
                                unrealizedPnlString
                            );
                        } else {
                            marginMode = "cross";
                            walletBalance = this.safeString(
                                position,
                                "crossWalletBalance"
                            );
                            collateralString = this.safeString(
                                position,
                                "crossMargin"
                            );
                        }
                        const collateral = this.parseNumber(collateralString);
                        let marginRatio = undefined;
                        let side = undefined;
                        let percentage = undefined;
                        let liquidationPriceStringRaw = undefined;
                        let liquidationPrice = undefined;
                        const contractSize = this.safeValue(
                            market,
                            "contractSize"
                        );
                        const contractSizeString =
                            this.numberToString(contractSize);
                        if (Precise.stringEquals(notionalString, "0")) {
                            entryPrice = undefined;
                        } else {
                            side = Precise.stringLt(notionalString, "0")
                                ? "short"
                                : "long";
                            marginRatio = this.parseNumber(
                                Precise.stringDiv(
                                    Precise.stringAdd(
                                        Precise.stringDiv(
                                            maintenanceMarginString,
                                            collateralString
                                        ),
                                        "5e-5"
                                    ),
                                    "1",
                                    4
                                )
                            );
                            percentage = this.parseNumber(
                                Precise.stringMul(
                                    Precise.stringDiv(
                                        unrealizedPnlString,
                                        initialMarginString,
                                        4
                                    ),
                                    "100"
                                )
                            );
                            if (usdm) {
                                // calculate liquidation price
                                //
                                // liquidationPrice = (walletBalance / (contracts * (±1 + mmp))) + (±entryPrice / (±1 + mmp))
                                //
                                // mmp = maintenanceMarginPercentage
                                // where ± is negative for long and positive for short
                                // TODO: calculate liquidation price for coinm contracts
                                let onePlusMaintenanceMarginPercentageString =
                                    undefined;
                                let entryPriceSignString = entryPriceString;
                                if (side === "short") {
                                    onePlusMaintenanceMarginPercentageString =
                                        Precise.stringAdd(
                                            "1",
                                            maintenanceMarginPercentageString
                                        );
                                } else {
                                    onePlusMaintenanceMarginPercentageString =
                                        Precise.stringAdd(
                                            "-1",
                                            maintenanceMarginPercentageString
                                        );
                                    entryPriceSignString = Precise.stringMul(
                                        "-1",
                                        entryPriceSignString
                                    );
                                }
                                const leftSide = Precise.stringDiv(
                                    walletBalance,
                                    Precise.stringMul(
                                        contractsStringAbs,
                                        onePlusMaintenanceMarginPercentageString
                                    )
                                );
                                const rightSide = Precise.stringDiv(
                                    entryPriceSignString,
                                    onePlusMaintenanceMarginPercentageString
                                );
                                liquidationPriceStringRaw = Precise.stringAdd(
                                    leftSide,
                                    rightSide
                                );
                            } else {
                                // calculate liquidation price
                                //
                                // liquidationPrice = (contracts * contractSize(±1 - mmp)) / (±1/entryPrice * contracts * contractSize - walletBalance)
                                //
                                let onePlusMaintenanceMarginPercentageString =
                                    undefined;
                                let entryPriceSignString = entryPriceString;
                                if (side === "short") {
                                    onePlusMaintenanceMarginPercentageString =
                                        Precise.stringSub(
                                            "1",
                                            maintenanceMarginPercentageString
                                        );
                                } else {
                                    onePlusMaintenanceMarginPercentageString =
                                        Precise.stringSub(
                                            "-1",
                                            maintenanceMarginPercentageString
                                        );
                                    entryPriceSignString = Precise.stringMul(
                                        "-1",
                                        entryPriceSignString
                                    );
                                }
                                const size = Precise.stringMul(
                                    contractsStringAbs,
                                    contractSizeString
                                );
                                const leftSide = Precise.stringMul(
                                    size,
                                    onePlusMaintenanceMarginPercentageString
                                );
                                const rightSide = Precise.stringSub(
                                    Precise.stringMul(
                                        Precise.stringDiv(
                                            "1",
                                            entryPriceSignString
                                        ),
                                        size
                                    ),
                                    walletBalance
                                );
                                liquidationPriceStringRaw = Precise.stringDiv(
                                    leftSide,
                                    rightSide
                                );
                            }
                            const pricePrecision = market["precision"]["price"];
                            const pricePrecisionPlusOne = pricePrecision + 1;
                            const pricePrecisionPlusOneString =
                                pricePrecisionPlusOne.toString();
                            // round half up
                            const rounder = new Precise(
                                "5e-" + pricePrecisionPlusOneString
                            );
                            const rounderString = rounder.toString();
                            const liquidationPriceRoundedString =
                                Precise.stringAdd(
                                    rounderString,
                                    liquidationPriceStringRaw
                                );
                            let truncatedLiquidationPrice = Precise.stringDiv(
                                liquidationPriceRoundedString,
                                "1",
                                pricePrecision
                            );
                            if (truncatedLiquidationPrice[0] === "-") {
                                // user cannot be liquidated
                                // since he has more collateral than the size of the position
                                truncatedLiquidationPrice = undefined;
                            }
                            liquidationPrice = this.parseNumber(
                                truncatedLiquidationPrice
                            );
                        }
                        const positionSide = this.safeString(
                            position,
                            "positionSide"
                        );
                        const hedged = positionSide !== "BOTH";
                        return {
                            info: position,
                            id: undefined,
                            symbol: symbol,
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            initialMargin: initialMargin,
                            initialMarginPercentage: this.parseNumber(
                                initialMarginPercentageString
                            ),
                            maintenanceMargin: maintenanceMargin,
                            maintenanceMarginPercentage:
                                maintenanceMarginPercentage,
                            entryPrice: entryPrice,
                            notional: notional,
                            leverage: this.parseNumber(leverageString),
                            unrealizedPnl: unrealizedPnl,
                            contracts: contracts,
                            contractSize: contractSize,
                            marginRatio: marginRatio,
                            liquidationPrice: liquidationPrice,
                            markPrice: undefined,
                            collateral: collateral,
                            marginMode: marginMode,
                            side: side,
                            hedged: hedged,
                            percentage: percentage,
                        };
                    }

                    parsePositionRisk(position, market = undefined) {
                        //
                        // usdm
                        //     {
                        //       "symbol": "BTCUSDT",
                        //       "positionAmt": "0.001",
                        //       "entryPrice": "43578.07000",
                        //       "markPrice": "43532.30000000",
                        //       "unRealizedProfit": "-0.04577000",
                        //       "liquidationPrice": "21841.24993976",
                        //       "leverage": "2",
                        //       "maxNotionalValue": "300000000",
                        //       "marginType": "isolated",
                        //       "isolatedMargin": "21.77841506",
                        //       "isAutoAddMargin": "false",
                        //       "positionSide": "BOTH",
                        //       "notional": "43.53230000",
                        //       "isolatedWallet": "21.82418506",
                        //       "updateTime": "1621358023886"
                        //     }
                        //
                        // coinm
                        //     {
                        //       "symbol": "BTCUSD_PERP",
                        //       "positionAmt": "2",
                        //       "entryPrice": "37643.10000021",
                        //       "markPrice": "38103.05510455",
                        //       "unRealizedProfit": "0.00006413",
                        //       "liquidationPrice": "25119.97445760",
                        //       "leverage": "2",
                        //       "maxQty": "1500",
                        //       "marginType": "isolated",
                        //       "isolatedMargin": "0.00274471",
                        //       "isAutoAddMargin": "false",
                        //       "positionSide": "BOTH",
                        //       "notionalValue": "0.00524892",
                        //       "isolatedWallet": "0.00268058"
                        //     }
                        //
                        const marketId = this.safeString(position, "symbol");
                        market = this.safeMarket(marketId, market);
                        const symbol = this.safeString(market, "symbol");
                        const leverageBrackets = this.safeValue(
                            this.options,
                            "leverageBrackets",
                            {}
                        );
                        const leverageBracket = this.safeValue(
                            leverageBrackets,
                            symbol,
                            []
                        );
                        const notionalString = this.safeString2(
                            position,
                            "notional",
                            "notionalValue"
                        );
                        const notionalStringAbs =
                            Precise.stringAbs(notionalString);
                        let maintenanceMarginPercentageString = undefined;
                        for (let i = 0; i < leverageBracket.length; i++) {
                            const bracket = leverageBracket[i];
                            if (
                                Precise.stringLt(notionalStringAbs, bracket[0])
                            ) {
                                break;
                            }
                            maintenanceMarginPercentageString = bracket[1];
                        }
                        const notional = this.parseNumber(notionalStringAbs);
                        const contractsAbs = Precise.stringAbs(
                            this.safeString(position, "positionAmt")
                        );
                        const contracts = this.parseNumber(contractsAbs);
                        const unrealizedPnlString = this.safeString(
                            position,
                            "unRealizedProfit"
                        );
                        const unrealizedPnl =
                            this.parseNumber(unrealizedPnlString);
                        const leverageString = this.safeString(
                            position,
                            "leverage"
                        );
                        const leverage = parseInt(leverageString);
                        const liquidationPriceString = this.omitZero(
                            this.safeString(position, "liquidationPrice")
                        );
                        const liquidationPrice = this.parseNumber(
                            liquidationPriceString
                        );
                        let collateralString = undefined;
                        const marginMode = this.safeString(
                            position,
                            "marginType"
                        );
                        let side = undefined;
                        if (Precise.stringGt(notionalString, "0")) {
                            side = "long";
                        } else if (Precise.stringLt(notionalString, "0")) {
                            side = "short";
                        }
                        const entryPriceString = this.safeString(
                            position,
                            "entryPrice"
                        );
                        const entryPrice = this.parseNumber(entryPriceString);
                        const contractSize = this.safeValue(
                            market,
                            "contractSize"
                        );
                        const contractSizeString =
                            this.numberToString(contractSize);
                        // as oppose to notionalValue
                        const linear = "notional" in position;
                        if (marginMode === "cross") {
                            // calculate collateral
                            const precision = this.safeValue(
                                market,
                                "precision",
                                {}
                            );
                            if (linear) {
                                // walletBalance = (liquidationPrice * (±1 + mmp) ± entryPrice) * contracts
                                let onePlusMaintenanceMarginPercentageString =
                                    undefined;
                                let entryPriceSignString = entryPriceString;
                                if (side === "short") {
                                    onePlusMaintenanceMarginPercentageString =
                                        Precise.stringAdd(
                                            "1",
                                            maintenanceMarginPercentageString
                                        );
                                    entryPriceSignString = Precise.stringMul(
                                        "-1",
                                        entryPriceSignString
                                    );
                                } else {
                                    onePlusMaintenanceMarginPercentageString =
                                        Precise.stringAdd(
                                            "-1",
                                            maintenanceMarginPercentageString
                                        );
                                }
                                const inner = Precise.stringMul(
                                    liquidationPriceString,
                                    onePlusMaintenanceMarginPercentageString
                                );
                                const leftSide = Precise.stringAdd(
                                    inner,
                                    entryPriceSignString
                                );
                                const pricePrecision = this.safeInteger(
                                    precision,
                                    "price"
                                );
                                const quotePrecision = this.safeInteger(
                                    precision,
                                    "quote",
                                    pricePrecision
                                );
                                if (quotePrecision !== undefined) {
                                    collateralString = Precise.stringDiv(
                                        Precise.stringMul(
                                            leftSide,
                                            contractsAbs
                                        ),
                                        "1",
                                        quotePrecision
                                    );
                                }
                            } else {
                                // walletBalance = (contracts * contractSize) * (±1/entryPrice - (±1 - mmp) / liquidationPrice)
                                let onePlusMaintenanceMarginPercentageString =
                                    undefined;
                                let entryPriceSignString = entryPriceString;
                                if (side === "short") {
                                    onePlusMaintenanceMarginPercentageString =
                                        Precise.stringSub(
                                            "1",
                                            maintenanceMarginPercentageString
                                        );
                                } else {
                                    onePlusMaintenanceMarginPercentageString =
                                        Precise.stringSub(
                                            "-1",
                                            maintenanceMarginPercentageString
                                        );
                                    entryPriceSignString = Precise.stringMul(
                                        "-1",
                                        entryPriceSignString
                                    );
                                }
                                const leftSide = Precise.stringMul(
                                    contractsAbs,
                                    contractSizeString
                                );
                                const rightSide = Precise.stringSub(
                                    Precise.stringDiv(
                                        "1",
                                        entryPriceSignString
                                    ),
                                    Precise.stringDiv(
                                        onePlusMaintenanceMarginPercentageString,
                                        liquidationPriceString
                                    )
                                );
                                const basePrecision = this.safeInteger(
                                    precision,
                                    "base"
                                );
                                if (basePrecision !== undefined) {
                                    collateralString = Precise.stringDiv(
                                        Precise.stringMul(leftSide, rightSide),
                                        "1",
                                        basePrecision
                                    );
                                }
                            }
                        } else {
                            collateralString = this.safeString(
                                position,
                                "isolatedMargin"
                            );
                        }
                        collateralString =
                            collateralString === undefined
                                ? "0"
                                : collateralString;
                        const collateral = this.parseNumber(collateralString);
                        const markPrice = this.parseNumber(
                            this.omitZero(
                                this.safeString(position, "markPrice")
                            )
                        );
                        let timestamp = this.safeInteger(
                            position,
                            "updateTime"
                        );
                        if (timestamp === 0) {
                            timestamp = undefined;
                        }
                        const maintenanceMarginPercentage = this.parseNumber(
                            maintenanceMarginPercentageString
                        );
                        const maintenanceMarginString = Precise.stringMul(
                            maintenanceMarginPercentageString,
                            notionalStringAbs
                        );
                        const maintenanceMargin = this.parseNumber(
                            maintenanceMarginString
                        );
                        let initialMarginPercentageString = Precise.stringDiv(
                            "1",
                            leverageString,
                            8
                        );
                        const rational = 1000 % leverage === 0;
                        if (!rational) {
                            initialMarginPercentageString = Precise.stringAdd(
                                initialMarginPercentageString,
                                "1e-8"
                            );
                        }
                        const initialMarginString = Precise.stringDiv(
                            Precise.stringMul(
                                notionalStringAbs,
                                initialMarginPercentageString
                            ),
                            "1",
                            8
                        );
                        const initialMargin =
                            this.parseNumber(initialMarginString);
                        let marginRatio = undefined;
                        let percentage = undefined;
                        if (!Precise.stringEquals(collateralString, "0")) {
                            marginRatio = this.parseNumber(
                                Precise.stringDiv(
                                    Precise.stringAdd(
                                        Precise.stringDiv(
                                            maintenanceMarginString,
                                            collateralString
                                        ),
                                        "5e-5"
                                    ),
                                    "1",
                                    4
                                )
                            );
                            percentage = this.parseNumber(
                                Precise.stringMul(
                                    Precise.stringDiv(
                                        unrealizedPnlString,
                                        initialMarginString,
                                        4
                                    ),
                                    "100"
                                )
                            );
                        }
                        const positionSide = this.safeString(
                            position,
                            "positionSide"
                        );
                        const hedged = positionSide !== "BOTH";
                        return {
                            info: position,
                            id: undefined,
                            symbol: symbol,
                            contracts: contracts,
                            contractSize: contractSize,
                            unrealizedPnl: unrealizedPnl,
                            leverage: this.parseNumber(leverageString),
                            liquidationPrice: liquidationPrice,
                            collateral: collateral,
                            notional: notional,
                            markPrice: markPrice,
                            entryPrice: entryPrice,
                            timestamp: timestamp,
                            initialMargin: initialMargin,
                            initialMarginPercentage: this.parseNumber(
                                initialMarginPercentageString
                            ),
                            maintenanceMargin: maintenanceMargin,
                            maintenanceMarginPercentage:
                                maintenanceMarginPercentage,
                            marginRatio: marginRatio,
                            datetime: this.iso8601(timestamp),
                            marginMode: marginMode,
                            marginType: marginMode, // deprecated
                            side: side,
                            hedged: hedged,
                            percentage: percentage,
                        };
                    }

                    async loadLeverageBrackets(reload = false, params = {}) {
                        await this.loadMarkets();
                        // by default cache the leverage bracket
                        // it contains useful stuff like the maintenance margin and initial margin for positions
                        const leverageBrackets = this.safeValue(
                            this.options,
                            "leverageBrackets"
                        );
                        if (leverageBrackets === undefined || reload) {
                            let method = undefined;
                            const defaultType = this.safeString(
                                this.options,
                                "defaultType",
                                "future"
                            );
                            const type = this.safeString(
                                params,
                                "type",
                                defaultType
                            );
                            const query = this.omit(params, "type");
                            if (type === "future") {
                                method = "fapiPrivateGetLeverageBracket";
                            } else if (type === "delivery") {
                                method = "dapiPrivateV2GetLeverageBracket";
                            } else {
                                throw new NotSupported(
                                    this.id +
                                        " loadLeverageBrackets() supports linear and inverse contracts only"
                                );
                            }
                            const response = await this[method](query);
                            this.options["leverageBrackets"] = {};
                            for (let i = 0; i < response.length; i++) {
                                const entry = response[i];
                                const marketId = this.safeString(
                                    entry,
                                    "symbol"
                                );
                                const symbol = this.safeSymbol(marketId);
                                const brackets = this.safeValue(
                                    entry,
                                    "brackets",
                                    []
                                );
                                const result = [];
                                for (let j = 0; j < brackets.length; j++) {
                                    const bracket = brackets[j];
                                    const floorValue = this.safeString2(
                                        bracket,
                                        "notionalFloor",
                                        "qtyFloor"
                                    );
                                    const maintenanceMarginPercentage =
                                        this.safeString(
                                            bracket,
                                            "maintMarginRatio"
                                        );
                                    result.push([
                                        floorValue,
                                        maintenanceMarginPercentage,
                                    ]);
                                }
                                this.options["leverageBrackets"][symbol] =
                                    result;
                            }
                        }
                        return this.options["leverageBrackets"];
                    }

                    async fetchLeverageTiers(symbols = undefined, params = {}) {
                        /**
                         * @method
                         * @name binance#fetchLeverageTiers
                         * @description retrieve information on the maximum leverage, and maintenance margin for trades of varying trade sizes
                         * @param {[string]|undefined} symbols list of unified market symbols
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} a dictionary of [leverage tiers structures]{@link https://docs.ccxt.com/en/latest/manual.html#leverage-tiers-structure}, indexed by market symbols
                         */
                        await this.loadMarkets();
                        const [type, query] = this.handleMarketTypeAndParams(
                            "fetchLeverageTiers",
                            undefined,
                            params
                        );
                        let method = undefined;
                        if (type === "future") {
                            method = "fapiPrivateGetLeverageBracket";
                        } else if (type === "delivery") {
                            method = "dapiPrivateV2GetLeverageBracket";
                        } else {
                            throw new NotSupported(
                                this.id +
                                    " fetchLeverageTiers() supports linear and inverse contracts only"
                            );
                        }
                        const response = await this[method](query);
                        //
                        // usdm
                        //
                        //    [
                        //        {
                        //            "symbol": "SUSHIUSDT",
                        //            "brackets": [
                        //                {
                        //                    "bracket": 1,
                        //                    "initialLeverage": 50,
                        //                    "notionalCap": 50000,
                        //                    "notionalFloor": 0,
                        //                    "maintMarginRatio": 0.01,
                        //                    "cum": 0.0
                        //                },
                        //                ...
                        //            ]
                        //        }
                        //    ]
                        //
                        // coinm
                        //
                        //     [
                        //         {
                        //             "symbol":"XRPUSD_210326",
                        //             "brackets":[
                        //                 {
                        //                     "bracket":1,
                        //                     "initialLeverage":20,
                        //                     "qtyCap":500000,
                        //                     "qtyFloor":0,
                        //                     "maintMarginRatio":0.0185,
                        //                     "cum":0.0
                        //                 }
                        //             ]
                        //         }
                        //     ]
                        //
                        return this.parseLeverageTiers(
                            response,
                            symbols,
                            "symbol"
                        );
                    }

                    parseMarketLeverageTiers(info, market) {
                        /**
                         * @ignore
                         * @method
                         * @param {object} info Exchange response for 1 market
                         * @param {object} market CCXT market
                         */
                        //
                        //    {
                        //        "symbol": "SUSHIUSDT",
                        //        "brackets": [
                        //            {
                        //                "bracket": 1,
                        //                "initialLeverage": 50,
                        //                "notionalCap": 50000,
                        //                "notionalFloor": 0,
                        //                "maintMarginRatio": 0.01,
                        //                "cum": 0.0
                        //            },
                        //            ...
                        //        ]
                        //    }
                        //
                        const marketId = this.safeString(info, "symbol");
                        market = this.safeMarket(marketId, market);
                        const brackets = this.safeValue(info, "brackets", []);
                        const tiers = [];
                        for (let j = 0; j < brackets.length; j++) {
                            const bracket = brackets[j];
                            tiers.push({
                                tier: this.safeNumber(bracket, "bracket"),
                                currency: market["quote"],
                                minNotional: this.safeNumber2(
                                    bracket,
                                    "notionalFloor",
                                    "qtyFloor"
                                ),
                                maxNotional: this.safeNumber2(
                                    bracket,
                                    "notionalCap",
                                    "qtyCap"
                                ),
                                maintenanceMarginRate: this.safeNumber(
                                    bracket,
                                    "maintMarginRatio"
                                ),
                                maxLeverage: this.safeNumber(
                                    bracket,
                                    "initialLeverage"
                                ),
                                info: bracket,
                            });
                        }
                        return tiers;
                    }

                    async fetchPositions(symbols = undefined, params = {}) {
                        /**
                         * @method
                         * @name binance#fetchPositions
                         * @description fetch all open positions
                         * @param {[string]|undefined} symbols list of unified market symbols
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {[object]} a list of [position structure]{@link https://docs.ccxt.com/en/latest/manual.html#position-structure}
                         */
                        const defaultMethod = this.safeString(
                            this.options,
                            "fetchPositions",
                            "positionRisk"
                        );
                        if (defaultMethod === "positionRisk") {
                            return await this.fetchPositionsRisk(
                                symbols,
                                params
                            );
                        } else if (defaultMethod === "account") {
                            return await this.fetchAccountPositions(
                                symbols,
                                params
                            );
                        } else {
                            throw new NotSupported(
                                this.id +
                                    '.options["fetchPositions"] = "' +
                                    defaultMethod +
                                    '" is invalid, please choose between "account" and "positionRisk"'
                            );
                        }
                    }

                    async fetchAccountPositions(
                        symbols = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchAccountPositions
                         * @description fetch account positions
                         * @param {[string]|undefined} symbols list of unified market symbols
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} data on account positions
                         */
                        if (symbols !== undefined) {
                            if (!Array.isArray(symbols)) {
                                throw new ArgumentsRequired(
                                    this.id +
                                        " fetchPositions() requires an array argument for symbols"
                                );
                            }
                        }
                        await this.loadMarkets();
                        await this.loadLeverageBrackets(false, params);
                        let method = undefined;
                        const defaultType = this.safeString(
                            this.options,
                            "defaultType",
                            "future"
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        const query = this.omit(params, "type");
                        if (type === "future") {
                            method = "fapiPrivateGetAccount";
                        } else if (type === "delivery") {
                            method = "dapiPrivateGetAccount";
                        } else {
                            throw new NotSupported(
                                this.id +
                                    " fetchPositions() supports linear and inverse contracts only"
                            );
                        }
                        const account = await this[method](query);
                        const result = this.parseAccountPositions(account);
                        symbols = this.marketSymbols(symbols);
                        return this.filterByArray(
                            result,
                            "symbol",
                            symbols,
                            false
                        );
                    }

                    async fetchPositionsRisk(symbols = undefined, params = {}) {
                        /**
                         * @method
                         * @name binance#fetchPositionsRisk
                         * @description fetch positions risk
                         * @param {[string]|undefined} symbols list of unified market symbols
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} data on the positions risk
                         */
                        if (symbols !== undefined) {
                            if (!Array.isArray(symbols)) {
                                throw new ArgumentsRequired(
                                    this.id +
                                        " fetchPositionsRisk() requires an array argument for symbols"
                                );
                            }
                        }
                        await this.loadMarkets();
                        await this.loadLeverageBrackets(false, params);
                        const request = {};
                        let method = undefined;
                        let defaultType = "future";
                        defaultType = this.safeString(
                            this.options,
                            "defaultType",
                            defaultType
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        params = this.omit(params, "type");
                        if (type === "future" || type === "linear") {
                            method = "fapiPrivateGetPositionRisk";
                            // ### Response examples ###
                            //
                            // For One-way position mode:
                            //     [
                            //         {
                            //             "entryPrice": "0.00000",
                            //             "marginType": "isolated",
                            //             "isAutoAddMargin": "false",
                            //             "isolatedMargin": "0.00000000",
                            //             "leverage": "10",
                            //             "liquidationPrice": "0",
                            //             "markPrice": "6679.50671178",
                            //             "maxNotionalValue": "20000000",
                            //             "positionAmt": "0.000",
                            //             "symbol": "BTCUSDT",
                            //             "unRealizedProfit": "0.00000000",
                            //             "positionSide": "BOTH",
                            //             "updateTime": 0
                            //        }
                            //     ]
                            //
                            // For Hedge position mode:
                            //     [
                            //         {
                            //             "entryPrice": "6563.66500",
                            //             "marginType": "isolated",
                            //             "isAutoAddMargin": "false",
                            //             "isolatedMargin": "15517.54150468",
                            //             "leverage": "10",
                            //             "liquidationPrice": "5930.78",
                            //             "markPrice": "6679.50671178",
                            //             "maxNotionalValue": "20000000",
                            //             "positionAmt": "20.000",
                            //             "symbol": "BTCUSDT",
                            //             "unRealizedProfit": "2316.83423560"
                            //             "positionSide": "LONG",
                            //             "updateTime": 1625474304765
                            //         },
                            //         {
                            //             "entryPrice": "0.00000",
                            //             "marginType": "isolated",
                            //             "isAutoAddMargin": "false",
                            //             "isolatedMargin": "5413.95799991",
                            //             "leverage": "10",
                            //             "liquidationPrice": "7189.95",
                            //             "markPrice": "6679.50671178",
                            //             "maxNotionalValue": "20000000",
                            //             "positionAmt": "-10.000",
                            //             "symbol": "BTCUSDT",
                            //             "unRealizedProfit": "-1156.46711780",
                            //             "positionSide": "SHORT",
                            //             "updateTime": 0
                            //         }
                            //     ]
                        } else if (type === "delivery" || type === "inverse") {
                            method = "dapiPrivateGetPositionRisk";
                        } else {
                            throw new NotSupported(
                                this.id +
                                    " fetchPositionsRisk() supports linear and inverse contracts only"
                            );
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        const result = [];
                        for (let i = 0; i < response.length; i++) {
                            const parsed = this.parsePositionRisk(response[i]);
                            result.push(parsed);
                        }
                        symbols = this.marketSymbols(symbols);
                        return this.filterByArray(
                            result,
                            "symbol",
                            symbols,
                            false
                        );
                    }

                    async fetchFundingHistory(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchFundingHistory
                         * @description fetch the history of funding payments paid and received on this account
                         * @param {string|undefined} symbol unified market symbol
                         * @param {int|undefined} since the earliest time in ms to fetch funding history for
                         * @param {int|undefined} limit the maximum number of funding history structures to retrieve
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} a [funding history structure]{@link https://docs.ccxt.com/en/latest/manual.html#funding-history-structure}
                         */
                        await this.loadMarkets();
                        let market = undefined;
                        let method = undefined;
                        let defaultType = "future";
                        const request = {
                            incomeType: "FUNDING_FEE", // "TRANSFER"，"WELCOME_BONUS", "REALIZED_PNL"，"FUNDING_FEE", "COMMISSION" and "INSURANCE_CLEAR"
                        };
                        if (symbol !== undefined) {
                            market = this.market(symbol);
                            request["symbol"] = market["id"];
                            if (market["linear"]) {
                                defaultType = "future";
                            } else if (market["inverse"]) {
                                defaultType = "delivery";
                            } else {
                                throw new NotSupported(
                                    this.id +
                                        " fetchFundingHistory() supports linear and inverse contracts only"
                                );
                            }
                        }
                        if (since !== undefined) {
                            request["startTime"] = since;
                        }
                        if (limit !== undefined) {
                            request["limit"] = limit;
                        }
                        defaultType = this.safeString2(
                            this.options,
                            "fetchFundingHistory",
                            "defaultType",
                            defaultType
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        params = this.omit(params, "type");
                        if (type === "future" || type === "linear") {
                            method = "fapiPrivateGetIncome";
                        } else if (type === "delivery" || type === "inverse") {
                            method = "dapiPrivateGetIncome";
                        } else {
                            throw new NotSupported(
                                this.id +
                                    " fetchFundingHistory() supports linear and inverse contracts only"
                            );
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        return this.parseIncomes(
                            response,
                            market,
                            since,
                            limit
                        );
                    }

                    async setLeverage(
                        leverage,
                        symbol = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#setLeverage
                         * @description set the level of leverage for a market
                         * @param {float} leverage the rate of leverage
                         * @param {string} symbol unified market symbol
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} response from the exchange
                         */
                        if (symbol === undefined) {
                            throw new ArgumentsRequired(
                                this.id +
                                    " setLeverage() requires a symbol argument"
                            );
                        }
                        // WARNING: THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS
                        // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS
                        if (leverage < 1 || leverage > 125) {
                            throw new BadRequest(
                                this.id +
                                    " leverage should be between 1 and 125"
                            );
                        }
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        let method = undefined;
                        if (market["linear"]) {
                            method = "fapiPrivatePostLeverage";
                        } else if (market["inverse"]) {
                            method = "dapiPrivatePostLeverage";
                        } else {
                            throw new NotSupported(
                                this.id +
                                    " setLeverage() supports linear and inverse contracts only"
                            );
                        }
                        const request = {
                            symbol: market["id"],
                            leverage: leverage,
                        };
                        return await this[method](this.extend(request, params));
                    }

                    async setMarginMode(
                        marginMode,
                        symbol = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#setMarginMode
                         * @description set margin mode to 'cross' or 'isolated'
                         * @param {string} marginMode 'cross' or 'isolated'
                         * @param {string} symbol unified market symbol
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} response from the exchange
                         */
                        if (symbol === undefined) {
                            throw new ArgumentsRequired(
                                this.id +
                                    " setMarginMode() requires a symbol argument"
                            );
                        }
                        //
                        // { "code": -4048 , "msg": "Margin type cannot be changed if there exists position." }
                        //
                        // or
                        //
                        // { "code": 200, "msg": "success" }
                        //
                        marginMode = marginMode.toUpperCase();
                        if (marginMode === "CROSS") {
                            marginMode = "CROSSED";
                        }
                        if (
                            marginMode !== "ISOLATED" &&
                            marginMode !== "CROSSED"
                        ) {
                            throw new BadRequest(
                                this.id +
                                    " marginMode must be either isolated or cross"
                            );
                        }
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        let method = undefined;
                        if (market["linear"]) {
                            method = "fapiPrivatePostMarginType";
                        } else if (market["inverse"]) {
                            method = "dapiPrivatePostMarginType";
                        } else {
                            throw new NotSupported(
                                this.id +
                                    " setMarginMode() supports linear and inverse contracts only"
                            );
                        }
                        const request = {
                            symbol: market["id"],
                            marginType: marginMode,
                        };
                        let response = undefined;
                        try {
                            response = await this[method](
                                this.extend(request, params)
                            );
                        } catch (e) {
                            // not an error
                            // https://github.com/ccxt/ccxt/issues/11268
                            // https://github.com/ccxt/ccxt/pull/11624
                            // POST https://fapi.binance.com/fapi/v1/marginType 400 Bad Request
                            // binanceusdm
                            if (e instanceof MarginModeAlreadySet) {
                                const throwMarginModeAlreadySet =
                                    this.safeValue(
                                        this.options,
                                        "throwMarginModeAlreadySet",
                                        false
                                    );
                                if (throwMarginModeAlreadySet) {
                                    throw e;
                                } else {
                                    response = {
                                        code: -4046,
                                        msg: "No need to change margin type.",
                                    };
                                }
                            }
                        }
                        return response;
                    }

                    async setPositionMode(
                        hedged,
                        symbol = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#setPositionMode
                         * @description set hedged to true or false for a market
                         * @param {bool} hedged set to true to use dualSidePosition
                         * @param {string|undefined} symbol not used by binance setPositionMode ()
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} response from the exchange
                         */
                        const defaultType = this.safeString(
                            this.options,
                            "defaultType",
                            "future"
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        params = this.omit(params, ["type"]);
                        let dualSidePosition = undefined;
                        if (hedged) {
                            dualSidePosition = "true";
                        } else {
                            dualSidePosition = "false";
                        }
                        const request = {
                            dualSidePosition: dualSidePosition,
                        };
                        let method = undefined;
                        if (type === "delivery") {
                            method = "dapiPrivatePostPositionSideDual";
                        } else {
                            // default to future
                            method = "fapiPrivatePostPositionSideDual";
                        }
                        //
                        //     {
                        //       "code": 200,
                        //       "msg": "success"
                        //     }
                        //
                        return await this[method](this.extend(request, params));
                    }

                    sign(
                        path,
                        api = "public",
                        method = "GET",
                        params = {},
                        headers = undefined,
                        body = undefined
                    ) {
                        if (!(api in this.urls["api"])) {
                            throw new NotSupported(
                                this.id +
                                    " does not have a testnet/sandbox URL for " +
                                    api +
                                    " endpoints"
                            );
                        }
                        let url = this.urls["api"][api];
                        url += "/" + path;
                        if (api === "wapi") {
                            url += ".html";
                        }
                        if (path === "historicalTrades") {
                            if (this.apiKey) {
                                headers = {
                                    "X-MBX-APIKEY": this.apiKey,
                                };
                            } else {
                                throw new AuthenticationError(
                                    this.id +
                                        " historicalTrades endpoint requires `apiKey` credential"
                                );
                            }
                        }
                        const userDataStream =
                            path === "userDataStream" || path === "listenKey";
                        if (userDataStream) {
                            if (this.apiKey) {
                                // v1 special case for userDataStream
                                headers = {
                                    "X-MBX-APIKEY": this.apiKey,
                                    "Content-Type":
                                        "application/x-www-form-urlencoded",
                                };
                                if (method !== "GET") {
                                    body = this.urlencode(params);
                                }
                            } else {
                                throw new AuthenticationError(
                                    this.id +
                                        " userDataStream endpoint requires `apiKey` credential"
                                );
                            }
                        } else if (
                            api === "private" ||
                            api === "eapiPrivate" ||
                            (api === "sapi" && path !== "system/status") ||
                            api === "sapiV2" ||
                            api === "sapiV3" ||
                            (api === "wapi" && path !== "systemStatus") ||
                            api === "dapiPrivate" ||
                            api === "dapiPrivateV2" ||
                            api === "fapiPrivate" ||
                            api === "fapiPrivateV2"
                        ) {
                            this.checkRequiredCredentials();
                            let query = undefined;
                            const defaultRecvWindow = this.safeInteger(
                                this.options,
                                "recvWindow"
                            );
                            const extendedParams = this.extend(
                                {
                                    timestamp: this.nonce(),
                                },
                                params
                            );
                            if (defaultRecvWindow !== undefined) {
                                extendedParams["recvWindow"] =
                                    defaultRecvWindow;
                            }
                            const recvWindow = this.safeInteger(
                                params,
                                "recvWindow"
                            );
                            if (recvWindow !== undefined) {
                                extendedParams["recvWindow"] = recvWindow;
                            }
                            if (api === "sapi" && path === "asset/dust") {
                                query =
                                    this.urlencodeWithArrayRepeat(
                                        extendedParams
                                    );
                            } else if (
                                path === "batchOrders" ||
                                path.indexOf("sub-account") >= 0 ||
                                path === "capital/withdraw/apply" ||
                                path.indexOf("staking") >= 0
                            ) {
                                query = this.rawencode(extendedParams);
                            } else {
                                query = this.urlencode(extendedParams);
                            }
                            let signature = undefined;
                            if (
                                this.secret.indexOf(
                                    "-----BEGIN RSA PRIVATE KEY-----"
                                ) > -1
                            ) {
                                signature = this.rsa(
                                    this.encode(query),
                                    this.encode(this.secret)
                                );
                            } else {
                                signature = this.hmac(
                                    this.encode(query),
                                    this.encode(this.secret)
                                );
                            }
                            query += "&" + "signature=" + signature;
                            headers = {
                                "X-MBX-APIKEY": this.apiKey,
                            };
                            if (
                                method === "GET" ||
                                method === "DELETE" ||
                                api === "wapi"
                            ) {
                                url += "?" + query;
                            } else {
                                body = query;
                                headers["Content-Type"] =
                                    "application/x-www-form-urlencoded";
                            }
                        } else {
                            if (Object.keys(params).length) {
                                url += "?" + this.urlencode(params);
                            }
                        }
                        return {
                            url: url,
                            method: method,
                            body: body,
                            headers: headers,
                        };
                    }

                    handleErrors(
                        code,
                        reason,
                        url,
                        method,
                        headers,
                        body,
                        response,
                        requestHeaders,
                        requestBody
                    ) {
                        if (code === 418 || code === 429) {
                            throw new DDoSProtection(
                                this.id +
                                    " " +
                                    code.toString() +
                                    " " +
                                    reason +
                                    " " +
                                    body
                            );
                        }
                        // error response in a form: { "code": -1013, "msg": "Invalid quantity." }
                        // following block cointains legacy checks against message patterns in "msg" property
                        // will switch "code" checks eventually, when we know all of them
                        if (code >= 400) {
                            if (
                                body.indexOf("Price * QTY is zero or less") >= 0
                            ) {
                                throw new InvalidOrder(
                                    this.id +
                                        " order cost = amount * price is zero or less " +
                                        body
                                );
                            }
                            if (body.indexOf("LOT_SIZE") >= 0) {
                                throw new InvalidOrder(
                                    this.id +
                                        " order amount should be evenly divisible by lot size " +
                                        body
                                );
                            }
                            if (body.indexOf("PRICE_FILTER") >= 0) {
                                throw new InvalidOrder(
                                    this.id +
                                        " order price is invalid, i.e. exceeds allowed price precision, exceeds min price or max price limits or is invalid value in general, use this.priceToPrecision (symbol, amount) " +
                                        body
                                );
                            }
                        }
                        if (response === undefined) {
                            return; // fallback to default error handler
                        }
                        // check success value for wapi endpoints
                        // response in format {'msg': 'The coin does not exist.', 'success': true/false}
                        const success = this.safeValue(
                            response,
                            "success",
                            true
                        );
                        if (!success) {
                            const message = this.safeString(response, "msg");
                            let parsedMessage = undefined;
                            if (message !== undefined) {
                                try {
                                    parsedMessage = JSON.parse(message);
                                } catch (e) {
                                    // do nothing
                                    parsedMessage = undefined;
                                }
                                if (parsedMessage !== undefined) {
                                    response = parsedMessage;
                                }
                            }
                        }
                        const message = this.safeString(response, "msg");
                        if (message !== undefined) {
                            this.throwExactlyMatchedException(
                                this.exceptions["exact"],
                                message,
                                this.id + " " + message
                            );
                            this.throwBroadlyMatchedException(
                                this.exceptions["broad"],
                                message,
                                this.id + " " + message
                            );
                        }
                        // checks against error codes
                        const error = this.safeString(response, "code");
                        if (error !== undefined) {
                            // https://github.com/ccxt/ccxt/issues/6501
                            // https://github.com/ccxt/ccxt/issues/7742
                            if (
                                error === "200" ||
                                Precise.stringEquals(error, "0")
                            ) {
                                return undefined;
                            }
                            // a workaround for {"code":-2015,"msg":"Invalid API-key, IP, or permissions for action."}
                            // despite that their message is very confusing, it is raised by Binance
                            // on a temporary ban, the API key is valid, but disabled for a while
                            if (
                                error === "-2015" &&
                                this.options[
                                    "hasAlreadyAuthenticatedSuccessfully"
                                ]
                            ) {
                                throw new DDoSProtection(this.id + " " + body);
                            }
                            const feedback = this.id + " " + body;
                            if (message === "No need to change margin type.") {
                                // not an error
                                // https://github.com/ccxt/ccxt/issues/11268
                                // https://github.com/ccxt/ccxt/pull/11624
                                // POST https://fapi.binance.com/fapi/v1/marginType 400 Bad Request
                                // binanceusdm {"code":-4046,"msg":"No need to change margin type."}
                                throw new MarginModeAlreadySet(feedback);
                            }
                            this.throwExactlyMatchedException(
                                this.exceptions["exact"],
                                error,
                                feedback
                            );
                            throw new ExchangeError(feedback);
                        }
                        if (!success) {
                            throw new ExchangeError(this.id + " " + body);
                        }
                    }

                    calculateRateLimiterCost(
                        api,
                        method,
                        path,
                        params,
                        config = {},
                        context = {}
                    ) {
                        if ("noCoin" in config && !("coin" in params)) {
                            return config["noCoin"];
                        } else if (
                            "noSymbol" in config &&
                            !("symbol" in params)
                        ) {
                            return config["noSymbol"];
                        } else if (
                            "noPoolId" in config &&
                            !("poolId" in params)
                        ) {
                            return config["noPoolId"];
                        } else if ("byLimit" in config && "limit" in params) {
                            const limit = params["limit"];
                            const byLimit = config["byLimit"];
                            for (let i = 0; i < byLimit.length; i++) {
                                const entry = byLimit[i];
                                if (limit <= entry[0]) {
                                    return entry[1];
                                }
                            }
                        }
                        return this.safeValue(config, "cost", 1);
                    }

                    async request(
                        path,
                        api = "public",
                        method = "GET",
                        params = {},
                        headers = undefined,
                        body = undefined,
                        config = {},
                        context = {}
                    ) {
                        const response = await this.fetch2(
                            path,
                            api,
                            method,
                            params,
                            headers,
                            body,
                            config,
                            context
                        );
                        // a workaround for {"code":-2015,"msg":"Invalid API-key, IP, or permissions for action."}
                        if (api === "private" || api === "wapi") {
                            this.options[
                                "hasAlreadyAuthenticatedSuccessfully"
                            ] = true;
                        }
                        return response;
                    }

                    async modifyMarginHelper(
                        symbol,
                        amount,
                        addOrReduce,
                        params = {}
                    ) {
                        // used to modify isolated positions
                        let defaultType = this.safeString(
                            this.options,
                            "defaultType",
                            "future"
                        );
                        if (defaultType === "spot") {
                            defaultType = "future";
                        }
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        if (type === "margin" || type === "spot") {
                            throw new NotSupported(
                                this.id +
                                    " add / reduce margin only supported with type future or delivery"
                            );
                        }
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        amount = this.amountToPrecision(symbol, amount);
                        const request = {
                            type: addOrReduce,
                            symbol: market["id"],
                            amount: amount,
                        };
                        let method = undefined;
                        let code = undefined;
                        if (type === "future") {
                            method = "fapiPrivatePostPositionMargin";
                            code = market["quote"];
                        } else {
                            method = "dapiPrivatePostPositionMargin";
                            code = market["base"];
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         "code": 200,
                        //         "msg": "Successfully modify position margin.",
                        //         "amount": 0.001,
                        //         "type": 1
                        //     }
                        //
                        return this.extend(
                            this.parseMarginModification(response, market),
                            {
                                code: code,
                            }
                        );
                    }

                    parseMarginModification(data, market = undefined) {
                        const rawType = this.safeInteger(data, "type");
                        const resultType = rawType === 1 ? "add" : "reduce";
                        const resultAmount = this.safeNumber(data, "amount");
                        const errorCode = this.safeString(data, "code");
                        const status = errorCode === "200" ? "ok" : "failed";
                        return {
                            info: data,
                            type: resultType,
                            amount: resultAmount,
                            code: undefined,
                            symbol: market["symbol"],
                            status: status,
                        };
                    }

                    async reduceMargin(symbol, amount, params = {}) {
                        /**
                         * @method
                         * @name binance#reduceMargin
                         * @description remove margin from a position
                         * @param {string} symbol unified market symbol
                         * @param {float} amount the amount of margin to remove
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} a [margin structure]{@link https://docs.ccxt.com/en/latest/manual.html#reduce-margin-structure}
                         */
                        return await this.modifyMarginHelper(
                            symbol,
                            amount,
                            2,
                            params
                        );
                    }

                    async addMargin(symbol, amount, params = {}) {
                        /**
                         * @method
                         * @name binance#addMargin
                         * @description add margin
                         * @param {string} symbol unified market symbol
                         * @param {float} amount amount of margin to add
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} a [margin structure]{@link https://docs.ccxt.com/en/latest/manual.html#add-margin-structure}
                         */
                        return await this.modifyMarginHelper(
                            symbol,
                            amount,
                            1,
                            params
                        );
                    }

                    async fetchBorrowRate(code, params = {}) {
                        /**
                         * @method
                         * @name binance#fetchBorrowRate
                         * @description fetch the rate of interest to borrow a currency for margin trading
                         * @param {string} code unified currency code
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} a [borrow rate structure]{@link https://docs.ccxt.com/en/latest/manual.html#borrow-rate-structure}
                         */
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const request = {
                            asset: currency["id"],
                            // 'vipLevel': this.safeInteger (params, 'vipLevel'),
                        };
                        const response =
                            await this.sapiGetMarginInterestRateHistory(
                                this.extend(request, params)
                            );
                        //
                        //     [
                        //         {
                        //             "asset": "USDT",
                        //             "timestamp": 1638230400000,
                        //             "dailyInterestRate": "0.0006",
                        //             "vipLevel": 0
                        //         },
                        //     ]
                        //
                        const rate = this.safeValue(response, 0);
                        return this.parseBorrowRate(rate);
                    }

                    async fetchBorrowRateHistory(
                        code,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchBorrowRateHistory
                         * @description retrieves a history of a currencies borrow interest rate at specific time slots
                         * @param {string} code unified currency code
                         * @param {int|undefined} since timestamp for the earliest borrow rate
                         * @param {int|undefined} limit the maximum number of [borrow rate structures]{@link https://docs.ccxt.com/en/latest/manual.html#borrow-rate-structure} to retrieve
                         * @param {object} params extra parameters specific to the exchange api endpoint
                         * @returns {[object]} an array of [borrow rate structures]{@link https://docs.ccxt.com/en/latest/manual.html#borrow-rate-structure}
                         */
                        await this.loadMarkets();
                        if (limit === undefined) {
                            limit = 93;
                        } else if (limit > 93) {
                            // Binance API says the limit is 100, but "Illegal characters found in a parameter." is returned when limit is > 93
                            throw new BadRequest(
                                this.id +
                                    " fetchBorrowRateHistory() limit parameter cannot exceed 92"
                            );
                        }
                        const currency = this.currency(code);
                        const request = {
                            asset: currency["id"],
                            limit: limit,
                        };
                        if (since !== undefined) {
                            request["startTime"] = since;
                            const endTime =
                                this.sum(since, limit * 86400000) - 1; // required when startTime is further than 93 days in the past
                            const now = this.milliseconds();
                            request["endTime"] = Math.min(endTime, now); // cannot have an endTime later than current time
                        }
                        const response =
                            await this.sapiGetMarginInterestRateHistory(
                                this.extend(request, params)
                            );
                        //
                        //     [
                        //         {
                        //             "asset": "USDT",
                        //             "timestamp": 1638230400000,
                        //             "dailyInterestRate": "0.0006",
                        //             "vipLevel": 0
                        //         },
                        //     ]
                        //
                        return this.parseBorrowRateHistory(
                            response,
                            code,
                            since,
                            limit
                        );
                    }

                    parseBorrowRateHistory(response, code, since, limit) {
                        const result = [];
                        for (let i = 0; i < response.length; i++) {
                            const item = response[i];
                            const borrowRate = this.parseBorrowRate(item);
                            result.push(borrowRate);
                        }
                        const sorted = this.sortBy(result, "timestamp");
                        return this.filterByCurrencySinceLimit(
                            sorted,
                            code,
                            since,
                            limit
                        );
                    }

                    parseBorrowRate(info, currency = undefined) {
                        //
                        //    {
                        //        "asset": "USDT",
                        //        "timestamp": 1638230400000,
                        //        "dailyInterestRate": "0.0006",
                        //        "vipLevel": 0
                        //    }
                        //
                        const timestamp = this.safeNumber(info, "timestamp");
                        currency = this.safeString(info, "asset");
                        return {
                            currency: this.safeCurrencyCode(currency),
                            rate: this.safeNumber(info, "dailyInterestRate"),
                            period: 86400000,
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            info: info,
                        };
                    }

                    async createGiftCode(code, amount, params = {}) {
                        /**
                         * @method
                         * @name binance#createGiftCode
                         * @description create gift code
                         * @param {string} code gift code
                         * @param {float} amount amount of currency for the gift
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} The gift code id, code, currency and amount
                         */
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        // ensure you have enough token in your funding account before calling this code
                        const request = {
                            token: currency["id"],
                            amount: amount,
                        };
                        const response = await this.sapiPostGiftcardCreateCode(
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         code: '000000',
                        //         message: 'success',
                        //         data: { referenceNo: '0033002404219823', code: 'AP6EXTLKNHM6CEX7' },
                        //         success: true
                        //     }
                        //
                        const data = this.safeValue(response, "data");
                        const giftcardCode = this.safeString(data, "code");
                        const id = this.safeString(data, "referenceNo");
                        return {
                            info: response,
                            id: id,
                            code: giftcardCode,
                            currency: code,
                            amount: amount,
                        };
                    }

                    async redeemGiftCode(giftcardCode, params = {}) {
                        /**
                         * @method
                         * @name binance#redeemGiftCode
                         * @description redeem gift code
                         * @param {string} giftcardCode
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} response from the exchange
                         */
                        const request = {
                            code: giftcardCode,
                        };
                        const response = await this.sapiPostGiftcardRedeemCode(
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         code: '000000',
                        //         message: 'success',
                        //         data: {
                        //             referenceNo: '0033002404219823',
                        //             identityNo: '10316431732801474560'
                        //         },
                        //         success: true
                        //     }
                        //
                        return response;
                    }

                    async verifyGiftCode(id, params = {}) {
                        /**
                         * @method
                         * @name binance#verifyGiftCode
                         * @description verify gift code
                         * @param {string} id reference number id
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} response from the exchange
                         */
                        const request = {
                            referenceNo: id,
                        };
                        const response = await this.sapiGetGiftcardVerify(
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         code: '000000',
                        //         message: 'success',
                        //         data: { valid: true },
                        //         success: true
                        //     }
                        //
                        return response;
                    }

                    async fetchBorrowInterest(
                        code = undefined,
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchBorrowInterest
                         * @description fetch the interest owed by the user for borrowing currency for margin trading
                         * @param {string|undefined} code unified currency code
                         * @param {string|undefined} symbol unified market symbol when fetch interest in isolated markets
                         * @param {int|undefined} since the earliest time in ms to fetch borrrow interest for
                         * @param {int|undefined} limit the maximum number of structures to retrieve
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {[object]} a list of [borrow interest structures]{@link https://docs.ccxt.com/en/latest/manual.html#borrow-interest-structure}
                         */
                        await this.loadMarkets();
                        const request = {};
                        let market = undefined;
                        if (code !== undefined) {
                            const currency = this.currency(code);
                            request["asset"] = currency["id"];
                        }
                        if (since !== undefined) {
                            request["startTime"] = since;
                        }
                        if (limit !== undefined) {
                            request["size"] = limit;
                        }
                        if (symbol !== undefined) {
                            // Isolated
                            market = this.market(symbol);
                            request["isolatedSymbol"] = market["id"];
                        }
                        const response =
                            await this.sapiGetMarginInterestHistory(
                                this.extend(request, params)
                            );
                        //
                        //     {
                        //         "rows":[
                        //             {
                        //                 "isolatedSymbol": "BNBUSDT", // isolated symbol, will not be returned for crossed margin
                        //                 "asset": "BNB",
                        //                 "interest": "0.02414667",
                        //                 "interestAccuredTime": 1566813600000,
                        //                 "interestRate": "0.01600000",
                        //                 "principal": "36.22000000",
                        //                 "type": "ON_BORROW"
                        //             }
                        //         ],
                        //         "total": 1
                        //     }
                        //
                        const rows = this.safeValue(response, "rows");
                        const interest = this.parseBorrowInterests(
                            rows,
                            market
                        );
                        return this.filterByCurrencySinceLimit(
                            interest,
                            code,
                            since,
                            limit
                        );
                    }

                    parseBorrowInterest(info, market) {
                        const symbol = this.safeString(info, "isolatedSymbol");
                        const timestamp = this.safeNumber(
                            info,
                            "interestAccuredTime"
                        );
                        const marginMode =
                            symbol === undefined ? "cross" : "isolated";
                        return {
                            account: symbol === undefined ? "cross" : symbol,
                            symbol: symbol,
                            marginMode: marginMode,
                            currency: this.safeCurrencyCode(
                                this.safeString(info, "asset")
                            ),
                            interest: this.safeNumber(info, "interest"),
                            interestRate: this.safeNumber(info, "interestRate"),
                            amountBorrowed: this.safeNumber(info, "principal"),
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            info: info,
                        };
                    }

                    async repayMargin(
                        code,
                        amount,
                        symbol = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#repayMargin
                         * @description repay borrowed margin and interest
                         * @see https://binance-docs.github.io/apidocs/spot/en/#margin-account-repay-margin
                         * @param {string} code unified currency code of the currency to repay
                         * @param {float} amount the amount to repay
                         * @param {string|undefined} symbol unified market symbol, required for isolated margin
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/en/latest/manual.html#margin-loan-structure}
                         */
                        const [marginMode, query] =
                            this.handleMarginModeAndParams(
                                "repayMargin",
                                params
                            ); // cross or isolated
                        this.checkRequiredMarginArgument(
                            "repayMargin",
                            symbol,
                            marginMode
                        );
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const request = {
                            asset: currency["id"],
                            amount: this.currencyToPrecision(code, amount),
                        };
                        if (symbol !== undefined) {
                            const market = this.market(symbol);
                            request["symbol"] = market["id"];
                            request["isIsolated"] = "TRUE";
                        }
                        const response = await this.sapiPostMarginRepay(
                            this.extend(request, query)
                        );
                        //
                        //     {
                        //         "tranId": 108988250265,
                        //         "clientTag":""
                        //     }
                        //
                        return this.parseMarginLoan(response, currency);
                    }

                    async borrowMargin(
                        code,
                        amount,
                        symbol = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#borrowMargin
                         * @description create a loan to borrow margin
                         * @see https://binance-docs.github.io/apidocs/spot/en/#margin-account-borrow-margin
                         * @param {string} code unified currency code of the currency to borrow
                         * @param {float} amount the amount to borrow
                         * @param {string|undefined} symbol unified market symbol, required for isolated margin
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/en/latest/manual.html#margin-loan-structure}
                         */
                        const [marginMode, query] =
                            this.handleMarginModeAndParams(
                                "borrowMargin",
                                params
                            ); // cross or isolated
                        this.checkRequiredMarginArgument(
                            "borrowMargin",
                            symbol,
                            marginMode
                        );
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const request = {
                            asset: currency["id"],
                            amount: this.currencyToPrecision(code, amount),
                        };
                        if (symbol !== undefined) {
                            const market = this.market(symbol);
                            request["symbol"] = market["id"];
                            request["isIsolated"] = "TRUE";
                        }
                        const response = await this.sapiPostMarginLoan(
                            this.extend(request, query)
                        );
                        //
                        //     {
                        //         "tranId": 108988250265,
                        //         "clientTag":""
                        //     }
                        //
                        return this.parseMarginLoan(response, currency);
                    }

                    parseMarginLoan(info, currency = undefined) {
                        //
                        //     {
                        //         "tranId": 108988250265,
                        //         "clientTag":""
                        //     }
                        //
                        return {
                            id: this.safeInteger(info, "tranId"),
                            currency: this.safeCurrencyCode(
                                undefined,
                                currency
                            ),
                            amount: undefined,
                            symbol: undefined,
                            timestamp: undefined,
                            datetime: undefined,
                            info: info,
                        };
                    }

                    async fetchOpenInterestHistory(
                        symbol,
                        timeframe = "5m",
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#fetchOpenInterestHistory
                         * @description Retrieves the open interest history of a currency
                         * @param {string} symbol Unified CCXT market symbol
                         * @param {string} timeframe "5m","15m","30m","1h","2h","4h","6h","12h", or "1d"
                         * @param {int|undefined} since the time(ms) of the earliest record to retrieve as a unix timestamp
                         * @param {int|undefined} limit default 30, max 500
                         * @param {object} params exchange specific parameters
                         * @param {int|undefined} params.until the time(ms) of the latest record to retrieve as a unix timestamp
                         * @returns {object} an array of [open interest history structure]{@link https://docs.ccxt.com/en/latest/manual.html#interest-history-structure}
                         */
                        if (timeframe === "1m") {
                            throw new BadRequest(
                                this.id +
                                    "fetchOpenInterestHistory cannot use the 1m timeframe"
                            );
                        }
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const request = {
                            period: this.timeframes[timeframe],
                        };
                        if (limit !== undefined) {
                            request["limit"] = limit;
                        }
                        const symbolKey = market["linear"] ? "symbol" : "pair";
                        request[symbolKey] = market["id"];
                        if (market["delivery"]) {
                            request["contractType"] = this.safeString(
                                params,
                                "contractType",
                                "CURRENT_QUARTER"
                            );
                        }
                        if (since !== undefined) {
                            request["startTime"] = since;
                        }
                        const until = this.safeInteger2(
                            params,
                            "until",
                            "till"
                        ); // unified in milliseconds
                        const endTime = this.safeInteger(
                            params,
                            "endTime",
                            until
                        ); // exchange-specific in milliseconds
                        params = this.omit(params, [
                            "endTime",
                            "until",
                            "till",
                        ]);
                        if (endTime) {
                            request["endTime"] = endTime;
                        } else if (since) {
                            if (limit === undefined) {
                                limit = 30; // Exchange default
                            }
                            const duration = this.parseTimeframe(timeframe);
                            request["endTime"] = this.sum(
                                since,
                                duration * limit * 1000
                            );
                        }
                        let method = "fapiDataGetOpenInterestHist";
                        if (market["inverse"]) {
                            method = "dapiDataGetOpenInterestHist";
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        //
                        //  [
                        //      {
                        //          "symbol":"BTCUSDT",
                        //          "sumOpenInterest":"75375.61700000",
                        //          "sumOpenInterestValue":"3248828883.71251440",
                        //          "timestamp":1642179900000
                        //      },
                        //      ...
                        //  ]
                        //
                        return this.parseOpenInterests(
                            response,
                            symbol,
                            since,
                            limit
                        );
                    }

                    parseOpenInterest(interest, market = undefined) {
                        const timestamp = this.safeInteger(
                            interest,
                            "timestamp"
                        );
                        const id = this.safeString(interest, "symbol");
                        market = this.safeMarket(id, market);
                        const amount = this.safeNumber(
                            interest,
                            "sumOpenInterest"
                        );
                        const value = this.safeNumber(
                            interest,
                            "sumOpenInterestValue"
                        );
                        return {
                            symbol: this.safeSymbol(id),
                            baseVolume: amount, // deprecated
                            quoteVolume: value, // deprecated
                            openInterestAmount: amount,
                            openInterestValue: value,
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            info: interest,
                        };
                    }
                };
            },
            {
                "./base/Exchange": 3,
                "./base/Precise": 4,
                "./base/errors": 6,
                "./base/functions/number": 12,
            },
        ],
        19: [
            function (require, module, exports) {
                "use strict";

                // ----------------------------------------------------------------------------

                const Exchange = require("./base/Exchange");
                const {
                    InsufficientFunds,
                    ArgumentsRequired,
                    ExchangeError,
                    InvalidOrder,
                    InvalidAddress,
                    AuthenticationError,
                    NotSupported,
                    OrderNotFound,
                    OnMaintenance,
                    PermissionDenied,
                    RateLimitExceeded,
                } = require("./base/errors");
                const { TICK_SIZE } = require("./base/functions/number");
                const Precise = require("./base/Precise");

                // ----------------------------------------------------------------------------

                module.exports = class coinbasepro extends Exchange {
                    describe() {
                        return this.deepExtend(super.describe(), {
                            id: "coinbasepro",
                            name: "Coinbase Pro",
                            countries: ["US"],
                            rateLimit: 100,
                            userAgent: this.userAgents["chrome"],
                            pro: true,
                            has: {
                                CORS: true,
                                spot: true,
                                margin: false,
                                swap: false,
                                future: false,
                                option: false,
                                cancelAllOrders: true,
                                cancelOrder: true,
                                createDepositAddress: true,
                                createOrder: true,
                                createStopLimitOrder: true,
                                createStopMarketOrder: true,
                                createStopOrder: true,
                                fetchAccounts: true,
                                fetchBalance: true,
                                fetchClosedOrders: true,
                                fetchCurrencies: true,
                                fetchDepositAddress: undefined, // the exchange does not have this method, only createDepositAddress, see https://github.com/ccxt/ccxt/pull/7405
                                fetchDeposits: true,
                                fetchLedger: true,
                                fetchMarginMode: false,
                                fetchMarkets: true,
                                fetchMyTrades: true,
                                fetchOHLCV: true,
                                fetchOpenOrders: true,
                                fetchOrder: true,
                                fetchOrderBook: true,
                                fetchOrders: true,
                                fetchOrderTrades: true,
                                fetchPositionMode: false,
                                fetchTicker: true,
                                fetchTickers: true,
                                fetchTime: true,
                                fetchTrades: true,
                                fetchTradingFee: false,
                                fetchTradingFees: true,
                                fetchTransactions: true,
                                fetchWithdrawals: true,
                                withdraw: true,
                            },
                            timeframes: {
                                "1m": 60,
                                "5m": 300,
                                "15m": 900,
                                "1h": 3600,
                                "6h": 21600,
                                "1d": 86400,
                            },
                            hostname: "pro.coinbase.com",
                            urls: {
                                test: {
                                    public: "https://api-public.sandbox.pro.coinbase.com",
                                    private:
                                        "https://api-public.sandbox.pro.coinbase.com",
                                },
                                logo: "https://user-images.githubusercontent.com/1294454/41764625-63b7ffde-760a-11e8-996d-a6328fa9347a.jpg",
                                api: {
                                    public: "https://api.{hostname}",
                                    private: "https://api.{hostname}",
                                },
                                www: "https://pro.coinbase.com/",
                                doc: "https://docs.pro.coinbase.com",
                                fees: [
                                    "https://docs.pro.coinbase.com/#fees",
                                    "https://support.pro.coinbase.com/customer/en/portal/articles/2945310-fees",
                                ],
                            },
                            requiredCredentials: {
                                apiKey: true,
                                secret: true,
                                password: true,
                            },
                            api: {
                                public: {
                                    get: [
                                        "currencies",
                                        "products",
                                        "products/{id}",
                                        "products/{id}/book",
                                        "products/{id}/candles",
                                        "products/{id}/stats",
                                        "products/{id}/ticker",
                                        "products/{id}/trades",
                                        "time",
                                        "products/spark-lines", // experimental
                                    ],
                                },
                                private: {
                                    get: [
                                        "accounts",
                                        "accounts/{id}",
                                        "accounts/{id}/holds",
                                        "accounts/{id}/ledger",
                                        "accounts/{id}/transfers",
                                        "coinbase-accounts",
                                        "fills",
                                        "funding",
                                        "fees",
                                        "margin/profile_information",
                                        "margin/buying_power",
                                        "margin/withdrawal_power",
                                        "margin/withdrawal_power_all",
                                        "margin/exit_plan",
                                        "margin/liquidation_history",
                                        "margin/position_refresh_amounts",
                                        "margin/status",
                                        "oracle",
                                        "orders",
                                        "orders/{id}",
                                        "orders/client:{client_oid}",
                                        "otc/orders",
                                        "payment-methods",
                                        "position",
                                        "profiles",
                                        "profiles/{id}",
                                        "reports/{report_id}",
                                        "transfers",
                                        "transfers/{transfer_id}",
                                        "users/self/exchange-limits",
                                        "users/self/hold-balances",
                                        "users/self/trailing-volume",
                                        "withdrawals/fee-estimate",
                                        "conversions/{conversion_id}",
                                    ],
                                    post: [
                                        "conversions",
                                        "deposits/coinbase-account",
                                        "deposits/payment-method",
                                        "coinbase-accounts/{id}/addresses",
                                        "funding/repay",
                                        "orders",
                                        "position/close",
                                        "profiles/margin-transfer",
                                        "profiles/transfer",
                                        "reports",
                                        "withdrawals/coinbase",
                                        "withdrawals/coinbase-account",
                                        "withdrawals/crypto",
                                        "withdrawals/payment-method",
                                    ],
                                    delete: [
                                        "orders",
                                        "orders/client:{client_oid}",
                                        "orders/{id}",
                                    ],
                                },
                            },
                            commonCurrencies: {
                                CGLD: "CELO",
                            },
                            precisionMode: TICK_SIZE,
                            fees: {
                                trading: {
                                    tierBased: true, // complicated tier system per coin
                                    percentage: true,
                                    maker: 0.4 / 100, // highest fee of all tiers
                                    taker: 0.6 / 100, // highest fee of all tiers
                                },
                                funding: {
                                    tierBased: false,
                                    percentage: false,
                                    withdraw: {
                                        BCH: 0,
                                        BTC: 0,
                                        LTC: 0,
                                        ETH: 0,
                                        EUR: 0.15,
                                        USD: 25,
                                    },
                                    deposit: {
                                        BCH: 0,
                                        BTC: 0,
                                        LTC: 0,
                                        ETH: 0,
                                        EUR: 0.15,
                                        USD: 10,
                                    },
                                },
                            },
                            exceptions: {
                                exact: {
                                    "Insufficient funds": InsufficientFunds,
                                    NotFound: OrderNotFound,
                                    "Invalid API Key": AuthenticationError,
                                    "invalid signature": AuthenticationError,
                                    "Invalid Passphrase": AuthenticationError,
                                    "Invalid order id": InvalidOrder,
                                    "Private rate limit exceeded":
                                        RateLimitExceeded,
                                    "Trading pair not available":
                                        PermissionDenied,
                                    "Product not found": InvalidOrder,
                                },
                                broad: {
                                    "Order already done": OrderNotFound,
                                    "order not found": OrderNotFound,
                                    "price too small": InvalidOrder,
                                    "price too precise": InvalidOrder,
                                    "under maintenance": OnMaintenance,
                                    "size is too small": InvalidOrder,
                                    "Cancel only mode": OnMaintenance, // https://github.com/ccxt/ccxt/issues/7690
                                },
                            },
                        });
                    }

                    async fetchCurrencies(params = {}) {
                        /**
                         * @method
                         * @name coinbasepro#fetchCurrencies
                         * @description fetches all available currencies on an exchange
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {object} an associative dictionary of currencies
                         */
                        const response = await this.publicGetCurrencies(params);
                        //
                        //     [
                        //         {
                        //             id: 'XTZ',
                        //             name: 'Tezos',
                        //             min_size: '0.000001',
                        //             status: 'online',
                        //             message: '',
                        //             max_precision: '0.000001',
                        //             convertible_to: [],
                        //             details: {
                        //                 type: 'crypto',
                        //                 symbol: 'Τ',
                        //                 network_confirmations: 60,
                        //                 sort_order: 53,
                        //                 crypto_address_link: 'https://tzstats.com/{{address}}',
                        //                 crypto_transaction_link: 'https://tzstats.com/{{txId}}',
                        //                 push_payment_methods: [ 'crypto' ],
                        //                 group_types: [],
                        //                 display_name: '',
                        //                 processing_time_seconds: 0,
                        //                 min_withdrawal_amount: 1
                        //             }
                        //         }
                        //     ]
                        //
                        const result = {};
                        for (let i = 0; i < response.length; i++) {
                            const currency = response[i];
                            const id = this.safeString(currency, "id");
                            const name = this.safeString(currency, "name");
                            const code = this.safeCurrencyCode(id);
                            const details = this.safeValue(
                                currency,
                                "details",
                                {}
                            );
                            const status = this.safeString(currency, "status");
                            const active = status === "online";
                            result[code] = {
                                id: id,
                                code: code,
                                info: currency,
                                type: this.safeString(details, "type"),
                                name: name,
                                active: active,
                                deposit: undefined,
                                withdraw: undefined,
                                fee: undefined,
                                precision: this.safeNumber(
                                    currency,
                                    "max_precision"
                                ),
                                limits: {
                                    amount: {
                                        min: this.safeNumber(
                                            details,
                                            "min_size"
                                        ),
                                        max: undefined,
                                    },
                                    withdraw: {
                                        min: this.safeNumber(
                                            details,
                                            "min_withdrawal_amount"
                                        ),
                                        max: undefined,
                                    },
                                },
                            };
                        }
                        return result;
                    }

                    async fetchMarkets(params = {}) {
                        /**
                         * @method
                         * @name coinbasepro#fetchMarkets
                         * @description retrieves data on all markets for coinbasepro
                         * @param {object} params extra parameters specific to the exchange api endpoint
                         * @returns {[object]} an array of objects representing market data
                         */
                        const response = await this.publicGetProducts(params);
                        //
                        //     [
                        //         {
                        //             id: 'BTCAUCTION-USD',
                        //             base_currency: 'BTC',
                        //             quote_currency: 'USD',
                        //             base_min_size: '0.000016',
                        //             base_max_size: '1500',
                        //             quote_increment: '0.01',
                        //             base_increment: '0.00000001',
                        //             display_name: 'BTCAUCTION/USD',
                        //             min_market_funds: '1',
                        //             max_market_funds: '20000000',
                        //             margin_enabled: false,
                        //             fx_stablecoin: false,
                        //             max_slippage_percentage: '0.02000000',
                        //             post_only: false,
                        //             limit_only: false,
                        //             cancel_only: true,
                        //             trading_disabled: false,
                        //             status: 'online',
                        //             status_message: '',
                        //             auction_mode: false
                        //         },
                        //         {
                        //             id: 'BTC-USD',
                        //             base_currency: 'BTC',
                        //             quote_currency: 'USD',
                        //             base_min_size: '0.000016',
                        //             base_max_size: '1500',
                        //             quote_increment: '0.01',
                        //             base_increment: '0.00000001',
                        //             display_name: 'BTC/USD',
                        //             min_market_funds: '1',
                        //             max_market_funds: '20000000',
                        //             margin_enabled: false,
                        //             fx_stablecoin: false,
                        //             max_slippage_percentage: '0.02000000',
                        //             post_only: false,
                        //             limit_only: false,
                        //             cancel_only: false,
                        //             trading_disabled: false,
                        //             status: 'online',
                        //             status_message: '',
                        //             auction_mode: false
                        //         }
                        //     ]
                        //
                        const result = [];
                        for (let i = 0; i < response.length; i++) {
                            const market = response[i];
                            const id = this.safeString(market, "id");
                            const [baseId, quoteId] = id.split("-");
                            // BTCAUCTION-USD vs BTC-USD conflict workaround, see the output sample above
                            // const baseId = this.safeString (market, 'base_currency');
                            // const quoteId = this.safeString (market, 'quote_currency');
                            const base = this.safeCurrencyCode(baseId);
                            const quote = this.safeCurrencyCode(quoteId);
                            const status = this.safeString(market, "status");
                            result.push(
                                this.extend(this.fees["trading"], {
                                    id: id,
                                    symbol: base + "/" + quote,
                                    base: base,
                                    quote: quote,
                                    settle: undefined,
                                    baseId: baseId,
                                    quoteId: quoteId,
                                    settleId: undefined,
                                    type: "spot",
                                    spot: true,
                                    margin: this.safeValue(
                                        market,
                                        "margin_enabled"
                                    ),
                                    swap: false,
                                    future: false,
                                    option: false,
                                    active: status === "online",
                                    contract: false,
                                    linear: undefined,
                                    inverse: undefined,
                                    contractSize: undefined,
                                    expiry: undefined,
                                    expiryDatetime: undefined,
                                    strike: undefined,
                                    optionType: undefined,
                                    precision: {
                                        amount: this.safeNumber(
                                            market,
                                            "base_increment"
                                        ),
                                        price: this.safeNumber(
                                            market,
                                            "quote_increment"
                                        ),
                                    },
                                    limits: {
                                        leverage: {
                                            min: undefined,
                                            max: undefined,
                                        },
                                        amount: {
                                            min: undefined,
                                            max: undefined,
                                        },
                                        price: {
                                            min: undefined,
                                            max: undefined,
                                        },
                                        cost: {
                                            min: this.safeNumber(
                                                market,
                                                "min_market_funds"
                                            ),
                                            max: undefined,
                                        },
                                    },
                                    info: market,
                                })
                            );
                        }
                        return result;
                    }

                    async fetchAccounts(params = {}) {
                        /**
                         * @method
                         * @name coinbasepro#fetchAccounts
                         * @description fetch all the accounts associated with a profile
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {object} a dictionary of [account structures]{@link https://docs.ccxt.com/en/latest/manual.html#account-structure} indexed by the account type
                         */
                        await this.loadMarkets();
                        const response = await this.privateGetAccounts(params);
                        //
                        //     [
                        //         {
                        //             id: '4aac9c60-cbda-4396-9da4-4aa71e95fba0',
                        //             currency: 'BTC',
                        //             balance: '0.0000000000000000',
                        //             available: '0',
                        //             hold: '0.0000000000000000',
                        //             profile_id: 'b709263e-f42a-4c7d-949a-a95c83d065da'
                        //         },
                        //         {
                        //             id: 'f75fa69a-1ad1-4a80-bd61-ee7faa6135a3',
                        //             currency: 'USDC',
                        //             balance: '0.0000000000000000',
                        //             available: '0',
                        //             hold: '0.0000000000000000',
                        //             profile_id: 'b709263e-f42a-4c7d-949a-a95c83d065da'
                        //         },
                        //     ]
                        //
                        return this.parseAccounts(response, params);
                    }

                    parseAccount(account) {
                        //
                        //     {
                        //         id: '4aac9c60-cbda-4396-9da4-4aa71e95fba0',
                        //         currency: 'BTC',
                        //         balance: '0.0000000000000000',
                        //         available: '0',
                        //         hold: '0.0000000000000000',
                        //         profile_id: 'b709263e-f42a-4c7d-949a-a95c83d065da'
                        //     }
                        //
                        const currencyId = this.safeString(account, "currency");
                        return {
                            id: this.safeString(account, "id"),
                            type: undefined,
                            code: this.safeCurrencyCode(currencyId),
                            info: account,
                        };
                    }

                    parseBalance(response) {
                        const result = { info: response };
                        for (let i = 0; i < response.length; i++) {
                            const balance = response[i];
                            const currencyId = this.safeString(
                                balance,
                                "currency"
                            );
                            const code = this.safeCurrencyCode(currencyId);
                            const account = this.account();
                            account["free"] = this.safeString(
                                balance,
                                "available"
                            );
                            account["used"] = this.safeString(balance, "hold");
                            account["total"] = this.safeString(
                                balance,
                                "balance"
                            );
                            result[code] = account;
                        }
                        return this.safeBalance(result);
                    }

                    async fetchBalance(params = {}) {
                        /**
                         * @method
                         * @name coinbasepro#fetchBalance
                         * @description query for balance and get the amount of funds available for trading or funds locked in orders
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
                         */
                        await this.loadMarkets();
                        const response = await this.privateGetAccounts(params);
                        return this.parseBalance(response);
                    }

                    async fetchOrderBook(
                        symbol,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#fetchOrderBook
                         * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
                         * @param {string} symbol unified symbol of the market to fetch the order book for
                         * @param {int|undefined} limit the maximum amount of order book entries to return
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure} indexed by market symbols
                         */
                        await this.loadMarkets();
                        // level 1 - only the best bid and ask
                        // level 2 - top 50 bids and asks (aggregated)
                        // level 3 - full order book (non aggregated)
                        const request = {
                            id: this.marketId(symbol),
                            level: 2, // 1 best bidask, 2 aggregated, 3 full
                        };
                        const response = await this.publicGetProductsIdBook(
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         "sequence":1924393896,
                        //         "bids":[
                        //             ["0.01825","24.34811287",2],
                        //             ["0.01824","72.5463",3],
                        //             ["0.01823","424.54298049",6],
                        //         ],
                        //         "asks":[
                        //             ["0.01826","171.10414904",4],
                        //             ["0.01827","22.60427028",1],
                        //             ["0.01828","397.46018784",7],
                        //         ]
                        //     }
                        //
                        const orderbook = this.parseOrderBook(response, symbol);
                        orderbook["nonce"] = this.safeInteger(
                            response,
                            "sequence"
                        );
                        return orderbook;
                    }

                    parseTicker(ticker, market = undefined) {
                        //
                        // fetchTickers
                        //
                        //      [
                        //         1639472400, // timestamp
                        //         4.26, // low
                        //         4.38, // high
                        //         4.35, // open
                        //         4.27 // close
                        //      ]
                        //
                        // fetchTicker
                        //
                        //     publicGetProductsIdTicker
                        //
                        //     {
                        //         "trade_id":843439,
                        //         "price":"0.997999",
                        //         "size":"80.29769",
                        //         "time":"2020-01-28T02:13:33.012523Z",
                        //         "bid":"0.997094",
                        //         "ask":"0.998",
                        //         "volume":"1903188.03750000"
                        //     }
                        //
                        //     publicGetProductsIdStats
                        //
                        //     {
                        //         "open": "34.19000000",
                        //         "high": "95.70000000",
                        //         "low": "7.06000000",
                        //         "volume": "2.41000000"
                        //     }
                        //
                        let timestamp = undefined;
                        let bid = undefined;
                        let ask = undefined;
                        let last = undefined;
                        let high = undefined;
                        let low = undefined;
                        let open = undefined;
                        let volume = undefined;
                        const symbol =
                            market === undefined ? undefined : market["symbol"];
                        if (Array.isArray(ticker)) {
                            last = this.safeString(ticker, 4);
                            timestamp = this.milliseconds();
                        } else {
                            timestamp = this.parse8601(
                                this.safeValue(ticker, "time")
                            );
                            bid = this.safeString(ticker, "bid");
                            ask = this.safeString(ticker, "ask");
                            high = this.safeString(ticker, "high");
                            low = this.safeString(ticker, "low");
                            open = this.safeString(ticker, "open");
                            last = this.safeString2(ticker, "price", "last");
                            volume = this.safeString(ticker, "volume");
                        }
                        return this.safeTicker(
                            {
                                symbol: symbol,
                                timestamp: timestamp,
                                datetime: this.iso8601(timestamp),
                                high: high,
                                low: low,
                                bid: bid,
                                bidVolume: undefined,
                                ask: ask,
                                askVolume: undefined,
                                vwap: undefined,
                                open: open,
                                close: last,
                                last: last,
                                previousClose: undefined,
                                change: undefined,
                                percentage: undefined,
                                average: undefined,
                                baseVolume: volume,
                                quoteVolume: undefined,
                                info: ticker,
                            },
                            market
                        );
                    }

                    async fetchTickers(symbols = undefined, params = {}) {
                        /**
                         * @method
                         * @name coinbasepro#fetchTickers
                         * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
                         * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {object} an array of [ticker structures]{@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure}
                         */
                        await this.loadMarkets();
                        symbols = this.marketSymbols(symbols);
                        const request = {};
                        const response = await this.publicGetProductsSparkLines(
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         YYY-USD: [
                        //             [
                        //                 1639472400, // timestamp
                        //                 4.26, // low
                        //                 4.38, // high
                        //                 4.35, // open
                        //                 4.27 // close
                        //             ],
                        //             [
                        //                 1639468800,
                        //                 4.31,
                        //                 4.45,
                        //                 4.35,
                        //                 4.35
                        //             ],
                        //         ]
                        //     }
                        //
                        const result = {};
                        const marketIds = Object.keys(response);
                        const delimiter = "-";
                        for (let i = 0; i < marketIds.length; i++) {
                            const marketId = marketIds[i];
                            const entry = this.safeValue(
                                response,
                                marketId,
                                []
                            );
                            const first = this.safeValue(entry, 0, []);
                            const market = this.safeMarket(
                                marketId,
                                undefined,
                                delimiter
                            );
                            const symbol = market["symbol"];
                            result[symbol] = this.parseTicker(first, market);
                        }
                        return this.filterByArray(result, "symbol", symbols);
                    }

                    async fetchTicker(symbol, params = {}) {
                        /**
                         * @method
                         * @name coinbasepro#fetchTicker
                         * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
                         * @param {string} symbol unified symbol of the market to fetch the ticker for
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure}
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const request = {
                            id: market["id"],
                        };
                        // publicGetProductsIdTicker or publicGetProductsIdStats
                        const method = this.safeString(
                            this.options,
                            "fetchTickerMethod",
                            "publicGetProductsIdTicker"
                        );
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        //
                        // publicGetProductsIdTicker
                        //
                        //     {
                        //         "trade_id":843439,
                        //         "price":"0.997999",
                        //         "size":"80.29769",
                        //         "time":"2020-01-28T02:13:33.012523Z",
                        //         "bid":"0.997094",
                        //         "ask":"0.998",
                        //         "volume":"1903188.03750000"
                        //     }
                        //
                        // publicGetProductsIdStats
                        //
                        //     {
                        //         "open": "34.19000000",
                        //         "high": "95.70000000",
                        //         "low": "7.06000000",
                        //         "volume": "2.41000000"
                        //     }
                        //
                        return this.parseTicker(response, market);
                    }

                    parseTrade(trade, market = undefined) {
                        //
                        //     {
                        //         type: 'match',
                        //         trade_id: 82047307,
                        //         maker_order_id: '0f358725-2134-435e-be11-753912a326e0',
                        //         taker_order_id: '252b7002-87a3-425c-ac73-f5b9e23f3caf',
                        //         order_id: 'd50ec984-77a8-460a-b958-66f114b0de9b',
                        //         side: 'sell',
                        //         size: '0.00513192',
                        //         price: '9314.78',
                        //         product_id: 'BTC-USD',
                        //         profile_id: '6244401d-c078-40d9-b305-7ad3551bc3b0',
                        //         sequence: 12038915443,
                        //         time: '2020-01-31T20:03:41.158814Z'
                        //         created_at: '2014-11-07T22:19:28.578544Z',
                        //         liquidity: 'T',
                        //         fee: '0.00025',
                        //         settled: true,
                        //         usd_volume: '0.0924556000000000',
                        //         user_id: '595eb864313c2b02ddf2937d'
                        //     }
                        //
                        const timestamp = this.parse8601(
                            this.safeString2(trade, "time", "created_at")
                        );
                        const marketId = this.safeString(trade, "product_id");
                        market = this.safeMarket(marketId, market, "-");
                        let feeRate = undefined;
                        let takerOrMaker = undefined;
                        let cost = undefined;
                        const feeCurrencyId = this.safeStringLower(
                            market,
                            "quoteId"
                        );
                        if (feeCurrencyId !== undefined) {
                            const costField = feeCurrencyId + "_value";
                            cost = this.safeString(trade, costField);
                            const liquidity = this.safeString(
                                trade,
                                "liquidity"
                            );
                            if (liquidity !== undefined) {
                                takerOrMaker =
                                    liquidity === "T" ? "taker" : "maker";
                                feeRate = this.safeString(market, takerOrMaker);
                            }
                        }
                        const feeCost = this.safeString2(
                            trade,
                            "fill_fees",
                            "fee"
                        );
                        const fee = {
                            cost: feeCost,
                            currency: market["quote"],
                            rate: feeRate,
                        };
                        const id = this.safeString(trade, "trade_id");
                        let side = trade["side"] === "buy" ? "sell" : "buy";
                        const orderId = this.safeString(trade, "order_id");
                        // Coinbase Pro returns inverted side to fetchMyTrades vs fetchTrades
                        const makerOrderId = this.safeString(
                            trade,
                            "maker_order_id"
                        );
                        const takerOrderId = this.safeString(
                            trade,
                            "taker_order_id"
                        );
                        if (
                            orderId !== undefined ||
                            (makerOrderId !== undefined &&
                                takerOrderId !== undefined)
                        ) {
                            side = trade["side"] === "buy" ? "buy" : "sell";
                        }
                        const price = this.safeString(trade, "price");
                        const amount = this.safeString(trade, "size");
                        return this.safeTrade(
                            {
                                id: id,
                                order: orderId,
                                info: trade,
                                timestamp: timestamp,
                                datetime: this.iso8601(timestamp),
                                symbol: market["symbol"],
                                type: undefined,
                                takerOrMaker: takerOrMaker,
                                side: side,
                                price: price,
                                amount: amount,
                                fee: fee,
                                cost: cost,
                            },
                            market
                        );
                    }

                    async fetchMyTrades(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#fetchMyTrades
                         * @description fetch all trades made by the user
                         * @param {string} symbol unified market symbol
                         * @param {int|undefined} since the earliest time in ms to fetch trades for
                         * @param {int|undefined} limit the maximum number of trades structures to retrieve
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html#trade-structure}
                         */
                        // as of 2018-08-23
                        if (symbol === undefined) {
                            throw new ArgumentsRequired(
                                this.id +
                                    " fetchMyTrades() requires a symbol argument"
                            );
                        }
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const request = {
                            product_id: market["id"],
                        };
                        if (limit !== undefined) {
                            request["limit"] = limit;
                        }
                        const response = await this.privateGetFills(
                            this.extend(request, params)
                        );
                        return this.parseTrades(response, market, since, limit);
                    }

                    async fetchTrades(
                        symbol,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#fetchTrades
                         * @description get the list of most recent trades for a particular symbol
                         * @param {string} symbol unified symbol of the market to fetch trades for
                         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
                         * @param {int|undefined} limit the maximum amount of trades to fetch
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const request = {
                            id: market["id"], // fixes issue #2
                        };
                        if (limit !== undefined) {
                            request["limit"] = limit; // default 100
                        }
                        const response = await this.publicGetProductsIdTrades(
                            this.extend(request, params)
                        );
                        return this.parseTrades(response, market, since, limit);
                    }

                    async fetchTradingFees(params = {}) {
                        /**
                         * @method
                         * @name coinbasepro#fetchTradingFees
                         * @description fetch the trading fees for multiple markets
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/en/latest/manual.html#fee-structure} indexed by market symbols
                         */
                        await this.loadMarkets();
                        const response = await this.privateGetFees(params);
                        //
                        //    {
                        //        "maker_fee_rate": "0.0050",
                        //        "taker_fee_rate": "0.0050",
                        //        "usd_volume": "43806.92"
                        //    }
                        //
                        const maker = this.safeNumber(
                            response,
                            "maker_fee_rate"
                        );
                        const taker = this.safeNumber(
                            response,
                            "taker_fee_rate"
                        );
                        const result = {};
                        for (let i = 0; i < this.symbols.length; i++) {
                            const symbol = this.symbols[i];
                            result[symbol] = {
                                info: response,
                                symbol: symbol,
                                maker: maker,
                                taker: taker,
                                percentage: true,
                                tierBased: true,
                            };
                        }
                        return result;
                    }

                    parseOHLCV(ohlcv, market = undefined) {
                        //
                        //     [
                        //         1591514160,
                        //         0.02507,
                        //         0.02507,
                        //         0.02507,
                        //         0.02507,
                        //         0.02816506
                        //     ]
                        //
                        return [
                            this.safeTimestamp(ohlcv, 0),
                            this.safeNumber(ohlcv, 3),
                            this.safeNumber(ohlcv, 2),
                            this.safeNumber(ohlcv, 1),
                            this.safeNumber(ohlcv, 4),
                            this.safeNumber(ohlcv, 5),
                        ];
                    }

                    async fetchOHLCV(
                        symbol,
                        timeframe = "1m",
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#fetchOHLCV
                         * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
                         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
                         * @param {string} timeframe the length of time each candle represents
                         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
                         * @param {int|undefined} limit the maximum amount of candles to fetch
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const granularity = this.timeframes[timeframe];
                        const request = {
                            id: market["id"],
                            granularity: granularity,
                        };
                        if (since !== undefined) {
                            request["start"] = this.iso8601(since);
                            if (limit === undefined) {
                                // https://docs.pro.coinbase.com/#get-historic-rates
                                limit = 300; // max = 300
                            } else {
                                limit = Math.min(300, limit);
                            }
                            request["end"] = this.iso8601(
                                this.sum(
                                    (limit - 1) * granularity * 1000,
                                    since
                                )
                            );
                        }
                        const response = await this.publicGetProductsIdCandles(
                            this.extend(request, params)
                        );
                        //
                        //     [
                        //         [1591514160,0.02507,0.02507,0.02507,0.02507,0.02816506],
                        //         [1591514100,0.02507,0.02507,0.02507,0.02507,1.63830323],
                        //         [1591514040,0.02505,0.02507,0.02505,0.02507,0.19918178]
                        //     ]
                        //
                        return this.parseOHLCVs(
                            response,
                            market,
                            timeframe,
                            since,
                            limit
                        );
                    }

                    async fetchTime(params = {}) {
                        /**
                         * @method
                         * @name coinbasepro#fetchTime
                         * @description fetches the current integer timestamp in milliseconds from the exchange server
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {int} the current integer timestamp in milliseconds from the exchange server
                         */
                        const response = await this.publicGetTime(params);
                        //
                        //     {
                        //         "iso":"2020-05-12T08:00:51.504Z",
                        //         "epoch":1589270451.504
                        //     }
                        //
                        return this.safeTimestamp(response, "epoch");
                    }

                    parseOrderStatus(status) {
                        const statuses = {
                            pending: "open",
                            active: "open",
                            open: "open",
                            done: "closed",
                            canceled: "canceled",
                            canceling: "open",
                        };
                        return this.safeString(statuses, status, status);
                    }

                    parseOrder(order, market = undefined) {
                        //
                        // createOrder
                        //
                        //     {
                        //         "id": "d0c5340b-6d6c-49d9-b567-48c4bfca13d2",
                        //         "price": "0.10000000",
                        //         "size": "0.01000000",
                        //         "product_id": "BTC-USD",
                        //         "side": "buy",
                        //         "stp": "dc",
                        //         "type": "limit",
                        //         "time_in_force": "GTC",
                        //         "post_only": false,
                        //         "created_at": "2016-12-08T20:02:28.53864Z",
                        //         "fill_fees": "0.0000000000000000",
                        //         "filled_size": "0.00000000",
                        //         "executed_value": "0.0000000000000000",
                        //         "status": "pending",
                        //         "settled": false
                        //     }
                        //
                        const timestamp = this.parse8601(
                            this.safeString(order, "created_at")
                        );
                        const marketId = this.safeString(order, "product_id");
                        market = this.safeMarket(marketId, market, "-");
                        let status = this.parseOrderStatus(
                            this.safeString(order, "status")
                        );
                        const doneReason = this.safeString(
                            order,
                            "done_reason"
                        );
                        if (status === "closed" && doneReason === "canceled") {
                            status = "canceled";
                        }
                        const price = this.safeString(order, "price");
                        const filled = this.safeString(order, "filled_size");
                        const amount = this.safeString(order, "size", filled);
                        const cost = this.safeString(order, "executed_value");
                        const feeCost = this.safeNumber(order, "fill_fees");
                        let fee = undefined;
                        if (feeCost !== undefined) {
                            fee = {
                                cost: feeCost,
                                currency: market["quote"],
                                rate: undefined,
                            };
                        }
                        const id = this.safeString(order, "id");
                        const type = this.safeString(order, "type");
                        const side = this.safeString(order, "side");
                        const timeInForce = this.safeString(
                            order,
                            "time_in_force"
                        );
                        const postOnly = this.safeValue(order, "post_only");
                        const stopPrice = this.safeNumber(order, "stop_price");
                        const clientOrderId = this.safeString(
                            order,
                            "client_oid"
                        );
                        return this.safeOrder(
                            {
                                id: id,
                                clientOrderId: clientOrderId,
                                info: order,
                                timestamp: timestamp,
                                datetime: this.iso8601(timestamp),
                                lastTradeTimestamp: undefined,
                                status: status,
                                symbol: market["symbol"],
                                type: type,
                                timeInForce: timeInForce,
                                postOnly: postOnly,
                                side: side,
                                price: price,
                                stopPrice: stopPrice,
                                triggerPrice: stopPrice,
                                cost: cost,
                                amount: amount,
                                filled: filled,
                                remaining: undefined,
                                fee: fee,
                                average: undefined,
                                trades: undefined,
                            },
                            market
                        );
                    }

                    async fetchOrder(id, symbol = undefined, params = {}) {
                        /**
                         * @method
                         * @name coinbasepro#fetchOrder
                         * @description fetches information on an order made by the user
                         * @param {string|undefined} symbol not used by coinbasepro fetchOrder
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {object} An [order structure]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        await this.loadMarkets();
                        const request = {};
                        const clientOrderId = this.safeString2(
                            params,
                            "clientOrderId",
                            "client_oid"
                        );
                        let method = undefined;
                        if (clientOrderId === undefined) {
                            method = "privateGetOrdersId";
                            request["id"] = id;
                        } else {
                            method = "privateGetOrdersClientClientOid";
                            request["client_oid"] = clientOrderId;
                            params = this.omit(params, [
                                "clientOrderId",
                                "client_oid",
                            ]);
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        return this.parseOrder(response);
                    }

                    async fetchOrderTrades(
                        id,
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#fetchOrderTrades
                         * @description fetch all the trades made from a single order
                         * @param {string} id order id
                         * @param {string|undefined} symbol unified market symbol
                         * @param {int|undefined} since the earliest time in ms to fetch trades for
                         * @param {int|undefined} limit the maximum number of trades to retrieve
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html#trade-structure}
                         */
                        await this.loadMarkets();
                        let market = undefined;
                        if (symbol !== undefined) {
                            market = this.market(symbol);
                        }
                        const request = {
                            order_id: id,
                        };
                        const response = await this.privateGetFills(
                            this.extend(request, params)
                        );
                        return this.parseTrades(response, market, since, limit);
                    }

                    async fetchOrders(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#fetchOrders
                         * @description fetches information on multiple orders made by the user
                         * @param {string|undefined} symbol unified market symbol of the market orders were made in
                         * @param {int|undefined} since the earliest time in ms to fetch orders for
                         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        const request = {
                            status: "all",
                        };
                        return await this.fetchOpenOrders(
                            symbol,
                            since,
                            limit,
                            this.extend(request, params)
                        );
                    }

                    async fetchOpenOrders(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#fetchOpenOrders
                         * @description fetch all unfilled currently open orders
                         * @param {string|undefined} symbol unified market symbol
                         * @param {int|undefined} since the earliest time in ms to fetch open orders for
                         * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        await this.loadMarkets();
                        const request = {};
                        let market = undefined;
                        if (symbol !== undefined) {
                            market = this.market(symbol);
                            request["product_id"] = market["id"];
                        }
                        if (limit !== undefined) {
                            request["limit"] = limit; // default 100
                        }
                        const response = await this.privateGetOrders(
                            this.extend(request, params)
                        );
                        return this.parseOrders(response, market, since, limit);
                    }

                    async fetchClosedOrders(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#fetchClosedOrders
                         * @description fetches information on multiple closed orders made by the user
                         * @param {string|undefined} symbol unified market symbol of the market orders were made in
                         * @param {int|undefined} since the earliest time in ms to fetch orders for
                         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        const request = {
                            status: "done",
                        };
                        return await this.fetchOpenOrders(
                            symbol,
                            since,
                            limit,
                            this.extend(request, params)
                        );
                    }

                    async createOrder(
                        symbol,
                        type,
                        side,
                        amount,
                        price = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#createOrder
                         * @description create a trade order
                         * @param {string} symbol unified symbol of the market to create an order in
                         * @param {string} type 'market' or 'limit'
                         * @param {string} side 'buy' or 'sell'
                         * @param {float} amount how much of currency you want to trade in units of base currency
                         * @param {float|undefined} price the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {object} an [order structure]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const request = {
                            // common params --------------------------------------------------
                            // 'client_oid': clientOrderId,
                            type: type,
                            side: side,
                            product_id: market["id"],
                            // 'size': this.amountToPrecision (symbol, amount),
                            // 'stp': 'dc', // self-trade prevention, dc = decrease and cancel, co = cancel oldest, cn = cancel newest, cb = cancel both
                            // 'stop': 'loss', // "loss" = stop loss below price, "entry" = take profit above price
                            // 'stop_price': this.priceToPrecision (symbol, price),
                            // limit order params ---------------------------------------------
                            // 'price': this.priceToPrecision (symbol, price),
                            // 'size': this.amountToPrecision (symbol, amount),
                            // 'time_in_force': 'GTC', // GTC, GTT, IOC, or FOK
                            // 'cancel_after' [optional]* min, hour, day, requires time_in_force to be GTT
                            // 'post_only': false, // invalid when time_in_force is IOC or FOK
                            // market order params --------------------------------------------
                            // 'size': this.amountToPrecision (symbol, amount),
                            // 'funds': this.costToPrecision (symbol, amount),
                        };
                        const clientOrderId = this.safeString2(
                            params,
                            "clientOrderId",
                            "client_oid"
                        );
                        if (clientOrderId !== undefined) {
                            request["client_oid"] = clientOrderId;
                        }
                        const stopPrice = this.safeNumber2(
                            params,
                            "stopPrice",
                            "stop_price"
                        );
                        if (stopPrice !== undefined) {
                            request["stop_price"] = this.priceToPrecision(
                                symbol,
                                stopPrice
                            );
                        }
                        const timeInForce = this.safeString2(
                            params,
                            "timeInForce",
                            "time_in_force"
                        );
                        if (timeInForce !== undefined) {
                            request["time_in_force"] = timeInForce;
                        }
                        const postOnly = this.safeValue2(
                            params,
                            "postOnly",
                            "post_only",
                            false
                        );
                        if (postOnly) {
                            request["post_only"] = true;
                        }
                        params = this.omit(params, [
                            "timeInForce",
                            "time_in_force",
                            "stopPrice",
                            "stop_price",
                            "clientOrderId",
                            "client_oid",
                            "postOnly",
                            "post_only",
                        ]);
                        if (type === "limit") {
                            request["price"] = this.priceToPrecision(
                                symbol,
                                price
                            );
                            request["size"] = this.amountToPrecision(
                                symbol,
                                amount
                            );
                        } else if (type === "market") {
                            let cost = this.safeNumber2(
                                params,
                                "cost",
                                "funds"
                            );
                            if (cost === undefined) {
                                if (price !== undefined) {
                                    cost = amount * price;
                                }
                            } else {
                                params = this.omit(params, ["cost", "funds"]);
                            }
                            if (cost !== undefined) {
                                request["funds"] = this.costToPrecision(
                                    symbol,
                                    cost
                                );
                            } else {
                                request["size"] = this.amountToPrecision(
                                    symbol,
                                    amount
                                );
                            }
                        }
                        const response = await this.privatePostOrders(
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         "id": "d0c5340b-6d6c-49d9-b567-48c4bfca13d2",
                        //         "price": "0.10000000",
                        //         "size": "0.01000000",
                        //         "product_id": "BTC-USD",
                        //         "side": "buy",
                        //         "stp": "dc",
                        //         "type": "limit",
                        //         "time_in_force": "GTC",
                        //         "post_only": false,
                        //         "created_at": "2016-12-08T20:02:28.53864Z",
                        //         "fill_fees": "0.0000000000000000",
                        //         "filled_size": "0.00000000",
                        //         "executed_value": "0.0000000000000000",
                        //         "status": "pending",
                        //         "settled": false
                        //     }
                        //
                        return this.parseOrder(response, market);
                    }

                    async cancelOrder(id, symbol = undefined, params = {}) {
                        /**
                         * @method
                         * @name coinbasepro#cancelOrder
                         * @description cancels an open order
                         * @param {string} id order id
                         * @param {string|undefined} symbol unified symbol of the market the order was made in
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {object} An [order structure]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        await this.loadMarkets();
                        const request = {
                            // 'product_id': market['id'], // the request will be more performant if you include it
                        };
                        const clientOrderId = this.safeString2(
                            params,
                            "clientOrderId",
                            "client_oid"
                        );
                        let method = undefined;
                        if (clientOrderId === undefined) {
                            method = "privateDeleteOrdersId";
                            request["id"] = id;
                        } else {
                            method = "privateDeleteOrdersClientClientOid";
                            request["client_oid"] = clientOrderId;
                            params = this.omit(params, [
                                "clientOrderId",
                                "client_oid",
                            ]);
                        }
                        let market = undefined;
                        if (symbol !== undefined) {
                            market = this.market(symbol);
                            request["product_id"] = market["symbol"]; // the request will be more performant if you include it
                        }
                        return await this[method](this.extend(request, params));
                    }

                    async cancelAllOrders(symbol = undefined, params = {}) {
                        /**
                         * @method
                         * @name coinbasepro#cancelAllOrders
                         * @description cancel all open orders
                         * @param {string|undefined} symbol unified market symbol, only orders in the market of this symbol are cancelled when symbol is not undefined
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        await this.loadMarkets();
                        const request = {};
                        let market = undefined;
                        if (symbol !== undefined) {
                            market = this.market(symbol);
                            request["product_id"] = market["symbol"]; // the request will be more performant if you include it
                        }
                        return await this.privateDeleteOrders(
                            this.extend(request, params)
                        );
                    }

                    async fetchPaymentMethods(params = {}) {
                        return await this.privateGetPaymentMethods(params);
                    }

                    async deposit(code, amount, address, params = {}) {
                        /**
                         * @method
                         * @name coinbasepro#deposit
                         * @description Creates a new deposit address, as required by coinbasepro
                         * @param {string} code Unified CCXT currency code (e.g. `"USDT"`)
                         * @param {float} amount The amount of currency to send in the deposit (e.g. `20`)
                         * @param {string} address Not used by coinbasepro
                         * @param {object} params Parameters specific to the exchange API endpoint (e.g. `{"network": "TRX"}`)
                         * @returns a [transaction structure]{@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure}
                         */
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const request = {
                            currency: currency["id"],
                            amount: amount,
                        };
                        let method = "privatePostDeposits";
                        if ("payment_method_id" in params) {
                            // deposit from a payment_method, like a bank account
                            method += "PaymentMethod";
                        } else if ("coinbase_account_id" in params) {
                            // deposit into Coinbase Pro account from a Coinbase account
                            method += "CoinbaseAccount";
                        } else {
                            // deposit methodotherwise we did not receive a supported deposit location
                            // relevant docs link for the Googlers
                            // https://docs.pro.coinbase.com/#deposits
                            throw new NotSupported(
                                this.id +
                                    " deposit() requires one of `coinbase_account_id` or `payment_method_id` extra params"
                            );
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        if (!response) {
                            throw new ExchangeError(
                                this.id +
                                    " deposit() error: " +
                                    this.json(response)
                            );
                        }
                        return {
                            info: response,
                            id: response["id"],
                        };
                    }

                    async withdraw(
                        code,
                        amount,
                        address,
                        tag = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#withdraw
                         * @description make a withdrawal
                         * @param {string} code unified currency code
                         * @param {float} amount the amount to withdraw
                         * @param {string} address the address to withdraw to
                         * @param {string|undefined} tag
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure}
                         */
                        [tag, params] = this.handleWithdrawTagAndParams(
                            tag,
                            params
                        );
                        this.checkAddress(address);
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const request = {
                            currency: currency["id"],
                            amount: amount,
                        };
                        let method = "privatePostWithdrawals";
                        if ("payment_method_id" in params) {
                            method += "PaymentMethod";
                        } else if ("coinbase_account_id" in params) {
                            method += "CoinbaseAccount";
                        } else {
                            method += "Crypto";
                            request["crypto_address"] = address;
                            if (tag !== undefined) {
                                request["destination_tag"] = tag;
                            }
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        if (!response) {
                            throw new ExchangeError(
                                this.id +
                                    " withdraw() error: " +
                                    this.json(response)
                            );
                        }
                        return this.parseTransaction(response, currency);
                    }

                    parseLedgerEntryType(type) {
                        const types = {
                            transfer: "transfer", // Funds moved between portfolios
                            match: "trade", // Funds moved as a result of a trade
                            fee: "fee", // Fee as a result of a trade
                            rebate: "rebate", // Fee rebate
                            conversion: "trade", // Funds converted between fiat currency and a stablecoin
                        };
                        return this.safeString(types, type, type);
                    }

                    parseLedgerEntry(item, currency = undefined) {
                        //  {
                        //      id: '12087495079',
                        //      amount: '-0.0100000000000000',
                        //      balance: '0.0645419900000000',
                        //      created_at: '2021-10-28T17:14:32.593168Z',
                        //      type: 'transfer',
                        //      details: {
                        //          from: '2f74edf7-1440-4586-86dc-ae58c5693691',
                        //          profile_transfer_id: '3ef093ad-2482-40d1-8ede-2f89cff5099e',
                        //          to: 'dda99503-4980-4b60-9549-0b770ee51336'
                        //      }
                        //  },
                        //  {
                        //     id: '11740725774',
                        //     amount: '-1.7565669701255000',
                        //     balance: '0.0016490047745000',
                        //     created_at: '2021-10-22T03:47:34.764122Z',
                        //     type: 'fee',
                        //     details: {
                        //         order_id: 'ad06abf4-95ab-432a-a1d8-059ef572e296',
                        //         product_id: 'ETH-DAI',
                        //         trade_id: '1740617'
                        //     }
                        //  }
                        const id = this.safeString(item, "id");
                        let amountString = this.safeString(item, "amount");
                        let direction = undefined;
                        const afterString = this.safeString(item, "balance");
                        const beforeString = Precise.stringSub(
                            afterString,
                            amountString
                        );
                        if (Precise.stringLt(amountString, "0")) {
                            direction = "out";
                            amountString = Precise.stringAbs(amountString);
                        } else {
                            direction = "in";
                        }
                        const amount = this.parseNumber(amountString);
                        const after = this.parseNumber(afterString);
                        const before = this.parseNumber(beforeString);
                        const timestamp = this.parse8601(
                            this.safeValue(item, "created_at")
                        );
                        const type = this.parseLedgerEntryType(
                            this.safeString(item, "type")
                        );
                        const code = this.safeCurrencyCode(undefined, currency);
                        const details = this.safeValue(item, "details", {});
                        let account = undefined;
                        let referenceAccount = undefined;
                        let referenceId = undefined;
                        if (type === "transfer") {
                            account = this.safeString(details, "from");
                            referenceAccount = this.safeString(details, "to");
                            referenceId = this.safeString(
                                details,
                                "profile_transfer_id"
                            );
                        } else {
                            referenceId = this.safeString(details, "order_id");
                        }
                        const status = "ok";
                        return {
                            id: id,
                            currency: code,
                            account: account,
                            referenceAccount: referenceAccount,
                            referenceId: referenceId,
                            status: status,
                            amount: amount,
                            before: before,
                            after: after,
                            fee: undefined,
                            direction: direction,
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            type: type,
                            info: item,
                        };
                    }

                    async fetchLedger(
                        code = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#fetchLedger
                         * @description fetch the history of changes, actions done by the user or operations that altered balance of the user
                         * @param {string} code unified currency code, default is undefined
                         * @param {int|undefined} since timestamp in ms of the earliest ledger entry, default is undefined
                         * @param {int|undefined} limit max number of ledger entrys to return, default is undefined
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/en/latest/manual.html#ledger-structure}
                         */
                        // https://docs.cloud.coinbase.com/exchange/reference/exchangerestapi_getaccountledger
                        if (code === undefined) {
                            throw new ArgumentsRequired(
                                this.id + " fetchLedger() requires a code param"
                            );
                        }
                        await this.loadMarkets();
                        await this.loadAccounts();
                        const currency = this.currency(code);
                        const accountsByCurrencyCode = this.indexBy(
                            this.accounts,
                            "code"
                        );
                        const account = this.safeValue(
                            accountsByCurrencyCode,
                            code
                        );
                        if (account === undefined) {
                            throw new ExchangeError(
                                this.id +
                                    " fetchLedger() could not find account id for " +
                                    code
                            );
                        }
                        const request = {
                            id: account["id"],
                            // 'start_date': this.iso8601 (since),
                            // 'end_date': this.iso8601 (this.milliseconds ()),
                            // 'before': 'cursor', // sets start cursor to before date
                            // 'after': 'cursor', // sets end cursor to after date
                            // 'limit': limit, // default 100
                            // 'profile_id': 'string'
                        };
                        if (since !== undefined) {
                            request["start_date"] = this.iso8601(since);
                        }
                        if (limit !== undefined) {
                            request["limit"] = limit; // default 100
                        }
                        const response = await this.privateGetAccountsIdLedger(
                            this.extend(request, params)
                        );
                        for (let i = 0; i < response.length; i++) {
                            response[i]["currency"] = code;
                        }
                        return this.parseLedger(
                            response,
                            currency,
                            since,
                            limit
                        );
                    }

                    async fetchTransactions(
                        code = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#fetchTransactions
                         * @description fetch history of deposits and withdrawals
                         * @see https://docs.cloud.coinbase.com/exchange/reference/exchangerestapi_gettransfers
                         * @see https://docs.cloud.coinbase.com/exchange/reference/exchangerestapi_getaccounttransfers
                         * @param {string|undefined} code unified currency code for the currency of the transactions, default is undefined
                         * @param {int|undefined} since timestamp in ms of the earliest transaction, default is undefined
                         * @param {int|undefined} limit max number of transactions to return, default is undefined
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @param {string|undefined} params.id account id, when defined, the endpoint used is '/accounts/{account_id}/transfers/' instead of '/transfers/'
                         * @returns {object} a list of [transaction structure]{@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure}
                         */
                        await this.loadMarkets();
                        await this.loadAccounts();
                        let currency = undefined;
                        let id = this.safeString(params, "id"); // account id
                        if (id === undefined) {
                            if (code !== undefined) {
                                currency = this.currency(code);
                                const accountsByCurrencyCode = this.indexBy(
                                    this.accounts,
                                    "code"
                                );
                                const account = this.safeValue(
                                    accountsByCurrencyCode,
                                    code
                                );
                                if (account === undefined) {
                                    throw new ExchangeError(
                                        this.id +
                                            " fetchTransactions() could not find account id for " +
                                            code
                                    );
                                }
                                id = account["id"];
                            }
                        }
                        const request = {};
                        if (id !== undefined) {
                            request["id"] = id;
                        }
                        if (limit !== undefined) {
                            request["limit"] = limit;
                        }
                        let response = undefined;
                        if (id === undefined) {
                            response = await this.privateGetTransfers(
                                this.extend(request, params)
                            );
                            //
                            //    [
                            //        {
                            //            "id": "bee6fd7c-afb2-4e47-8298-671d09997d16",
                            //            "type": "deposit",
                            //            "created_at": "2022-12-21 00:48:45.477503+00",
                            //            "completed_at": null,
                            //            "account_id": "sal3802-36bd-46be-a7b8-alsjf383sldak",
                            //            "user_id": "6382048209f92as392039dlks2",
                            //            "amount": "0.01000000",
                            //            "details": {
                            //                "network": "litecoin",
                            //                "crypto_address": "MKemtnCFUYKsNWaf5EMYMpwSszcXWFDtTY",
                            //                "coinbase_account_id": "fl2b6925-f6ba-403n-jj03-40fl435n430f",
                            //                "coinbase_transaction_id": "63a25bb13cb5cf0001d2cf17", // withdrawals only
                            //                "crypto_transaction_hash": "752f35570736341e2a253f7041a34cf1e196fc56128c900fd03d99da899d94c1",
                            //                "tx_service_transaction_id": "1873249104",
                            //                "coinbase_payment_method_id": ""
                            //            },
                            //            "canceled_at": null,
                            //            "processed_at": null,
                            //            "user_nonce": null,
                            //            "idem": "5e3201b0-e390-5k3k-a913-c32932049242",
                            //            "profile_id": "k3k302a8-c4dk-4f49-9d39-3203923wpk39",
                            //            "currency": "LTC"
                            //        }
                            //    ]
                            //
                            for (let i = 0; i < response.length; i++) {
                                const account_id = this.safeString(
                                    response[i],
                                    "account_id"
                                );
                                const account = this.safeValue(
                                    this.accountsById,
                                    account_id
                                );
                                const code = this.safeString(account, "code");
                                response[i]["currency"] = code;
                            }
                        } else {
                            response = await this.privateGetAccountsIdTransfers(
                                this.extend(request, params)
                            );
                            //
                            //    [
                            //        {
                            //            "id": "bee6fd7c-afb2-4e47-8298-671d09997d16",
                            //            "type": "deposit",
                            //            "created_at": "2022-12-21 00:48:45.477503+00",
                            //            "completed_at": null,
                            //            "amount": "0.01000000",
                            //            "details": {
                            //                "network": "litecoin",
                            //                "crypto_address": "MKemtnCFUYKsNWaf5EMYMpwSszcXWFDtTY",
                            //                "coinbase_account_id": "fl2b6925-f6ba-403n-jj03-40fl435n430f",
                            //                "coinbase_transaction_id": "63a25bb13cb5cf0001d2cf17", // withdrawals only
                            //                "crypto_transaction_hash": "752f35570736341e2a253f7041a34cf1e196fc56128c900fd03d99da899d94c1",
                            //                "tx_service_transaction_id": "1873249104",
                            //                "coinbase_payment_method_id": ""
                            //            },
                            //            "canceled_at": null,
                            //            "processed_at": null,
                            //            "user_nonce": null,
                            //            "idem": "5e3201b0-e390-5k3k-a913-c32932049242",
                            //            "profile_id": "k3k302a8-c4dk-4f49-9d39-3203923wpk39",
                            //            "currency": "LTC"
                            //        }
                            //    ]
                            //
                            for (let i = 0; i < response.length; i++) {
                                response[i]["currency"] = code;
                            }
                        }
                        return this.parseTransactions(
                            response,
                            currency,
                            since,
                            limit
                        );
                    }

                    async fetchDeposits(
                        code = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#fetchDeposits
                         * @description fetch all deposits made to an account
                         * @param {string|undefined} code unified currency code
                         * @param {int|undefined} since the earliest time in ms to fetch deposits for
                         * @param {int|undefined} limit the maximum number of deposits structures to retrieve
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure}
                         */
                        return await this.fetchTransactions(
                            code,
                            since,
                            limit,
                            this.extend({ type: "deposit" }, params)
                        );
                    }

                    async fetchWithdrawals(
                        code = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#fetchWithdrawals
                         * @description fetch all withdrawals made from an account
                         * @param {string|undefined} code unified currency code
                         * @param {int|undefined} since the earliest time in ms to fetch withdrawals for
                         * @param {int|undefined} limit the maximum number of withdrawals structures to retrieve
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure}
                         */
                        return await this.fetchTransactions(
                            code,
                            since,
                            limit,
                            this.extend({ type: "withdraw" }, params)
                        );
                    }

                    parseTransactionStatus(transaction) {
                        const canceled = this.safeValue(
                            transaction,
                            "canceled_at"
                        );
                        if (canceled) {
                            return "canceled";
                        }
                        const processed = this.safeValue(
                            transaction,
                            "processed_at"
                        );
                        const completed = this.safeValue(
                            transaction,
                            "completed_at"
                        );
                        if (completed) {
                            return "ok";
                        } else if (processed && !completed) {
                            return "failed";
                        } else {
                            return "pending";
                        }
                    }

                    parseTransaction(transaction, currency = undefined) {
                        //
                        // privateGetTransfers
                        //
                        //    [
                        //        {
                        //            "id": "bee6fd7c-afb2-4e47-8298-671d09997d16",
                        //            "type": "deposit",
                        //            "created_at": "2022-12-21 00:48:45.477503+00",
                        //            "completed_at": null,
                        //            "account_id": "sal3802-36bd-46be-a7b8-alsjf383sldak",     // only from privateGetTransfers
                        //            "user_id": "6382048209f92as392039dlks2",                  // only from privateGetTransfers
                        //            "amount": "0.01000000",
                        //            "details": {
                        //                "network": "litecoin",
                        //                "crypto_address": "MKemtnCFUYKsNWaf5EMYMpwSszcXWFDtTY",
                        //                "coinbase_account_id": "fl2b6925-f6ba-403n-jj03-40fl435n430f",
                        //                "coinbase_transaction_id": "63a25bb13cb5cf0001d2cf17", // withdrawals only
                        //                "crypto_transaction_hash": "752f35570736341e2a253f7041a34cf1e196fc56128c900fd03d99da899d94c1",
                        //                "tx_service_transaction_id": "1873249104",
                        //                "coinbase_payment_method_id": ""
                        //            },
                        //            "canceled_at": null,
                        //            "processed_at": null,
                        //            "user_nonce": null,
                        //            "idem": "5e3201b0-e390-5k3k-a913-c32932049242",
                        //            "profile_id": "k3k302a8-c4dk-4f49-9d39-3203923wpk39",
                        //            "currency": "LTC"
                        //        }
                        //    ]
                        //
                        const details = this.safeValue(
                            transaction,
                            "details",
                            {}
                        );
                        const timestamp = this.parse8601(
                            this.safeString(transaction, "created_at")
                        );
                        const currencyId = this.safeString(
                            transaction,
                            "currency"
                        );
                        const code = this.safeCurrencyCode(
                            currencyId,
                            currency
                        );
                        let amount = this.safeNumber(transaction, "amount");
                        let type = this.safeString(transaction, "type");
                        let address = this.safeString(
                            details,
                            "crypto_address"
                        );
                        address = this.safeString(
                            transaction,
                            "crypto_address",
                            address
                        );
                        const fee = {
                            currency: undefined,
                            cost: undefined,
                            rate: undefined,
                        };
                        if (type === "withdraw") {
                            type = "withdrawal";
                            address = this.safeString(
                                details,
                                "sent_to_address",
                                address
                            );
                            const feeCost = this.safeNumber(details, "fee");
                            if (feeCost !== undefined) {
                                if (amount !== undefined) {
                                    amount -= feeCost;
                                }
                                fee["cost"] = feeCost;
                                fee["currency"] = code;
                            }
                        }
                        const networkId = this.safeString(details, "network");
                        return {
                            info: transaction,
                            id: this.safeString(transaction, "id"),
                            txid: this.safeString(
                                details,
                                "crypto_transaction_hash"
                            ),
                            type: type,
                            currency: code,
                            network: this.networkIdToCode(networkId),
                            amount: amount,
                            status: this.parseTransactionStatus(transaction),
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            address: address,
                            addressFrom: undefined,
                            addressTo: this.safeString(
                                details,
                                "crypto_address"
                            ),
                            tag: this.safeString(details, "destination_tag"),
                            tagFrom: undefined,
                            tagTo: undefined,
                            updated: this.parse8601(
                                this.safeString(transaction, "processed_at")
                            ),
                            comment: undefined,
                            fee: fee,
                        };
                    }

                    async createDepositAddress(code, params = {}) {
                        /**
                         * @method
                         * @name coinbasepro#createDepositAddress
                         * @description create a currency deposit address
                         * @param {string} code unified currency code of the currency for the deposit address
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {object} an [address structure]{@link https://docs.ccxt.com/en/latest/manual.html#address-structure}
                         */
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        let accounts = this.safeValue(
                            this.options,
                            "coinbaseAccounts"
                        );
                        if (accounts === undefined) {
                            accounts = await this.privateGetCoinbaseAccounts();
                            this.options["coinbaseAccounts"] = accounts; // cache it
                            this.options["coinbaseAccountsByCurrencyId"] =
                                this.indexBy(accounts, "currency");
                        }
                        const currencyId = currency["id"];
                        const account = this.safeValue(
                            this.options["coinbaseAccountsByCurrencyId"],
                            currencyId
                        );
                        if (account === undefined) {
                            // eslint-disable-next-line quotes
                            throw new InvalidAddress(
                                this.id +
                                    " createDepositAddress() could not find currency code " +
                                    code +
                                    " with id = " +
                                    currencyId +
                                    " in this.options['coinbaseAccountsByCurrencyId']"
                            );
                        }
                        const request = {
                            id: account["id"],
                        };
                        const response =
                            await this.privatePostCoinbaseAccountsIdAddresses(
                                this.extend(request, params)
                            );
                        const address = this.safeString(response, "address");
                        const tag = this.safeString(
                            response,
                            "destination_tag"
                        );
                        return {
                            currency: code,
                            address: this.checkAddress(address),
                            tag: tag,
                            info: response,
                        };
                    }

                    sign(
                        path,
                        api = "public",
                        method = "GET",
                        params = {},
                        headers = undefined,
                        body = undefined
                    ) {
                        let request = "/" + this.implodeParams(path, params);
                        const query = this.omit(
                            params,
                            this.extractParams(path)
                        );
                        if (method === "GET") {
                            if (Object.keys(query).length) {
                                request += "?" + this.urlencode(query);
                            }
                        }
                        const url =
                            this.implodeHostname(this.urls["api"][api]) +
                            request;
                        if (api === "private") {
                            this.checkRequiredCredentials();
                            const nonce = this.nonce().toString();
                            let payload = "";
                            if (method !== "GET") {
                                if (Object.keys(query).length) {
                                    body = this.json(query);
                                    payload = body;
                                }
                            }
                            const what = nonce + method + request + payload;
                            let secret = undefined;
                            try {
                                secret = this.base64ToBinary(this.secret);
                            } catch (e) {
                                throw new AuthenticationError(
                                    this.id + " sign() invalid base64 secret"
                                );
                            }
                            const signature = this.hmac(
                                this.encode(what),
                                secret,
                                "sha256",
                                "base64"
                            );
                            headers = {
                                "CB-ACCESS-KEY": this.apiKey,
                                "CB-ACCESS-SIGN": signature,
                                "CB-ACCESS-TIMESTAMP": nonce,
                                "CB-ACCESS-PASSPHRASE": this.password,
                                "Content-Type": "application/json",
                            };
                        }
                        return {
                            url: url,
                            method: method,
                            body: body,
                            headers: headers,
                        };
                    }

                    handleErrors(
                        code,
                        reason,
                        url,
                        method,
                        headers,
                        body,
                        response,
                        requestHeaders,
                        requestBody
                    ) {
                        if (code === 400 || code === 404) {
                            if (body[0] === "{") {
                                const message = this.safeString(
                                    response,
                                    "message"
                                );
                                const feedback = this.id + " " + message;
                                this.throwExactlyMatchedException(
                                    this.exceptions["exact"],
                                    message,
                                    feedback
                                );
                                this.throwBroadlyMatchedException(
                                    this.exceptions["broad"],
                                    message,
                                    feedback
                                );
                                throw new ExchangeError(feedback); // unknown message
                            }
                            throw new ExchangeError(this.id + " " + body);
                        }
                    }

                    async request(
                        path,
                        api = "public",
                        method = "GET",
                        params = {},
                        headers = undefined,
                        body = undefined,
                        config = {},
                        context = {}
                    ) {
                        const response = await this.fetch2(
                            path,
                            api,
                            method,
                            params,
                            headers,
                            body,
                            config,
                            context
                        );
                        if (typeof response !== "string") {
                            if ("message" in response) {
                                throw new ExchangeError(
                                    this.id + " " + this.json(response)
                                );
                            }
                        }
                        return response;
                    }
                };
            },
            {
                "./base/Exchange": 3,
                "./base/Precise": 4,
                "./base/errors": 6,
                "./base/functions/number": 12,
            },
        ],
        20: [
            function (require, module, exports) {
                "use strict";

                // ---------------------------------------------------------------------------

                const Exchange = require("./base/Exchange");
                const {
                    ExchangeError,
                    ExchangeNotAvailable,
                    InsufficientFunds,
                    OrderNotFound,
                    InvalidOrder,
                    AccountSuspended,
                    InvalidNonce,
                    NotSupported,
                    BadRequest,
                    AuthenticationError,
                    BadSymbol,
                    RateLimitExceeded,
                    PermissionDenied,
                    InvalidAddress,
                } = require("./base/errors");
                const { TICK_SIZE } = require("./base/functions/number");
                const Precise = require("./base/Precise");

                //  ---------------------------------------------------------------------------

                module.exports = class kucoin extends Exchange {
                    describe() {
                        return this.deepExtend(super.describe(), {
                            id: "kucoin",
                            name: "KuCoin",
                            countries: ["SC"],
                            // note "only some endpoints are rate-limited"
                            // so I set the 'ratelimit' on those which supposedly 'arent ratelimited'
                            // to the limit of the cheapest endpoint
                            // 60 requests in 3 seconds = 20 requests per second => ( 1000ms / 20 ) = 50 ms between requests on average
                            rateLimit: 50,
                            version: "v2",
                            certified: true,
                            pro: true,
                            comment: "Platform 2.0",
                            quoteJsonNumbers: false,
                            has: {
                                CORS: undefined,
                                spot: true,
                                margin: true,
                                swap: false,
                                future: false,
                                option: undefined,
                                borrowMargin: true,
                                cancelAllOrders: true,
                                cancelOrder: true,
                                createDepositAddress: true,
                                createOrder: true,
                                createStopLimitOrder: true,
                                createStopMarketOrder: true,
                                createStopOrder: true,
                                fetchAccounts: true,
                                fetchBalance: true,
                                fetchBorrowInterest: true,
                                fetchBorrowRate: false,
                                fetchBorrowRateHistories: false,
                                fetchBorrowRateHistory: true,
                                fetchBorrowRates: false,
                                fetchClosedOrders: true,
                                fetchCurrencies: true,
                                fetchDepositAddress: true,
                                fetchDepositAddressesByNetwork: true,
                                fetchDeposits: true,
                                fetchDepositWithdrawFee: true,
                                fetchDepositWithdrawFees: false,
                                fetchFundingHistory: false,
                                fetchFundingRate: false,
                                fetchFundingRateHistory: false,
                                fetchFundingRates: false,
                                fetchIndexOHLCV: false,
                                fetchL3OrderBook: true,
                                fetchLedger: true,
                                fetchMarginMode: false,
                                fetchMarkets: true,
                                fetchMarkOHLCV: false,
                                fetchMyTrades: true,
                                fetchOHLCV: true,
                                fetchOpenInterestHistory: false,
                                fetchOpenOrders: true,
                                fetchOrder: true,
                                fetchOrderBook: true,
                                fetchOrdersByStatus: true,
                                fetchOrderTrades: true,
                                fetchPositionMode: false,
                                fetchPremiumIndexOHLCV: false,
                                fetchStatus: true,
                                fetchTicker: true,
                                fetchTickers: true,
                                fetchTime: true,
                                fetchTrades: true,
                                fetchTradingFee: true,
                                fetchTradingFees: false,
                                fetchTransactionFee: true,
                                fetchWithdrawals: true,
                                repayMargin: true,
                                setMarginMode: false,
                                transfer: true,
                                withdraw: true,
                            },
                            urls: {
                                logo: "https://user-images.githubusercontent.com/51840849/87295558-132aaf80-c50e-11ea-9801-a2fb0c57c799.jpg",
                                referral:
                                    "https://www.kucoin.com/ucenter/signup?rcode=E5wkqe",
                                api: {
                                    public: "https://api.kucoin.com",
                                    private: "https://api.kucoin.com",
                                    futuresPrivate:
                                        "https://api-futures.kucoin.com",
                                    futuresPublic:
                                        "https://api-futures.kucoin.com",
                                },
                                test: {
                                    public: "https://openapi-sandbox.kucoin.com",
                                    private:
                                        "https://openapi-sandbox.kucoin.com",
                                    futuresPrivate:
                                        "https://api-sandbox-futures.kucoin.com",
                                    futuresPublic:
                                        "https://api-sandbox-futures.kucoin.com",
                                },
                                www: "https://www.kucoin.com",
                                doc: ["https://docs.kucoin.com"],
                            },
                            requiredCredentials: {
                                apiKey: true,
                                secret: true,
                                password: true,
                            },
                            api: {
                                public: {
                                    get: {
                                        timestamp: 1,
                                        status: 1,
                                        symbols: 1,
                                        markets: 1,
                                        "market/allTickers": 1,
                                        "market/orderbook/level{level}_{limit}": 1,
                                        "market/orderbook/level2_20": 1,
                                        "market/orderbook/level2_100": 1,
                                        "market/histories": 1,
                                        "market/candles": 1,
                                        "market/stats": 1,
                                        currencies: 1,
                                        "currencies/{currency}": 1,
                                        prices: 1,
                                        "mark-price/{symbol}/current": 1,
                                        "margin/config": 1,
                                        "margin/trade/last": 1,
                                    },
                                    post: {
                                        "bullet-public": 1,
                                    },
                                },
                                private: {
                                    get: {
                                        "market/orderbook/level{level}": 1,
                                        "market/orderbook/level2": { v3: 2 }, // 30/3s = 10/s => cost = 20 / 10 = 2
                                        "market/orderbook/level3": 1,
                                        accounts: 1,
                                        "accounts/{accountId}": 1,
                                        // 'accounts/{accountId}/ledgers': 1, Deprecated endpoint
                                        "accounts/ledgers": 3.333, // 18/3s = 6/s => cost = 20 / 6 = 3.333
                                        "accounts/{accountId}/holds": 1,
                                        "accounts/transferable": 1,
                                        "base-fee": 1,
                                        "sub/user": 1,
                                        "user-info": 1,
                                        "sub/api-key": 1,
                                        "sub-accounts": 1,
                                        "sub-accounts/{subUserId}": 1,
                                        "deposit-addresses": 1,
                                        deposits: 10, // 6/3s = 2/s => cost = 20 / 2 = 10
                                        "hist-deposits": 10, // 6/3 = 2/s => cost = 20 / 2 = 10
                                        // 'hist-orders': 1, Deprecated endpoint
                                        "hist-withdrawals": 10, // 6/3 = 2/s => cost = 20 / 2 = 10
                                        withdrawals: 10, // 6/3 = 2/s => cost = 20 / 2 = 10
                                        "withdrawals/quotas": 1,
                                        orders: 2, // 30/3s =  10/s => cost  = 20 / 10 = 2
                                        "order/client-order/{clientOid}": 1,
                                        "orders/{orderId}": 1,
                                        "limit/orders": 1,
                                        fills: 6.66667, // 9/3s = 3/s => cost  = 20 / 3 = 6.666667
                                        "limit/fills": 1,
                                        "isolated/accounts": 2, // 30/3s = 10/s => cost = 20 / 10 = 2
                                        "isolated/account/{symbol}": 2,
                                        "isolated/borrow/outstanding": 2,
                                        "isolated/borrow/repaid": 2,
                                        "isolated/symbols": 2,
                                        "margin/account": 1,
                                        "margin/borrow": 1,
                                        "margin/borrow/outstanding": 1,
                                        "margin/borrow/repaid": 1,
                                        "margin/lend/active": 1,
                                        "margin/lend/done": 1,
                                        "margin/lend/trade/unsettled": 1,
                                        "margin/lend/trade/settled": 1,
                                        "margin/lend/assets": 1,
                                        "margin/market": 1,
                                        "stop-order/{orderId}": 1,
                                        "stop-order": 1,
                                        "stop-order/queryOrderByClientOid": 1,
                                        "trade-fees": 1.3333, // 45/3s = 15/s => cost = 20 / 15 = 1.333
                                    },
                                    post: {
                                        accounts: 1,
                                        "accounts/inner-transfer": { v2: 1 },
                                        "accounts/sub-transfer": { v2: 25 }, // bad docs
                                        "deposit-addresses": 1,
                                        withdrawals: 1,
                                        orders: 4, // 45/3s = 15/s => cost = 20 / 15 = 1.333333
                                        "orders/multi": 20, // 3/3s = 1/s => cost = 20 / 1 = 20
                                        "isolated/borrow": 2, // 30 requests per 3 seconds = 10 requests per second => cost = 20/10 = 2
                                        "isolated/repay/all": 2,
                                        "isolated/repay/single": 2,
                                        "margin/borrow": 1,
                                        "margin/order": 1,
                                        "margin/repay/all": 1,
                                        "margin/repay/single": 1,
                                        "margin/lend": 1,
                                        "margin/toggle-auto-lend": 1,
                                        "bullet-private": 1,
                                        "stop-order": 1,
                                        "sub/user": 1,
                                        "sub/api-key": 1,
                                        "sub/api-key/update": 1,
                                    },
                                    delete: {
                                        "withdrawals/{withdrawalId}": 1,
                                        orders: 20, // 3/3s = 1/s => cost = 20/1
                                        "order/client-order/{clientOid}": 1,
                                        "orders/{orderId}": 1, // rateLimit: 60/3s = 20/s => cost = 1
                                        "margin/lend/{orderId}": 1,
                                        "stop-order/cancelOrderByClientOid": 1,
                                        "stop-order/{orderId}": 1,
                                        "stop-order/cancel": 1,
                                        "sub/api-key": 1,
                                    },
                                },
                                futuresPublic: {
                                    // cheapest futures 'limited' endpoint is 40  requests per 3 seconds = 14.333 per second => cost = 20/14.333 = 1.3953
                                    get: {
                                        "contracts/active": 1.3953,
                                        "contracts/{symbol}": 1.3953,
                                        ticker: 1.3953,
                                        "level2/snapshot": 2, // 30 requests per 3 seconds = 10 requests per second => cost = 20/10 = 2
                                        "level2/depth20": 1.3953,
                                        "level2/depth100": 1.3953,
                                        "level2/message/query": 1.3953,
                                        "level3/message/query": 1.3953, // deprecated，level3/snapshot is suggested
                                        "level3/snapshot": 1.3953, // v2
                                        "trade/history": 1.3953,
                                        "interest/query": 1.3953,
                                        "index/query": 1.3953,
                                        "mark-price/{symbol}/current": 1.3953,
                                        "premium/query": 1.3953,
                                        "funding-rate/{symbol}/current": 1.3953,
                                        timestamp: 1.3953,
                                        status: 1.3953,
                                        "kline/query": 1.3953,
                                    },
                                    post: {
                                        "bullet-public": 1.3953,
                                    },
                                },
                                futuresPrivate: {
                                    get: {
                                        "account-overview": 2, // 30 requests per 3 seconds = 10 per second => cost = 20/10 = 2
                                        "transaction-history": 6.666, // 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
                                        "deposit-address": 1.3953,
                                        "deposit-list": 1.3953,
                                        "withdrawals/quotas": 1.3953,
                                        "withdrawal-list": 1.3953,
                                        "transfer-list": 1.3953,
                                        orders: 1.3953,
                                        stopOrders: 1.3953,
                                        recentDoneOrders: 1.3953,
                                        "orders/{orderId}": 1.3953, // ?clientOid={client-orderId} // get order by orderId
                                        "orders/byClientOid": 1.3953, // ?clientOid=eresc138b21023a909e5ad59 // get order by clientOid
                                        fills: 6.666, // 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
                                        recentFills: 6.666, // 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
                                        openOrderStatistics: 1.3953,
                                        position: 1.3953,
                                        positions: 6.666, // 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
                                        "funding-history": 6.666, // 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
                                    },
                                    post: {
                                        withdrawals: 1.3953,
                                        "transfer-out": 1.3953, // v2
                                        orders: 1.3953,
                                        "position/margin/auto-deposit-status": 1.3953,
                                        "position/margin/deposit-margin": 1.3953,
                                        "bullet-private": 1.3953,
                                    },
                                    delete: {
                                        "withdrawals/{withdrawalId}": 1.3953,
                                        "cancel/transfer-out": 1.3953,
                                        "orders/{orderId}": 1.3953, // 40 requests per 3 seconds = 14.333 per second => cost = 20/14.333 = 1.395
                                        orders: 6.666, // 9 requests per 3 seconds = 3 per second => cost = 20/3 = 6.666
                                        stopOrders: 1.3953,
                                    },
                                },
                            },
                            timeframes: {
                                "1m": "1min",
                                "3m": "3min",
                                "5m": "5min",
                                "15m": "15min",
                                "30m": "30min",
                                "1h": "1hour",
                                "2h": "2hour",
                                "4h": "4hour",
                                "6h": "6hour",
                                "8h": "8hour",
                                "12h": "12hour",
                                "1d": "1day",
                                "1w": "1week",
                            },
                            precisionMode: TICK_SIZE,
                            exceptions: {
                                exact: {
                                    "order not exist": OrderNotFound,
                                    "order not exist.": OrderNotFound, // duplicated error temporarily
                                    order_not_exist: OrderNotFound, // {"code":"order_not_exist","msg":"order_not_exist"} ¯\_(ツ)_/¯
                                    order_not_exist_or_not_allow_to_cancel:
                                        InvalidOrder, // {"code":"400100","msg":"order_not_exist_or_not_allow_to_cancel"}
                                    "Order size below the minimum requirement.":
                                        InvalidOrder, // {"code":"400100","msg":"Order size below the minimum requirement."}
                                    "The withdrawal amount is below the minimum requirement.":
                                        ExchangeError, // {"code":"400100","msg":"The withdrawal amount is below the minimum requirement."}
                                    "Unsuccessful! Exceeded the max. funds out-transfer limit":
                                        InsufficientFunds, // {"code":"200000","msg":"Unsuccessful! Exceeded the max. funds out-transfer limit"}
                                    400: BadRequest,
                                    401: AuthenticationError,
                                    403: NotSupported,
                                    404: NotSupported,
                                    405: NotSupported,
                                    429: RateLimitExceeded,
                                    500: ExchangeNotAvailable, // Internal Server Error -- We had a problem with our server. Try again later.
                                    503: ExchangeNotAvailable,
                                    101030: PermissionDenied, // {"code":"101030","msg":"You haven't yet enabled the margin trading"}
                                    103000: InvalidOrder, // {"code":"103000","msg":"Exceed the borrowing limit, the remaining borrowable amount is: 0USDT"}
                                    200004: InsufficientFunds,
                                    210014: InvalidOrder, // {"code":"210014","msg":"Exceeds the max. borrowing amount, the remaining amount you can borrow: 0USDT"}
                                    210021: InsufficientFunds, // {"code":"210021","msg":"Balance not enough"}
                                    230003: InsufficientFunds, // {"code":"230003","msg":"Balance insufficient!"}
                                    260100: InsufficientFunds, // {"code":"260100","msg":"account.noBalance"}
                                    300000: InvalidOrder,
                                    400000: BadSymbol,
                                    400001: AuthenticationError,
                                    400002: InvalidNonce,
                                    400003: AuthenticationError,
                                    400004: AuthenticationError,
                                    400005: AuthenticationError,
                                    400006: AuthenticationError,
                                    400007: AuthenticationError,
                                    400008: NotSupported,
                                    400100: BadRequest,
                                    400200: InvalidOrder, // {"code":"400200","msg":"Forbidden to place an order"}
                                    400350: InvalidOrder, // {"code":"400350","msg":"Upper limit for holding: 10,000USDT, you can still buy 10,000USDT worth of coin."}
                                    400370: InvalidOrder, // {"code":"400370","msg":"Max. price: 0.02500000000000000000"}
                                    400500: InvalidOrder, // {"code":"400500","msg":"Your located country/region is currently not supported for the trading of this token"}
                                    400600: BadSymbol, // {"code":"400600","msg":"validation.createOrder.symbolNotAvailable"}
                                    400760: InvalidOrder, // {"code":"400760","msg":"order price should be more than XX"}
                                    401000: BadRequest, // {"code":"401000","msg":"The interface has been deprecated"}
                                    411100: AccountSuspended,
                                    415000: BadRequest, // {"code":"415000","msg":"Unsupported Media Type"}
                                    500000: ExchangeNotAvailable, // {"code":"500000","msg":"Internal Server Error"}
                                    260220: InvalidAddress, // { "code": "260220", "msg": "deposit.address.not.exists" }
                                    900014: BadRequest, // {"code":"900014","msg":"Invalid chainId"}
                                },
                                broad: {
                                    "Exceeded the access frequency":
                                        RateLimitExceeded,
                                    "require more permission": PermissionDenied,
                                },
                            },
                            fees: {
                                trading: {
                                    tierBased: true,
                                    percentage: true,
                                    taker: this.parseNumber("0.001"),
                                    maker: this.parseNumber("0.001"),
                                    tiers: {
                                        taker: [
                                            [
                                                this.parseNumber("0"),
                                                this.parseNumber("0.001"),
                                            ],
                                            [
                                                this.parseNumber("50"),
                                                this.parseNumber("0.001"),
                                            ],
                                            [
                                                this.parseNumber("200"),
                                                this.parseNumber("0.0009"),
                                            ],
                                            [
                                                this.parseNumber("500"),
                                                this.parseNumber("0.0008"),
                                            ],
                                            [
                                                this.parseNumber("1000"),
                                                this.parseNumber("0.0007"),
                                            ],
                                            [
                                                this.parseNumber("2000"),
                                                this.parseNumber("0.0007"),
                                            ],
                                            [
                                                this.parseNumber("4000"),
                                                this.parseNumber("0.0006"),
                                            ],
                                            [
                                                this.parseNumber("8000"),
                                                this.parseNumber("0.0005"),
                                            ],
                                            [
                                                this.parseNumber("15000"),
                                                this.parseNumber("0.00045"),
                                            ],
                                            [
                                                this.parseNumber("25000"),
                                                this.parseNumber("0.0004"),
                                            ],
                                            [
                                                this.parseNumber("40000"),
                                                this.parseNumber("0.00035"),
                                            ],
                                            [
                                                this.parseNumber("60000"),
                                                this.parseNumber("0.0003"),
                                            ],
                                            [
                                                this.parseNumber("80000"),
                                                this.parseNumber("0.00025"),
                                            ],
                                        ],
                                        maker: [
                                            [
                                                this.parseNumber("0"),
                                                this.parseNumber("0.001"),
                                            ],
                                            [
                                                this.parseNumber("50"),
                                                this.parseNumber("0.0009"),
                                            ],
                                            [
                                                this.parseNumber("200"),
                                                this.parseNumber("0.0007"),
                                            ],
                                            [
                                                this.parseNumber("500"),
                                                this.parseNumber("0.0005"),
                                            ],
                                            [
                                                this.parseNumber("1000"),
                                                this.parseNumber("0.0003"),
                                            ],
                                            [
                                                this.parseNumber("2000"),
                                                this.parseNumber("0"),
                                            ],
                                            [
                                                this.parseNumber("4000"),
                                                this.parseNumber("0"),
                                            ],
                                            [
                                                this.parseNumber("8000"),
                                                this.parseNumber("0"),
                                            ],
                                            [
                                                this.parseNumber("15000"),
                                                this.parseNumber("-0.00005"),
                                            ],
                                            [
                                                this.parseNumber("25000"),
                                                this.parseNumber("-0.00005"),
                                            ],
                                            [
                                                this.parseNumber("40000"),
                                                this.parseNumber("-0.00005"),
                                            ],
                                            [
                                                this.parseNumber("60000"),
                                                this.parseNumber("-0.00005"),
                                            ],
                                            [
                                                this.parseNumber("80000"),
                                                this.parseNumber("-0.00005"),
                                            ],
                                        ],
                                    },
                                },
                                funding: {
                                    tierBased: false,
                                    percentage: false,
                                    withdraw: {},
                                    deposit: {},
                                },
                            },
                            commonCurrencies: {
                                HOT: "HOTNOW",
                                EDGE: "DADI", // https://github.com/ccxt/ccxt/issues/5756
                                WAX: "WAXP",
                                TRY: "Trias",
                                VAI: "VAIOT",
                            },
                            options: {
                                version: "v1",
                                symbolSeparator: "-",
                                fetchMyTradesMethod: "private_get_fills",
                                fetchMarkets: {
                                    fetchTickersFees: true,
                                },
                                // endpoint versions
                                versions: {
                                    public: {
                                        GET: {
                                            "currencies/{currency}": "v2",
                                            status: "v1",
                                            "market/orderbook/level2_20": "v1",
                                            "market/orderbook/level2_100": "v1",
                                            "market/orderbook/level{level}_{limit}":
                                                "v1",
                                        },
                                    },
                                    private: {
                                        GET: {
                                            "market/orderbook/level2": "v3",
                                            "market/orderbook/level3": "v3",
                                            "market/orderbook/level{level}":
                                                "v3",
                                            "deposit-addresses": "v1", // 'v1' for fetchDepositAddress, 'v2' for fetchDepositAddressesByNetwork
                                        },
                                        POST: {
                                            "accounts/inner-transfer": "v2",
                                            "accounts/sub-transfer": "v2",
                                            accounts: "v2",
                                        },
                                    },
                                    futuresPrivate: {
                                        GET: {
                                            "account-overview": "v1",
                                            positions: "v1",
                                        },
                                        POST: {
                                            "transfer-out": "v2",
                                        },
                                    },
                                    futuresPublic: {
                                        GET: {
                                            "level3/snapshot": "v2",
                                        },
                                    },
                                },
                                partner: {
                                    // the support for spot and future exchanges as separate settings
                                    spot: {
                                        id: "ccxt",
                                        key: "9e58cc35-5b5e-4133-92ec-166e3f077cb8",
                                    },
                                    future: {
                                        id: "ccxtfutures",
                                        key: "1b327198-f30c-4f14-a0ac-918871282f15",
                                    },
                                    // exchange-wide settings are also supported
                                    // 'id': 'ccxt'
                                    // 'key': '9e58cc35-5b5e-4133-92ec-166e3f077cb8',
                                },
                                accountsByType: {
                                    spot: "trade",
                                    margin: "margin",
                                    cross: "margin",
                                    isolated: "isolated",
                                    main: "main",
                                    funding: "main",
                                    future: "contract",
                                    swap: "contract",
                                    mining: "pool",
                                },
                                networks: {
                                    Native: "bech32",
                                    "BTC-Segwit": "btc",
                                    ERC20: "eth",
                                    BEP20: "bsc",
                                    TRC20: "trx",
                                    TERRA: "luna",
                                    BNB: "bsc",
                                    HRC20: "heco",
                                    HT: "heco",
                                },
                                networksById: {
                                    BEP20: "BSC",
                                },
                            },
                        });
                    }

                    nonce() {
                        return this.milliseconds();
                    }

                    async fetchTime(params = {}) {
                        /**
                         * @method
                         * @name kucoin#fetchTime
                         * @description fetches the current integer timestamp in milliseconds from the exchange server
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {int} the current integer timestamp in milliseconds from the exchange server
                         */
                        const response = await this.publicGetTimestamp(params);
                        //
                        //     {
                        //         "code":"200000",
                        //         "msg":"success",
                        //         "data":1546837113087
                        //     }
                        //
                        return this.safeInteger(response, "data");
                    }

                    async fetchStatus(params = {}) {
                        /**
                         * @method
                         * @name kucoin#fetchStatus
                         * @description the latest known information on the availability of the exchange API
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {object} a [status structure]{@link https://docs.ccxt.com/en/latest/manual.html#exchange-status-structure}
                         */
                        const response = await this.publicGetStatus(params);
                        //
                        //     {
                        //         "code":"200000",
                        //         "data":{
                        //             "status":"open", //open, close, cancelonly
                        //             "msg":"upgrade match engine" //remark for operation
                        //         }
                        //     }
                        //
                        const data = this.safeValue(response, "data", {});
                        const status = this.safeString(data, "status");
                        return {
                            status: status === "open" ? "ok" : "maintenance",
                            updated: undefined,
                            eta: undefined,
                            url: undefined,
                            info: response,
                        };
                    }

                    async fetchMarkets(params = {}) {
                        /**
                         * @method
                         * @name kucoin#fetchMarkets
                         * @description retrieves data on all markets for kucoin
                         * @param {object} params extra parameters specific to the exchange api endpoint
                         * @returns {[object]} an array of objects representing market data
                         */
                        const response = await this.publicGetSymbols(params);
                        //
                        //     {
                        //         "code": "200000",
                        //         "data": [
                        //             {
                        //                 "symbol": "XLM-USDT",
                        //                 "name": "XLM-USDT",
                        //                 "baseCurrency": "XLM",
                        //                 "quoteCurrency": "USDT",
                        //                 "feeCurrency": "USDT",
                        //                 "market": "USDS",
                        //                 "baseMinSize": "0.1",
                        //                 "quoteMinSize": "0.01",
                        //                 "baseMaxSize": "10000000000",
                        //                 "quoteMaxSize": "99999999",
                        //                 "baseIncrement": "0.0001",
                        //                 "quoteIncrement": "0.000001",
                        //                 "priceIncrement": "0.000001",
                        //                 "priceLimitRate": "0.1",
                        //                 "isMarginEnabled": true,
                        //                 "enableTrading": true
                        //             },
                        //         ]
                        //     }
                        //
                        const data = this.safeValue(response, "data");
                        const options = this.safeValue(
                            this.options,
                            "fetchMarkets",
                            {}
                        );
                        const fetchTickersFees = this.safeValue(
                            options,
                            "fetchTickersFees",
                            true
                        );
                        let tickersResponse = {};
                        if (fetchTickersFees) {
                            tickersResponse =
                                await this.publicGetMarketAllTickers(params);
                        }
                        //
                        //     {
                        //         "code": "200000",
                        //         "data": {
                        //             "time":1602832092060,
                        //             "ticker":[
                        //                 {
                        //                     "symbol": "BTC-USDT",   // symbol
                        //                     "symbolName":"BTC-USDT", // Name of trading pairs, it would change after renaming
                        //                     "buy": "11328.9",   // bestAsk
                        //                     "sell": "11329",    // bestBid
                        //                     "changeRate": "-0.0055",    // 24h change rate
                        //                     "changePrice": "-63.6", // 24h change price
                        //                     "high": "11610",    // 24h highest price
                        //                     "low": "11200", // 24h lowest price
                        //                     "vol": "2282.70993217", // 24h volume，the aggregated trading volume in BTC
                        //                     "volValue": "25984946.157790431",   // 24h total, the trading volume in quote currency of last 24 hours
                        //                     "last": "11328.9",  // last price
                        //                     "averagePrice": "11360.66065903",   // 24h average transaction price yesterday
                        //                     "takerFeeRate": "0.001",    // Basic Taker Fee
                        //                     "makerFeeRate": "0.001",    // Basic Maker Fee
                        //                     "takerCoefficient": "1",    // Taker Fee Coefficient
                        //                     "makerCoefficient": "1" // Maker Fee Coefficient
                        //                 }
                        //             ]
                        //         }
                        //     }
                        //
                        const tickersData = this.safeValue(
                            tickersResponse,
                            "data",
                            {}
                        );
                        const tickers = this.safeValue(
                            tickersData,
                            "ticker",
                            []
                        );
                        const tickersByMarketId = this.indexBy(
                            tickers,
                            "symbol"
                        );
                        const result = [];
                        for (let i = 0; i < data.length; i++) {
                            const market = data[i];
                            const id = this.safeString(market, "symbol");
                            const [baseId, quoteId] = id.split("-");
                            const base = this.safeCurrencyCode(baseId);
                            const quote = this.safeCurrencyCode(quoteId);
                            // const quoteIncrement = this.safeNumber (market, 'quoteIncrement');
                            const ticker = this.safeValue(
                                tickersByMarketId,
                                id,
                                {}
                            );
                            const makerFeeRate = this.safeString(
                                ticker,
                                "makerFeeRate"
                            );
                            const takerFeeRate = this.safeString(
                                ticker,
                                "takerFeeRate"
                            );
                            const makerCoefficient = this.safeString(
                                ticker,
                                "makerCoefficient"
                            );
                            const takerCoefficient = this.safeString(
                                ticker,
                                "takerCoefficient"
                            );
                            result.push({
                                id: id,
                                symbol: base + "/" + quote,
                                base: base,
                                quote: quote,
                                settle: undefined,
                                baseId: baseId,
                                quoteId: quoteId,
                                settleId: undefined,
                                type: "spot",
                                spot: true,
                                margin: this.safeValue(
                                    market,
                                    "isMarginEnabled"
                                ),
                                swap: false,
                                future: false,
                                option: false,
                                active: this.safeValue(market, "enableTrading"),
                                contract: false,
                                linear: undefined,
                                inverse: undefined,
                                taker: this.parseNumber(
                                    Precise.stringMul(
                                        takerFeeRate,
                                        takerCoefficient
                                    )
                                ),
                                maker: this.parseNumber(
                                    Precise.stringMul(
                                        makerFeeRate,
                                        makerCoefficient
                                    )
                                ),
                                contractSize: undefined,
                                expiry: undefined,
                                expiryDatetime: undefined,
                                strike: undefined,
                                optionType: undefined,
                                precision: {
                                    amount: this.safeNumber(
                                        market,
                                        "baseIncrement"
                                    ),
                                    price: this.safeNumber(
                                        market,
                                        "priceIncrement"
                                    ),
                                },
                                limits: {
                                    leverage: {
                                        min: undefined,
                                        max: undefined,
                                    },
                                    amount: {
                                        min: this.safeNumber(
                                            market,
                                            "baseMinSize"
                                        ),
                                        max: this.safeNumber(
                                            market,
                                            "baseMaxSize"
                                        ),
                                    },
                                    price: {
                                        min: undefined,
                                        max: undefined,
                                    },
                                    cost: {
                                        min: this.safeNumber(
                                            market,
                                            "quoteMinSize"
                                        ),
                                        max: this.safeNumber(
                                            market,
                                            "quoteMaxSize"
                                        ),
                                    },
                                },
                                info: market,
                            });
                        }
                        return result;
                    }

                    async fetchCurrencies(params = {}) {
                        /**
                         * @method
                         * @name kucoin#fetchCurrencies
                         * @description fetches all available currencies on an exchange
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {object} an associative dictionary of currencies
                         */
                        const response = await this.publicGetCurrencies(params);
                        //
                        //     {
                        //         "currency": "OMG",
                        //         "name": "OMG",
                        //         "fullName": "OmiseGO",
                        //         "precision": 8,
                        //         "confirms": 12,
                        //         "withdrawalMinSize": "4",
                        //         "withdrawalMinFee": "1.25",
                        //         "isWithdrawEnabled": false,
                        //         "isDepositEnabled": false,
                        //         "isMarginEnabled": false,
                        //         "isDebitEnabled": false
                        //     }
                        //
                        const data = this.safeValue(response, "data", []);
                        const result = {};
                        for (let i = 0; i < data.length; i++) {
                            const entry = data[i];
                            const id = this.safeString(entry, "currency");
                            const name = this.safeString(entry, "fullName");
                            const code = this.safeCurrencyCode(id);
                            const isWithdrawEnabled = this.safeValue(
                                entry,
                                "isWithdrawEnabled",
                                false
                            );
                            const isDepositEnabled = this.safeValue(
                                entry,
                                "isDepositEnabled",
                                false
                            );
                            const fee = this.safeNumber(
                                entry,
                                "withdrawalMinFee"
                            );
                            const active =
                                isWithdrawEnabled && isDepositEnabled;
                            result[code] = {
                                id: id,
                                name: name,
                                code: code,
                                precision: this.parseNumber(
                                    this.parsePrecision(
                                        this.safeString(entry, "precision")
                                    )
                                ),
                                info: entry,
                                active: active,
                                deposit: isDepositEnabled,
                                withdraw: isWithdrawEnabled,
                                fee: fee,
                                limits: this.limits,
                            };
                        }
                        return result;
                    }

                    async fetchAccounts(params = {}) {
                        /**
                         * @method
                         * @name kucoin#fetchAccounts
                         * @description fetch all the accounts associated with a profile
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {object} a dictionary of [account structures]{@link https://docs.ccxt.com/en/latest/manual.html#account-structure} indexed by the account type
                         */
                        const response = await this.privateGetAccounts(params);
                        //
                        //     {
                        //         code: "200000",
                        //         data: [
                        //             {
                        //                 balance: "0.00009788",
                        //                 available: "0.00009788",
                        //                 holds: "0",
                        //                 currency: "BTC",
                        //                 id: "5c6a4fd399a1d81c4f9cc4d0",
                        //                 type: "trade"
                        //             },
                        //             {
                        //                 balance: "0.00000001",
                        //                 available: "0.00000001",
                        //                 holds: "0",
                        //                 currency: "ETH",
                        //                 id: "5c6a49ec99a1d819392e8e9f",
                        //                 type: "trade"
                        //             }
                        //         ]
                        //     }
                        //
                        const data = this.safeValue(response, "data", []);
                        const result = [];
                        for (let i = 0; i < data.length; i++) {
                            const account = data[i];
                            const accountId = this.safeString(account, "id");
                            const currencyId = this.safeString(
                                account,
                                "currency"
                            );
                            const code = this.safeCurrencyCode(currencyId);
                            const type = this.safeString(account, "type"); // main or trade
                            result.push({
                                id: accountId,
                                type: type,
                                currency: code,
                                info: account,
                            });
                        }
                        return result;
                    }

                    async fetchTransactionFee(code, params = {}) {
                        /**
                         * @method
                         * @name kucoin#fetchTransactionFee
                         * @description *DEPRECATED* please use fetchDepositWithdrawFee instead
                         * @see https://docs.kucoin.com/#get-withdrawal-quotas
                         * @param {string} code unified currency code
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {object} a [fee structure]{@link https://docs.ccxt.com/en/latest/manual.html#fee-structure}
                         */
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const request = {
                            currency: currency["id"],
                        };
                        const networks = this.safeValue(
                            this.options,
                            "networks",
                            {}
                        );
                        let network = this.safeStringUpper2(
                            params,
                            "network",
                            "chain"
                        );
                        network = this.safeStringLower(
                            networks,
                            network,
                            network
                        );
                        if (network !== undefined) {
                            network = network.toLowerCase();
                            request["chain"] = network.toLowerCase();
                            params = this.omit(params, ["network", "chain"]);
                        }
                        const response = await this.privateGetWithdrawalsQuotas(
                            this.extend(request, params)
                        );
                        const data = response["data"];
                        const withdrawFees = {};
                        withdrawFees[code] = this.safeNumber(
                            data,
                            "withdrawMinFee"
                        );
                        return {
                            info: response,
                            withdraw: withdrawFees,
                            deposit: {},
                        };
                    }

                    async fetchDepositWithdrawFee(code, params = {}) {
                        /**
                         * @method
                         * @name kucoin#fetchDepositWithdrawFee
                         * @description fetch the fee for deposits and withdrawals
                         * @see https://docs.kucoin.com/#get-withdrawal-quotas
                         * @param {string} code unified currency code
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @param {string|undefined} params.network The chain of currency. This only apply for multi-chain currency, and there is no need for single chain currency; you can query the chain through the response of the GET /api/v2/currencies/{currency} interface
                         * @returns {object} a [fee structure]{@link https://docs.ccxt.com/en/latest/manual.html#fee-structure}
                         */
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const request = {
                            currency: currency["id"],
                        };
                        const networkCode = this.safeStringUpper(
                            params,
                            "network"
                        );
                        const network = this.networkCodeToId(networkCode, code);
                        if (network !== undefined) {
                            request["chain"] = network;
                            params = this.omit(params, ["network"]);
                        }
                        const response = await this.privateGetWithdrawalsQuotas(
                            this.extend(request, params)
                        );
                        //
                        //    {
                        //        "code": "200000",
                        //        "data": {
                        //            "currency": "USDT",
                        //            "limitBTCAmount": "1.00000000",
                        //            "usedBTCAmount": "0.00000000",
                        //            "remainAmount": "16548.072149",
                        //            "availableAmount": "0",
                        //            "withdrawMinFee": "25",
                        //            "innerWithdrawMinFee": "0",
                        //            "withdrawMinSize": "50",
                        //            "isWithdrawEnabled": true,
                        //            "precision": 6,
                        //            "chain": "ERC20"
                        //        }
                        //    }
                        //
                        const data = this.safeValue(response, "data");
                        return this.parseDepositWithdrawFee(data, currency);
                    }

                    parseDepositWithdrawFee(fee, currency = undefined) {
                        //
                        //    {
                        //        "currency": "USDT",
                        //        "limitBTCAmount": "1.00000000",
                        //        "usedBTCAmount": "0.00000000",
                        //        "remainAmount": "16548.072149",
                        //        "availableAmount": "0",
                        //        "withdrawMinFee": "25",
                        //        "innerWithdrawMinFee": "0",
                        //        "withdrawMinSize": "50",
                        //        "isWithdrawEnabled": true,
                        //        "precision": 6,
                        //        "chain": "ERC20"
                        //    }
                        //
                        const result = this.depositWithdrawFee(fee);
                        const isWithdrawEnabled = this.safeValue(
                            fee,
                            "isWithdrawEnabled"
                        );
                        if (isWithdrawEnabled) {
                            const networkId = this.safeString(fee, "chain");
                            const networkCode = this.networkIdToCode(
                                networkId,
                                this.safeString(currency, "code")
                            );
                            result["networks"][networkCode] = {
                                withdraw: {
                                    fee: this.safeNumber(fee, "withdrawMinFee"),
                                    percentage: undefined,
                                },
                                deposit: {
                                    fee: undefined,
                                    percentage: undefined,
                                },
                            };
                        }
                        return this.assignDefaultDepositWithdrawFees(result);
                    }

                    isFuturesMethod(methodName, params) {
                        //
                        // Helper
                        // @methodName (string): The name of the method
                        // @params (dict): The parameters passed into {methodName}
                        // @return: true if the method used is meant for futures trading, false otherwise
                        //
                        const defaultType = this.safeString2(
                            this.options,
                            methodName,
                            "defaultType",
                            "trade"
                        );
                        const requestedType = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        const accountsByType = this.safeValue(
                            this.options,
                            "accountsByType"
                        );
                        const type = this.safeString(
                            accountsByType,
                            requestedType
                        );
                        if (type === undefined) {
                            const keys = Object.keys(accountsByType);
                            throw new ExchangeError(
                                this.id +
                                    " isFuturesMethod() type must be one of " +
                                    keys.join(", ")
                            );
                        }
                        params = this.omit(params, "type");
                        return (
                            type === "contract" ||
                            type === "future" ||
                            type === "futures"
                        ); // * (type === 'futures') deprecated, use (type === 'future')
                    }

                    parseTicker(ticker, market = undefined) {
                        //
                        //     {
                        //         "symbol": "BTC-USDT",   // symbol
                        //         "symbolName":"BTC-USDT", // Name of trading pairs, it would change after renaming
                        //         "buy": "11328.9",   // bestAsk
                        //         "sell": "11329",    // bestBid
                        //         "changeRate": "-0.0055",    // 24h change rate
                        //         "changePrice": "-63.6", // 24h change price
                        //         "high": "11610",    // 24h highest price
                        //         "low": "11200", // 24h lowest price
                        //         "vol": "2282.70993217", // 24h volume，the aggregated trading volume in BTC
                        //         "volValue": "25984946.157790431",   // 24h total, the trading volume in quote currency of last 24 hours
                        //         "last": "11328.9",  // last price
                        //         "averagePrice": "11360.66065903",   // 24h average transaction price yesterday
                        //         "takerFeeRate": "0.001",    // Basic Taker Fee
                        //         "makerFeeRate": "0.001",    // Basic Maker Fee
                        //         "takerCoefficient": "1",    // Taker Fee Coefficient
                        //         "makerCoefficient": "1" // Maker Fee Coefficient
                        //     }
                        //
                        //     {
                        //         "trading": true,
                        //         "symbol": "KCS-BTC",
                        //         "buy": 0.00011,
                        //         "sell": 0.00012,
                        //         "sort": 100,
                        //         "volValue": 3.13851792584,   //total
                        //         "baseCurrency": "KCS",
                        //         "market": "BTC",
                        //         "quoteCurrency": "BTC",
                        //         "symbolCode": "KCS-BTC",
                        //         "datetime": 1548388122031,
                        //         "high": 0.00013,
                        //         "vol": 27514.34842,
                        //         "low": 0.0001,
                        //         "changePrice": -1.0e-5,
                        //         "changeRate": -0.0769,
                        //         "lastTradedPrice": 0.00012,
                        //         "board": 0,
                        //         "mark": 0
                        //     }
                        //
                        // market/ticker ws subscription
                        //
                        //     {
                        //         bestAsk: '62258.9',
                        //         bestAskSize: '0.38579986',
                        //         bestBid: '62258.8',
                        //         bestBidSize: '0.0078381',
                        //         price: '62260.7',
                        //         sequence: '1621383297064',
                        //         size: '0.00002841',
                        //         time: 1634641777363
                        //     }
                        //
                        let percentage = this.safeString(ticker, "changeRate");
                        if (percentage !== undefined) {
                            percentage = Precise.stringMul(percentage, "100");
                        }
                        let last = this.safeString2(
                            ticker,
                            "last",
                            "lastTradedPrice"
                        );
                        last = this.safeString(ticker, "price", last);
                        const marketId = this.safeString(ticker, "symbol");
                        market = this.safeMarket(marketId, market, "-");
                        const symbol = market["symbol"];
                        const baseVolume = this.safeString(ticker, "vol");
                        const quoteVolume = this.safeString(ticker, "volValue");
                        const timestamp = this.safeInteger2(
                            ticker,
                            "time",
                            "datetime"
                        );
                        return this.safeTicker(
                            {
                                symbol: symbol,
                                timestamp: timestamp,
                                datetime: this.iso8601(timestamp),
                                high: this.safeString(ticker, "high"),
                                low: this.safeString(ticker, "low"),
                                bid: this.safeString2(ticker, "buy", "bestBid"),
                                bidVolume: this.safeString(
                                    ticker,
                                    "bestBidSize"
                                ),
                                ask: this.safeString2(
                                    ticker,
                                    "sell",
                                    "bestAsk"
                                ),
                                askVolume: this.safeString(
                                    ticker,
                                    "bestAskSize"
                                ),
                                vwap: undefined,
                                open: this.safeString(ticker, "open"),
                                close: last,
                                last: last,
                                previousClose: undefined,
                                change: this.safeString(ticker, "changePrice"),
                                percentage: percentage,
                                average: this.safeString(
                                    ticker,
                                    "averagePrice"
                                ),
                                baseVolume: baseVolume,
                                quoteVolume: quoteVolume,
                                info: ticker,
                            },
                            market
                        );
                    }

                    async fetchTickers(symbols = undefined, params = {}) {
                        /**
                         * @method
                         * @name kucoin#fetchTickers
                         * @description fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
                         * @param {[string]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {object} an array of [ticker structures]{@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure}
                         */
                        await this.loadMarkets();
                        symbols = this.marketSymbols(symbols);
                        const response = await this.publicGetMarketAllTickers(
                            params
                        );
                        //
                        //     {
                        //         "code": "200000",
                        //         "data": {
                        //             "time":1602832092060,
                        //             "ticker":[
                        //                 {
                        //                     "symbol": "BTC-USDT",   // symbol
                        //                     "symbolName":"BTC-USDT", // Name of trading pairs, it would change after renaming
                        //                     "buy": "11328.9",   // bestAsk
                        //                     "sell": "11329",    // bestBid
                        //                     "changeRate": "-0.0055",    // 24h change rate
                        //                     "changePrice": "-63.6", // 24h change price
                        //                     "high": "11610",    // 24h highest price
                        //                     "low": "11200", // 24h lowest price
                        //                     "vol": "2282.70993217", // 24h volume，the aggregated trading volume in BTC
                        //                     "volValue": "25984946.157790431",   // 24h total, the trading volume in quote currency of last 24 hours
                        //                     "last": "11328.9",  // last price
                        //                     "averagePrice": "11360.66065903",   // 24h average transaction price yesterday
                        //                     "takerFeeRate": "0.001",    // Basic Taker Fee
                        //                     "makerFeeRate": "0.001",    // Basic Maker Fee
                        //                     "takerCoefficient": "1",    // Taker Fee Coefficient
                        //                     "makerCoefficient": "1" // Maker Fee Coefficient
                        //                 }
                        //             ]
                        //         }
                        //     }
                        //
                        const data = this.safeValue(response, "data", {});
                        const tickers = this.safeValue(data, "ticker", []);
                        const time = this.safeInteger(data, "time");
                        const result = {};
                        for (let i = 0; i < tickers.length; i++) {
                            tickers[i]["time"] = time;
                            const ticker = this.parseTicker(tickers[i]);
                            const symbol = this.safeString(ticker, "symbol");
                            if (symbol !== undefined) {
                                result[symbol] = ticker;
                            }
                        }
                        return this.filterByArray(result, "symbol", symbols);
                    }

                    async fetchTicker(symbol, params = {}) {
                        /**
                         * @method
                         * @name kucoin#fetchTicker
                         * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
                         * @param {string} symbol unified symbol of the market to fetch the ticker for
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure}
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const request = {
                            symbol: market["id"],
                        };
                        const response = await this.publicGetMarketStats(
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         "code": "200000",
                        //         "data": {
                        //             "time": 1602832092060,  // time
                        //             "symbol": "BTC-USDT",   // symbol
                        //             "buy": "11328.9",   // bestAsk
                        //             "sell": "11329",    // bestBid
                        //             "changeRate": "-0.0055",    // 24h change rate
                        //             "changePrice": "-63.6", // 24h change price
                        //             "high": "11610",    // 24h highest price
                        //             "low": "11200", // 24h lowest price
                        //             "vol": "2282.70993217", // 24h volume，the aggregated trading volume in BTC
                        //             "volValue": "25984946.157790431",   // 24h total, the trading volume in quote currency of last 24 hours
                        //             "last": "11328.9",  // last price
                        //             "averagePrice": "11360.66065903",   // 24h average transaction price yesterday
                        //             "takerFeeRate": "0.001",    // Basic Taker Fee
                        //             "makerFeeRate": "0.001",    // Basic Maker Fee
                        //             "takerCoefficient": "1",    // Taker Fee Coefficient
                        //             "makerCoefficient": "1" // Maker Fee Coefficient
                        //         }
                        //     }
                        //
                        return this.parseTicker(response["data"], market);
                    }

                    parseOHLCV(ohlcv, market = undefined) {
                        //
                        //     [
                        //         "1545904980",             // Start time of the candle cycle
                        //         "0.058",                  // opening price
                        //         "0.049",                  // closing price
                        //         "0.058",                  // highest price
                        //         "0.049",                  // lowest price
                        //         "0.018",                  // base volume
                        //         "0.000945",               // quote volume
                        //     ]
                        //
                        return [
                            this.safeTimestamp(ohlcv, 0),
                            this.safeNumber(ohlcv, 1),
                            this.safeNumber(ohlcv, 3),
                            this.safeNumber(ohlcv, 4),
                            this.safeNumber(ohlcv, 2),
                            this.safeNumber(ohlcv, 5),
                        ];
                    }

                    async fetchOHLCV(
                        symbol,
                        timeframe = "1m",
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#fetchOHLCV
                         * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
                         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
                         * @param {string} timeframe the length of time each candle represents
                         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
                         * @param {int|undefined} limit the maximum amount of candles to fetch
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const marketId = market["id"];
                        const request = {
                            symbol: marketId,
                            type: this.timeframes[timeframe],
                        };
                        const duration = this.parseTimeframe(timeframe) * 1000;
                        let endAt = this.milliseconds(); // required param
                        if (since !== undefined) {
                            request["startAt"] = parseInt(
                                Math.floor(since / 1000)
                            );
                            if (limit === undefined) {
                                // https://docs.kucoin.com/#get-klines
                                // https://docs.kucoin.com/#details
                                // For each query, the system would return at most 1500 pieces of data.
                                // To obtain more data, please page the data by time.
                                limit = this.safeInteger(
                                    this.options,
                                    "fetchOHLCVLimit",
                                    1500
                                );
                            }
                            endAt = this.sum(since, limit * duration);
                        } else if (limit !== undefined) {
                            since = endAt - limit * duration;
                            request["startAt"] = parseInt(
                                Math.floor(since / 1000)
                            );
                        }
                        request["endAt"] = parseInt(Math.floor(endAt / 1000));
                        const response = await this.publicGetMarketCandles(
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         "code":"200000",
                        //         "data":[
                        //             ["1591517700","0.025078","0.025069","0.025084","0.025064","18.9883256","0.4761861079404"],
                        //             ["1591516800","0.025089","0.025079","0.025089","0.02506","99.4716622","2.494143499081"],
                        //             ["1591515900","0.025079","0.02509","0.025091","0.025068","59.83701271","1.50060885172798"],
                        //         ]
                        //     }
                        //
                        const data = this.safeValue(response, "data", []);
                        return this.parseOHLCVs(
                            data,
                            market,
                            timeframe,
                            since,
                            limit
                        );
                    }

                    async createDepositAddress(code, params = {}) {
                        /**
                         * @method
                         * @name kucoin#createDepositAddress
                         * @see https://docs.kucoin.com/#create-deposit-address
                         * @description create a currency deposit address
                         * @param {string} code unified currency code of the currency for the deposit address
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @param {string|undefined} params.network the blockchain network name
                         * @returns {object} an [address structure]{@link https://docs.ccxt.com/en/latest/manual.html#address-structure}
                         */
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const request = {
                            currency: currency["id"],
                        };
                        const networks = this.safeValue(
                            this.options,
                            "networks",
                            {}
                        );
                        let network = this.safeStringUpper2(
                            params,
                            "chain",
                            "network"
                        );
                        network = this.safeStringLower(
                            networks,
                            network,
                            network
                        );
                        if (network !== undefined) {
                            network = network.toLowerCase();
                            request["chain"] = network;
                            params = this.omit(params, ["chain", "network"]);
                        }
                        const response = await this.privatePostDepositAddresses(
                            this.extend(request, params)
                        );
                        // BCH {"code":"200000","data":{"address":"bitcoincash:qza3m4nj9rx7l9r0cdadfqxts6f92shvhvr5ls4q7z","memo":""}}
                        // BTC {"code":"200000","data":{"address":"36SjucKqQpQSvsak9A7h6qzFjrVXpRNZhE","memo":""}}
                        const data = this.safeValue(response, "data", {});
                        let address = this.safeString(data, "address");
                        // BCH/BSV is returned with a "bitcoincash:" prefix, which we cut off here and only keep the address
                        if (address !== undefined) {
                            address = address.replace("bitcoincash:", "");
                        }
                        const tag = this.safeString(data, "memo");
                        if (code !== "NIM") {
                            // contains spaces
                            this.checkAddress(address);
                        }
                        return {
                            info: response,
                            currency: code,
                            network: this.safeString(data, "chain"),
                            address: address,
                            tag: tag,
                        };
                    }

                    async fetchDepositAddress(code, params = {}) {
                        /**
                         * @method
                         * @name kucoin#fetchDepositAddress
                         * @description fetch the deposit address for a currency associated with this account
                         * @param {string} code unified currency code
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @param {string|undefined} params.network the blockchain network name
                         * @returns {object} an [address structure]{@link https://docs.ccxt.com/en/latest/manual.html#address-structure}
                         */
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const request = {
                            currency: currency["id"],
                            // for USDT - OMNI, ERC20, TRC20, default is ERC20
                            // for BTC - Native, Segwit, TRC20, the parameters are bech32, btc, trx, default is Native
                            // 'chain': 'ERC20', // optional
                        };
                        // same as for withdraw
                        const networks = this.safeValue(
                            this.options,
                            "networks",
                            {}
                        );
                        let network = this.safeStringUpper2(
                            params,
                            "chain",
                            "network"
                        ); // this line allows the user to specify either ERC20 or ETH
                        network = this.safeStringLower(
                            networks,
                            network,
                            network
                        ); // handle ERC20>ETH alias
                        if (network !== undefined) {
                            network = network.toLowerCase();
                            request["chain"] = network;
                            params = this.omit(params, ["chain", "network"]);
                        }
                        const version =
                            this.options["versions"]["private"]["GET"][
                                "deposit-addresses"
                            ];
                        this.options["versions"]["private"]["GET"][
                            "deposit-addresses"
                        ] = "v1";
                        const response = await this.privateGetDepositAddresses(
                            this.extend(request, params)
                        );
                        // BCH {"code":"200000","data":{"address":"bitcoincash:qza3m4nj9rx7l9r0cdadfqxts6f92shvhvr5ls4q7z","memo":""}}
                        // BTC {"code":"200000","data":{"address":"36SjucKqQpQSvsak9A7h6qzFjrVXpRNZhE","memo":""}}
                        this.options["versions"]["private"]["GET"][
                            "deposit-addresses"
                        ] = version;
                        const data = this.safeValue(response, "data", {});
                        return this.parseDepositAddress(data, currency);
                    }

                    parseDepositAddress(depositAddress, currency = undefined) {
                        const address = this.safeString(
                            depositAddress,
                            "address"
                        );
                        const code = currency["id"];
                        if (code !== "NIM") {
                            // contains spaces
                            this.checkAddress(address);
                        }
                        return {
                            info: depositAddress,
                            currency: code,
                            address: address,
                            tag: this.safeString(depositAddress, "memo"),
                            network: this.safeString(depositAddress, "chain"),
                        };
                    }

                    async fetchDepositAddressesByNetwork(code, params = {}) {
                        /**
                         * @method
                         * @name kucoin#fetchDepositAddressesByNetwork
                         * @see https://docs.kucoin.com/#get-deposit-addresses-v2
                         * @description fetch the deposit address for a currency associated with this account
                         * @param {string} code unified currency code
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {object} an array of [address structures]{@link https://docs.ccxt.com/en/latest/manual.html#address-structure}
                         */
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const request = {
                            currency: currency["id"],
                        };
                        const version =
                            this.options["versions"]["private"]["GET"][
                                "deposit-addresses"
                            ];
                        this.options["versions"]["private"]["GET"][
                            "deposit-addresses"
                        ] = "v2";
                        const response = await this.privateGetDepositAddresses(
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         "code": "200000",
                        //         "data": [
                        //             {
                        //                 "address": "fr1qvus7d4d5fgxj5e7zvqe6yhxd7txm95h2and69r",
                        //                 "memo": "",
                        //                 "chain": "BTC-Segwit",
                        //                 "contractAddress": ""
                        //             },
                        //             {"address":"37icNMEWbiF8ZkwUMxmfzMxi2A1MQ44bMn","memo":"","chain":"BTC","contractAddress":""},
                        //             {"address":"Deposit temporarily blocked","memo":"","chain":"TRC20","contractAddress":""}
                        //         ]
                        //     }
                        //
                        this.options["versions"]["private"]["GET"][
                            "deposit-addresses"
                        ] = version;
                        const data = this.safeValue(response, "data", []);
                        return this.parseDepositAddressesByNetwork(
                            data,
                            currency
                        );
                    }

                    parseDepositAddressesByNetwork(
                        depositAddresses,
                        currency = undefined
                    ) {
                        //
                        //     [
                        //         {
                        //             "address": "fr1qvus7d4d5fgxj5e7zvqe6yhxd7txm95h2and69r",
                        //             "memo": "",
                        //             "chain": "BTC-Segwit",
                        //             "contractAddress": ""
                        //         },
                        //         ...
                        //     ]
                        //
                        const result = [];
                        for (let i = 0; i < depositAddresses.length; i++) {
                            const entry = depositAddresses[i];
                            result.push({
                                info: entry,
                                currency: this.safeCurrencyCode(
                                    currency["id"],
                                    currency
                                ),
                                network: this.safeString(entry, "chain"),
                                address: this.safeString(entry, "address"),
                                tag: this.safeString(entry, "memo"),
                            });
                        }
                        return result;
                    }

                    async fetchOrderBook(
                        symbol,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#fetchOrderBook
                         * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
                         * @param {string} symbol unified symbol of the market to fetch the order book for
                         * @param {int|undefined} limit the maximum amount of order book entries to return
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure} indexed by market symbols
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const level = this.safeInteger(params, "level", 2);
                        const request = { symbol: market["id"] };
                        let method = "publicGetMarketOrderbookLevelLevelLimit";
                        const isAuthenticated =
                            this.checkRequiredCredentials(false);
                        let response = undefined;
                        if (!isAuthenticated || limit !== undefined) {
                            if (level === 2) {
                                request["level"] = level;
                                if (limit !== undefined) {
                                    if (limit === 20 || limit === 100) {
                                        request["limit"] = limit;
                                    } else {
                                        throw new ExchangeError(
                                            this.id +
                                                " fetchOrderBook() limit argument must be 20 or 100"
                                        );
                                    }
                                }
                                request["limit"] = limit ? limit : 100;
                            }
                        } else {
                            method = "privateGetMarketOrderbookLevel2"; // recommended (v3)
                        }
                        response = await this[method](
                            this.extend(request, params)
                        );
                        //
                        // public (v1) market/orderbook/level2_20 and market/orderbook/level2_100
                        //
                        //     {
                        //         "sequence": "3262786978",
                        //         "time": 1550653727731,
                        //         "bids": [
                        //             ["6500.12", "0.45054140"],
                        //             ["6500.11", "0.45054140"],
                        //         ],
                        //         "asks": [
                        //             ["6500.16", "0.57753524"],
                        //             ["6500.15", "0.57753524"],
                        //         ]
                        //     }
                        //
                        // private (v3) market/orderbook/level2
                        //
                        //     {
                        //         "sequence": "3262786978",
                        //         "time": 1550653727731,
                        //         "bids": [
                        //             ["6500.12", "0.45054140"],
                        //             ["6500.11", "0.45054140"],
                        //         ],
                        //         "asks": [
                        //             ["6500.16", "0.57753524"],
                        //             ["6500.15", "0.57753524"],
                        //         ]
                        //     }
                        //
                        const data = this.safeValue(response, "data", {});
                        const timestamp = this.safeInteger(data, "time");
                        const orderbook = this.parseOrderBook(
                            data,
                            market["symbol"],
                            timestamp,
                            "bids",
                            "asks",
                            level - 2,
                            level - 1
                        );
                        orderbook["nonce"] = this.safeInteger(data, "sequence");
                        return orderbook;
                    }

                    async createOrder(
                        symbol,
                        type,
                        side,
                        amount,
                        price = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#createOrder
                         * @description Create an order on the exchange
                         * @param {string} symbol Unified CCXT market symbol
                         * @param {string} type 'limit' or 'market'
                         * @param {string} side 'buy' or 'sell'
                         * @param {float} amount the amount of currency to trade
                         * @param {float} price *ignored in "market" orders* the price at which the order is to be fullfilled at in units of the quote currency
                         * @param {object} params  Extra parameters specific to the exchange API endpoint
                         * @param {string} params.clientOid client order id, defaults to uuid if not passed
                         * @param {string} params.remark remark for the order, length cannot exceed 100 utf8 characters
                         * @param {string} params.tradeType 'TRADE', // TRADE, MARGIN_TRADE // not used with margin orders
                         * limit orders ---------------------------------------------------
                         * @param {string} params.timeInForce GTC, GTT, IOC, or FOK, default is GTC, limit orders only
                         * @param {float} params.cancelAfter long, // cancel after n seconds, requires timeInForce to be GTT
                         * @param {string} params.postOnly Post only flag, invalid when timeInForce is IOC or FOK
                         * @param {bool} params.hidden false, // Order will not be displayed in the order book
                         * @param {bool} params.iceberg false, // Only a portion of the order is displayed in the order book
                         * @param {string} params.visibleSize this.amountToPrecision (symbol, visibleSize), // The maximum visible size of an iceberg order
                         * market orders --------------------------------------------------
                         * @param {string} params.funds // Amount of quote currency to use
                         * stop orders ----------------------------------------------------
                         * @param {string} params.stop  Either loss or entry, the default is loss. Requires stopPrice to be defined
                         * @param {float} params.stopPrice The price at which a trigger order is triggered at
                         * margin orders --------------------------------------------------
                         * @param {float} params.leverage Leverage size of the order
                         * @param {string} params.stp '', // self trade prevention, CN, CO, CB or DC
                         * @param {string} params.marginMode 'cross', // cross (cross mode) and isolated (isolated mode), set to cross by default, the isolated mode will be released soon, stay tuned
                         * @param {bool} params.autoBorrow false, // The system will first borrow you funds at the optimal interest rate and then place an order for you
                         * @returns {object} an [order structure]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        await this.loadMarkets();
                        const marketId = this.marketId(symbol);
                        // required param, cannot be used twice
                        const clientOrderId = this.safeString2(
                            params,
                            "clientOid",
                            "clientOrderId",
                            this.uuid()
                        );
                        params = this.omit(params, [
                            "clientOid",
                            "clientOrderId",
                        ]);
                        const request = {
                            clientOid: clientOrderId,
                            side: side,
                            symbol: marketId,
                            type: type, // limit or market
                        };
                        const quoteAmount = this.safeNumber2(
                            params,
                            "cost",
                            "funds"
                        );
                        let amountString = undefined;
                        let costString = undefined;
                        if (type === "market") {
                            if (quoteAmount !== undefined) {
                                params = this.omit(params, ["cost", "funds"]);
                                // kucoin uses base precision even for quote values
                                costString = this.amountToPrecision(
                                    symbol,
                                    quoteAmount
                                );
                                request["funds"] = costString;
                            } else {
                                amountString = this.amountToPrecision(
                                    symbol,
                                    amount
                                );
                                request["size"] = this.amountToPrecision(
                                    symbol,
                                    amount
                                );
                            }
                        } else {
                            amountString = this.amountToPrecision(
                                symbol,
                                amount
                            );
                            request["size"] = amountString;
                            request["price"] = this.priceToPrecision(
                                symbol,
                                price
                            );
                        }
                        const stopLossPrice = this.safeValue(
                            params,
                            "stopLossPrice"
                        );
                        // default is take profit
                        const takeProfitPrice = this.safeValue2(
                            params,
                            "takeProfitPrice",
                            "stopPrice"
                        );
                        const isStopLoss = stopLossPrice !== undefined;
                        const isTakeProfit = takeProfitPrice !== undefined;
                        if (isStopLoss && isTakeProfit) {
                            throw new ExchangeError(
                                this.id +
                                    " createOrder() stopLossPrice and takeProfitPrice cannot both be defined"
                            );
                        }
                        const tradeType = this.safeString(params, "tradeType");
                        params = this.omit(params, [
                            "stopLossPrice",
                            "takeProfitPrice",
                            "stopPrice",
                        ]);
                        let method = "privatePostOrders";
                        if (isStopLoss || isTakeProfit) {
                            request["stop"] = isStopLoss ? "entry" : "loss";
                            const triggerPrice = isStopLoss
                                ? stopLossPrice
                                : takeProfitPrice;
                            request["stopPrice"] = this.priceToPrecision(
                                symbol,
                                triggerPrice
                            );
                            method = "privatePostStopOrder";
                        } else if (tradeType === "MARGIN_TRADE") {
                            method = "privatePostMarginOrder";
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         code: '200000',
                        //         data: {
                        //             "orderId": "5bd6e9286d99522a52e458de"
                        //         }
                        //    }
                        //
                        const data = this.safeValue(response, "data", {});
                        const timestamp = this.milliseconds();
                        const id = this.safeString(data, "orderId");
                        const order = {
                            id: id,
                            clientOrderId: clientOrderId,
                            info: data,
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            lastTradeTimestamp: undefined,
                            symbol: symbol,
                            type: type,
                            side: side,
                            price: price,
                            amount: this.parseNumber(amountString),
                            cost: this.parseNumber(costString),
                            average: undefined,
                            filled: undefined,
                            remaining: undefined,
                            status: undefined,
                            fee: undefined,
                            trades: undefined,
                        };
                        return order;
                    }

                    async cancelOrder(id, symbol = undefined, params = {}) {
                        /**
                         * @method
                         * @name kucoin#cancelOrder
                         * @description cancels an open order
                         * @param {string} id order id
                         * @param {string|undefined} symbol unified symbol of the market the order was made in
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @param {bool} params.stop True if cancelling a stop order
                         * @returns Response from the exchange
                         */
                        await this.loadMarkets();
                        const request = {};
                        const clientOrderId = this.safeString2(
                            params,
                            "clientOid",
                            "clientOrderId"
                        );
                        const stop = this.safeValue(params, "stop");
                        let method = "privateDeleteOrdersOrderId";
                        if (clientOrderId !== undefined) {
                            request["clientOid"] = clientOrderId;
                            if (stop) {
                                method =
                                    "privateDeleteStopOrderCancelOrderByClientOid";
                            } else {
                                method =
                                    "privateDeleteOrderClientOrderClientOid";
                            }
                        } else {
                            if (stop) {
                                method = "privateDeleteStopOrderOrderId";
                            }
                            request["orderId"] = id;
                        }
                        params = this.omit(params, [
                            "clientOid",
                            "clientOrderId",
                            "stop",
                        ]);
                        return await this[method](this.extend(request, params));
                    }

                    async cancelAllOrders(symbol = undefined, params = {}) {
                        /**
                         * @method
                         * @name kucoin#cancelAllOrders
                         * @description cancel all open orders
                         * @param {string|undefined} symbol unified market symbol, only orders in the market of this symbol are cancelled when symbol is not undefined
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @param {bool} params.stop true if cancelling all stop orders
                         * @param {string} params.tradeType The type of trading, "TRADE" for Spot Trading, "MARGIN_TRADE" for Margin Trading
                         * @param {string} params.orderIds *stop orders only* Comma seperated order IDs
                         * @returns Response from the exchange
                         */
                        await this.loadMarkets();
                        const request = {};
                        let market = undefined;
                        if (symbol !== undefined) {
                            market = this.market(symbol);
                            request["symbol"] = market["id"];
                        }
                        let method = "privateDeleteOrders";
                        const stop = this.safeValue(params, "stop");
                        if (stop) {
                            method = "privateDeleteStopOrderCancel";
                        }
                        return await this[method](this.extend(request, params));
                    }

                    async fetchOrdersByStatus(
                        status,
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#fetchOrdersByStatus
                         * @description fetch a list of orders
                         * @param {string} status *not used for stop orders* 'open' or 'closed'
                         * @param {string|undefined} symbol unified market symbol
                         * @param {int|undefined} since timestamp in ms of the earliest order
                         * @param {int|undefined} limit max number of orders to return
                         * @param {object} params exchange specific params
                         * @param {int|undefined} params.until end time in ms
                         * @param {bool|undefined} params.stop true if fetching stop orders
                         * @param {string|undefined} params.side buy or sell
                         * @param {string|undefined} params.type limit, market, limit_stop or market_stop
                         * @param {string|undefined} params.tradeType TRADE for spot trading, MARGIN_TRADE for Margin Trading
                         * @param {int|undefined} params.currentPage *stop orders only* current page
                         * @param {string|undefined} params.orderIds *stop orders only* comma seperated order ID list
                         * @returns An [array of order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        await this.loadMarkets();
                        let lowercaseStatus = status.toLowerCase();
                        if (lowercaseStatus === "open") {
                            lowercaseStatus = "active";
                        } else if (lowercaseStatus === "closed") {
                            lowercaseStatus = "done";
                        }
                        const request = {
                            status: lowercaseStatus,
                        };
                        let market = undefined;
                        if (symbol !== undefined) {
                            market = this.market(symbol);
                            request["symbol"] = market["id"];
                        }
                        if (since !== undefined) {
                            request["startAt"] = since;
                        }
                        if (limit !== undefined) {
                            request["pageSize"] = limit;
                        }
                        const until = this.safeInteger2(
                            params,
                            "until",
                            "till"
                        );
                        if (until) {
                            request["endAt"] = until;
                        }
                        const stop = this.safeValue(params, "stop");
                        params = this.omit(params, ["stop", "till", "until"]);
                        let method = "privateGetOrders";
                        if (stop) {
                            method = "privateGetStopOrder";
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         code: '200000',
                        //         data: {
                        //             "currentPage": 1,
                        //             "pageSize": 1,
                        //             "totalNum": 153408,
                        //             "totalPage": 153408,
                        //             "items": [
                        //                 {
                        //                     "id": "5c35c02703aa673ceec2a168",   //orderid
                        //                     "symbol": "BTC-USDT",   //symbol
                        //                     "opType": "DEAL",      // operation type,deal is pending order,cancel is cancel order
                        //                     "type": "limit",       // order type,e.g. limit,markrt,stop_limit.
                        //                     "side": "buy",         // transaction direction,include buy and sell
                        //                     "price": "10",         // order price
                        //                     "size": "2",           // order quantity
                        //                     "funds": "0",          // order funds
                        //                     "dealFunds": "0.166",  // deal funds
                        //                     "dealSize": "2",       // deal quantity
                        //                     "fee": "0",            // fee
                        //                     "feeCurrency": "USDT", // charge fee currency
                        //                     "stp": "",             // self trade prevention,include CN,CO,DC,CB
                        //                     "stop": "",            // stop type
                        //                     "stopTriggered": false,  // stop order is triggered
                        //                     "stopPrice": "0",      // stop price
                        //                     "timeInForce": "GTC",  // time InForce,include GTC,GTT,IOC,FOK
                        //                     "postOnly": false,     // postOnly
                        //                     "hidden": false,       // hidden order
                        //                     "iceberg": false,      // iceberg order
                        //                     "visibleSize": "0",    // display quantity for iceberg order
                        //                     "cancelAfter": 0,      // cancel orders time，requires timeInForce to be GTT
                        //                     "channel": "IOS",      // order source
                        //                     "clientOid": "",       // user-entered order unique mark
                        //                     "remark": "",          // remark
                        //                     "tags": "",            // tag order source
                        //                     "isActive": false,     // status before unfilled or uncancelled
                        //                     "cancelExist": false,   // order cancellation transaction record
                        //                     "createdAt": 1547026471000  // time
                        //                 },
                        //             ]
                        //         }
                        //    }
                        const responseData = this.safeValue(
                            response,
                            "data",
                            {}
                        );
                        const orders = this.safeValue(
                            responseData,
                            "items",
                            []
                        );
                        return this.parseOrders(orders, market, since, limit);
                    }

                    async fetchClosedOrders(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#fetchClosedOrders
                         * @description fetches information on multiple closed orders made by the user
                         * @param {string|undefined} symbol unified market symbol of the market orders were made in
                         * @param {int|undefined} since the earliest time in ms to fetch orders for
                         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @param {int|undefined} params.till end time in ms
                         * @param {string|undefined} params.side buy or sell
                         * @param {string|undefined} params.type limit, market, limit_stop or market_stop
                         * @param {string|undefined} params.tradeType TRADE for spot trading, MARGIN_TRADE for Margin Trading
                         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        return await this.fetchOrdersByStatus(
                            "done",
                            symbol,
                            since,
                            limit,
                            params
                        );
                    }

                    async fetchOpenOrders(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#fetchOpenOrders
                         * @description fetch all unfilled currently open orders
                         * @param {string|undefined} symbol unified market symbol
                         * @param {int|undefined} since the earliest time in ms to fetch open orders for
                         * @param {int|undefined} limit the maximum number of  open orders structures to retrieve
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @param {int} params.till end time in ms
                         * @param {bool} params.stop true if fetching stop orders
                         * @param {string} params.side buy or sell
                         * @param {string} params.type limit, market, limit_stop or market_stop
                         * @param {string} params.tradeType TRADE for spot trading, MARGIN_TRADE for Margin Trading
                         * @param {int} params.currentPage *stop orders only* current page
                         * @param {string} params.orderIds *stop orders only* comma seperated order ID list
                         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        return await this.fetchOrdersByStatus(
                            "active",
                            symbol,
                            since,
                            limit,
                            params
                        );
                    }

                    async fetchOrder(id, symbol = undefined, params = {}) {
                        /**
                         * @method
                         * @name kucoin#fetchOrder
                         * @description fetch an order
                         * @param {string} id Order id
                         * @param {string} symbol not sent to exchange except for stop orders with clientOid, but used internally by CCXT to filter
                         * @param {object} params exchange specific parameters
                         * @param {bool} params.stop true if fetching a stop order
                         * @param {bool} params.clientOid unique order id created by users to identify their orders
                         * @returns An [order structure]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        await this.loadMarkets();
                        const request = {};
                        const clientOrderId = this.safeString2(
                            params,
                            "clientOid",
                            "clientOrderId"
                        );
                        const stop = this.safeValue(params, "stop");
                        let market = undefined;
                        if (symbol !== undefined) {
                            market = this.market(symbol);
                        }
                        params = this.omit(params, "stop");
                        let method = "privateGetOrdersOrderId";
                        if (clientOrderId !== undefined) {
                            request["clientOid"] = clientOrderId;
                            if (stop) {
                                method =
                                    "privateGetStopOrderQueryOrderByClientOid";
                                if (symbol !== undefined) {
                                    request["symbol"] = market["id"];
                                }
                            } else {
                                method = "privateGetOrderClientOrderClientOid";
                            }
                        } else {
                            // a special case for undefined ids
                            // otherwise a wrong endpoint for all orders will be triggered
                            // https://github.com/ccxt/ccxt/issues/7234
                            if (id === undefined) {
                                throw new InvalidOrder(
                                    this.id +
                                        " fetchOrder() requires an order id"
                                );
                            }
                            if (stop) {
                                method = "privateGetStopOrderOrderId";
                            }
                            request["orderId"] = id;
                        }
                        params = this.omit(params, [
                            "clientOid",
                            "clientOrderId",
                        ]);
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        let responseData = this.safeValue(response, "data");
                        if (
                            method ===
                            "privateGetStopOrderQueryOrderByClientOid"
                        ) {
                            responseData = this.safeValue(responseData, 0);
                        }
                        return this.parseOrder(responseData, market);
                    }

                    parseOrder(order, market = undefined) {
                        //
                        // fetchOpenOrders, fetchClosedOrders
                        //
                        //     {
                        //         "id": "5c35c02703aa673ceec2a168",   //orderid
                        //         "symbol": "BTC-USDT",   //symbol
                        //         "opType": "DEAL",      // operation type,deal is pending order,cancel is cancel order
                        //         "type": "limit",       // order type,e.g. limit,markrt,stop_limit.
                        //         "side": "buy",         // transaction direction,include buy and sell
                        //         "price": "10",         // order price
                        //         "size": "2",           // order quantity
                        //         "funds": "0",          // order funds
                        //         "dealFunds": "0.166",  // deal funds
                        //         "dealSize": "2",       // deal quantity
                        //         "fee": "0",            // fee
                        //         "feeCurrency": "USDT", // charge fee currency
                        //         "stp": "",             // self trade prevention,include CN,CO,DC,CB
                        //         "stop": "",            // stop type
                        //         "stopTriggered": false,  // stop order is triggered
                        //         "stopPrice": "0",      // stop price
                        //         "timeInForce": "GTC",  // time InForce,include GTC,GTT,IOC,FOK
                        //         "postOnly": false,     // postOnly
                        //         "hidden": false,       // hidden order
                        //         "iceberg": false,      // iceberg order
                        //         "visibleSize": "0",    // display quantity for iceberg order
                        //         "cancelAfter": 0,      // cancel orders time，requires timeInForce to be GTT
                        //         "channel": "IOS",      // order source
                        //         "clientOid": "",       // user-entered order unique mark
                        //         "remark": "",          // remark
                        //         "tags": "",            // tag order source
                        //         "isActive": false,     // status before unfilled or uncancelled
                        //         "cancelExist": false,   // order cancellation transaction record
                        //         "createdAt": 1547026471000  // time
                        //     }
                        //
                        const marketId = this.safeString(order, "symbol");
                        const symbol = this.safeSymbol(marketId, market, "-");
                        const orderId = this.safeString(order, "id");
                        const type = this.safeString(order, "type");
                        const timestamp = this.safeInteger(order, "createdAt");
                        const datetime = this.iso8601(timestamp);
                        const price = this.safeString(order, "price");
                        // price is zero for market order
                        // omitZero is called in safeOrder2
                        const side = this.safeString(order, "side");
                        const feeCurrencyId = this.safeString(
                            order,
                            "feeCurrency"
                        );
                        const feeCurrency =
                            this.safeCurrencyCode(feeCurrencyId);
                        const feeCost = this.safeNumber(order, "fee");
                        const amount = this.safeString(order, "size");
                        const filled = this.safeString(order, "dealSize");
                        const cost = this.safeString(order, "dealFunds");
                        // bool
                        const isActive = this.safeValue(
                            order,
                            "isActive",
                            false
                        );
                        const cancelExist = this.safeValue(
                            order,
                            "cancelExist",
                            false
                        );
                        const stop = this.safeString(order, "stop");
                        const stopTriggered = this.safeValue(
                            order,
                            "stopTriggered",
                            false
                        );
                        let status = isActive ? "open" : "closed";
                        const cancelExistWithStop =
                            cancelExist ||
                            (!isActive && stop && !stopTriggered);
                        status = cancelExistWithStop ? "canceled" : status;
                        const fee = {
                            currency: feeCurrency,
                            cost: feeCost,
                        };
                        const clientOrderId = this.safeString(
                            order,
                            "clientOid"
                        );
                        const timeInForce = this.safeString(
                            order,
                            "timeInForce"
                        );
                        const stopPrice = this.safeNumber(order, "stopPrice");
                        const postOnly = this.safeValue(order, "postOnly");
                        return this.safeOrder(
                            {
                                id: orderId,
                                clientOrderId: clientOrderId,
                                symbol: symbol,
                                type: type,
                                timeInForce: timeInForce,
                                postOnly: postOnly,
                                side: side,
                                amount: amount,
                                price: price,
                                stopPrice: stopPrice,
                                triggerPrice: stopPrice,
                                cost: cost,
                                filled: filled,
                                remaining: undefined,
                                timestamp: timestamp,
                                datetime: datetime,
                                fee: fee,
                                status: status,
                                info: order,
                                lastTradeTimestamp: undefined,
                                average: undefined,
                                trades: undefined,
                            },
                            market
                        );
                    }

                    async fetchOrderTrades(
                        id,
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#fetchOrderTrades
                         * @description fetch all the trades made from a single order
                         * @param {string} id order id
                         * @param {string|undefined} symbol unified market symbol
                         * @param {int|undefined} since the earliest time in ms to fetch trades for
                         * @param {int|undefined} limit the maximum number of trades to retrieve
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html#trade-structure}
                         */
                        const request = {
                            orderId: id,
                        };
                        return await this.fetchMyTrades(
                            symbol,
                            since,
                            limit,
                            this.extend(request, params)
                        );
                    }

                    async fetchMyTrades(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#fetchMyTrades
                         * @description fetch all trades made by the user
                         * @param {string|undefined} symbol unified market symbol
                         * @param {int|undefined} since the earliest time in ms to fetch trades for
                         * @param {int|undefined} limit the maximum number of trades structures to retrieve
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html#trade-structure}
                         */
                        await this.loadMarkets();
                        const request = {};
                        let market = undefined;
                        if (symbol !== undefined) {
                            market = this.market(symbol);
                            request["symbol"] = market["id"];
                        }
                        if (limit !== undefined) {
                            request["pageSize"] = limit;
                        }
                        const method = this.options["fetchMyTradesMethod"];
                        let parseResponseData = false;
                        if (method === "private_get_fills") {
                            // does not return trades earlier than 2019-02-18T00:00:00Z
                            if (since !== undefined) {
                                // only returns trades up to one week after the since param
                                request["startAt"] = since;
                            }
                        } else if (method === "private_get_limit_fills") {
                            // does not return trades earlier than 2019-02-18T00:00:00Z
                            // takes no params
                            // only returns first 1000 trades (not only "in the last 24 hours" as stated in the docs)
                            parseResponseData = true;
                        } else if (method === "private_get_hist_orders") {
                            // despite that this endpoint is called `HistOrders`
                            // it returns historical trades instead of orders
                            // returns trades earlier than 2019-02-18T00:00:00Z only
                            if (since !== undefined) {
                                request["startAt"] = parseInt(since / 1000);
                            }
                        } else {
                            throw new ExchangeError(
                                this.id +
                                    " fetchMyTradesMethod() invalid method"
                            );
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         "currentPage": 1,
                        //         "pageSize": 50,
                        //         "totalNum": 1,
                        //         "totalPage": 1,
                        //         "items": [
                        //             {
                        //                 "symbol":"BTC-USDT",       // symbol
                        //                 "tradeId":"5c35c02709e4f67d5266954e",        // trade id
                        //                 "orderId":"5c35c02703aa673ceec2a168",        // order id
                        //                 "counterOrderId":"5c1ab46003aa676e487fa8e3", // counter order id
                        //                 "side":"buy",              // transaction direction,include buy and sell
                        //                 "liquidity":"taker",       // include taker and maker
                        //                 "forceTaker":true,         // forced to become taker
                        //                 "price":"0.083",           // order price
                        //                 "size":"0.8424304",        // order quantity
                        //                 "funds":"0.0699217232",    // order funds
                        //                 "fee":"0",                 // fee
                        //                 "feeRate":"0",             // fee rate
                        //                 "feeCurrency":"USDT",      // charge fee currency
                        //                 "stop":"",                 // stop type
                        //                 "type":"limit",            // order type, e.g. limit, market, stop_limit.
                        //                 "createdAt":1547026472000  // time
                        //             },
                        //             //------------------------------------------------------
                        //             // v1 (historical) trade response structure
                        //             {
                        //                 "symbol": "SNOV-ETH",
                        //                 "dealPrice": "0.0000246",
                        //                 "dealValue": "0.018942",
                        //                 "amount": "770",
                        //                 "fee": "0.00001137",
                        //                 "side": "sell",
                        //                 "createdAt": 1540080199
                        //                 "id":"5c4d389e4c8c60413f78e2e5",
                        //             }
                        //         ]
                        //     }
                        //
                        const data = this.safeValue(response, "data", {});
                        let trades = undefined;
                        if (parseResponseData) {
                            trades = data;
                        } else {
                            trades = this.safeValue(data, "items", []);
                        }
                        return this.parseTrades(trades, market, since, limit);
                    }

                    async fetchTrades(
                        symbol,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#fetchTrades
                         * @description get the list of most recent trades for a particular symbol
                         * @param {string} symbol unified symbol of the market to fetch trades for
                         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
                         * @param {int|undefined} limit the maximum amount of trades to fetch
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const request = {
                            symbol: market["id"],
                        };
                        // pagination is not supported on the exchange side anymore
                        // if (since !== undefined) {
                        //     request['startAt'] = Math.floor (since / 1000);
                        // }
                        // if (limit !== undefined) {
                        //     request['pageSize'] = limit;
                        // }
                        const response = await this.publicGetMarketHistories(
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         "code": "200000",
                        //         "data": [
                        //             {
                        //                 "sequence": "1548764654235",
                        //                 "side": "sell",
                        //                 "size":"0.6841354",
                        //                 "price":"0.03202",
                        //                 "time":1548848575203567174
                        //             }
                        //         ]
                        //     }
                        //
                        const trades = this.safeValue(response, "data", []);
                        return this.parseTrades(trades, market, since, limit);
                    }

                    parseTrade(trade, market = undefined) {
                        //
                        // fetchTrades (public)
                        //
                        //     {
                        //         "sequence": "1548764654235",
                        //         "side": "sell",
                        //         "size":"0.6841354",
                        //         "price":"0.03202",
                        //         "time":1548848575203567174
                        //     }
                        //
                        //     {
                        //         sequence: '1568787654360',
                        //         symbol: 'BTC-USDT',
                        //         side: 'buy',
                        //         size: '0.00536577',
                        //         price: '9345',
                        //         takerOrderId: '5e356c4a9f1a790008f8d921',
                        //         time: '1580559434436443257',
                        //         type: 'match',
                        //         makerOrderId: '5e356bffedf0010008fa5d7f',
                        //         tradeId: '5e356c4aeefabd62c62a1ece'
                        //     }
                        //
                        // fetchMyTrades (private) v2
                        //
                        //     {
                        //         "symbol":"BTC-USDT",
                        //         "tradeId":"5c35c02709e4f67d5266954e",
                        //         "orderId":"5c35c02703aa673ceec2a168",
                        //         "counterOrderId":"5c1ab46003aa676e487fa8e3",
                        //         "side":"buy",
                        //         "liquidity":"taker",
                        //         "forceTaker":true,
                        //         "price":"0.083",
                        //         "size":"0.8424304",
                        //         "funds":"0.0699217232",
                        //         "fee":"0",
                        //         "feeRate":"0",
                        //         "feeCurrency":"USDT",
                        //         "stop":"",
                        //         "type":"limit",
                        //         "createdAt":1547026472000
                        //     }
                        //
                        // fetchMyTrades v2 alternative format since 2019-05-21 https://github.com/ccxt/ccxt/pull/5162
                        //
                        //     {
                        //         symbol: "OPEN-BTC",
                        //         forceTaker:  false,
                        //         orderId: "5ce36420054b4663b1fff2c9",
                        //         fee: "0",
                        //         feeCurrency: "",
                        //         type: "",
                        //         feeRate: "0",
                        //         createdAt: 1558417615000,
                        //         size: "12.8206",
                        //         stop: "",
                        //         price: "0",
                        //         funds: "0",
                        //         tradeId: "5ce390cf6e0db23b861c6e80"
                        //     }
                        //
                        // fetchMyTrades (private) v1 (historical)
                        //
                        //     {
                        //         "symbol": "SNOV-ETH",
                        //         "dealPrice": "0.0000246",
                        //         "dealValue": "0.018942",
                        //         "amount": "770",
                        //         "fee": "0.00001137",
                        //         "side": "sell",
                        //         "createdAt": 1540080199
                        //         "id":"5c4d389e4c8c60413f78e2e5",
                        //     }
                        //
                        const marketId = this.safeString(trade, "symbol");
                        market = this.safeMarket(marketId, market, "-");
                        const id = this.safeString2(trade, "tradeId", "id");
                        const orderId = this.safeString(trade, "orderId");
                        const takerOrMaker = this.safeString(
                            trade,
                            "liquidity"
                        );
                        let timestamp = this.safeInteger(trade, "time");
                        if (timestamp !== undefined) {
                            timestamp = parseInt(timestamp / 1000000);
                        } else {
                            timestamp = this.safeInteger(trade, "createdAt");
                            // if it's a historical v1 trade, the exchange returns timestamp in seconds
                            if (
                                "dealValue" in trade &&
                                timestamp !== undefined
                            ) {
                                timestamp = timestamp * 1000;
                            }
                        }
                        const priceString = this.safeString2(
                            trade,
                            "price",
                            "dealPrice"
                        );
                        const amountString = this.safeString2(
                            trade,
                            "size",
                            "amount"
                        );
                        const side = this.safeString(trade, "side");
                        let fee = undefined;
                        const feeCostString = this.safeString(trade, "fee");
                        if (feeCostString !== undefined) {
                            const feeCurrencyId = this.safeString(
                                trade,
                                "feeCurrency"
                            );
                            let feeCurrency =
                                this.safeCurrencyCode(feeCurrencyId);
                            if (feeCurrency === undefined) {
                                feeCurrency =
                                    side === "sell"
                                        ? market["quote"]
                                        : market["base"];
                            }
                            fee = {
                                cost: feeCostString,
                                currency: feeCurrency,
                                rate: this.safeString(trade, "feeRate"),
                            };
                        }
                        let type = this.safeString(trade, "type");
                        if (type === "match") {
                            type = undefined;
                        }
                        const costString = this.safeString2(
                            trade,
                            "funds",
                            "dealValue"
                        );
                        return this.safeTrade(
                            {
                                info: trade,
                                id: id,
                                order: orderId,
                                timestamp: timestamp,
                                datetime: this.iso8601(timestamp),
                                symbol: market["symbol"],
                                type: type,
                                takerOrMaker: takerOrMaker,
                                side: side,
                                price: priceString,
                                amount: amountString,
                                cost: costString,
                                fee: fee,
                            },
                            market
                        );
                    }

                    async fetchTradingFee(symbol, params = {}) {
                        /**
                         * @method
                         * @name kucoin#fetchTradingFee
                         * @description fetch the trading fees for a market
                         * @param {string} symbol unified market symbol
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {object} a [fee structure]{@link https://docs.ccxt.com/en/latest/manual.html#fee-structure}
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const request = {
                            symbols: market["id"],
                        };
                        const response = await this.privateGetTradeFees(
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         code: '200000',
                        //         data: [
                        //           {
                        //             symbol: 'BTC-USDT',
                        //             takerFeeRate: '0.001',
                        //             makerFeeRate: '0.001'
                        //           }
                        //         ]
                        //     }
                        //
                        const data = this.safeValue(response, "data", []);
                        const first = this.safeValue(data, 0);
                        const marketId = this.safeString(first, "symbol");
                        return {
                            info: response,
                            symbol: this.safeSymbol(marketId, market),
                            maker: this.safeNumber(first, "makerFeeRate"),
                            taker: this.safeNumber(first, "takerFeeRate"),
                            percentage: true,
                            tierBased: true,
                        };
                    }

                    async withdraw(
                        code,
                        amount,
                        address,
                        tag = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#withdraw
                         * @description make a withdrawal
                         * @param {string} code unified currency code
                         * @param {float} amount the amount to withdraw
                         * @param {string} address the address to withdraw to
                         * @param {string|undefined} tag
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure}
                         */
                        [tag, params] = this.handleWithdrawTagAndParams(
                            tag,
                            params
                        );
                        await this.loadMarkets();
                        this.checkAddress(address);
                        const currency = this.currency(code);
                        const request = {
                            currency: currency["id"],
                            address: address,
                            amount: amount,
                            // 'memo': tag,
                            // 'isInner': false, // internal transfer or external withdrawal
                            // 'remark': 'optional',
                            // 'chain': 'OMNI', // 'ERC20', 'TRC20', default is ERC20, This only apply for multi-chain currency, and there is no need for single chain currency.
                        };
                        if (tag !== undefined) {
                            request["memo"] = tag;
                        }
                        const networks = this.safeValue(
                            this.options,
                            "networks",
                            {}
                        );
                        let network = this.safeStringUpper(params, "network"); // this line allows the user to specify either ERC20 or ETH
                        network = this.safeStringLower(
                            networks,
                            network,
                            network
                        ); // handle ERC20>ETH alias
                        if (network !== undefined) {
                            network = network.toLowerCase();
                            request["chain"] = network;
                            params = this.omit(params, "network");
                        }
                        const response = await this.privatePostWithdrawals(
                            this.extend(request, params)
                        );
                        //
                        // https://github.com/ccxt/ccxt/issues/5558
                        //
                        //     {
                        //         "code":  200000,
                        //         "data": {
                        //             "withdrawalId":  "5bffb63303aa675e8bbe18f9"
                        //         }
                        //     }
                        //
                        const data = this.safeValue(response, "data", {});
                        return this.parseTransaction(data, currency);
                    }

                    parseTransactionStatus(status) {
                        const statuses = {
                            SUCCESS: "ok",
                            PROCESSING: "ok",
                            FAILURE: "failed",
                        };
                        return this.safeString(statuses, status);
                    }

                    parseTransaction(transaction, currency = undefined) {
                        //
                        // fetchDeposits
                        //
                        //     {
                        //         "address": "0x5f047b29041bcfdbf0e4478cdfa753a336ba6989",
                        //         "memo": "5c247c8a03aa677cea2a251d",
                        //         "amount": 1,
                        //         "fee": 0.0001,
                        //         "currency": "KCS",
                        //         "chain": "",
                        //         "isInner": false,
                        //         "walletTxId": "5bbb57386d99522d9f954c5a@test004",
                        //         "status": "SUCCESS",
                        //         "createdAt": 1544178843000,
                        //         "updatedAt": 1544178891000
                        //         "remark":"foobar"
                        //     }
                        //
                        // fetchWithdrawals
                        //
                        //     {
                        //         "id": "5c2dc64e03aa675aa263f1ac",
                        //         "address": "0x5bedb060b8eb8d823e2414d82acce78d38be7fe9",
                        //         "memo": "",
                        //         "currency": "ETH",
                        //         "chain": "",
                        //         "amount": 1.0000000,
                        //         "fee": 0.0100000,
                        //         "walletTxId": "3e2414d82acce78d38be7fe9",
                        //         "isInner": false,
                        //         "status": "FAILURE",
                        //         "createdAt": 1546503758000,
                        //         "updatedAt": 1546504603000
                        //         "remark":"foobar"
                        //     }
                        //
                        // withdraw
                        //
                        //     {
                        //         "withdrawalId":  "5bffb63303aa675e8bbe18f9"
                        //     }
                        //
                        const currencyId = this.safeString(
                            transaction,
                            "currency"
                        );
                        const code = this.safeCurrencyCode(
                            currencyId,
                            currency
                        );
                        let address = this.safeString(transaction, "address");
                        const amount = this.safeString(transaction, "amount");
                        let txid = this.safeString(transaction, "walletTxId");
                        if (txid !== undefined) {
                            const txidParts = txid.split("@");
                            const numTxidParts = txidParts.length;
                            if (numTxidParts > 1) {
                                if (address === undefined) {
                                    if (txidParts[1].length > 1) {
                                        address = txidParts[1];
                                    }
                                }
                            }
                            txid = txidParts[0];
                        }
                        let type =
                            txid === undefined ? "withdrawal" : "deposit";
                        const rawStatus = this.safeString(
                            transaction,
                            "status"
                        );
                        let fee = undefined;
                        const feeCost = this.safeString(transaction, "fee");
                        if (feeCost !== undefined) {
                            let rate = undefined;
                            if (amount !== undefined) {
                                rate = Precise.stringDiv(feeCost, amount);
                            }
                            fee = {
                                cost: this.parseNumber(feeCost),
                                rate: this.parseNumber(rate),
                                currency: code,
                            };
                        }
                        let timestamp = this.safeInteger2(
                            transaction,
                            "createdAt",
                            "createAt"
                        );
                        let updated = this.safeInteger(
                            transaction,
                            "updatedAt"
                        );
                        const isV1 = !("createdAt" in transaction);
                        // if it's a v1 structure
                        if (isV1) {
                            type =
                                "address" in transaction
                                    ? "withdrawal"
                                    : "deposit";
                            if (timestamp !== undefined) {
                                timestamp = timestamp * 1000;
                            }
                            if (updated !== undefined) {
                                updated = updated * 1000;
                            }
                        }
                        const tag = this.safeString(transaction, "memo");
                        const network = this.safeString(transaction, "chain");
                        return {
                            info: transaction,
                            id: this.safeString2(
                                transaction,
                                "id",
                                "withdrawalId"
                            ),
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            network: network,
                            address: address,
                            addressTo: address,
                            addressFrom: undefined,
                            tag: tag,
                            tagTo: tag,
                            tagFrom: undefined,
                            currency: code,
                            amount: this.parseNumber(amount),
                            txid: txid,
                            type: type,
                            status: this.parseTransactionStatus(rawStatus),
                            comment: this.safeString(transaction, "remark"),
                            fee: fee,
                            updated: updated,
                        };
                    }

                    async fetchDeposits(
                        code = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#fetchDeposits
                         * @description fetch all deposits made to an account
                         * @param {string|undefined} code unified currency code
                         * @param {int|undefined} since the earliest time in ms to fetch deposits for
                         * @param {int|undefined} limit the maximum number of deposits structures to retrieve
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure}
                         */
                        await this.loadMarkets();
                        const request = {};
                        let currency = undefined;
                        if (code !== undefined) {
                            currency = this.currency(code);
                            request["currency"] = currency["id"];
                        }
                        if (limit !== undefined) {
                            request["pageSize"] = limit;
                        }
                        let method = "privateGetDeposits";
                        if (since !== undefined) {
                            // if since is earlier than 2019-02-18T00:00:00Z
                            if (since < 1550448000000) {
                                request["startAt"] = parseInt(since / 1000);
                                method = "privateGetHistDeposits";
                            } else {
                                request["startAt"] = since;
                            }
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         code: '200000',
                        //         data: {
                        //             "currentPage": 1,
                        //             "pageSize": 5,
                        //             "totalNum": 2,
                        //             "totalPage": 1,
                        //             "items": [
                        //                 //--------------------------------------------------
                        //                 // version 2 deposit response structure
                        //                 {
                        //                     "address": "0x5f047b29041bcfdbf0e4478cdfa753a336ba6989",
                        //                     "memo": "5c247c8a03aa677cea2a251d",
                        //                     "amount": 1,
                        //                     "fee": 0.0001,
                        //                     "currency": "KCS",
                        //                     "isInner": false,
                        //                     "walletTxId": "5bbb57386d99522d9f954c5a@test004",
                        //                     "status": "SUCCESS",
                        //                     "createdAt": 1544178843000,
                        //                     "updatedAt": 1544178891000
                        //                     "remark":"foobar"
                        //                 },
                        //                 //--------------------------------------------------
                        //                 // version 1 (historical) deposit response structure
                        //                 {
                        //                     "currency": "BTC",
                        //                     "createAt": 1528536998,
                        //                     "amount": "0.03266638",
                        //                     "walletTxId": "55c643bc2c68d6f17266383ac1be9e454038864b929ae7cee0bc408cc5c869e8@12ffGWmMMD1zA1WbFm7Ho3JZ1w6NYXjpFk@234",
                        //                     "isInner": false,
                        //                     "status": "SUCCESS",
                        //                 }
                        //             ]
                        //         }
                        //     }
                        //
                        const responseData = response["data"]["items"];
                        return this.parseTransactions(
                            responseData,
                            currency,
                            since,
                            limit,
                            { type: "deposit" }
                        );
                    }

                    async fetchWithdrawals(
                        code = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#fetchWithdrawals
                         * @description fetch all withdrawals made from an account
                         * @param {string|undefined} code unified currency code
                         * @param {int|undefined} since the earliest time in ms to fetch withdrawals for
                         * @param {int|undefined} limit the maximum number of withdrawals structures to retrieve
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {[object]} a list of [transaction structures]{@link https://docs.ccxt.com/en/latest/manual.html#transaction-structure}
                         */
                        await this.loadMarkets();
                        const request = {};
                        let currency = undefined;
                        if (code !== undefined) {
                            currency = this.currency(code);
                            request["currency"] = currency["id"];
                        }
                        if (limit !== undefined) {
                            request["pageSize"] = limit;
                        }
                        let method = "privateGetWithdrawals";
                        if (since !== undefined) {
                            // if since is earlier than 2019-02-18T00:00:00Z
                            if (since < 1550448000000) {
                                request["startAt"] = parseInt(since / 1000);
                                method = "privateGetHistWithdrawals";
                            } else {
                                request["startAt"] = since;
                            }
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         code: '200000',
                        //         data: {
                        //             "currentPage": 1,
                        //             "pageSize": 5,
                        //             "totalNum": 2,
                        //             "totalPage": 1,
                        //             "items": [
                        //                 //--------------------------------------------------
                        //                 // version 2 withdrawal response structure
                        //                 {
                        //                     "id": "5c2dc64e03aa675aa263f1ac",
                        //                     "address": "0x5bedb060b8eb8d823e2414d82acce78d38be7fe9",
                        //                     "memo": "",
                        //                     "currency": "ETH",
                        //                     "amount": 1.0000000,
                        //                     "fee": 0.0100000,
                        //                     "walletTxId": "3e2414d82acce78d38be7fe9",
                        //                     "isInner": false,
                        //                     "status": "FAILURE",
                        //                     "createdAt": 1546503758000,
                        //                     "updatedAt": 1546504603000
                        //                 },
                        //                 //--------------------------------------------------
                        //                 // version 1 (historical) withdrawal response structure
                        //                 {
                        //                     "currency": "BTC",
                        //                     "createAt": 1526723468,
                        //                     "amount": "0.534",
                        //                     "address": "33xW37ZSW4tQvg443Pc7NLCAs167Yc2XUV",
                        //                     "walletTxId": "aeacea864c020acf58e51606169240e96774838dcd4f7ce48acf38e3651323f4",
                        //                     "isInner": false,
                        //                     "status": "SUCCESS"
                        //                 }
                        //             ]
                        //         }
                        //     }
                        //
                        const responseData = response["data"]["items"];
                        return this.parseTransactions(
                            responseData,
                            currency,
                            since,
                            limit,
                            { type: "withdrawal" }
                        );
                    }

                    parseBalanceHelper(entry) {
                        const account = this.account();
                        account["used"] = this.safeString(entry, "holdBalance");
                        account["free"] = this.safeString(
                            entry,
                            "availableBalance"
                        );
                        account["total"] = this.safeString(
                            entry,
                            "totalBalance"
                        );
                        const debt = this.safeString(entry, "liability");
                        const interest = this.safeString(entry, "interest");
                        account["debt"] = Precise.stringAdd(debt, interest);
                        return account;
                    }

                    async fetchBalance(params = {}) {
                        /**
                         * @method
                         * @name kucoin#fetchBalance
                         * @description query for balance and get the amount of funds available for trading or funds locked in orders
                         * @see https://docs.kucoin.com/#list-accounts
                         * @see https://docs.kucoin.com/#query-isolated-margin-account-info
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @param {object} params.marginMode 'cross' or 'isolated', margin type for fetching margin balance
                         * @param {object} params.type extra parameters specific to the kucoin api endpoint
                         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
                         */
                        await this.loadMarkets();
                        const code = this.safeString(params, "code");
                        let currency = undefined;
                        if (code !== undefined) {
                            currency = this.currency(code);
                        }
                        const defaultType = this.safeString2(
                            this.options,
                            "fetchBalance",
                            "defaultType",
                            "spot"
                        );
                        const requestedType = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        const accountsByType = this.safeValue(
                            this.options,
                            "accountsByType"
                        );
                        const type = this.safeString(
                            accountsByType,
                            requestedType,
                            requestedType
                        );
                        params = this.omit(params, "type");
                        const [marginMode, query] =
                            this.handleMarginModeAndParams(
                                "fetchBalance",
                                params
                            );
                        let method = "privateGetAccounts";
                        const request = {};
                        const isolated =
                            marginMode === "isolated" || type === "isolated";
                        const cross =
                            marginMode === "cross" || type === "cross";
                        if (isolated) {
                            method = "privateGetIsolatedAccounts";
                            if (currency !== undefined) {
                                request["balanceCurrency"] = currency["id"];
                            }
                        } else if (cross) {
                            method = "privateGetMarginAccount";
                        } else {
                            if (currency !== undefined) {
                                request["currency"] = currency["id"];
                            }
                            request["type"] = type;
                        }
                        const response = await this[method](
                            this.extend(request, query)
                        );
                        //
                        // Spot and Cross
                        //
                        //    {
                        //        "code": "200000",
                        //        "data": [
                        //            {
                        //                "balance": "0.00009788",
                        //                "available": "0.00009788",
                        //                "holds": "0",
                        //                "currency": "BTC",
                        //                "id": "5c6a4fd399a1d81c4f9cc4d0",
                        //                "type": "trade",
                        //            },
                        //        ]
                        //    }
                        //
                        // Isolated
                        //
                        //    {
                        //        code: '200000',
                        //        data: {
                        //            totalConversionBalance: '0',
                        //            liabilityConversionBalance: '0',
                        //            assets: [
                        //                {
                        //                    symbol: 'MANA-USDT',
                        //                    status: 'CLEAR',
                        //                    debtRatio: '0',
                        //                    baseAsset: {
                        //                        currency: 'MANA',
                        //                        totalBalance: '0',
                        //                        holdBalance: '0',
                        //                        availableBalance: '0',
                        //                        liability: '0',
                        //                        interest: '0',
                        //                        borrowableAmount: '0'
                        //                    },
                        //                    quoteAsset: {
                        //                        currency: 'USDT',
                        //                        totalBalance: '0',
                        //                        holdBalance: '0',
                        //                        availableBalance: '0',
                        //                        liability: '0',
                        //                        interest: '0',
                        //                        borrowableAmount: '0'
                        //                    }
                        //                },
                        //                ...
                        //            ]
                        //        }
                        //    }
                        //
                        const data = this.safeValue(response, "data", []);
                        const result = {
                            info: response,
                            timestamp: undefined,
                            datetime: undefined,
                        };
                        if (isolated) {
                            const assets = this.safeValue(data, "assets", []);
                            for (let i = 0; i < assets.length; i++) {
                                const entry = assets[i];
                                const marketId = this.safeString(
                                    entry,
                                    "symbol"
                                );
                                const symbol = this.safeSymbol(
                                    marketId,
                                    undefined,
                                    "_"
                                );
                                const base = this.safeValue(
                                    entry,
                                    "baseAsset",
                                    {}
                                );
                                const quote = this.safeValue(
                                    entry,
                                    "quoteAsset",
                                    {}
                                );
                                const baseCode = this.safeCurrencyCode(
                                    this.safeString(base, "currency")
                                );
                                const quoteCode = this.safeCurrencyCode(
                                    this.safeString(quote, "currency")
                                );
                                const subResult = {};
                                subResult[baseCode] =
                                    this.parseBalanceHelper(base);
                                subResult[quoteCode] =
                                    this.parseBalanceHelper(quote);
                                result[symbol] = this.safeBalance(subResult);
                            }
                        } else if (cross) {
                            const accounts = this.safeValue(
                                data,
                                "accounts",
                                []
                            );
                            for (let i = 0; i < accounts.length; i++) {
                                const balance = accounts[i];
                                const currencyId = this.safeString(
                                    balance,
                                    "currency"
                                );
                                const code = this.safeCurrencyCode(currencyId);
                                result[code] = this.parseBalanceHelper(balance);
                            }
                        } else {
                            for (let i = 0; i < data.length; i++) {
                                const balance = data[i];
                                const balanceType = this.safeString(
                                    balance,
                                    "type"
                                );
                                if (balanceType === type) {
                                    const currencyId = this.safeString(
                                        balance,
                                        "currency"
                                    );
                                    const code =
                                        this.safeCurrencyCode(currencyId);
                                    const account = this.account();
                                    account["total"] = this.safeString(
                                        balance,
                                        "balance"
                                    );
                                    account["free"] = this.safeString(
                                        balance,
                                        "available"
                                    );
                                    account["used"] = this.safeString(
                                        balance,
                                        "holds"
                                    );
                                    result[code] = account;
                                }
                            }
                        }
                        return isolated ? result : this.safeBalance(result);
                    }

                    async transfer(
                        code,
                        amount,
                        fromAccount,
                        toAccount,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#transfer
                         * @description transfer currency internally between wallets on the same account
                         * @see https://docs.kucoin.com/#inner-transfer
                         * @see https://docs.kucoin.com/futures/#transfer-funds-to-kucoin-main-account-2
                         * @param {string} code unified currency code
                         * @param {float} amount amount to transfer
                         * @param {string} fromAccount account to transfer from
                         * @param {string} toAccount account to transfer to
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/en/latest/manual.html#transfer-structure}
                         */
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const requestedAmount = this.currencyToPrecision(
                            code,
                            amount
                        );
                        let fromId = this.convertTypeToAccount(fromAccount);
                        let toId = this.convertTypeToAccount(toAccount);
                        const fromIsolated = this.inArray(fromId, this.ids);
                        const toIsolated = this.inArray(toId, this.ids);
                        if (fromId === "contract") {
                            if (toId !== "main") {
                                throw new ExchangeError(
                                    this.id +
                                        " transfer() only supports transferring from futures account to main account"
                                );
                            }
                            const request = {
                                currency: currency["id"],
                                amount: requestedAmount,
                            };
                            if (!("bizNo" in params)) {
                                // it doesn't like more than 24 characters
                                request["bizNo"] = this.uuid22();
                            }
                            const response =
                                await this.futuresPrivatePostTransferOut(
                                    this.extend(request, params)
                                );
                            //
                            //     {
                            //         'code': '200000',
                            //         'data': {
                            //             'applyId': '605a87217dff1500063d485d',
                            //             'bizNo': 'bcd6e5e1291f4905af84dc',
                            //             'payAccountType': 'CONTRACT',
                            //             'payTag': 'DEFAULT',
                            //             'remark': '',
                            //             'recAccountType': 'MAIN',
                            //             'recTag': 'DEFAULT',
                            //             'recRemark': '',
                            //             'recSystem': 'KUCOIN',
                            //             'status': 'PROCESSING',
                            //             'currency': 'XBT',
                            //             'amount': '0.00001',
                            //             'fee': '0',
                            //             'sn': '573688685663948',
                            //             'reason': '',
                            //             'createdAt': 1616545569000,
                            //             'updatedAt': 1616545569000
                            //         }
                            //     }
                            //
                            const data = this.safeValue(response, "data");
                            return this.parseTransfer(data, currency);
                        } else {
                            const request = {
                                currency: currency["id"],
                                amount: requestedAmount,
                            };
                            if (fromIsolated || toIsolated) {
                                if (this.inArray(fromId, this.ids)) {
                                    request["fromTag"] = fromId;
                                    fromId = "isolated";
                                }
                                if (this.inArray(toId, this.ids)) {
                                    request["toTag"] = toId;
                                    toId = "isolated";
                                }
                            }
                            request["from"] = fromId;
                            request["to"] = toId;
                            if (!("clientOid" in params)) {
                                request["clientOid"] = this.uuid();
                            }
                            const response =
                                await this.privatePostAccountsInnerTransfer(
                                    this.extend(request, params)
                                );
                            //
                            //     {
                            //         'code': '200000',
                            //         'data': {
                            //              'orderId': '605a6211e657f00006ad0ad6'
                            //         }
                            //     }
                            //
                            const data = this.safeValue(response, "data");
                            const transfer = this.parseTransfer(data, currency);
                            return this.extend(transfer, {
                                amount: requestedAmount,
                                fromAccount: fromId,
                                toAccount: toId,
                            });
                        }
                    }

                    parseTransfer(transfer, currency = undefined) {
                        //
                        // transfer (spot)
                        //
                        //     {
                        //         'orderId': '605a6211e657f00006ad0ad6'
                        //     }
                        //
                        //
                        // transfer (futures)
                        //
                        //     {
                        //         'applyId': '605a87217dff1500063d485d',
                        //         'bizNo': 'bcd6e5e1291f4905af84dc',
                        //         'payAccountType': 'CONTRACT',
                        //         'payTag': 'DEFAULT',
                        //         'remark': '',
                        //         'recAccountType': 'MAIN',
                        //         'recTag': 'DEFAULT',
                        //         'recRemark': '',
                        //         'recSystem': 'KUCOIN',
                        //         'status': 'PROCESSING',
                        //         'currency': 'XBT',
                        //         'amount': '0.00001',
                        //         'fee': '0',
                        //         'sn': '573688685663948',
                        //         'reason': '',
                        //         'createdAt': 1616545569000,
                        //         'updatedAt': 1616545569000
                        //     }
                        //
                        const timestamp = this.safeInteger(
                            transfer,
                            "createdAt"
                        );
                        const currencyId = this.safeString(
                            transfer,
                            "currency"
                        );
                        const rawStatus = this.safeString(transfer, "status");
                        const accountFromRaw = this.safeStringLower(
                            transfer,
                            "payAccountType"
                        );
                        const accountToRaw = this.safeStringLower(
                            transfer,
                            "recAccountType"
                        );
                        const accountsByType = this.safeValue(
                            this.options,
                            "accountsByType"
                        );
                        const accountFrom = this.safeString(
                            accountsByType,
                            accountFromRaw,
                            accountFromRaw
                        );
                        const accountTo = this.safeString(
                            accountsByType,
                            accountToRaw,
                            accountToRaw
                        );
                        return {
                            id: this.safeString2(
                                transfer,
                                "applyId",
                                "orderId"
                            ),
                            currency: this.safeCurrencyCode(
                                currencyId,
                                currency
                            ),
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            amount: this.safeNumber(transfer, "amount"),
                            fromAccount: accountFrom,
                            toAccount: accountTo,
                            status: this.parseTransferStatus(rawStatus),
                            info: transfer,
                        };
                    }

                    parseTransferStatus(status) {
                        const statuses = {
                            PROCESSING: "pending",
                        };
                        return this.safeString(statuses, status, status);
                    }

                    parseLedgerEntryType(type) {
                        const types = {
                            "Assets Transferred in After Upgrading": "transfer", // Assets Transferred in After V1 to V2 Upgrading
                            Deposit: "transaction", // Deposit
                            Withdrawal: "transaction", // Withdrawal
                            Transfer: "transfer", // Transfer
                            Trade_Exchange: "trade", // Trade
                            // 'Vote for Coin': 'Vote for Coin', // Vote for Coin
                            "KuCoin Bonus": "bonus", // KuCoin Bonus
                            "Referral Bonus": "referral", // Referral Bonus
                            Rewards: "bonus", // Activities Rewards
                            // 'Distribution': 'Distribution', // Distribution, such as get GAS by holding NEO
                            "Airdrop/Fork": "airdrop", // Airdrop/Fork
                            "Other rewards": "bonus", // Other rewards, except Vote, Airdrop, Fork
                            "Fee Rebate": "rebate", // Fee Rebate
                            "Buy Crypto": "trade", // Use credit card to buy crypto
                            "Sell Crypto": "sell", // Use credit card to sell crypto
                            "Public Offering Purchase": "trade", // Public Offering Purchase for Spotlight
                            // 'Send red envelope': 'Send red envelope', // Send red envelope
                            // 'Open red envelope': 'Open red envelope', // Open red envelope
                            // 'Staking': 'Staking', // Staking
                            // 'LockDrop Vesting': 'LockDrop Vesting', // LockDrop Vesting
                            // 'Staking Profits': 'Staking Profits', // Staking Profits
                            // 'Redemption': 'Redemption', // Redemption
                            "Refunded Fees": "fee", // Refunded Fees
                            "KCS Pay Fees": "fee", // KCS Pay Fees
                            "Margin Trade": "trade", // Margin Trade
                            Loans: "Loans", // Loans
                            // 'Borrowings': 'Borrowings', // Borrowings
                            // 'Debt Repayment': 'Debt Repayment', // Debt Repayment
                            // 'Loans Repaid': 'Loans Repaid', // Loans Repaid
                            // 'Lendings': 'Lendings', // Lendings
                            // 'Pool transactions': 'Pool transactions', // Pool-X transactions
                            "Instant Exchange": "trade", // Instant Exchange
                            "Sub-account transfer": "transfer", // Sub-account transfer
                            "Liquidation Fees": "fee", // Liquidation Fees
                            // 'Soft Staking Profits': 'Soft Staking Profits', // Soft Staking Profits
                            // 'Voting Earnings': 'Voting Earnings', // Voting Earnings on Pool-X
                            // 'Redemption of Voting': 'Redemption of Voting', // Redemption of Voting on Pool-X
                            // 'Voting': 'Voting', // Voting on Pool-X
                            // 'Convert to KCS': 'Convert to KCS', // Convert to KCS
                        };
                        return this.safeString(types, type, type);
                    }

                    parseLedgerEntry(item, currency = undefined) {
                        //
                        //     {
                        //         "id": "611a1e7c6a053300067a88d9", //unique key for each ledger entry
                        //         "currency": "USDT", //Currency
                        //         "amount": "10.00059547", //The total amount of assets (fees included) involved in assets changes such as transaction, withdrawal and bonus distribution.
                        //         "fee": "0", //Deposit or withdrawal fee
                        //         "balance": "0", //Total assets of a currency remaining funds after transaction
                        //         "accountType": "MAIN", //Account Type
                        //         "bizType": "Loans Repaid", //business type
                        //         "direction": "in", //side, in or out
                        //         "createdAt": 1629101692950, //Creation time
                        //         "context": "{\"borrowerUserId\":\"601ad03e50dc810006d242ea\",\"loanRepayDetailNo\":\"611a1e7cc913d000066cf7ec\"}" //Business core parameters
                        //     }
                        //
                        const id = this.safeString(item, "id");
                        const currencyId = this.safeString(item, "currency");
                        const code = this.safeCurrencyCode(
                            currencyId,
                            currency
                        );
                        const amount = this.safeNumber(item, "amount");
                        const balanceAfter = undefined;
                        // const balanceAfter = this.safeNumber (item, 'balance'); only returns zero string
                        const bizType = this.safeString(item, "bizType");
                        const type = this.parseLedgerEntryType(bizType);
                        const direction = this.safeString(item, "direction");
                        const timestamp = this.safeInteger(item, "createdAt");
                        const datetime = this.iso8601(timestamp);
                        const account = this.safeString(item, "accountType"); // MAIN, TRADE, MARGIN, or CONTRACT
                        const context = this.safeString(item, "context"); // contains other information about the ledger entry
                        //
                        // withdrawal transaction
                        //
                        //     "{\"orderId\":\"617bb2d09e7b3b000196dac8\",\"txId\":\"0x79bb9855f86b351a45cab4dc69d78ca09586a94c45dde49475722b98f401b054\"}"
                        //
                        // deposit to MAIN, trade via MAIN
                        //
                        //     "{\"orderId\":\"617ab9949e7b3b0001948081\",\"txId\":\"0x7a06b16bbd6b03dbc3d96df5683b15229fc35e7184fd7179a5f3a310bd67d1fa@default@0\"}"
                        //
                        // sell trade
                        //
                        //     "{\"symbol\":\"ETH-USDT\",\"orderId\":\"617adcd1eb3fa20001dd29a1\",\"tradeId\":\"617adcd12e113d2b91222ff9\"}"
                        //
                        let referenceId = undefined;
                        if (context !== undefined && context !== "") {
                            try {
                                const parsed = JSON.parse(context);
                                const orderId = this.safeString(
                                    parsed,
                                    "orderId"
                                );
                                const tradeId = this.safeString(
                                    parsed,
                                    "tradeId"
                                );
                                // transactions only have an orderId but for trades we wish to use tradeId
                                if (tradeId !== undefined) {
                                    referenceId = tradeId;
                                } else {
                                    referenceId = orderId;
                                }
                            } catch (exc) {
                                referenceId = context;
                            }
                        }
                        let fee = undefined;
                        const feeCost = this.safeNumber(item, "fee");
                        let feeCurrency = undefined;
                        if (feeCost !== 0) {
                            feeCurrency = code;
                            fee = { cost: feeCost, currency: feeCurrency };
                        }
                        return {
                            id: id,
                            direction: direction,
                            account: account,
                            referenceId: referenceId,
                            referenceAccount: account,
                            type: type,
                            currency: code,
                            amount: amount,
                            timestamp: timestamp,
                            datetime: datetime,
                            before: undefined,
                            after: balanceAfter, // undefined
                            status: undefined,
                            fee: fee,
                            info: item,
                        };
                    }

                    async fetchLedger(
                        code = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#fetchLedger
                         * @description fetch the history of changes, actions done by the user or operations that altered balance of the user
                         * @param {string|undefined} code unified currency code, default is undefined
                         * @param {int|undefined} since timestamp in ms of the earliest ledger entry, default is undefined
                         * @param {int|undefined} limit max number of ledger entrys to return, default is undefined
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/en/latest/manual.html#ledger-structure}
                         */
                        await this.loadMarkets();
                        await this.loadAccounts();
                        const request = {
                            // 'currency': currency['id'], // can choose up to 10, if not provided returns for all currencies by default
                            // 'direction': 'in', // 'out'
                            // 'bizType': 'DEPOSIT', // DEPOSIT, WITHDRAW, TRANSFER, SUB_TRANSFER,TRADE_EXCHANGE, MARGIN_EXCHANGE, KUCOIN_BONUS (optional)
                            // 'startAt': since,
                            // 'endAt': exchange.milliseconds (),
                        };
                        if (since !== undefined) {
                            request["startAt"] = since;
                        }
                        // atm only single currency retrieval is supported
                        let currency = undefined;
                        if (code !== undefined) {
                            currency = this.currency(code);
                            request["currency"] = currency["id"];
                        }
                        const response = await this.privateGetAccountsLedgers(
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         "code":"200000",
                        //         "data":{
                        //             "currentPage":1,
                        //             "pageSize":50,
                        //             "totalNum":1,
                        //             "totalPage":1,
                        //             "items":[
                        //                 {
                        //                     "id":"617cc528729f5f0001c03ceb",
                        //                     "currency":"GAS",
                        //                     "amount":"0.00000339",
                        //                     "fee":"0",
                        //                     "balance":"0",
                        //                     "accountType":"MAIN",
                        //                     "bizType":"Distribution",
                        //                     "direction":"in",
                        //                     "createdAt":1635566888183,
                        //                     "context":"{\"orderId\":\"617cc47a1c47ed0001ce3606\",\"description\":\"Holding NEO,distribute GAS(2021/10/30)\"}"
                        //                 }
                        //                 {
                        //                     "id": "611a1e7c6a053300067a88d9",//unique key
                        //                     "currency": "USDT", //Currency
                        //                     "amount": "10.00059547", //Change amount of the funds
                        //                     "fee": "0", //Deposit or withdrawal fee
                        //                     "balance": "0", //Total assets of a currency
                        //                     "accountType": "MAIN", //Account Type
                        //                     "bizType": "Loans Repaid", //business type
                        //                     "direction": "in", //side, in or out
                        //                     "createdAt": 1629101692950, //Creation time
                        //                     "context": "{\"borrowerUserId\":\"601ad03e50dc810006d242ea\",\"loanRepayDetailNo\":\"611a1e7cc913d000066cf7ec\"}"
                        //                 },
                        //             ]
                        //         }
                        //     }
                        //
                        const data = this.safeValue(response, "data");
                        const items = this.safeValue(data, "items");
                        return this.parseLedger(items, currency, since, limit);
                    }

                    calculateRateLimiterCost(
                        api,
                        method,
                        path,
                        params,
                        config = {},
                        context = {}
                    ) {
                        const versions = this.safeValue(
                            this.options,
                            "versions",
                            {}
                        );
                        const apiVersions = this.safeValue(versions, api, {});
                        const methodVersions = this.safeValue(
                            apiVersions,
                            method,
                            {}
                        );
                        const defaultVersion = this.safeString(
                            methodVersions,
                            path,
                            this.options["version"]
                        );
                        const version = this.safeString(
                            params,
                            "version",
                            defaultVersion
                        );
                        if (version === "v3" && "v3" in config) {
                            return config["v3"];
                        } else if (version === "v2" && "v2" in config) {
                            return config["v2"];
                        } else if (version === "v1" && "v1" in config) {
                            return config["v1"];
                        }
                        return this.safeValue(config, "cost", 1);
                    }

                    async fetchBorrowRateHistory(
                        code,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#fetchBorrowRateHistory
                         * @description retrieves a history of a currencies borrow interest rate at specific time slots
                         * @see https://docs.kucoin.com/#margin-trade-data
                         * @param {string} code unified currency code
                         * @param {int|undefined} since timestamp for the earliest borrow rate
                         * @param {int|undefined} limit the maximum number of [borrow rate structures]
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {[object]} an array of [borrow rate structures]{@link https://docs.ccxt.com/en/latest/manual.html#borrow-rate-structure}
                         */
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const request = {
                            currency: currency["id"],
                        };
                        const response = await this.privateGetMarginTradeLast(
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         "code": "200000",
                        //         "data": [
                        //             {
                        //                 "tradeId": "62db2dcaff219600012b56cd",
                        //                 "currency": "USDT",
                        //                 "size": "10",
                        //                 "dailyIntRate": "0.00003",
                        //                 "term": 7,
                        //                 "timestamp": 1658531274508488480
                        //             },
                        //         ]
                        //     }
                        //
                        const data = this.safeValue(response, "data", {});
                        return this.parseBorrowRateHistory(data, code);
                    }

                    parseBorrowRateHistory(response, code, since, limit) {
                        const result = [];
                        for (let i = 0; i < response.length; i++) {
                            const item = response[i];
                            const borrowRate = this.parseBorrowRate(item);
                            result.push(borrowRate);
                        }
                        const sorted = this.sortBy(result, "timestamp");
                        return this.filterByCurrencySinceLimit(
                            sorted,
                            code,
                            since,
                            limit
                        );
                    }

                    parseBorrowRate(info, currency = undefined) {
                        //
                        //     {
                        //         "tradeId": "62db2dcaff219600012b56cd",
                        //         "currency": "USDT",
                        //         "size": "10",
                        //         "dailyIntRate": "0.00003",
                        //         "term": 7,
                        //         "timestamp": 1658531274508488480
                        //     },
                        //
                        const timestampId = this.safeString(info, "timestamp");
                        const timestamp = Precise.stringMul(
                            timestampId,
                            "0.000001"
                        );
                        const currencyId = this.safeString(info, "currency");
                        return {
                            currency: this.safeCurrencyCode(
                                currencyId,
                                currency
                            ),
                            rate: this.safeNumber(info, "dailyIntRate"),
                            period: 86400000,
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            info: info,
                        };
                    }

                    async fetchBorrowInterest(
                        code = undefined,
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#fetchBorrowInterest
                         * @description fetch the interest owed by the user for borrowing currency for margin trading
                         * @see https://docs.kucoin.com/#get-repay-record
                         * @see https://docs.kucoin.com/#query-isolated-margin-account-info
                         * @param {string|undefined} code unified currency code
                         * @param {string|undefined} symbol unified market symbol, required for isolated margin
                         * @param {int|undefined} since the earliest time in ms to fetch borrrow interest for
                         * @param {int|undefined} limit the maximum number of structures to retrieve
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @param {string|undefined} params.marginMode 'cross' or 'isolated' default is 'cross'
                         * @returns {[object]} a list of [borrow interest structures]{@link https://docs.ccxt.com/en/latest/manual.html#borrow-interest-structure}
                         */
                        await this.loadMarkets();
                        let marginMode = undefined;
                        [marginMode, params] = this.handleMarginModeAndParams(
                            "fetchBorrowInterest",
                            params
                        );
                        if (marginMode === undefined) {
                            marginMode = "cross"; // cross as default marginMode
                        }
                        const request = {};
                        let method = "privateGetMarginBorrowOutstanding";
                        if (marginMode === "isolated") {
                            if (code !== undefined) {
                                const currency = this.currency(code);
                                request["balanceCurrency"] = currency["id"];
                            }
                            method = "privateGetIsolatedAccounts";
                        } else {
                            if (code !== undefined) {
                                const currency = this.currency(code);
                                request["currency"] = currency["id"];
                            }
                        }
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        //
                        // Cross
                        //
                        //     {
                        //         "code": "200000",
                        //         "data": {
                        //             "currentPage": 1,
                        //             "pageSize": 10,
                        //             "totalNum": 1,
                        //             "totalPage": 1,
                        //             "items": [
                        //                 {
                        //                     "tradeId": "62e1e320ff219600013b44e2",
                        //                     "currency": "USDT",
                        //                     "principal": "100",
                        //                     "accruedInterest": "0.00016667",
                        //                     "liability": "100.00016667",
                        //                     "repaidSize": "0",
                        //                     "dailyIntRate": "0.00004",
                        //                     "term": 7,
                        //                     "createdAt": 1658970912000,
                        //                     "maturityTime": 1659575713000
                        //                 }
                        //             ]
                        //         }
                        //     }
                        //
                        // Isolated
                        //
                        //     {
                        //         "code": "200000",
                        //         "data": {
                        //             "totalConversionBalance": "0.02138647",
                        //             "liabilityConversionBalance": "0.01480001",
                        //             "assets": [
                        //                 {
                        //                     "symbol": "NKN-USDT",
                        //                     "status": "CLEAR",
                        //                     "debtRatio": "0",
                        //                     "baseAsset": {
                        //                         "currency": "NKN",
                        //                         "totalBalance": "0",
                        //                         "holdBalance": "0",
                        //                         "availableBalance": "0",
                        //                         "liability": "0",
                        //                         "interest": "0",
                        //                         "borrowableAmount": "0"
                        //                     },
                        //                     "quoteAsset": {
                        //                         "currency": "USDT",
                        //                         "totalBalance": "0",
                        //                         "holdBalance": "0",
                        //                         "availableBalance": "0",
                        //                         "liability": "0",
                        //                         "interest": "0",
                        //                         "borrowableAmount": "0"
                        //                     }
                        //                 },
                        //             ]
                        //         }
                        //     }
                        //
                        const data = this.safeValue(response, "data", {});
                        const assets =
                            marginMode === "isolated"
                                ? this.safeValue(data, "assets", [])
                                : this.safeValue(data, "items", []);
                        return this.parseBorrowInterests(assets, undefined);
                    }

                    parseBorrowInterest(info, market = undefined) {
                        //
                        // Cross
                        //
                        //     {
                        //         "tradeId": "62e1e320ff219600013b44e2",
                        //         "currency": "USDT",
                        //         "principal": "100",
                        //         "accruedInterest": "0.00016667",
                        //         "liability": "100.00016667",
                        //         "repaidSize": "0",
                        //         "dailyIntRate": "0.00004",
                        //         "term": 7,
                        //         "createdAt": 1658970912000,
                        //         "maturityTime": 1659575713000
                        //     },
                        //
                        // Isolated
                        //
                        //     {
                        //         "symbol": "BTC-USDT",
                        //         "status": "CLEAR",
                        //         "debtRatio": "0",
                        //         "baseAsset": {
                        //             "currency": "BTC",
                        //             "totalBalance": "0",
                        //             "holdBalance": "0",
                        //             "availableBalance": "0",
                        //             "liability": "0",
                        //             "interest": "0",
                        //             "borrowableAmount": "0.0592"
                        //         },
                        //         "quoteAsset": {
                        //             "currency": "USDT",
                        //             "totalBalance": "149.99991731",
                        //             "holdBalance": "0",
                        //             "availableBalance": "149.99991731",
                        //             "liability": "0",
                        //             "interest": "0",
                        //             "borrowableAmount": "1349"
                        //         }
                        //     },
                        //
                        const marketId = this.safeString(info, "symbol");
                        const marginMode =
                            marketId === undefined ? "cross" : "isolated";
                        market = this.safeMarket(marketId, market);
                        const symbol = this.safeString(market, "symbol");
                        const timestamp = this.safeInteger(info, "createdAt");
                        const isolatedBase = this.safeValue(
                            info,
                            "baseAsset",
                            {}
                        );
                        let amountBorrowed = undefined;
                        let interest = undefined;
                        let currencyId = undefined;
                        if (marginMode === "isolated") {
                            amountBorrowed = this.safeNumber(
                                isolatedBase,
                                "liability"
                            );
                            interest = this.safeNumber(
                                isolatedBase,
                                "interest"
                            );
                            currencyId = this.safeString(
                                isolatedBase,
                                "currency"
                            );
                        } else {
                            amountBorrowed = this.safeNumber(info, "principal");
                            interest = this.safeNumber(info, "accruedInterest");
                            currencyId = this.safeString(info, "currency");
                        }
                        return {
                            symbol: symbol,
                            marginMode: marginMode,
                            currency: this.safeCurrencyCode(currencyId),
                            interest: interest,
                            interestRate: this.safeNumber(info, "dailyIntRate"),
                            amountBorrowed: amountBorrowed,
                            timestamp: timestamp, // create time
                            datetime: this.iso8601(timestamp),
                            info: info,
                        };
                    }

                    async borrowMargin(
                        code,
                        amount,
                        symbol = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#borrowMargin
                         * @description create a loan to borrow margin
                         * @see https://docs.kucoin.com/#post-borrow-order
                         * @see https://docs.kucoin.com/#isolated-margin-borrowing
                         * @param {string} code unified currency code of the currency to borrow
                         * @param {float} amount the amount to borrow
                         * @param {string|undefined} symbol unified market symbol, required for isolated margin
                         * @param {object} params extra parameters specific to the kucoin api endpoints
                         * @param {string} params.timeInForce either IOC or FOK
                         * @param {string|undefined} params.marginMode 'cross' or 'isolated' default is 'cross'
                         * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/en/latest/manual.html#margin-loan-structure}
                         */
                        const marginMode = this.safeString(
                            params,
                            "marginMode"
                        ); // cross or isolated
                        params = this.omit(params, "marginMode");
                        this.checkRequiredMarginArgument(
                            "borrowMargin",
                            symbol,
                            marginMode
                        );
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const request = {
                            currency: currency["id"],
                            size: this.currencyToPrecision(code, amount),
                        };
                        let method = undefined;
                        const timeInForce = this.safeStringN(
                            params,
                            ["timeInForce", "type", "borrowStrategy"],
                            "IOC"
                        );
                        let timeInForceRequest = undefined;
                        if (symbol === undefined) {
                            method = "privatePostMarginBorrow";
                            timeInForceRequest = "type";
                        } else {
                            const market = this.market(symbol);
                            request["symbol"] = market["id"];
                            timeInForceRequest = "borrowStrategy";
                            method = "privatePostIsolatedBorrow";
                        }
                        request[timeInForceRequest] = timeInForce;
                        params = this.omit(params, [
                            "timeInForce",
                            "type",
                            "borrowStrategy",
                        ]);
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        //
                        // Cross
                        //
                        //     {
                        //         "code": "200000",
                        //         "data": {
                        //             "orderId": "62df422ccde938000115290a",
                        //             "currency": "USDT"
                        //         }
                        //     }
                        //
                        // Isolated
                        //
                        //     {
                        //         "code": "200000",
                        //         "data": {
                        //             "orderId": "62df44a1c65f300001bc32a8",
                        //             "currency": "USDT",
                        //             "actualSize": "100"
                        //         }
                        //     }
                        //
                        const data = this.safeValue(response, "data", {});
                        return this.parseMarginLoan(data, currency);
                    }

                    async repayMargin(
                        code,
                        amount,
                        symbol = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#repayMargin
                         * @description repay borrowed margin and interest
                         * @see https://docs.kucoin.com/#one-click-repayment
                         * @see https://docs.kucoin.com/#quick-repayment
                         * @param {string} code unified currency code of the currency to repay
                         * @param {float} amount the amount to repay
                         * @param {string|undefined} symbol unified market symbol
                         * @param {object} params extra parameters specific to the kucoin api endpoints
                         * @param {string|undefined} params.sequence cross margin repay sequence, either 'RECENTLY_EXPIRE_FIRST' or 'HIGHEST_RATE_FIRST' default is 'RECENTLY_EXPIRE_FIRST'
                         * @param {string|undefined} params.seqStrategy isolated margin repay sequence, either 'RECENTLY_EXPIRE_FIRST' or 'HIGHEST_RATE_FIRST' default is 'RECENTLY_EXPIRE_FIRST'
                         * @param {string|undefined} params.marginMode 'cross' or 'isolated' default is 'cross'
                         * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/en/latest/manual.html#margin-loan-structure}
                         */
                        const marginMode = this.safeString(
                            params,
                            "marginMode"
                        ); // cross or isolated
                        params = this.omit(params, "marginMode");
                        this.checkRequiredMarginArgument(
                            "repayMargin",
                            symbol,
                            marginMode
                        );
                        await this.loadMarkets();
                        const currency = this.currency(code);
                        const request = {
                            currency: currency["id"],
                            size: this.currencyToPrecision(code, amount),
                            // 'sequence': 'RECENTLY_EXPIRE_FIRST',  // Cross: 'RECENTLY_EXPIRE_FIRST' or 'HIGHEST_RATE_FIRST'
                            // 'seqStrategy': 'RECENTLY_EXPIRE_FIRST',  // Isolated: 'RECENTLY_EXPIRE_FIRST' or 'HIGHEST_RATE_FIRST'
                        };
                        let method = undefined;
                        const sequence = this.safeString2(
                            params,
                            "sequence",
                            "seqStrategy",
                            "RECENTLY_EXPIRE_FIRST"
                        );
                        let sequenceRequest = undefined;
                        if (symbol === undefined) {
                            method = "privatePostMarginRepayAll";
                            sequenceRequest = "sequence";
                        } else {
                            const market = this.market(symbol);
                            request["symbol"] = market["id"];
                            sequenceRequest = "seqStrategy";
                            method = "privatePostIsolatedRepayAll";
                        }
                        request[sequenceRequest] = sequence;
                        params = this.omit(params, ["sequence", "seqStrategy"]);
                        const response = await this[method](
                            this.extend(request, params)
                        );
                        //
                        //     {
                        //         "code": "200000",
                        //         "data": null
                        //     }
                        //
                        return this.parseMarginLoan(response, currency);
                    }

                    parseMarginLoan(info, currency = undefined) {
                        //
                        // borrowMargin cross
                        //
                        //     {
                        //         "orderId": "62df422ccde938000115290a",
                        //         "currency": "USDT"
                        //     }
                        //
                        // borrowMargin isolated
                        //
                        //     {
                        //         "orderId": "62df44a1c65f300001bc32a8",
                        //         "currency": "USDT",
                        //         "actualSize": "100"
                        //     }
                        //
                        // repayMargin
                        //
                        //     {
                        //         "code": "200000",
                        //         "data": null
                        //     }
                        //
                        const timestamp = this.milliseconds();
                        const currencyId = this.safeString(info, "currency");
                        return {
                            id: this.safeString(info, "orderId"),
                            currency: this.safeCurrencyCode(
                                currencyId,
                                currency
                            ),
                            amount: this.safeNumber(info, "actualSize"),
                            symbol: undefined,
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            info: info,
                        };
                    }

                    sign(
                        path,
                        api = "public",
                        method = "GET",
                        params = {},
                        headers = undefined,
                        body = undefined
                    ) {
                        //
                        // the v2 URL is https://openapi-v2.kucoin.com/api/v1/endpoint
                        //                                ↑                 ↑
                        //                                ↑                 ↑
                        //
                        const versions = this.safeValue(
                            this.options,
                            "versions",
                            {}
                        );
                        const apiVersions = this.safeValue(versions, api, {});
                        const methodVersions = this.safeValue(
                            apiVersions,
                            method,
                            {}
                        );
                        const defaultVersion = this.safeString(
                            methodVersions,
                            path,
                            this.options["version"]
                        );
                        const version = this.safeString(
                            params,
                            "version",
                            defaultVersion
                        );
                        params = this.omit(params, "version");
                        let endpoint =
                            "/api/" +
                            version +
                            "/" +
                            this.implodeParams(path, params);
                        const query = this.omit(
                            params,
                            this.extractParams(path)
                        );
                        let endpart = "";
                        headers = headers !== undefined ? headers : {};
                        let url = this.urls["api"][api];
                        const isSandbox = url.indexOf("sandbox") >= 0;
                        if (path === "symbols" && !isSandbox) {
                            endpoint =
                                "/api/v2/" + this.implodeParams(path, params);
                        }
                        if (Object.keys(query).length) {
                            if (method === "GET" || method === "DELETE") {
                                endpoint += "?" + this.rawencode(query);
                            } else {
                                body = this.json(query);
                                endpart = body;
                                headers["Content-Type"] = "application/json";
                            }
                        }
                        url = url + endpoint;
                        const isFuturePrivate = api === "futuresPrivate";
                        const isPrivate = api === "private";
                        if (isPrivate || isFuturePrivate) {
                            this.checkRequiredCredentials();
                            const timestamp = this.nonce().toString();
                            headers = this.extend(
                                {
                                    "KC-API-KEY-VERSION": "2",
                                    "KC-API-KEY": this.apiKey,
                                    "KC-API-TIMESTAMP": timestamp,
                                },
                                headers
                            );
                            const apiKeyVersion = this.safeString(
                                headers,
                                "KC-API-KEY-VERSION"
                            );
                            if (apiKeyVersion === "2") {
                                const passphrase = this.hmac(
                                    this.encode(this.password),
                                    this.encode(this.secret),
                                    "sha256",
                                    "base64"
                                );
                                headers["KC-API-PASSPHRASE"] = passphrase;
                            } else {
                                headers["KC-API-PASSPHRASE"] = this.password;
                            }
                            const payload =
                                timestamp + method + endpoint + endpart;
                            const signature = this.hmac(
                                this.encode(payload),
                                this.encode(this.secret),
                                "sha256",
                                "base64"
                            );
                            headers["KC-API-SIGN"] = signature;
                            let partner = this.safeValue(
                                this.options,
                                "partner",
                                {}
                            );
                            partner = isFuturePrivate
                                ? this.safeValue(partner, "future", partner)
                                : this.safeValue(partner, "spot", partner);
                            const partnerId = this.safeString(partner, "id");
                            const partnerSecret = this.safeString2(
                                partner,
                                "secret",
                                "key"
                            );
                            if (
                                partnerId !== undefined &&
                                partnerSecret !== undefined
                            ) {
                                const partnerPayload =
                                    timestamp + partnerId + this.apiKey;
                                const partnerSignature = this.hmac(
                                    this.encode(partnerPayload),
                                    this.encode(partnerSecret),
                                    "sha256",
                                    "base64"
                                );
                                headers["KC-API-PARTNER-SIGN"] =
                                    partnerSignature;
                                headers["KC-API-PARTNER"] = partnerId;
                            }
                        }
                        return {
                            url: url,
                            method: method,
                            body: body,
                            headers: headers,
                        };
                    }

                    handleErrors(
                        code,
                        reason,
                        url,
                        method,
                        headers,
                        body,
                        response,
                        requestHeaders,
                        requestBody
                    ) {
                        if (!response) {
                            this.throwBroadlyMatchedException(
                                this.exceptions["broad"],
                                body,
                                body
                            );
                            return;
                        }
                        //
                        // bad
                        //     { "code": "400100", "msg": "validation.createOrder.clientOidIsRequired" }
                        // good
                        //     { code: '200000', data: { ... }}
                        //
                        const errorCode = this.safeString(response, "code");
                        const message = this.safeString(response, "msg", "");
                        const feedback = this.id + " " + message;
                        this.throwExactlyMatchedException(
                            this.exceptions["exact"],
                            message,
                            feedback
                        );
                        this.throwExactlyMatchedException(
                            this.exceptions["exact"],
                            errorCode,
                            feedback
                        );
                        this.throwBroadlyMatchedException(
                            this.exceptions["broad"],
                            body,
                            feedback
                        );
                    }
                };
            },
            {
                "./base/Exchange": 3,
                "./base/Precise": 4,
                "./base/errors": 6,
                "./base/functions/number": 12,
            },
        ],
        21: [
            function (require, module, exports) {
                /* eslint-disable max-classes-per-file */

                "use strict";

                class BaseCache extends Array {
                    constructor(maxSize = undefined) {
                        super();
                        Object.defineProperty(this, "maxSize", {
                            __proto__: null, // make it invisible
                            value: maxSize,
                            writable: true,
                        });
                    }

                    clear() {
                        this.length = 0;
                    }
                }

                class ArrayCache extends BaseCache {
                    constructor(maxSize = undefined) {
                        super(maxSize);
                        Object.defineProperty(
                            this,
                            "nestedNewUpdatesBySymbol",
                            {
                                __proto__: null, // make it invisible
                                value: false,
                                writable: true,
                            }
                        );
                        Object.defineProperty(this, "newUpdatesBySymbol", {
                            __proto__: null, // make it invisible
                            value: {},
                            writable: true,
                        });
                        Object.defineProperty(this, "clearUpdatesBySymbol", {
                            __proto__: null, // make it invisible
                            value: {},
                            writable: true,
                        });
                        Object.defineProperty(this, "allNewUpdates", {
                            __proto__: null, // make it invisible
                            value: 0,
                            writable: true,
                        });
                        Object.defineProperty(this, "clearAllUpdates", {
                            __proto__: null, // make it invisible
                            value: false,
                            writable: true,
                        });
                    }

                    getLimit(symbol, limit) {
                        let newUpdatesValue = undefined;

                        if (symbol === undefined) {
                            newUpdatesValue = this.allNewUpdates;
                            this.clearAllUpdates = true;
                        } else {
                            newUpdatesValue = this.newUpdatesBySymbol[symbol];
                            if (
                                newUpdatesValue !== undefined &&
                                this.nestedNewUpdatesBySymbol
                            ) {
                                newUpdatesValue = newUpdatesValue.size;
                            }
                            this.clearUpdatesBySymbol[symbol] = true;
                        }

                        if (newUpdatesValue === undefined) {
                            return limit;
                        } else if (limit !== undefined) {
                            return Math.min(newUpdatesValue, limit);
                        } else {
                            return newUpdatesValue;
                        }
                    }

                    append(item) {
                        // maxSize may be 0 when initialized by a .filter() copy-construction
                        if (this.maxSize && this.length === this.maxSize) {
                            this.shift();
                        }
                        this.push(item);
                        if (this.clearAllUpdates) {
                            this.clearAllUpdates = false;
                            this.clearUpdatesBySymbol = {};
                            this.allNewUpdates = 0;
                            this.newUpdatesBySymbol = {};
                        }
                        if (this.clearUpdatesBySymbol[item.symbol]) {
                            this.clearUpdatesBySymbol[item.symbol] = false;
                            this.newUpdatesBySymbol[item.symbol] = 0;
                        }
                        this.newUpdatesBySymbol[item.symbol] =
                            (this.newUpdatesBySymbol[item.symbol] || 0) + 1;
                        this.allNewUpdates = (this.allNewUpdates || 0) + 1;
                    }
                }

                class ArrayCacheByTimestamp extends BaseCache {
                    constructor(maxSize = undefined) {
                        super(maxSize);
                        Object.defineProperty(this, "hashmap", {
                            __proto__: null, // make it invisible
                            value: {},
                            writable: true,
                        });
                        Object.defineProperty(this, "sizeTracker", {
                            __proto__: null, // make it invisible
                            value: new Set(),
                            writable: true,
                        });
                        Object.defineProperty(this, "newUpdates", {
                            __proto__: null, // make it invisible
                            value: 0,
                            writable: true,
                        });
                        Object.defineProperty(this, "clearUpdates", {
                            __proto__: null, // make it invisible
                            value: false,
                            writable: true,
                        });
                    }

                    getLimit(symbol, limit) {
                        this.clearUpdates = true;
                        if (limit === undefined) {
                            return this.newUpdates;
                        }
                        return Math.min(this.newUpdates, limit);
                    }

                    append(item) {
                        if (item[0] in this.hashmap) {
                            const reference = this.hashmap[item[0]];
                            if (reference !== item) {
                                for (const prop in item) {
                                    reference[prop] = item[prop];
                                }
                            }
                        } else {
                            this.hashmap[item[0]] = item;
                            if (this.maxSize && this.length === this.maxSize) {
                                const deleteReference = this.shift();
                                delete this.hashmap[deleteReference[0]];
                            }
                            this.push(item);
                        }
                        if (this.clearUpdates) {
                            this.clearUpdates = false;
                            this.sizeTracker.clear();
                        }
                        this.sizeTracker.add(item[0]);
                        this.newUpdates = this.sizeTracker.size;
                    }
                }

                class ArrayCacheBySymbolById extends ArrayCache {
                    constructor(maxSize = undefined) {
                        super(maxSize);
                        this.nestedNewUpdatesBySymbol = true;
                        Object.defineProperty(this, "hashmap", {
                            __proto__: null, // make it invisible
                            value: {},
                            writable: true,
                        });
                    }

                    append(item) {
                        const byId = (this.hashmap[item.symbol] =
                            this.hashmap[item.symbol] || {});
                        if (item.id in byId) {
                            const reference = byId[item.id];
                            if (reference !== item) {
                                for (const prop in item) {
                                    reference[prop] = item[prop];
                                }
                            }
                            item = reference;
                            const index = this.findIndex(
                                (x) => x.id === item.id
                            );
                            // move the order to the end of the array
                            this.splice(index, 1);
                        } else {
                            byId[item.id] = item;
                        }
                        if (this.maxSize && this.length === this.maxSize) {
                            const deleteReference = this.shift();
                            delete this.hashmap[deleteReference.symbol][
                                deleteReference.id
                            ];
                        }
                        this.push(item);
                        if (this.clearAllUpdates) {
                            this.clearAllUpdates = false;
                            this.clearUpdatesBySymbol = {};
                            this.allNewUpdates = 0;
                            this.newUpdatesBySymbol = {};
                        }
                        if (
                            this.newUpdatesBySymbol[item.symbol] === undefined
                        ) {
                            this.newUpdatesBySymbol[item.symbol] = new Set();
                        }
                        if (this.clearUpdatesBySymbol[item.symbol]) {
                            this.clearUpdatesBySymbol[item.symbol] = false;
                            this.newUpdatesBySymbol[item.symbol].clear();
                        }
                        // in case an exchange updates the same order id twice
                        const idSet = this.newUpdatesBySymbol[item.symbol];
                        const beforeLength = idSet.size;
                        idSet.add(item.id);
                        const afterLength = idSet.size;
                        this.allNewUpdates =
                            (this.allNewUpdates || 0) +
                            (afterLength - beforeLength);
                    }
                }

                module.exports = {
                    ArrayCache,
                    ArrayCacheByTimestamp,
                    ArrayCacheBySymbolById,
                };
            },
            {},
        ],
        22: [
            function (require, module, exports) {
                (function (Buffer) {
                    (function () {
                        "use strict";

                        const errors = require("../../base/errors"),
                            functions = require("../../base/functions"),
                            {
                                isNode,
                                isJsonEncodedObject,
                                deepExtend,
                                milliseconds,
                            } = functions,
                            {
                                RequestTimeout,
                                NetworkError,
                                NotSupported,
                                BaseError,
                            } = errors,
                            { inflate, gunzip } = require("./functions"),
                            Future = require("./Future");

                        module.exports = class Client {
                            constructor(
                                url,
                                onMessageCallback,
                                onErrorCallback,
                                onCloseCallback,
                                onConnectedCallback,
                                config = {}
                            ) {
                                const defaults = {
                                    url,
                                    onMessageCallback,
                                    onErrorCallback,
                                    onCloseCallback,
                                    onConnectedCallback,
                                    verbose: false, // verbose output
                                    protocols: undefined, // ws-specific protocols
                                    options: undefined, // ws-specific options
                                    futures: {},
                                    subscriptions: {},
                                    rejections: {}, // so that we can reject things in the future
                                    connected: undefined, // connection-related Future
                                    error: undefined, // stores low-level networking exception, if any
                                    connectionStarted: undefined, // initiation timestamp in milliseconds
                                    connectionEstablished: undefined, // success timestamp in milliseconds
                                    isConnected: false,
                                    connectionTimer: undefined, // connection-related setTimeout
                                    connectionTimeout: 10000, // in milliseconds, false to disable
                                    pingInterval: undefined, // stores the ping-related interval
                                    ping: undefined, // ping-function (if defined)
                                    keepAlive: 30000, // ping-pong keep-alive rate in milliseconds
                                    maxPingPongMisses: 2.0, // how many missing pongs to throw a RequestTimeout
                                    // timeout is not used atm
                                    // timeout: 30000, // throw if a request is not satisfied in 30 seconds, false to disable
                                    connection: undefined,
                                    startedConnecting: false,
                                    gunzip: false,
                                    inflate: false,
                                };
                                Object.assign(
                                    this,
                                    deepExtend(defaults, config)
                                );
                                // connection-related Future
                                this.connected = Future();
                            }

                            future(messageHash) {
                                if (!(messageHash in this.futures)) {
                                    this.futures[messageHash] = Future();
                                }
                                const future = this.futures[messageHash];
                                if (messageHash in this.rejections) {
                                    future.reject(this.rejections[messageHash]);
                                    delete this.rejections[messageHash];
                                }
                                return future;
                            }

                            resolve(result, messageHash) {
                                if (this.verbose && messageHash === undefined) {
                                    this.log(
                                        new Date(),
                                        "resolve received undefined messageHash"
                                    );
                                }
                                if (messageHash in this.futures) {
                                    const promise = this.futures[messageHash];
                                    promise.resolve(result);
                                    delete this.futures[messageHash];
                                }
                                return result;
                            }

                            reject(result, messageHash = undefined) {
                                if (messageHash) {
                                    if (messageHash in this.futures) {
                                        const promise =
                                            this.futures[messageHash];
                                        promise.reject(result);
                                        delete this.futures[messageHash];
                                    } else {
                                        // in the case that a promise was already fulfilled
                                        // and the client has not yet called watchMethod to create a new future
                                        // calling client.reject will do nothing
                                        // this means the rejection will be ignored and the code will continue executing
                                        // instead we store the rejection for later
                                        this.rejections[messageHash] = result;
                                    }
                                } else {
                                    const messageHashes = Object.keys(
                                        this.futures
                                    );
                                    for (
                                        let i = 0;
                                        i < messageHashes.length;
                                        i++
                                    ) {
                                        this.reject(result, messageHashes[i]);
                                    }
                                }
                                return result;
                            }

                            log(...args) {
                                console.log(...args);
                                // console.dir (args, { depth: null })
                            }

                            connect(backoffDelay = 0) {
                                throw new NotSupported(
                                    "connect() not implemented yet"
                                );
                            }

                            isOpen() {
                                throw new NotSupported(
                                    "isOpen() not implemented yet"
                                );
                            }

                            reset(error) {
                                this.clearConnectionTimeout();
                                this.clearPingInterval();
                                this.reject(error);
                            }

                            onConnectionTimeout() {
                                if (!this.isOpen()) {
                                    const error = new RequestTimeout(
                                        "Connection to " +
                                            this.url +
                                            " failed due to a connection timeout"
                                    );
                                    this.onError(error);
                                    this.connection.close(1006);
                                }
                            }

                            setConnectionTimeout() {
                                if (this.connectionTimeout) {
                                    const onConnectionTimeout =
                                        this.onConnectionTimeout.bind(this);
                                    this.connectionTimer = setTimeout(
                                        onConnectionTimeout,
                                        this.connectionTimeout
                                    );
                                }
                            }

                            clearConnectionTimeout() {
                                if (this.connectionTimer) {
                                    this.connectionTimer = clearTimeout(
                                        this.connectionTimer
                                    );
                                }
                            }

                            setPingInterval() {
                                if (this.keepAlive) {
                                    const onPingInterval =
                                        this.onPingInterval.bind(this);
                                    this.pingInterval = setInterval(
                                        onPingInterval,
                                        this.keepAlive
                                    );
                                }
                            }

                            clearPingInterval() {
                                if (this.pingInterval) {
                                    this.pingInterval = clearInterval(
                                        this.pingInterval
                                    );
                                }
                            }

                            onPingInterval() {
                                if (this.keepAlive && this.isOpen()) {
                                    const now = milliseconds();
                                    this.lastPong = this.lastPong || now;
                                    if (
                                        this.lastPong +
                                            this.keepAlive *
                                                this.maxPingPongMisses <
                                        now
                                    ) {
                                        this.onError(
                                            new RequestTimeout(
                                                "Connection to " +
                                                    this.url +
                                                    " timed out due to a ping-pong keepalive missing on time"
                                            )
                                        );
                                    } else {
                                        if (this.ping) {
                                            this.send(this.ping(this));
                                        } else if (isNode) {
                                            // can't do this inside browser
                                            // https://stackoverflow.com/questions/10585355/sending-websocket-ping-pong-frame-from-browser
                                            this.connection.ping();
                                        } else {
                                            // browsers handle ping-pong automatically therefore
                                            // in a browser we update lastPong on every call to
                                            // this function as if pong just came in to prevent the
                                            // client from thinking it's a stalled connection
                                            this.lastPong = now;
                                        }
                                    }
                                }
                            }

                            onOpen() {
                                if (this.verbose) {
                                    this.log(new Date(), "onOpen");
                                }
                                this.connectionEstablished = milliseconds();
                                this.isConnected = true;
                                this.connected.resolve(this.url);
                                // this.connection.terminate () // debugging
                                this.clearConnectionTimeout();
                                this.setPingInterval();
                                this.onConnectedCallback(this);
                            }

                            // this method is not used at this time, because in JS the ws client will
                            // respond to pings coming from the server with pongs automatically
                            // however, some devs may want to track connection states in their app
                            onPing() {
                                if (this.verbose) {
                                    this.log(new Date(), "onPing");
                                }
                            }

                            onPong() {
                                this.lastPong = milliseconds();
                                if (this.verbose) {
                                    this.log(new Date(), "onPong");
                                }
                            }

                            onError(error) {
                                if (this.verbose) {
                                    this.log(
                                        new Date(),
                                        "onError",
                                        error.message
                                    );
                                }
                                if (!(error instanceof BaseError)) {
                                    // in case of ErrorEvent from node_modules/ws/lib/event-target.js
                                    error = new NetworkError(error.message);
                                }
                                this.error = error;
                                this.reset(this.error);
                                this.onErrorCallback(this, this.error);
                            }

                            onClose(event) {
                                if (this.verbose) {
                                    this.log(new Date(), "onClose", event);
                                }
                                if (!this.error) {
                                    // todo: exception types for server-side disconnects
                                    this.reset(
                                        new NetworkError(
                                            "connection closed by remote server, closing code " +
                                                String(event.code)
                                        )
                                    );
                                }
                                this.onCloseCallback(this, event);
                            }

                            // this method is not used at this time
                            // but may be used to read protocol-level data like cookies, headers, etc
                            onUpgrade(message) {
                                if (this.verbose) {
                                    this.log(new Date(), "onUpgrade");
                                }
                            }

                            send(message) {
                                if (this.verbose) {
                                    this.log(new Date(), "sending", message);
                                }
                                message =
                                    typeof message === "string"
                                        ? message
                                        : JSON.stringify(message);
                                this.connection.send(message);
                            }

                            close() {
                                throw new NotSupported(
                                    "close() not implemented yet"
                                );
                            }

                            onMessage(message) {
                                // if we use onmessage we get MessageEvent objects
                                // MessageEvent {isTrusted: true, data: "{"e":"depthUpdate","E":1581358737706,"s":"ETHBTC",…"0.06200000"]],"a":[["0.02261300","0.00000000"]]}", origin: "wss://stream.binance.com:9443", lastEventId: "", source: null, …}
                                message = message.data;
                                if (message.byteLength !== undefined) {
                                    if (this.gunzip) {
                                        message = gunzip(message);
                                    } else if (this.inflate) {
                                        message = inflate(message);
                                    }
                                }
                                try {
                                    if (message instanceof Buffer) {
                                        message = message.toString();
                                    }
                                    if (isJsonEncodedObject(message)) {
                                        message = JSON.parse(
                                            message.replace(
                                                /:(\d{15,}),/g,
                                                ':"$1",'
                                            )
                                        );
                                    }
                                    if (this.verbose) {
                                        this.log(
                                            new Date(),
                                            "onMessage",
                                            message
                                        );
                                        // unlimited depth
                                        // this.log (new Date (), 'onMessage', util.inspect (message, false, null, true))
                                        // this.log (new Date (), 'onMessage', JSON.stringify (message, null, 4))
                                    }
                                } catch (e) {
                                    this.log(
                                        new Date(),
                                        "onMessage JSON.parse",
                                        e
                                    );
                                    // reset with a json encoding error ?
                                }
                                this.onMessageCallback(this, message);
                            }
                        };
                    }.call(this));
                }.call(this, require("buffer").Buffer));
            },
            {
                "../../base/errors": 6,
                "../../base/functions": 7,
                "./Future": 24,
                "./functions": 28,
                buffer: 80,
            },
        ],
        23: [
            function (require, module, exports) {
                "use strict";

                const BaseExchange = require("../../base/Exchange"),
                    throttle = require("../../base/functions").throttle,
                    WsClient = require("./WsClient"),
                    {
                        OrderBook,
                        IndexedOrderBook,
                        CountedOrderBook,
                    } = require("./OrderBook"),
                    functions = require("./functions"),
                    {
                        ExchangeError,
                        NotSupported,
                    } = require("../../base/errors");

                module.exports = class Exchange extends BaseExchange {
                    constructor(options = {}) {
                        super(options);
                        this.newUpdates = options.newUpdates || true;
                    }

                    inflate(data) {
                        return functions.inflate(data);
                    }

                    inflate64(data) {
                        return functions.inflate64(data);
                    }

                    gunzip(data) {
                        return functions.gunzip(data);
                    }

                    orderBook(snapshot = {}, depth = Number.MAX_SAFE_INTEGER) {
                        return new OrderBook(snapshot, depth);
                    }

                    indexedOrderBook(
                        snapshot = {},
                        depth = Number.MAX_SAFE_INTEGER
                    ) {
                        return new IndexedOrderBook(snapshot, depth);
                    }

                    countedOrderBook(
                        snapshot = {},
                        depth = Number.MAX_SAFE_INTEGER
                    ) {
                        return new CountedOrderBook(snapshot, depth);
                    }

                    client(url) {
                        this.clients = this.clients || {};
                        if (!this.clients[url]) {
                            const onMessage = this.handleMessage.bind(this);
                            const onError = this.onError.bind(this);
                            const onClose = this.onClose.bind(this);
                            const onConnected = this.onConnected.bind(this);
                            // decide client type here: ws / signalr / socketio
                            const wsOptions = this.safeValue(
                                this.options,
                                "ws",
                                {}
                            );
                            const options = this.deepExtend(
                                this.streaming,
                                {
                                    log: this.log
                                        ? this.log.bind(this)
                                        : this.log,
                                    ping: this.ping
                                        ? this.ping.bind(this)
                                        : this.ping,
                                    verbose: this.verbose,
                                    throttle: throttle(this.tokenBucket),
                                    // add support for proxies
                                    options: {
                                        agent:
                                            this.agent ||
                                            this.httpsAgent ||
                                            this.httpAgent,
                                    },
                                },
                                wsOptions
                            );
                            this.clients[url] = new WsClient(
                                url,
                                onMessage,
                                onError,
                                onClose,
                                onConnected,
                                options
                            );
                        }
                        return this.clients[url];
                    }

                    spawn(method, ...args) {
                        method.apply(this, args).catch((e) => {
                            // todo: handle spawned errors
                        });
                    }

                    delay(timeout, method, ...args) {
                        setTimeout(() => {
                            this.spawn(method, ...args);
                        }, timeout);
                    }

                    watch(
                        url,
                        messageHash,
                        message = undefined,
                        subscribeHash = undefined,
                        subscription = undefined
                    ) {
                        //
                        // Without comments the code of this method is short and easy:
                        //
                        //     const client = this.client (url)
                        //     const backoffDelay = 0
                        //     const future = client.future (messageHash)
                        //     const connected = client.connect (backoffDelay)
                        //     connected.then (() => {
                        //         if (message && !client.subscriptions[subscribeHash]) {
                        //             client.subscriptions[subscribeHash] = true
                        //             client.send (message)
                        //         }
                        //     }).catch ((error) => {})
                        //     return future
                        //
                        // The following is a longer version of this method with comments
                        //
                        const client = this.client(url);
                        // todo: calculate the backoff using the clients cache
                        const backoffDelay = 0;
                        //
                        //  watchOrderBook ---- future ----+---------------+----→ user
                        //                                 |               |
                        //                                 ↓               ↑
                        //                                 |               |
                        //                              connect ......→ resolve
                        //                                 |               |
                        //                                 ↓               ↑
                        //                                 |               |
                        //                             subscribe -----→ receive
                        //
                        const future = client.future(messageHash);
                        // we intentionally do not use await here to avoid unhandled exceptions
                        // the policy is to make sure that 100% of promises are resolved or rejected
                        // either with a call to client.resolve or client.reject with
                        //  a proper exception class instance
                        const connected = client.connect(backoffDelay);
                        // the following is executed only if the catch-clause does not
                        // catch any connection-level exceptions from the client
                        // (connection established successfully)
                        connected.then(() => {
                            if (!client.subscriptions[subscribeHash]) {
                                client.subscriptions[subscribeHash] =
                                    subscription || true;
                                const options = this.safeValue(
                                    this.options,
                                    "ws"
                                );
                                const cost = this.safeValue(options, "cost", 1);
                                if (message) {
                                    if (
                                        this.enableRateLimit &&
                                        client.throttle
                                    ) {
                                        // add cost here |
                                        //               |
                                        //               V
                                        client
                                            .throttle(cost)
                                            .then(() => {
                                                client.send(message);
                                            })
                                            .catch((e) => {
                                                throw e;
                                            });
                                    } else {
                                        client.send(message);
                                    }
                                }
                            }
                        });
                        return future;
                    }

                    onConnected(client, message = undefined) {
                        // for user hooks
                        // console.log ('Connected to', client.url)
                    }

                    onError(client, error) {
                        if (
                            client.url in this.clients &&
                            this.clients[client.url].error
                        ) {
                            delete this.clients[client.url];
                        }
                    }

                    onClose(client, error) {
                        if (client.error) {
                            // connection closed due to an error, do nothing
                        } else {
                            // server disconnected a working connection
                            if (this.clients[client.url]) {
                                delete this.clients[client.url];
                            }
                        }
                    }

                    async close() {
                        const clients = Object.values(this.clients || {});
                        for (let i = 0; i < clients.length; i++) {
                            const client = clients[i];
                            delete this.clients[client.url];
                            await client.close();
                        }
                    }

                    findTimeframe(timeframe, timeframes = undefined) {
                        timeframes = timeframes || this.timeframes;
                        const keys = Object.keys(timeframes);
                        for (let i = 0; i < keys.length; i++) {
                            const key = keys[i];
                            if (timeframes[key] === timeframe) {
                                return key;
                            }
                        }
                        return undefined;
                    }

                    async loadOrderBook(
                        client,
                        messageHash,
                        symbol,
                        limit = undefined,
                        params = {}
                    ) {
                        if (!(symbol in this.orderbooks)) {
                            client.reject(
                                new ExchangeError(
                                    this.id +
                                        " loadOrderBook() orderbook is not initiated"
                                ),
                                messageHash
                            );
                            return;
                        }
                        const stored = this.orderbooks[symbol];
                        try {
                            const orderBook = await this.fetchOrderBook(
                                symbol,
                                limit,
                                params
                            );
                            const cache = stored.cache;
                            const index = this.getCacheIndex(orderBook, cache);
                            if (index >= 0) {
                                stored.reset(orderBook);
                                this.handleDeltas(stored, cache.slice(index));
                                cache.length = 0;
                                client.resolve(stored, messageHash);
                            } else {
                                client.reject(
                                    new ExchangeError(
                                        this.id + " nonce is behind the cache"
                                    )
                                );
                            }
                        } catch (e) {
                            delete this.orderbooks[symbol];
                            client.reject(e, messageHash);
                        }
                    }

                    handleDeltas(orderbook, deltas) {
                        for (let i = 0; i < deltas.length; i++) {
                            this.handleDelta(orderbook, deltas[i]);
                        }
                    }

                    // eslint-disable-next-line no-unused-vars
                    getCacheIndex(orderbook, deltas) {
                        // return the first index of the cache that can be applied to the orderbook or -1 if not possible
                        return -1;
                    }
                };
            },
            {
                "../../base/Exchange": 3,
                "../../base/errors": 6,
                "../../base/functions": 7,
                "./OrderBook": 25,
                "./WsClient": 27,
                "./functions": 28,
            },
        ],
        24: [
            function (require, module, exports) {
                "use strict";

                module.exports = function Future() {
                    let resolve = undefined,
                        reject = undefined;

                    const p = new Promise((resolve_, reject_) => {
                        resolve = resolve_;
                        reject = reject_;
                    });

                    p.resolve = function _resolve() {
                        // eslint-disable-next-line prefer-rest-params
                        resolve.apply(this, arguments);
                    };

                    p.reject = function _reject() {
                        // eslint-disable-next-line prefer-rest-params
                        reject.apply(this, arguments);
                    };

                    return p;
                };
            },
            {},
        ],
        25: [
            function (require, module, exports) {
                /* eslint-disable max-classes-per-file */

                "use strict";

                const { iso8601 } = require("../../base/functions/time");
                const {
                        extend,
                        deepExtend,
                    } = require("../../base/functions/generic.js"),
                    {
                        Asks,
                        Bids,
                        CountedAsks,
                        CountedBids,
                        IndexedAsks,
                        IndexedBids,
                        IncrementalAsks,
                        IncrementalBids,
                        IncrementalIndexedAsks,
                        IncrementalIndexedBids,
                    } = require("./OrderBookSide");

                // ----------------------------------------------------------------------------
                // overwrites absolute volumes at price levels

                class OrderBook {
                    constructor(snapshot = {}, depth = undefined) {
                        Object.defineProperty(this, "cache", {
                            __proto__: null, // make it invisible
                            value: [],
                            writable: true,
                        });

                        depth = depth || Number.MAX_SAFE_INTEGER;

                        const defaults = {
                            bids: [],
                            asks: [],
                            timestamp: undefined,
                            datetime: undefined,
                            nonce: undefined,
                            symbol: undefined,
                        };

                        // merge to this
                        const entries = Object.entries(
                            extend(defaults, snapshot)
                        );
                        for (let i = 0; i < entries.length; i++) {
                            const [property, value] = entries[i];
                            this[property] = value;
                        }

                        // wrap plain arrays with Bids/Asks classes if necessary
                        if (this.asks.constructor.name === "Array") {
                            this.asks = new Asks(this.asks, depth);
                        }
                        if (this.bids.constructor.name === "Array") {
                            this.bids = new Bids(this.bids, depth);
                        }
                        if (this.timestamp) {
                            this.datetime = iso8601(this.timestamp);
                        }
                    }

                    limit() {
                        this.asks.limit();
                        this.bids.limit();
                        return this;
                    }

                    update(snapshot) {
                        if (
                            snapshot.nonce !== undefined &&
                            this.nonce !== undefined &&
                            snapshot.nonce <= this.nonce
                        ) {
                            return this;
                        }
                        this.nonce = snapshot.nonce;
                        this.timestamp = snapshot.timestamp;
                        this.datetime = iso8601(this.timestamp);
                        return this.reset(snapshot);
                    }

                    reset(snapshot = {}) {
                        this.asks.index.fill(Number.MAX_VALUE);
                        this.asks.length = 0;
                        if (snapshot.asks) {
                            for (let i = 0; i < snapshot.asks.length; i++) {
                                this.asks.storeArray(snapshot.asks[i]);
                            }
                        }
                        this.bids.index.fill(Number.MAX_VALUE);
                        this.bids.length = 0;
                        if (snapshot.bids) {
                            for (let i = 0; i < snapshot.bids.length; i++) {
                                this.bids.storeArray(snapshot.bids[i]);
                            }
                        }
                        this.nonce = snapshot.nonce;
                        this.timestamp = snapshot.timestamp;
                        this.datetime = iso8601(this.timestamp);
                        this.symbol = snapshot.symbol;
                        return this;
                    }
                }

                // ----------------------------------------------------------------------------
                // overwrites absolute volumes at price levels
                // or deletes price levels based on order counts (3rd value in a bidask delta)

                class CountedOrderBook extends OrderBook {
                    constructor(snapshot = {}, depth = undefined) {
                        super(
                            extend(snapshot, {
                                asks: new CountedAsks(
                                    snapshot.asks || [],
                                    depth
                                ),
                                bids: new CountedBids(
                                    snapshot.bids || [],
                                    depth
                                ),
                            })
                        );
                    }
                }

                // ----------------------------------------------------------------------------
                // indexed by order ids (3rd value in a bidask delta)

                class IndexedOrderBook extends OrderBook {
                    constructor(snapshot = {}, depth = undefined) {
                        super(
                            extend(snapshot, {
                                asks: new IndexedAsks(
                                    snapshot.asks || [],
                                    depth
                                ),
                                bids: new IndexedBids(
                                    snapshot.bids || [],
                                    depth
                                ),
                            })
                        );
                    }
                }

                // ----------------------------------------------------------------------------
                // adjusts the volumes by positive or negative relative changes or differences

                class IncrementalOrderBook extends OrderBook {
                    constructor(snapshot = {}, depth = undefined) {
                        super(
                            extend(snapshot, {
                                asks: new IncrementalAsks(
                                    snapshot.asks || [],
                                    depth
                                ),
                                bids: new IncrementalBids(
                                    snapshot.bids || [],
                                    depth
                                ),
                            })
                        );
                    }
                }

                // ----------------------------------------------------------------------------
                // incremental and indexed (2 in 1)

                class IncrementalIndexedOrderBook extends OrderBook {
                    constructor(snapshot = {}, depth = undefined) {
                        super(
                            extend(snapshot, {
                                asks: new IncrementalIndexedAsks(
                                    snapshot.asks || [],
                                    depth
                                ),
                                bids: new IncrementalIndexedBids(
                                    snapshot.bids || [],
                                    depth
                                ),
                            })
                        );
                    }
                }

                // ----------------------------------------------------------------------------

                module.exports = {
                    OrderBook,
                    CountedOrderBook,
                    IndexedOrderBook,
                    IncrementalOrderBook,
                    IncrementalIndexedOrderBook,
                };
            },
            {
                "../../base/functions/generic.js": 10,
                "../../base/functions/time": 16,
                "./OrderBookSide": 26,
            },
        ],
        26: [
            function (require, module, exports) {
                /* eslint-disable max-classes-per-file */

                "use strict";

                // ----------------------------------------------------------------------------
                //
                // Upto 10x faster after initializing memory for the floating point array
                // Author: github.com/frosty00
                // Email: carlo.revelli@berkeley.edu
                //

                function bisectLeft(array, x) {
                    let low = 0;
                    let high = array.length - 1;
                    while (low <= high) {
                        const mid = (low + high) >>> 1;
                        if (array[mid] - x < 0) low = mid + 1;
                        else high = mid - 1;
                    }
                    return low;
                }

                const SIZE = 1024;
                const SEED = new Float64Array(
                    new Array(SIZE).fill(Number.MAX_VALUE)
                );

                class OrderBookSide extends Array {
                    constructor(deltas = [], depth = undefined) {
                        super();
                        // a string-keyed dictionary of price levels / ids / indices
                        Object.defineProperty(this, "index", {
                            __proto__: null, // make it invisible
                            value: new Float64Array(SEED),
                            writable: true,
                        });
                        Object.defineProperty(this, "depth", {
                            __proto__: null, // make it invisible
                            value: depth || Number.MAX_SAFE_INTEGER,
                            writable: true,
                        });
                        // sort upon initiation
                        this.length = 0;
                        for (let i = 0; i < deltas.length; i++) {
                            this.storeArray(deltas[i].slice()); // slice is muy importante
                        }
                    }

                    storeArray(delta) {
                        const price = delta[0];
                        const size = delta[1];
                        const index_price = this.side ? -price : price;
                        const index = bisectLeft(this.index, index_price);
                        if (size) {
                            if (this.index[index] === index_price) {
                                this[index][1] = size;
                            } else {
                                this.length++;
                                this.index.copyWithin(
                                    index + 1,
                                    index,
                                    this.index.length
                                );
                                this.index[index] = index_price;
                                this.copyWithin(index + 1, index, this.length);
                                this[index] = delta;
                                // in the rare case of very large orderbooks being sent
                                if (this.length > this.index.length - 1) {
                                    const existing = Array.from(this.index);
                                    existing.length = this.length * 2;
                                    existing.fill(
                                        Number.MAX_VALUE,
                                        this.index.length
                                    );
                                    this.index = new Float64Array(existing);
                                }
                            }
                        } else if (this.index[index] === index_price) {
                            this.index.copyWithin(
                                index,
                                index + 1,
                                this.index.length
                            );
                            this.index[this.length - 1] = Number.MAX_VALUE;
                            this.copyWithin(index, index + 1, this.length);
                            this.length--;
                        }
                    }

                    // index an incoming delta in the string-price-keyed dictionary
                    store(price, size) {
                        this.storeArray([price, size]);
                    }

                    // replace stored orders with new values
                    limit() {
                        if (this.length > this.depth) {
                            for (let i = this.depth; i < this.length; i++) {
                                this.index[i] = Number.MAX_VALUE;
                            }
                            this.length = this.depth;
                        }
                    }
                }

                // ----------------------------------------------------------------------------
                // overwrites absolute volumes at price levels
                // or deletes price levels based on order counts (3rd value in a bidask delta)
                // this class stores vector arrays of values indexed by price

                class CountedOrderBookSide extends OrderBookSide {
                    store(price, size, count) {
                        this.storeArray([price, size, count]);
                    }

                    storeArray(delta) {
                        const price = delta[0];
                        const size = delta[1];
                        const count = delta[2];
                        const index_price = this.side ? -price : price;
                        const index = bisectLeft(this.index, index_price);
                        if (size && count) {
                            if (this.index[index] === index_price) {
                                const entry = this[index];
                                entry[1] = size;
                                entry[2] = count;
                            } else {
                                this.length++;
                                this.index.copyWithin(
                                    index + 1,
                                    index,
                                    this.index.length
                                );
                                this.index[index] = index_price;
                                this.copyWithin(index + 1, index, this.length);
                                this[index] = delta;
                                // in the rare case of very large orderbooks being sent
                                if (this.length > this.index.length - 1) {
                                    const existing = Array.from(this.index);
                                    existing.length = this.length * 2;
                                    existing.fill(
                                        Number.MAX_VALUE,
                                        this.index.length
                                    );
                                    this.index = new Float64Array(existing);
                                }
                            }
                        } else if (this.index[index] === index_price) {
                            this.index.copyWithin(
                                index,
                                index + 1,
                                this.index.length
                            );
                            this.index[this.length - 1] = Number.MAX_VALUE;
                            this.copyWithin(index, index + 1, this.length);
                            this.length--;
                        }
                    }
                }

                // ----------------------------------------------------------------------------
                // stores vector arrays indexed by id (3rd value in a bidask delta array)

                class IndexedOrderBookSide extends Array {
                    constructor(deltas = [], depth = Number.MAX_SAFE_INTEGER) {
                        super(deltas.length);
                        // a string-keyed dictionary of price levels / ids / indices
                        Object.defineProperty(this, "hashmap", {
                            __proto__: null, // make it invisible
                            value: new Map(),
                            writable: true,
                        });
                        Object.defineProperty(this, "index", {
                            __proto__: null, // make it invisible
                            value: new Float64Array(SEED),
                            writable: true,
                        });
                        Object.defineProperty(this, "depth", {
                            __proto__: null, // make it invisible
                            value: depth || Number.MAX_SAFE_INTEGER,
                            writable: true,
                        });
                        // sort upon initiation
                        for (let i = 0; i < deltas.length; i++) {
                            this.length = i;
                            this.storeArray(deltas[i].slice()); // slice is muy importante
                        }
                    }

                    store(price, size, id) {
                        this.storeArray([price, size, id]);
                    }

                    storeArray(delta) {
                        const price = delta[0];
                        const size = delta[1];
                        const id = delta[2];
                        let index_price;
                        if (price !== undefined) {
                            index_price = this.side ? -price : price;
                        } else {
                            index_price = undefined;
                        }
                        if (size) {
                            if (this.hashmap.has(id)) {
                                const old_price = this.hashmap.get(id);
                                index_price = index_price || old_price;
                                // in case price is not sent
                                delta[0] = Math.abs(index_price);
                                if (index_price === old_price) {
                                    const index = bisectLeft(
                                        this.index,
                                        index_price
                                    );
                                    this.index[index] = index_price;
                                    this[index] = delta;
                                    return;
                                } else {
                                    // remove old price from index
                                    const old_index = bisectLeft(
                                        this.index,
                                        old_price
                                    );
                                    this.index.copyWithin(
                                        old_index,
                                        old_index + 1,
                                        this.index.length
                                    );
                                    this.index[this.length - 1] =
                                        Number.MAX_VALUE;
                                    this.copyWithin(
                                        old_index,
                                        old_index + 1,
                                        this.length
                                    );
                                    this.length--;
                                }
                            }
                            // insert new price level
                            this.hashmap.set(id, index_price);
                            const index = bisectLeft(this.index, index_price);
                            // insert new price level into index
                            this.length++;
                            this.index.copyWithin(
                                index + 1,
                                index,
                                this.index.length
                            );
                            this.index[index] = index_price;
                            this.copyWithin(index + 1, index, this.length);
                            this[index] = delta;
                            // in the rare case of very large orderbooks being sent
                            if (this.length > this.index.length - 1) {
                                const existing = Array.from(this.index);
                                existing.length = this.length * 2;
                                existing.fill(
                                    Number.MAX_VALUE,
                                    this.index.length
                                );
                                this.index = new Float64Array(existing);
                            }
                        } else if (this.hashmap.has(id)) {
                            const old_price = this.hashmap.get(id);
                            const index = bisectLeft(this.index, old_price);
                            this.index.copyWithin(
                                index,
                                index + 1,
                                this.index.length
                            );
                            this.index[this.length - 1] = Number.MAX_VALUE;
                            this.copyWithin(index, index + 1, this.length);
                            this.length--;
                            this.hashmap.delete(id);
                        }
                    }

                    // replace stored orders with new values
                    limit() {
                        if (this.length > this.depth) {
                            for (let i = this.depth; i < this.length; i++) {
                                // diff
                                this.hashmap.delete(this.index[i]);
                                this.index[i] = Number.MAX_VALUE;
                            }
                            this.length = this.depth;
                        }
                    }
                }

                // ----------------------------------------------------------------------------
                // a more elegant syntax is possible here, but native inheritance is portable

                class Asks extends OrderBookSide {
                    get side() {
                        return false;
                    }
                }
                class Bids extends OrderBookSide {
                    get side() {
                        return true;
                    }
                }
                class CountedAsks extends CountedOrderBookSide {
                    get side() {
                        return false;
                    }
                }
                class CountedBids extends CountedOrderBookSide {
                    get side() {
                        return true;
                    }
                }
                class IndexedAsks extends IndexedOrderBookSide {
                    get side() {
                        return false;
                    }
                }
                class IndexedBids extends IndexedOrderBookSide {
                    get side() {
                        return true;
                    }
                }

                // ----------------------------------------------------------------------------

                module.exports = {
                    // basic
                    Asks,
                    Bids,
                    OrderBookSide,

                    // count-based
                    CountedAsks,
                    CountedBids,
                    CountedOrderBookSide,

                    // order-id based
                    IndexedAsks,
                    IndexedBids,
                    IndexedOrderBookSide,
                };
            },
            {},
        ],
        27: [
            function (require, module, exports) {
                "use strict";

                const functions = require("../../base/functions.js"),
                    { sleep, isNode, milliseconds } = functions,
                    Client = require("./Client"),
                    // eslint-disable-next-line
                    WebSocket = isNode ? require("ws") : self.WebSocket;

                module.exports = class WsClient extends Client {
                    createConnection() {
                        if (this.verbose) {
                            this.log(new Date(), "connecting to", this.url);
                        }
                        this.connectionStarted = milliseconds();
                        this.setConnectionTimeout();
                        if (isNode) {
                            this.connection = new WebSocket(
                                this.url,
                                this.protocols,
                                this.options
                            );
                        } else {
                            this.connection = new WebSocket(
                                this.url,
                                this.protocols
                            );
                        }

                        this.connection.onopen = this.onOpen.bind(this);
                        this.connection.onmessage = this.onMessage.bind(this);
                        this.connection.onerror = this.onError.bind(this);
                        this.connection.onclose = this.onClose.bind(this);
                        if (isNode) {
                            this.connection
                                .on("ping", this.onPing.bind(this))
                                .on("pong", this.onPong.bind(this))
                                .on("upgrade", this.onUpgrade.bind(this));
                        }
                        // this.connection.terminate () // debugging
                        // this.connection.close () // debugging
                    }

                    connect(backoffDelay = 0) {
                        if (!this.startedConnecting) {
                            this.startedConnecting = true;
                            // exponential backoff for consequent ws connections if necessary
                            if (backoffDelay) {
                                sleep(backoffDelay).then(
                                    this.createConnection.bind(this)
                                );
                            } else {
                                this.createConnection();
                            }
                        }
                        return this.connected;
                    }

                    isOpen() {
                        return this.connection.readyState === WebSocket.OPEN;
                    }

                    close() {
                        if (this.connection instanceof WebSocket) {
                            return this.connection.close();
                        }
                    }
                };
            },
            { "../../base/functions.js": 7, "./Client": 22, ws: 135 },
        ],
        28: [
            function (require, module, exports) {
                (function (Buffer) {
                    (function () {
                        "use strict";

                        const { inflateRawSync, gunzipSync } = require("zlib");

                        function inflate(data) {
                            return inflateRawSync(data).toString();
                        }

                        function inflate64(data) {
                            return inflate(Buffer.from(data, "base64"));
                        }

                        function gunzip(data) {
                            return gunzipSync(data).toString();
                        }

                        module.exports = {
                            inflate,
                            inflate64,
                            gunzip,
                        };
                    }.call(this));
                }.call(this, require("buffer").Buffer));
            },
            { buffer: 80, zlib: 79 },
        ],
        29: [
            function (require, module, exports) {
                "use strict";

                // ----------------------------------------------------------------------------

                const binanceRest = require("../binance.js");
                const Precise = require("../base/Precise");
                const {
                    ExchangeError,
                    ArgumentsRequired,
                } = require("../base/errors");
                const {
                    ArrayCache,
                    ArrayCacheByTimestamp,
                    ArrayCacheBySymbolById,
                } = require("./base/Cache");

                // -----------------------------------------------------------------------------

                module.exports = class binance extends binanceRest {
                    describe() {
                        return this.deepExtend(super.describe(), {
                            has: {
                                ws: true,
                                watchBalance: true,
                                watchMyTrades: true,
                                watchOHLCV: true,
                                watchOrderBook: true,
                                watchOrders: true,
                                watchTicker: true,
                                watchTickers: true,
                                watchTrades: true,
                            },
                            urls: {
                                test: {
                                    ws: {
                                        spot: "wss://testnet.binance.vision/ws",
                                        margin: "wss://testnet.binance.vision/ws",
                                        future: "wss://stream.binancefuture.com/ws",
                                        delivery:
                                            "wss://dstream.binancefuture.com/ws",
                                    },
                                },
                                api: {
                                    ws: {
                                        spot: "wss://stream.binance.com:9443/ws",
                                        margin: "wss://stream.binance.com:9443/ws",
                                        future: "wss://fstream.binance.com/ws",
                                        delivery:
                                            "wss://dstream.binance.com/ws",
                                    },
                                },
                            },
                            options: {
                                streamLimits: {
                                    spot: 50, // max 1024
                                    margin: 50, // max 1024
                                    future: 50, // max 200
                                    delivery: 50, // max 200
                                },
                                streamBySubscriptionsHash: {},
                                streamIndex: -1,
                                // get updates every 1000ms or 100ms
                                // or every 0ms in real-time for futures
                                watchOrderBookRate: 100,
                                tradesLimit: 1000,
                                ordersLimit: 1000,
                                OHLCVLimit: 1000,
                                requestId: {},
                                watchOrderBookLimit: 1000, // default limit
                                watchTrades: {
                                    name: "trade", // 'trade' or 'aggTrade'
                                },
                                watchTicker: {
                                    name: "ticker", // ticker = 1000ms L1+OHLCV, bookTicker = real-time L1
                                },
                                watchTickers: {
                                    name: "ticker", // ticker or miniTicker or bookTicker
                                },
                                watchBalance: {
                                    fetchBalanceSnapshot: false, // or true
                                    awaitBalanceSnapshot: true, // whether to wait for the balance snapshot before providing updates
                                },
                                wallet: "wb", // wb = wallet balance, cw = cross balance
                                listenKeyRefreshRate: 1200000, // 20 mins
                                ws: {
                                    cost: 5,
                                },
                            },
                        });
                    }

                    requestId(url) {
                        const options = this.safeValue(
                            this.options,
                            "requestId",
                            {}
                        );
                        const previousValue = this.safeInteger(options, url, 0);
                        const newValue = this.sum(previousValue, 1);
                        this.options["requestId"][url] = newValue;
                        return newValue;
                    }

                    stream(type, subscriptionHash) {
                        const streamBySubscriptionsHash = this.safeValue(
                            this.options,
                            "streamBySubscriptionsHash",
                            {}
                        );
                        let stream = this.safeString(
                            streamBySubscriptionsHash,
                            subscriptionHash
                        );
                        if (stream === undefined) {
                            let streamIndex = this.safeInteger(
                                this.options,
                                "streamIndex",
                                -1
                            );
                            const streamLimits = this.safeValue(
                                this.options,
                                "streamLimits"
                            );
                            const streamLimit = this.safeInteger(
                                streamLimits,
                                type
                            );
                            streamIndex = streamIndex + 1;
                            const normalizedIndex = streamIndex % streamLimit;
                            this.options["streamIndex"] = streamIndex;
                            stream = this.numberToString(normalizedIndex);
                            this.options["streamBySubscriptionsHash"][
                                subscriptionHash
                            ] = stream;
                        }
                        return stream;
                    }

                    onError(client, error) {
                        this.options["streamBySubscriptionsHash"] = {};
                        this.options["streamIndex"] = -1;
                        super.onError(client, error);
                    }

                    onClose(client, error) {
                        this.options["streamBySubscriptionsHash"] = {};
                        this.options["streamIndex"] = -1;
                        super.onClose(client, error);
                    }

                    async watchOrderBook(
                        symbol,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#watchOrderBook
                         * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
                         * @param {string} symbol unified symbol of the market to fetch the order book for
                         * @param {int|undefined} limit the maximum amount of order book entries to return
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure} indexed by market symbols
                         */
                        //
                        // todo add support for <levels>-snapshots (depth)
                        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md#partial-book-depth-streams        // <symbol>@depth<levels>@100ms or <symbol>@depth<levels> (1000ms)
                        // valid <levels> are 5, 10, or 20
                        //
                        // default 100, max 1000, valid limits 5, 10, 20, 50, 100, 500, 1000
                        if (limit !== undefined) {
                            if (
                                limit !== 5 &&
                                limit !== 10 &&
                                limit !== 20 &&
                                limit !== 50 &&
                                limit !== 100 &&
                                limit !== 500 &&
                                limit !== 1000
                            ) {
                                throw new ExchangeError(
                                    this.id +
                                        " watchOrderBook limit argument must be undefined, 5, 10, 20, 50, 100, 500 or 1000"
                                );
                            }
                        }
                        //
                        await this.loadMarkets();
                        const defaultType = this.safeString2(
                            this.options,
                            "watchOrderBook",
                            "defaultType",
                            "spot"
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        const query = this.omit(params, "type");
                        const market = this.market(symbol);
                        //
                        // notice the differences between trading futures and spot trading
                        // the algorithms use different urls in step 1
                        // delta caching and merging also differs in steps 4, 5, 6
                        //
                        // spot/margin
                        // https://binance-docs.github.io/apidocs/spot/en/#how-to-manage-a-local-order-book-correctly
                        //
                        // 1. Open a stream to wss://stream.binance.com:9443/ws/bnbbtc@depth.
                        // 2. Buffer the events you receive from the stream.
                        // 3. Get a depth snapshot from https://www.binance.com/api/v1/depth?symbol=BNBBTC&limit=1000 .
                        // 4. Drop any event where u is <= lastUpdateId in the snapshot.
                        // 5. The first processed event should have U <= lastUpdateId+1 AND u >= lastUpdateId+1.
                        // 6. While listening to the stream, each new event's U should be equal to the previous event's u+1.
                        // 7. The data in each event is the absolute quantity for a price level.
                        // 8. If the quantity is 0, remove the price level.
                        // 9. Receiving an event that removes a price level that is not in your local order book can happen and is normal.
                        //
                        // futures
                        // https://binance-docs.github.io/apidocs/futures/en/#how-to-manage-a-local-order-book-correctly
                        //
                        // 1. Open a stream to wss://fstream.binance.com/stream?streams=btcusdt@depth.
                        // 2. Buffer the events you receive from the stream. For same price, latest received update covers the previous one.
                        // 3. Get a depth snapshot from https://fapi.binance.com/fapi/v1/depth?symbol=BTCUSDT&limit=1000 .
                        // 4. Drop any event where u is < lastUpdateId in the snapshot.
                        // 5. The first processed event should have U <= lastUpdateId AND u >= lastUpdateId
                        // 6. While listening to the stream, each new event's pu should be equal to the previous event's u, otherwise initialize the process from step 3.
                        // 7. The data in each event is the absolute quantity for a price level.
                        // 8. If the quantity is 0, remove the price level.
                        // 9. Receiving an event that removes a price level that is not in your local order book can happen and is normal.
                        //
                        const name = "depth";
                        const messageHash = market["lowercaseId"] + "@" + name;
                        const url =
                            this.urls["api"]["ws"][type] +
                            "/" +
                            this.stream(type, messageHash);
                        const requestId = this.requestId(url);
                        const watchOrderBookRate = this.safeString(
                            this.options,
                            "watchOrderBookRate",
                            "100"
                        );
                        const request = {
                            method: "SUBSCRIBE",
                            params: [
                                messageHash + "@" + watchOrderBookRate + "ms",
                            ],
                            id: requestId,
                        };
                        const subscription = {
                            id: requestId.toString(),
                            messageHash: messageHash,
                            name: name,
                            symbol: market["symbol"],
                            method: this.handleOrderBookSubscription,
                            limit: limit,
                            type: type,
                            params: params,
                        };
                        const message = this.extend(request, query);
                        // 1. Open a stream to wss://stream.binance.com:9443/ws/bnbbtc@depth.
                        const orderbook = await this.watch(
                            url,
                            messageHash,
                            message,
                            messageHash,
                            subscription
                        );
                        return orderbook.limit();
                    }

                    async fetchOrderBookSnapshot(
                        client,
                        message,
                        subscription
                    ) {
                        const defaultLimit = this.safeInteger(
                            this.options,
                            "watchOrderBookLimit",
                            1000
                        );
                        const type = this.safeValue(subscription, "type");
                        const symbol = this.safeString(subscription, "symbol");
                        const messageHash = this.safeString(
                            subscription,
                            "messageHash"
                        );
                        const limit = this.safeInteger(
                            subscription,
                            "limit",
                            defaultLimit
                        );
                        const params = this.safeValue(subscription, "params");
                        // 3. Get a depth snapshot from https://www.binance.com/api/v1/depth?symbol=BNBBTC&limit=1000 .
                        // todo: this is a synch blocking call in ccxt.php - make it async
                        // default 100, max 1000, valid limits 5, 10, 20, 50, 100, 500, 1000
                        const snapshot = await this.fetchOrderBook(
                            symbol,
                            limit,
                            params
                        );
                        const orderbook = this.safeValue(
                            this.orderbooks,
                            symbol
                        );
                        if (orderbook === undefined) {
                            // if the orderbook is dropped before the snapshot is received
                            return;
                        }
                        orderbook.reset(snapshot);
                        // unroll the accumulated deltas
                        const messages = orderbook.cache;
                        for (let i = 0; i < messages.length; i++) {
                            const message = messages[i];
                            const U = this.safeInteger(message, "U");
                            const u = this.safeInteger(message, "u");
                            const pu = this.safeInteger(message, "pu");
                            if (type === "future") {
                                // 4. Drop any event where u is < lastUpdateId in the snapshot
                                if (u < orderbook["nonce"]) {
                                    continue;
                                }
                                // 5. The first processed event should have U <= lastUpdateId AND u >= lastUpdateId
                                if (
                                    (U <= orderbook["nonce"] &&
                                        u >= orderbook["nonce"]) ||
                                    pu === orderbook["nonce"]
                                ) {
                                    this.handleOrderBookMessage(
                                        client,
                                        message,
                                        orderbook
                                    );
                                }
                            } else {
                                // 4. Drop any event where u is <= lastUpdateId in the snapshot
                                if (u <= orderbook["nonce"]) {
                                    continue;
                                }
                                // 5. The first processed event should have U <= lastUpdateId+1 AND u >= lastUpdateId+1
                                if (
                                    U - 1 <= orderbook["nonce"] &&
                                    u - 1 >= orderbook["nonce"]
                                ) {
                                    this.handleOrderBookMessage(
                                        client,
                                        message,
                                        orderbook
                                    );
                                }
                            }
                        }
                        this.orderbooks[symbol] = orderbook;
                        client.resolve(orderbook, messageHash);
                    }

                    handleDelta(bookside, delta) {
                        const price = this.safeFloat(delta, 0);
                        const amount = this.safeFloat(delta, 1);
                        bookside.store(price, amount);
                    }

                    handleDeltas(bookside, deltas) {
                        for (let i = 0; i < deltas.length; i++) {
                            this.handleDelta(bookside, deltas[i]);
                        }
                    }

                    handleOrderBookMessage(client, message, orderbook) {
                        const u = this.safeInteger(message, "u");
                        this.handleDeltas(
                            orderbook["asks"],
                            this.safeValue(message, "a", [])
                        );
                        this.handleDeltas(
                            orderbook["bids"],
                            this.safeValue(message, "b", [])
                        );
                        orderbook["nonce"] = u;
                        const timestamp = this.safeInteger(message, "E");
                        orderbook["timestamp"] = timestamp;
                        orderbook["datetime"] = this.iso8601(timestamp);
                        return orderbook;
                    }

                    handleOrderBook(client, message) {
                        //
                        // initial snapshot is fetched with ccxt's fetchOrderBook
                        // the feed does not include a snapshot, just the deltas
                        //
                        //     {
                        //         "e": "depthUpdate", // Event type
                        //         "E": 1577554482280, // Event time
                        //         "s": "BNBBTC", // Symbol
                        //         "U": 157, // First update ID in event
                        //         "u": 160, // Final update ID in event
                        //         "b": [ // bids
                        //             [ "0.0024", "10" ], // price, size
                        //         ],
                        //         "a": [ // asks
                        //             [ "0.0026", "100" ], // price, size
                        //         ]
                        //     }
                        //
                        const marketId = this.safeString(message, "s");
                        const market = this.safeMarket(marketId);
                        const symbol = market["symbol"];
                        const name = "depth";
                        const messageHash = market["lowercaseId"] + "@" + name;
                        const orderbook = this.safeValue(
                            this.orderbooks,
                            symbol
                        );
                        if (orderbook === undefined) {
                            //
                            // https://github.com/ccxt/ccxt/issues/6672
                            //
                            // Sometimes Binance sends the first delta before the subscription
                            // confirmation arrives. At that point the orderbook is not
                            // initialized yet and the snapshot has not been requested yet
                            // therefore it is safe to drop these premature messages.
                            //
                            return;
                        }
                        const nonce = this.safeInteger(orderbook, "nonce");
                        if (nonce === undefined) {
                            // 2. Buffer the events you receive from the stream.
                            orderbook.cache.push(message);
                        } else {
                            try {
                                const U = this.safeInteger(message, "U");
                                const u = this.safeInteger(message, "u");
                                const pu = this.safeInteger(message, "pu");
                                if (pu === undefined) {
                                    // spot
                                    // 4. Drop any event where u is <= lastUpdateId in the snapshot
                                    if (u > orderbook["nonce"]) {
                                        const timestamp = this.safeInteger(
                                            orderbook,
                                            "timestamp"
                                        );
                                        let conditional = undefined;
                                        if (timestamp === undefined) {
                                            // 5. The first processed event should have U <= lastUpdateId+1 AND u >= lastUpdateId+1
                                            conditional =
                                                U - 1 <= orderbook["nonce"] &&
                                                u - 1 >= orderbook["nonce"];
                                        } else {
                                            // 6. While listening to the stream, each new event's U should be equal to the previous event's u+1.
                                            conditional =
                                                U - 1 === orderbook["nonce"];
                                        }
                                        if (conditional) {
                                            this.handleOrderBookMessage(
                                                client,
                                                message,
                                                orderbook
                                            );
                                            if (nonce < orderbook["nonce"]) {
                                                client.resolve(
                                                    orderbook,
                                                    messageHash
                                                );
                                            }
                                        } else {
                                            // todo: client.reject from handleOrderBookMessage properly
                                            throw new ExchangeError(
                                                this.id +
                                                    " handleOrderBook received an out-of-order nonce"
                                            );
                                        }
                                    }
                                } else {
                                    // future
                                    // 4. Drop any event where u is < lastUpdateId in the snapshot
                                    if (u >= orderbook["nonce"]) {
                                        // 5. The first processed event should have U <= lastUpdateId AND u >= lastUpdateId
                                        // 6. While listening to the stream, each new event's pu should be equal to the previous event's u, otherwise initialize the process from step 3
                                        if (
                                            U <= orderbook["nonce"] ||
                                            pu === orderbook["nonce"]
                                        ) {
                                            this.handleOrderBookMessage(
                                                client,
                                                message,
                                                orderbook
                                            );
                                            if (nonce <= orderbook["nonce"]) {
                                                client.resolve(
                                                    orderbook,
                                                    messageHash
                                                );
                                            }
                                        } else {
                                            // todo: client.reject from handleOrderBookMessage properly
                                            throw new ExchangeError(
                                                this.id +
                                                    " handleOrderBook received an out-of-order nonce"
                                            );
                                        }
                                    }
                                }
                            } catch (e) {
                                delete this.orderbooks[symbol];
                                delete client.subscriptions[messageHash];
                                client.reject(e, messageHash);
                            }
                        }
                    }

                    handleOrderBookSubscription(client, message, subscription) {
                        const defaultLimit = this.safeInteger(
                            this.options,
                            "watchOrderBookLimit",
                            1000
                        );
                        const symbol = this.safeString(subscription, "symbol");
                        const limit = this.safeInteger(
                            subscription,
                            "limit",
                            defaultLimit
                        );
                        if (symbol in this.orderbooks) {
                            delete this.orderbooks[symbol];
                        }
                        this.orderbooks[symbol] = this.orderBook({}, limit);
                        // fetch the snapshot in a separate async call
                        this.spawn(
                            this.fetchOrderBookSnapshot,
                            client,
                            message,
                            subscription
                        );
                    }

                    handleSubscriptionStatus(client, message) {
                        //
                        //     {
                        //         "result": null,
                        //         "id": 1574649734450
                        //     }
                        //
                        const id = this.safeString(message, "id");
                        const subscriptionsById = this.indexBy(
                            client.subscriptions,
                            "id"
                        );
                        const subscription = this.safeValue(
                            subscriptionsById,
                            id,
                            {}
                        );
                        const method = this.safeValue(subscription, "method");
                        if (method !== undefined) {
                            method.call(this, client, message, subscription);
                        }
                        return message;
                    }

                    async watchTrades(
                        symbol,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#watchTrades
                         * @description get the list of most recent trades for a particular symbol
                         * @param {string} symbol unified symbol of the market to fetch trades for
                         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
                         * @param {int|undefined} limit the maximum amount of trades to fetch
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const options = this.safeValue(
                            this.options,
                            "watchTrades",
                            {}
                        );
                        const name = this.safeString(options, "name", "trade");
                        const messageHash = market["lowercaseId"] + "@" + name;
                        const defaultType = this.safeString(
                            this.options,
                            "defaultType",
                            "spot"
                        );
                        const watchTradesType = this.safeString2(
                            options,
                            "type",
                            "defaultType",
                            defaultType
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            watchTradesType
                        );
                        const query = this.omit(params, "type");
                        const url =
                            this.urls["api"]["ws"][type] +
                            "/" +
                            this.stream(type, messageHash);
                        const requestId = this.requestId(url);
                        const request = {
                            method: "SUBSCRIBE",
                            params: [messageHash],
                            id: requestId,
                        };
                        const subscribe = {
                            id: requestId,
                        };
                        const trades = await this.watch(
                            url,
                            messageHash,
                            this.extend(request, query),
                            messageHash,
                            subscribe
                        );
                        if (this.newUpdates) {
                            limit = trades.getLimit(symbol, limit);
                        }
                        return this.filterBySinceLimit(
                            trades,
                            since,
                            limit,
                            "timestamp",
                            true
                        );
                    }

                    parseTrade(trade, market = undefined) {
                        //
                        // public watchTrades
                        //
                        //     {
                        //         e: 'trade',       // event type
                        //         E: 1579481530911, // event time
                        //         s: 'ETHBTC',      // symbol
                        //         t: 158410082,     // trade id
                        //         p: '0.01914100',  // price
                        //         q: '0.00700000',  // quantity
                        //         b: 586187049,     // buyer order id
                        //         a: 586186710,     // seller order id
                        //         T: 1579481530910, // trade time
                        //         m: false,         // is the buyer the market maker
                        //         M: true           // binance docs say it should be ignored
                        //     }
                        //
                        //     {
                        //        "e": "aggTrade",  // Event type
                        //        "E": 123456789,   // Event time
                        //        "s": "BNBBTC",    // Symbol
                        //        "a": 12345,       // Aggregate trade ID
                        //        "p": "0.001",     // Price
                        //        "q": "100",       // Quantity
                        //        "f": 100,         // First trade ID
                        //        "l": 105,         // Last trade ID
                        //        "T": 123456785,   // Trade time
                        //        "m": true,        // Is the buyer the market maker?
                        //        "M": true         // Ignore
                        //     }
                        //
                        // private watchMyTrades spot
                        //
                        //     {
                        //         e: 'executionReport',
                        //         E: 1611063861489,
                        //         s: 'BNBUSDT',
                        //         c: 'm4M6AD5MF3b1ERe65l4SPq',
                        //         S: 'BUY',
                        //         o: 'MARKET',
                        //         f: 'GTC',
                        //         q: '2.00000000',
                        //         p: '0.00000000',
                        //         P: '0.00000000',
                        //         F: '0.00000000',
                        //         g: -1,
                        //         C: '',
                        //         x: 'TRADE',
                        //         X: 'PARTIALLY_FILLED',
                        //         r: 'NONE',
                        //         i: 1296882607,
                        //         l: '0.33200000',
                        //         z: '0.33200000',
                        //         L: '46.86600000',
                        //         n: '0.00033200',
                        //         N: 'BNB',
                        //         T: 1611063861488,
                        //         t: 109747654,
                        //         I: 2696953381,
                        //         w: false,
                        //         m: false,
                        //         M: true,
                        //         O: 1611063861488,
                        //         Z: '15.55951200',
                        //         Y: '15.55951200',
                        //         Q: '0.00000000'
                        //     }
                        //
                        // private watchMyTrades future/delivery
                        //
                        //     {
                        //         s: 'BTCUSDT',
                        //         c: 'pb2jD6ZQHpfzSdUac8VqMK',
                        //         S: 'SELL',
                        //         o: 'MARKET',
                        //         f: 'GTC',
                        //         q: '0.001',
                        //         p: '0',
                        //         ap: '33468.46000',
                        //         sp: '0',
                        //         x: 'TRADE',
                        //         X: 'FILLED',
                        //         i: 13351197194,
                        //         l: '0.001',
                        //         z: '0.001',
                        //         L: '33468.46',
                        //         n: '0.00027086',
                        //         N: 'BNB',
                        //         T: 1612095165362,
                        //         t: 458032604,
                        //         b: '0',
                        //         a: '0',
                        //         m: false,
                        //         R: false,
                        //         wt: 'CONTRACT_PRICE',
                        //         ot: 'MARKET',
                        //         ps: 'BOTH',
                        //         cp: false,
                        //         rp: '0.00335000',
                        //         pP: false,
                        //         si: 0,
                        //         ss: 0
                        //     }
                        //
                        const executionType = this.safeString(trade, "x");
                        const isTradeExecution = executionType === "TRADE";
                        if (!isTradeExecution) {
                            return super.parseTrade(trade, market);
                        }
                        const id = this.safeString2(trade, "t", "a");
                        const timestamp = this.safeInteger(trade, "T");
                        const price = this.safeFloat2(trade, "L", "p");
                        let amount = this.safeFloat(trade, "q");
                        if (isTradeExecution) {
                            amount = this.safeFloat(trade, "l", amount);
                        }
                        let cost = this.safeFloat(trade, "Y");
                        if (cost === undefined) {
                            if (price !== undefined && amount !== undefined) {
                                cost = price * amount;
                            }
                        }
                        const marketId = this.safeString(trade, "s");
                        const symbol = this.safeSymbol(marketId);
                        let side = this.safeStringLower(trade, "S");
                        let takerOrMaker = undefined;
                        const orderId = this.safeString(trade, "i");
                        if ("m" in trade) {
                            if (side === undefined) {
                                side = trade["m"] ? "sell" : "buy"; // this is reversed intentionally
                            }
                            takerOrMaker = trade["m"] ? "maker" : "taker";
                        }
                        let fee = undefined;
                        const feeCost = this.safeFloat(trade, "n");
                        if (feeCost !== undefined) {
                            const feeCurrencyId = this.safeString(trade, "N");
                            const feeCurrencyCode =
                                this.safeCurrencyCode(feeCurrencyId);
                            fee = {
                                cost: feeCost,
                                currency: feeCurrencyCode,
                            };
                        }
                        const type = this.safeStringLower(trade, "o");
                        return {
                            info: trade,
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            symbol: symbol,
                            id: id,
                            order: orderId,
                            type: type,
                            takerOrMaker: takerOrMaker,
                            side: side,
                            price: price,
                            amount: amount,
                            cost: cost,
                            fee: fee,
                        };
                    }

                    handleTrade(client, message) {
                        // the trade streams push raw trade information in real-time
                        // each trade has a unique buyer and seller
                        const marketId = this.safeString(message, "s");
                        const market = this.safeMarket(marketId);
                        const symbol = market["symbol"];
                        const lowerCaseId = this.safeStringLower(message, "s");
                        const event = this.safeString(message, "e");
                        const messageHash = lowerCaseId + "@" + event;
                        const trade = this.parseTrade(message, market);
                        let tradesArray = this.safeValue(this.trades, symbol);
                        if (tradesArray === undefined) {
                            const limit = this.safeInteger(
                                this.options,
                                "tradesLimit",
                                1000
                            );
                            tradesArray = new ArrayCache(limit);
                        }
                        tradesArray.append(trade);
                        this.trades[symbol] = tradesArray;
                        client.resolve(tradesArray, messageHash);
                    }

                    async watchOHLCV(
                        symbol,
                        timeframe = "1m",
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#watchOHLCV
                         * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
                         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
                         * @param {string} timeframe the length of time each candle represents
                         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
                         * @param {int|undefined} limit the maximum amount of candles to fetch
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const marketId = market["lowercaseId"];
                        const interval = this.timeframes[timeframe];
                        const name = "kline";
                        const messageHash =
                            marketId + "@" + name + "_" + interval;
                        const options = this.safeValue(
                            this.options,
                            "watchOHLCV",
                            {}
                        );
                        const defaultType = this.safeString(
                            this.options,
                            "defaultType",
                            "spot"
                        );
                        const watchOHLCVType = this.safeString2(
                            options,
                            "type",
                            "defaultType",
                            defaultType
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            watchOHLCVType
                        );
                        const query = this.omit(params, "type");
                        const url =
                            this.urls["api"]["ws"][type] +
                            "/" +
                            this.stream(type, messageHash);
                        const requestId = this.requestId(url);
                        const request = {
                            method: "SUBSCRIBE",
                            params: [messageHash],
                            id: requestId,
                        };
                        const subscribe = {
                            id: requestId,
                        };
                        const ohlcv = await this.watch(
                            url,
                            messageHash,
                            this.extend(request, query),
                            messageHash,
                            subscribe
                        );
                        if (this.newUpdates) {
                            limit = ohlcv.getLimit(symbol, limit);
                        }
                        return this.filterBySinceLimit(
                            ohlcv,
                            since,
                            limit,
                            0,
                            true
                        );
                    }

                    handleOHLCV(client, message) {
                        //
                        //     {
                        //         e: 'kline',
                        //         E: 1579482921215,
                        //         s: 'ETHBTC',
                        //         k: {
                        //             t: 1579482900000,
                        //             T: 1579482959999,
                        //             s: 'ETHBTC',
                        //             i: '1m',
                        //             f: 158411535,
                        //             L: 158411550,
                        //             o: '0.01913200',
                        //             c: '0.01913500',
                        //             h: '0.01913700',
                        //             l: '0.01913200',
                        //             v: '5.08400000',
                        //             n: 16,
                        //             x: false,
                        //             q: '0.09728060',
                        //             V: '3.30200000',
                        //             Q: '0.06318500',
                        //             B: '0'
                        //         }
                        //     }
                        //
                        const marketId = this.safeString(message, "s");
                        const lowercaseMarketId = this.safeStringLower(
                            message,
                            "s"
                        );
                        const event = this.safeString(message, "e");
                        const kline = this.safeValue(message, "k");
                        const interval = this.safeString(kline, "i");
                        // use a reverse lookup in a static map instead
                        const timeframe = this.findTimeframe(interval);
                        const messageHash =
                            lowercaseMarketId + "@" + event + "_" + interval;
                        const parsed = [
                            this.safeInteger(kline, "t"),
                            this.safeFloat(kline, "o"),
                            this.safeFloat(kline, "h"),
                            this.safeFloat(kline, "l"),
                            this.safeFloat(kline, "c"),
                            this.safeFloat(kline, "v"),
                        ];
                        const symbol = this.safeSymbol(marketId);
                        this.ohlcvs[symbol] = this.safeValue(
                            this.ohlcvs,
                            symbol,
                            {}
                        );
                        let stored = this.safeValue(
                            this.ohlcvs[symbol],
                            timeframe
                        );
                        if (stored === undefined) {
                            const limit = this.safeInteger(
                                this.options,
                                "OHLCVLimit",
                                1000
                            );
                            stored = new ArrayCacheByTimestamp(limit);
                            this.ohlcvs[symbol][timeframe] = stored;
                        }
                        stored.append(parsed);
                        client.resolve(stored, messageHash);
                    }

                    async watchTicker(symbol, params = {}) {
                        /**
                         * @method
                         * @name binance#watchTicker
                         * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
                         * @param {string} symbol unified symbol of the market to fetch the ticker for
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @param {string} params.name stream to use can be ticker or bookTicker
                         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure}
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const marketId = market["lowercaseId"];
                        let type = undefined;
                        [type, params] = this.handleMarketTypeAndParams(
                            "watchTicker",
                            market,
                            params
                        );
                        const options = this.safeValue(
                            this.options,
                            "watchTicker",
                            {}
                        );
                        let name = this.safeString(options, "name", "ticker");
                        name = this.safeString(params, "name", name);
                        params = this.omit(params, "name");
                        const messageHash = marketId + "@" + name;
                        const url =
                            this.urls["api"]["ws"][type] +
                            "/" +
                            this.stream(type, messageHash);
                        const requestId = this.requestId(url);
                        const request = {
                            method: "SUBSCRIBE",
                            params: [messageHash],
                            id: requestId,
                        };
                        const subscribe = {
                            id: requestId,
                        };
                        return await this.watch(
                            url,
                            messageHash,
                            this.extend(request, params),
                            messageHash,
                            subscribe
                        );
                    }

                    async watchTickers(symbols = undefined, params = {}) {
                        /**
                         * @method
                         * @name binance#watchTickers
                         * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list
                         * @param {Array} symbols unified symbol of the market to fetch the ticker for
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure}
                         */
                        await this.loadMarkets();
                        symbols = this.marketSymbols(symbols);
                        const marketIds = this.marketIds(symbols);
                        let market = undefined;
                        if (marketIds !== undefined) {
                            market = this.safeMarket(marketIds[0]);
                        }
                        let type = undefined;
                        [type, params] = this.handleMarketTypeAndParams(
                            "watchTickers",
                            market,
                            params
                        );
                        const options = this.safeValue(
                            this.options,
                            "watchTickers",
                            {}
                        );
                        let name = this.safeString(options, "name", "ticker");
                        name = this.safeString(params, "name", name);
                        const oriParams = params;
                        params = this.omit(params, "name");
                        let wsParams = [];
                        const messageHash = "!" + name + "@arr";
                        if (name === "bookTicker") {
                            if (marketIds === undefined) {
                                throw new ArgumentsRequired(
                                    this.id +
                                        " watchTickers() requires symbols for bookTicker"
                                );
                            }
                            // simulate watchTickers with subscribe multiple individual bookTicker topic
                            for (let i = 0; i < marketIds.length; i++) {
                                wsParams.push(
                                    marketIds[i].toLowerCase() + "@bookTicker"
                                );
                            }
                        } else {
                            wsParams = [messageHash];
                        }
                        const url =
                            this.urls["api"]["ws"][type] +
                            "/" +
                            this.stream(type, messageHash);
                        const requestId = this.requestId(url);
                        const request = {
                            method: "SUBSCRIBE",
                            params: wsParams,
                            id: requestId,
                        };
                        const subscribe = {
                            id: requestId,
                        };
                        const tickers = await this.watch(
                            url,
                            messageHash,
                            this.extend(request, params),
                            messageHash,
                            subscribe
                        );
                        const result = {};
                        for (let i = 0; i < tickers.length; i++) {
                            const ticker = tickers[i];
                            const tickerSymbol = ticker["symbol"];
                            if (
                                symbols !== undefined &&
                                this.inArray(tickerSymbol, symbols)
                            ) {
                                result[tickerSymbol] = ticker;
                            }
                        }
                        const resultKeys = Object.keys(result);
                        if (resultKeys.length > 0) {
                            if (this.newUpdates) {
                                return result;
                            }
                            return this.filterByArray(
                                this.tickers,
                                "symbol",
                                symbols
                            );
                        }
                        return await this.watchTickers(symbols, oriParams);
                    }

                    parseWsTicker(message) {
                        //
                        // ticker
                        //     {
                        //         e: '24hrTicker',      // event type
                        //         E: 1579485598569,     // event time
                        //         s: 'ETHBTC',          // symbol
                        //         p: '-0.00004000',     // price change
                        //         P: '-0.209',          // price change percent
                        //         w: '0.01920495',      // weighted average price
                        //         x: '0.01916500',      // the price of the first trade before the 24hr rolling window
                        //         c: '0.01912500',      // last (closing) price
                        //         Q: '0.10400000',      // last quantity
                        //         b: '0.01912200',      // best bid
                        //         B: '4.10400000',      // best bid quantity
                        //         a: '0.01912500',      // best ask
                        //         A: '0.00100000',      // best ask quantity
                        //         o: '0.01916500',      // open price
                        //         h: '0.01956500',      // high price
                        //         l: '0.01887700',      // low price
                        //         v: '173518.11900000', // base volume
                        //         q: '3332.40703994',   // quote volume
                        //         O: 1579399197842,     // open time
                        //         C: 1579485597842,     // close time
                        //         F: 158251292,         // first trade id
                        //         L: 158414513,         // last trade id
                        //         n: 163222,            // total number of trades
                        //     }
                        //
                        // miniTicker
                        //     {
                        //         e: '24hrMiniTicker',
                        //         E: 1671617114585,
                        //         s: 'MOBBUSD',
                        //         c: '0.95900000',
                        //         o: '0.91200000',
                        //         h: '1.04000000',
                        //         l: '0.89400000',
                        //         v: '2109995.32000000',
                        //         q: '2019254.05788000'
                        //     }
                        //
                        let event = this.safeString(message, "e", "bookTicker");
                        if (event === "24hrTicker") {
                            event = "ticker";
                        }
                        let timestamp = undefined;
                        const now = this.milliseconds();
                        if (event === "bookTicker") {
                            // take the event timestamp, if available, for spot tickers it is not
                            timestamp = this.safeInteger(message, "E", now);
                        } else {
                            // take the timestamp of the closing price for candlestick streams
                            timestamp = this.safeInteger(message, "C", now);
                        }
                        const marketId = this.safeString(message, "s");
                        const symbol = this.safeSymbol(marketId);
                        const last = this.safeFloat(message, "c");
                        const ticker = {
                            symbol: symbol,
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            high: this.safeFloat(message, "h"),
                            low: this.safeFloat(message, "l"),
                            bid: this.safeFloat(message, "b"),
                            bidVolume: this.safeFloat(message, "B"),
                            ask: this.safeFloat(message, "a"),
                            askVolume: this.safeFloat(message, "A"),
                            vwap: this.safeFloat(message, "w"),
                            open: this.safeFloat(message, "o"),
                            close: last,
                            last: last,
                            previousClose: this.safeFloat(message, "x"), // previous day close
                            change: this.safeFloat(message, "p"),
                            percentage: this.safeFloat(message, "P"),
                            average: undefined,
                            baseVolume: this.safeFloat(message, "v"),
                            quoteVolume: this.safeFloat(message, "q"),
                            info: message,
                        };
                        return ticker;
                    }

                    handleTicker(client, message) {
                        //
                        // 24hr rolling window ticker statistics for a single symbol
                        // These are NOT the statistics of the UTC day, but a 24hr rolling window for the previous 24hrs
                        // Update Speed 1000ms
                        //
                        //     {
                        //         e: '24hrTicker',      // event type
                        //         E: 1579485598569,     // event time
                        //         s: 'ETHBTC',          // symbol
                        //         p: '-0.00004000',     // price change
                        //         P: '-0.209',          // price change percent
                        //         w: '0.01920495',      // weighted average price
                        //         x: '0.01916500',      // the price of the first trade before the 24hr rolling window
                        //         c: '0.01912500',      // last (closing) price
                        //         Q: '0.10400000',      // last quantity
                        //         b: '0.01912200',      // best bid
                        //         B: '4.10400000',      // best bid quantity
                        //         a: '0.01912500',      // best ask
                        //         A: '0.00100000',      // best ask quantity
                        //         o: '0.01916500',      // open price
                        //         h: '0.01956500',      // high price
                        //         l: '0.01887700',      // low price
                        //         v: '173518.11900000', // base volume
                        //         q: '3332.40703994',   // quote volume
                        //         O: 1579399197842,     // open time
                        //         C: 1579485597842,     // close time
                        //         F: 158251292,         // first trade id
                        //         L: 158414513,         // last trade id
                        //         n: 163222,            // total number of trades
                        //     }
                        //
                        let event = this.safeString(message, "e", "bookTicker");
                        if (event === "24hrTicker") {
                            event = "ticker";
                        } else if (event === "24hrMiniTicker") {
                            event = "miniTicker";
                        }
                        const wsMarketId = this.safeStringLower(message, "s");
                        const messageHash = wsMarketId + "@" + event;
                        const result = this.parseWsTicker(message);
                        const symbol = result["symbol"];
                        this.tickers[symbol] = result;
                        client.resolve(result, messageHash);
                        if (event === "bookTicker") {
                            // watch bookTickers
                            client.resolve([result], "!" + "bookTicker@arr");
                        }
                    }

                    handleTickers(client, message) {
                        let event = undefined;
                        for (let i = 0; i < message.length; i++) {
                            const ticker = message[i];
                            event = this.safeString(ticker, "e");
                            if (event === "24hrTicker") {
                                event = "ticker";
                            } else if (event === "24hrMiniTicker") {
                                event = "miniTicker";
                            }
                            const wsMarketId = this.safeStringLower(
                                ticker,
                                "s"
                            );
                            const messageHash = wsMarketId + "@" + event;
                            const result = this.parseWsTicker(ticker);
                            const symbol = result["symbol"];
                            this.tickers[symbol] = result;
                            client.resolve(result, messageHash);
                        }
                        const values = Object.values(this.tickers);
                        client.resolve(values, "!" + event + "@arr");
                    }

                    async authenticate(params = {}) {
                        const time = this.milliseconds();
                        let type = this.safeString2(
                            this.options,
                            "defaultType",
                            "authenticate",
                            "spot"
                        );
                        type = this.safeString(params, "type", type);
                        const options = this.safeValue(this.options, type, {});
                        const lastAuthenticatedTime = this.safeInteger(
                            options,
                            "lastAuthenticatedTime",
                            0
                        );
                        const listenKeyRefreshRate = this.safeInteger(
                            this.options,
                            "listenKeyRefreshRate",
                            1200000
                        );
                        const delay = this.sum(listenKeyRefreshRate, 10000);
                        if (time - lastAuthenticatedTime > delay) {
                            let method = "publicPostUserDataStream";
                            if (type === "future") {
                                method = "fapiPrivatePostListenKey";
                            } else if (type === "delivery") {
                                method = "dapiPrivatePostListenKey";
                            } else if (type === "margin") {
                                method = "sapiPostUserDataStream";
                            }
                            const response = await this[method]();
                            this.options[type] = this.extend(options, {
                                listenKey: this.safeString(
                                    response,
                                    "listenKey"
                                ),
                                lastAuthenticatedTime: time,
                            });
                            this.delay(
                                listenKeyRefreshRate,
                                this.keepAliveListenKey,
                                params
                            );
                        }
                    }

                    async keepAliveListenKey(params = {}) {
                        // https://binance-docs.github.io/apidocs/spot/en/#listen-key-spot
                        let type = this.safeString2(
                            this.options,
                            "defaultType",
                            "authenticate",
                            "spot"
                        );
                        type = this.safeString(params, "type", type);
                        const options = this.safeValue(this.options, type, {});
                        const listenKey = this.safeString(options, "listenKey");
                        if (listenKey === undefined) {
                            // A network error happened: we can't renew a listen key that does not exist.
                            return;
                        }
                        let method = "publicPutUserDataStream";
                        if (type === "future") {
                            method = "fapiPrivatePutListenKey";
                        } else if (type === "delivery") {
                            method = "dapiPrivatePutListenKey";
                        } else if (type === "margin") {
                            method = "sapiPutUserDataStream";
                        }
                        const request = {
                            listenKey: listenKey,
                        };
                        const time = this.milliseconds();
                        const sendParams = this.omit(params, "type");
                        try {
                            await this[method](
                                this.extend(request, sendParams)
                            );
                        } catch (error) {
                            const url =
                                this.urls["api"]["ws"][type] +
                                "/" +
                                this.options[type]["listenKey"];
                            const client = this.client(url);
                            const messageHashes = Object.keys(client.futures);
                            for (let i = 0; i < messageHashes.length; i++) {
                                const messageHash = messageHashes[i];
                                client.reject(error, messageHash);
                            }
                            this.options[type] = this.extend(options, {
                                listenKey: undefined,
                                lastAuthenticatedTime: 0,
                            });
                            return;
                        }
                        this.options[type] = this.extend(options, {
                            listenKey: listenKey,
                            lastAuthenticatedTime: time,
                        });
                        // whether or not to schedule another listenKey keepAlive request
                        const clients = Object.values(this.clients);
                        const listenKeyRefreshRate = this.safeInteger(
                            this.options,
                            "listenKeyRefreshRate",
                            1200000
                        );
                        for (let i = 0; i < clients.length; i++) {
                            const client = clients[i];
                            const subscriptionKeys = Object.keys(
                                client.subscriptions
                            );
                            for (let j = 0; j < subscriptionKeys.length; j++) {
                                const subscribeType = subscriptionKeys[j];
                                if (subscribeType === type) {
                                    return this.delay(
                                        listenKeyRefreshRate,
                                        this.keepAliveListenKey,
                                        params
                                    );
                                }
                            }
                        }
                    }

                    setBalanceCache(client, type) {
                        if (type in client.subscriptions) {
                            return undefined;
                        }
                        const options = this.safeValue(
                            this.options,
                            "watchBalance"
                        );
                        const fetchBalanceSnapshot = this.safeValue(
                            options,
                            "fetchBalanceSnapshot",
                            false
                        );
                        if (fetchBalanceSnapshot) {
                            const messageHash = type + ":fetchBalanceSnapshot";
                            if (!(messageHash in client.futures)) {
                                client.future(messageHash);
                                this.spawn(
                                    this.loadBalanceSnapshot,
                                    client,
                                    messageHash,
                                    type
                                );
                            }
                        } else {
                            this.balance[type] = {};
                        }
                    }

                    async loadBalanceSnapshot(client, messageHash, type) {
                        const response = await this.fetchBalance({
                            type: type,
                        });
                        this.balance[type] = this.extend(
                            response,
                            this.safeValue(this.balance, type, {})
                        );
                        // don't remove the future from the .futures cache
                        const future = client.futures[messageHash];
                        future.resolve();
                        client.resolve(this.balance[type], type + ":balance");
                    }

                    async watchBalance(params = {}) {
                        /**
                         * @method
                         * @name binance#watchBalance
                         * @description query for balance and get the amount of funds available for trading or funds locked in orders
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
                         */
                        await this.loadMarkets();
                        await this.authenticate(params);
                        const defaultType = this.safeString(
                            this.options,
                            "defaultType",
                            "spot"
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        const url =
                            this.urls["api"]["ws"][type] +
                            "/" +
                            this.options[type]["listenKey"];
                        const client = this.client(url);
                        this.setBalanceCache(client, type);
                        const options = this.safeValue(
                            this.options,
                            "watchBalance"
                        );
                        const fetchBalanceSnapshot = this.safeValue(
                            options,
                            "fetchBalanceSnapshot",
                            false
                        );
                        const awaitBalanceSnapshot = this.safeValue(
                            options,
                            "awaitBalanceSnapshot",
                            true
                        );
                        if (fetchBalanceSnapshot && awaitBalanceSnapshot) {
                            await client.future(type + ":fetchBalanceSnapshot");
                        }
                        const messageHash = type + ":balance";
                        const message = undefined;
                        return await this.watch(
                            url,
                            messageHash,
                            message,
                            type
                        );
                    }

                    handleBalance(client, message) {
                        //
                        // sent upon a balance update not related to orders
                        //
                        //     {
                        //         e: 'balanceUpdate',
                        //         E: 1629352505586,
                        //         a: 'IOTX',
                        //         d: '0.43750000',
                        //         T: 1629352505585
                        //     }
                        //
                        // sent upon creating or filling an order
                        //
                        //     {
                        //         "e": "outboundAccountPosition", // Event type
                        //         "E": 1564034571105,             // Event Time
                        //         "u": 1564034571073,             // Time of last account update
                        //         "B": [                          // Balances Array
                        //             {
                        //                 "a": "ETH",                 // Asset
                        //                 "f": "10000.000000",        // Free
                        //                 "l": "0.000000"             // Locked
                        //             }
                        //         ]
                        //     }
                        //
                        // future/delivery
                        //
                        //     {
                        //         "e": "ACCOUNT_UPDATE",            // Event Type
                        //         "E": 1564745798939,               // Event Time
                        //         "T": 1564745798938 ,              // Transaction
                        //         "i": "SfsR",                      // Account Alias
                        //         "a": {                            // Update Data
                        //             "m":"ORDER",                  // Event reason type
                        //             "B":[                         // Balances
                        //                 {
                        //                     "a":"BTC",                // Asset
                        //                     "wb":"122624.12345678",   // Wallet Balance
                        //                     "cw":"100.12345678"       // Cross Wallet Balance
                        //                 },
                        //             ],
                        //             "P":[
                        //                 {
                        //                     "s":"BTCUSD_200925",      // Symbol
                        //                     "pa":"0",                 // Position Amount
                        //                     "ep":"0.0",               // Entry Price
                        //                     "cr":"200",               // (Pre-fee) Accumulated Realized
                        //                     "up":"0",                 // Unrealized PnL
                        //                     "mt":"isolated",          // Margin Type
                        //                     "iw":"0.00000000",        // Isolated Wallet (if isolated position)
                        //                     "ps":"BOTH"               // Position Side
                        //                 },
                        //             ]
                        //         }
                        //     }
                        //
                        const wallet = this.safeValue(
                            this.options,
                            "wallet",
                            "wb"
                        ); // cw for cross wallet
                        // each account is connected to a different endpoint
                        // and has exactly one subscriptionhash which is the account type
                        const subscriptions = Object.keys(client.subscriptions);
                        const accountType = subscriptions[0];
                        const messageHash = accountType + ":balance";
                        this.balance[accountType]["info"] = message;
                        const event = this.safeString(message, "e");
                        if (event === "balanceUpdate") {
                            const currencyId = this.safeString(message, "a");
                            const code = this.safeCurrencyCode(currencyId);
                            const account = this.account();
                            const delta = this.safeString(message, "d");
                            if (code in this.balance[accountType]) {
                                let previousValue =
                                    this.balance[accountType][code]["free"];
                                if (typeof previousValue !== "string") {
                                    previousValue =
                                        this.numberToString(previousValue);
                                }
                                account["free"] = Precise.stringAdd(
                                    previousValue,
                                    delta
                                );
                            } else {
                                account["free"] = delta;
                            }
                            this.balance[accountType][code] = account;
                        } else {
                            message = this.safeValue(message, "a", message);
                            const B = this.safeValue(message, "B");
                            for (let i = 0; i < B.length; i++) {
                                const entry = B[i];
                                const currencyId = this.safeString(entry, "a");
                                const code = this.safeCurrencyCode(currencyId);
                                const account = this.account();
                                account["free"] = this.safeString(entry, "f");
                                account["used"] = this.safeString(entry, "l");
                                account["total"] = this.safeString(
                                    entry,
                                    wallet
                                );
                                this.balance[accountType][code] = account;
                            }
                        }
                        const timestamp = this.safeInteger(message, "E");
                        this.balance[accountType]["timestamp"] = timestamp;
                        this.balance[accountType]["datetime"] =
                            this.iso8601(timestamp);
                        this.balance[accountType] = this.safeBalance(
                            this.balance[accountType]
                        );
                        client.resolve(this.balance[accountType], messageHash);
                    }

                    async watchOrders(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#watchOrders
                         * @description watches information on multiple orders made by the user
                         * @param {string|undefined} symbol unified market symbol of the market orders were made in
                         * @param {int|undefined} since the earliest time in ms to fetch orders for
                         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        await this.loadMarkets();
                        await this.authenticate(params);
                        let messageHash = "orders";
                        let market = undefined;
                        if (symbol !== undefined) {
                            market = this.market(symbol);
                            symbol = market["symbol"];
                            messageHash += ":" + symbol;
                        }
                        let type = undefined;
                        [type, params] = this.handleMarketTypeAndParams(
                            "watchOrders",
                            market,
                            params
                        );
                        const url =
                            this.urls["api"]["ws"][type] +
                            "/" +
                            this.options[type]["listenKey"];
                        const client = this.client(url);
                        this.setBalanceCache(client, type);
                        const message = undefined;
                        const orders = await this.watch(
                            url,
                            messageHash,
                            message,
                            type
                        );
                        if (this.newUpdates) {
                            limit = orders.getLimit(symbol, limit);
                        }
                        return this.filterBySymbolSinceLimit(
                            orders,
                            symbol,
                            since,
                            limit,
                            true
                        );
                    }

                    parseWsOrder(order, market = undefined) {
                        //
                        // spot
                        //
                        //     {
                        //         "e": "executionReport",        // Event type
                        //         "E": 1499405658658,            // Event time
                        //         "s": "ETHBTC",                 // Symbol
                        //         "c": "mUvoqJxFIILMdfAW5iGSOW", // Client order ID
                        //         "S": "BUY",                    // Side
                        //         "o": "LIMIT",                  // Order type
                        //         "f": "GTC",                    // Time in force
                        //         "q": "1.00000000",             // Order quantity
                        //         "p": "0.10264410",             // Order price
                        //         "P": "0.00000000",             // Stop price
                        //         "F": "0.00000000",             // Iceberg quantity
                        //         "g": -1,                       // OrderListId
                        //         "C": null,                     // Original client order ID; This is the ID of the order being canceled
                        //         "x": "NEW",                    // Current execution type
                        //         "X": "NEW",                    // Current order status
                        //         "r": "NONE",                   // Order reject reason; will be an error code.
                        //         "i": 4293153,                  // Order ID
                        //         "l": "0.00000000",             // Last executed quantity
                        //         "z": "0.00000000",             // Cumulative filled quantity
                        //         "L": "0.00000000",             // Last executed price
                        //         "n": "0",                      // Commission amount
                        //         "N": null,                     // Commission asset
                        //         "T": 1499405658657,            // Transaction time
                        //         "t": -1,                       // Trade ID
                        //         "I": 8641984,                  // Ignore
                        //         "w": true,                     // Is the order on the book?
                        //         "m": false,                    // Is this trade the maker side?
                        //         "M": false,                    // Ignore
                        //         "O": 1499405658657,            // Order creation time
                        //         "Z": "0.00000000",             // Cumulative quote asset transacted quantity
                        //         "Y": "0.00000000"              // Last quote asset transacted quantity (i.e. lastPrice * lastQty),
                        //         "Q": "0.00000000"              // Quote Order Qty
                        //     }
                        //
                        // future
                        //
                        //     {
                        //         "s":"BTCUSDT",                 // Symbol
                        //         "c":"TEST",                    // Client Order Id
                        //                                        // special client order id:
                        //                                        // starts with "autoclose-": liquidation order
                        //                                        // "adl_autoclose": ADL auto close order
                        //         "S":"SELL",                    // Side
                        //         "o":"TRAILING_STOP_MARKET",    // Order Type
                        //         "f":"GTC",                     // Time in Force
                        //         "q":"0.001",                   // Original Quantity
                        //         "p":"0",                       // Original Price
                        //         "ap":"0",                      // Average Price
                        //         "sp":"7103.04",                // Stop Price. Please ignore with TRAILING_STOP_MARKET order
                        //         "x":"NEW",                     // Execution Type
                        //         "X":"NEW",                     // Order Status
                        //         "i":8886774,                   // Order Id
                        //         "l":"0",                       // Order Last Filled Quantity
                        //         "z":"0",                       // Order Filled Accumulated Quantity
                        //         "L":"0",                       // Last Filled Price
                        //         "N":"USDT",                    // Commission Asset, will not push if no commission
                        //         "n":"0",                       // Commission, will not push if no commission
                        //         "T":1568879465651,             // Order Trade Time
                        //         "t":0,                         // Trade Id
                        //         "b":"0",                       // Bids Notional
                        //         "a":"9.91",                    // Ask Notional
                        //         "m":false,                     // Is this trade the maker side?
                        //         "R":false,                     // Is this reduce only
                        //         "wt":"CONTRACT_PRICE",         // Stop Price Working Type
                        //         "ot":"TRAILING_STOP_MARKET",   // Original Order Type
                        //         "ps":"LONG",                   // Position Side
                        //         "cp":false,                    // If Close-All, pushed with conditional order
                        //         "AP":"7476.89",                // Activation Price, only puhed with TRAILING_STOP_MARKET order
                        //         "cr":"5.0",                    // Callback Rate, only puhed with TRAILING_STOP_MARKET order
                        //         "rp":"0"                       // Realized Profit of the trade
                        //     }
                        //
                        const executionType = this.safeString(order, "x");
                        const orderId = this.safeString(order, "i");
                        const marketId = this.safeString(order, "s");
                        const symbol = this.safeSymbol(marketId);
                        let timestamp = this.safeInteger(order, "O");
                        const T = this.safeInteger(order, "T");
                        let lastTradeTimestamp = undefined;
                        if (executionType === "NEW") {
                            if (timestamp === undefined) {
                                timestamp = T;
                            }
                        } else if (executionType === "TRADE") {
                            lastTradeTimestamp = T;
                        }
                        let fee = undefined;
                        const feeCost = this.safeFloat(order, "n");
                        if (feeCost !== undefined && feeCost > 0) {
                            const feeCurrencyId = this.safeString(order, "N");
                            const feeCurrency =
                                this.safeCurrencyCode(feeCurrencyId);
                            fee = {
                                cost: feeCost,
                                currency: feeCurrency,
                            };
                        }
                        const price = this.safeFloat(order, "p");
                        const amount = this.safeFloat(order, "q");
                        const side = this.safeStringLower(order, "S");
                        const type = this.safeStringLower(order, "o");
                        const filled = this.safeFloat(order, "z");
                        const cumulativeQuote = this.safeFloat(order, "Z");
                        let remaining = amount;
                        let average = this.safeFloat(order, "ap");
                        let cost = cumulativeQuote;
                        if (filled !== undefined) {
                            if (cost === undefined) {
                                if (price !== undefined) {
                                    cost = filled * price;
                                }
                            }
                            if (amount !== undefined) {
                                remaining = Math.max(amount - filled, 0);
                            }
                            if (
                                average === undefined &&
                                cumulativeQuote !== undefined &&
                                filled > 0
                            ) {
                                average = cumulativeQuote / filled;
                            }
                        }
                        const rawStatus = this.safeString(order, "X");
                        const status = this.parseOrderStatus(rawStatus);
                        const trades = undefined;
                        let clientOrderId = this.safeString(order, "C");
                        if (
                            clientOrderId === undefined ||
                            clientOrderId.length === 0
                        ) {
                            clientOrderId = this.safeString(order, "c");
                        }
                        const stopPrice = this.safeFloat2(order, "P", "sp");
                        let timeInForce = this.safeString(order, "f");
                        if (timeInForce === "GTX") {
                            // GTX means "Good Till Crossing" and is an equivalent way of saying Post Only
                            timeInForce = "PO";
                        }
                        return {
                            info: order,
                            symbol: symbol,
                            id: orderId,
                            clientOrderId: clientOrderId,
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            lastTradeTimestamp: lastTradeTimestamp,
                            type: type,
                            timeInForce: timeInForce,
                            postOnly: undefined,
                            side: side,
                            price: price,
                            stopPrice: stopPrice,
                            triggerPrice: stopPrice,
                            amount: amount,
                            cost: cost,
                            average: average,
                            filled: filled,
                            remaining: remaining,
                            status: status,
                            fee: fee,
                            trades: trades,
                        };
                    }

                    handleOrderUpdate(client, message) {
                        //
                        // spot
                        //
                        //     {
                        //         "e": "executionReport",        // Event type
                        //         "E": 1499405658658,            // Event time
                        //         "s": "ETHBTC",                 // Symbol
                        //         "c": "mUvoqJxFIILMdfAW5iGSOW", // Client order ID
                        //         "S": "BUY",                    // Side
                        //         "o": "LIMIT",                  // Order type
                        //         "f": "GTC",                    // Time in force
                        //         "q": "1.00000000",             // Order quantity
                        //         "p": "0.10264410",             // Order price
                        //         "P": "0.00000000",             // Stop price
                        //         "F": "0.00000000",             // Iceberg quantity
                        //         "g": -1,                       // OrderListId
                        //         "C": null,                     // Original client order ID; This is the ID of the order being canceled
                        //         "x": "NEW",                    // Current execution type
                        //         "X": "NEW",                    // Current order status
                        //         "r": "NONE",                   // Order reject reason; will be an error code.
                        //         "i": 4293153,                  // Order ID
                        //         "l": "0.00000000",             // Last executed quantity
                        //         "z": "0.00000000",             // Cumulative filled quantity
                        //         "L": "0.00000000",             // Last executed price
                        //         "n": "0",                      // Commission amount
                        //         "N": null,                     // Commission asset
                        //         "T": 1499405658657,            // Transaction time
                        //         "t": -1,                       // Trade ID
                        //         "I": 8641984,                  // Ignore
                        //         "w": true,                     // Is the order on the book?
                        //         "m": false,                    // Is this trade the maker side?
                        //         "M": false,                    // Ignore
                        //         "O": 1499405658657,            // Order creation time
                        //         "Z": "0.00000000",             // Cumulative quote asset transacted quantity
                        //         "Y": "0.00000000"              // Last quote asset transacted quantity (i.e. lastPrice * lastQty),
                        //         "Q": "0.00000000"              // Quote Order Qty
                        //     }
                        //
                        // future
                        //
                        //     {
                        //         "e":"ORDER_TRADE_UPDATE",           // Event Type
                        //         "E":1568879465651,                  // Event Time
                        //         "T":1568879465650,                  // Trasaction Time
                        //         "o": {
                        //             "s":"BTCUSDT",                  // Symbol
                        //             "c":"TEST",                     // Client Order Id
                        //                                             // special client order id:
                        //                                             // starts with "autoclose-": liquidation order
                        //                                             // "adl_autoclose": ADL auto close order
                        //             "S":"SELL",                     // Side
                        //             "o":"TRAILING_STOP_MARKET",     // Order Type
                        //             "f":"GTC",                      // Time in Force
                        //             "q":"0.001",                    // Original Quantity
                        //             "p":"0",                        // Original Price
                        //             "ap":"0",                       // Average Price
                        //             "sp":"7103.04",                 // Stop Price. Please ignore with TRAILING_STOP_MARKET order
                        //             "x":"NEW",                      // Execution Type
                        //             "X":"NEW",                      // Order Status
                        //             "i":8886774,                    // Order Id
                        //             "l":"0",                        // Order Last Filled Quantity
                        //             "z":"0",                        // Order Filled Accumulated Quantity
                        //             "L":"0",                        // Last Filled Price
                        //             "N":"USDT",                     // Commission Asset, will not push if no commission
                        //             "n":"0",                        // Commission, will not push if no commission
                        //             "T":1568879465651,              // Order Trade Time
                        //             "t":0,                          // Trade Id
                        //             "b":"0",                        // Bids Notional
                        //             "a":"9.91",                     // Ask Notional
                        //             "m":false,                      // Is this trade the maker side?
                        //             "R":false,                      // Is this reduce only
                        //             "wt":"CONTRACT_PRICE",          // Stop Price Working Type
                        //             "ot":"TRAILING_STOP_MARKET",    // Original Order Type
                        //             "ps":"LONG",                    // Position Side
                        //             "cp":false,                     // If Close-All, pushed with conditional order
                        //             "AP":"7476.89",                 // Activation Price, only puhed with TRAILING_STOP_MARKET order
                        //             "cr":"5.0",                     // Callback Rate, only puhed with TRAILING_STOP_MARKET order
                        //             "rp":"0"                        // Realized Profit of the trade
                        //         }
                        //     }
                        //
                        const e = this.safeString(message, "e");
                        if (e === "ORDER_TRADE_UPDATE") {
                            message = this.safeValue(message, "o", message);
                        }
                        this.handleMyTrade(client, message);
                        this.handleOrder(client, message);
                    }

                    async watchMyTrades(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name binance#watchMyTrades
                         * @description watches information on multiple trades made by the user
                         * @param {string} symbol unified market symbol of the market orders were made in
                         * @param {int|undefined} since the earliest time in ms to fetch orders for
                         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
                         * @param {object} params extra parameters specific to the binance api endpoint
                         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure
                         */
                        await this.loadMarkets();
                        await this.authenticate(params);
                        const defaultType = this.safeString2(
                            this.options,
                            "watchMyTrades",
                            "defaultType",
                            "spot"
                        );
                        const type = this.safeString(
                            params,
                            "type",
                            defaultType
                        );
                        const url =
                            this.urls["api"]["ws"][type] +
                            "/" +
                            this.options[type]["listenKey"];
                        let messageHash = "myTrades";
                        if (symbol !== undefined) {
                            messageHash += ":" + symbol;
                        }
                        const client = this.client(url);
                        this.setBalanceCache(client, type);
                        const message = undefined;
                        const trades = await this.watch(
                            url,
                            messageHash,
                            message,
                            type
                        );
                        if (this.newUpdates) {
                            limit = trades.getLimit(symbol, limit);
                        }
                        return this.filterBySymbolSinceLimit(
                            trades,
                            symbol,
                            since,
                            limit,
                            true
                        );
                    }

                    handleMyTrade(client, message) {
                        const messageHash = "myTrades";
                        const executionType = this.safeString(message, "x");
                        if (executionType === "TRADE") {
                            const trade = this.parseTrade(message);
                            const orderId = this.safeString(trade, "order");
                            const tradeFee = this.safeValue(trade, "fee");
                            const symbol = this.safeString(trade, "symbol");
                            if (
                                orderId !== undefined &&
                                tradeFee !== undefined &&
                                symbol !== undefined
                            ) {
                                const cachedOrders = this.orders;
                                if (cachedOrders !== undefined) {
                                    const orders = this.safeValue(
                                        cachedOrders.hashmap,
                                        symbol,
                                        {}
                                    );
                                    const order = this.safeValue(
                                        orders,
                                        orderId
                                    );
                                    if (order !== undefined) {
                                        // accumulate order fees
                                        const fees = this.safeValue(
                                            order,
                                            "fees"
                                        );
                                        const fee = this.safeValue(
                                            order,
                                            "fee"
                                        );
                                        if (fees !== undefined) {
                                            let insertNewFeeCurrency = true;
                                            for (
                                                let i = 0;
                                                i < fees.length;
                                                i++
                                            ) {
                                                const orderFee = fees[i];
                                                if (
                                                    orderFee["currency"] ===
                                                    tradeFee["currency"]
                                                ) {
                                                    const feeCost = this.sum(
                                                        tradeFee["cost"],
                                                        orderFee["cost"]
                                                    );
                                                    order["fees"][i]["cost"] =
                                                        parseFloat(
                                                            this.currencyToPrecision(
                                                                tradeFee[
                                                                    "currency"
                                                                ],
                                                                feeCost
                                                            )
                                                        );
                                                    insertNewFeeCurrency = false;
                                                    break;
                                                }
                                            }
                                            if (insertNewFeeCurrency) {
                                                order["fees"].push(tradeFee);
                                            }
                                        } else if (fee !== undefined) {
                                            if (
                                                fee["currency"] ===
                                                tradeFee["currency"]
                                            ) {
                                                const feeCost = this.sum(
                                                    fee["cost"],
                                                    tradeFee["cost"]
                                                );
                                                order["fee"]["cost"] =
                                                    parseFloat(
                                                        this.currencyToPrecision(
                                                            tradeFee[
                                                                "currency"
                                                            ],
                                                            feeCost
                                                        )
                                                    );
                                            } else if (
                                                fee["currency"] === undefined
                                            ) {
                                                order["fee"] = tradeFee;
                                            } else {
                                                order["fees"] = [fee, tradeFee];
                                                order["fee"] = undefined;
                                            }
                                        } else {
                                            order["fee"] = tradeFee;
                                        }
                                        // save this trade in the order
                                        const orderTrades = this.safeValue(
                                            order,
                                            "trades",
                                            []
                                        );
                                        orderTrades.push(trade);
                                        order["trades"] = orderTrades;
                                        // don't append twice cause it breaks newUpdates mode
                                        // this order already exists in the cache
                                    }
                                }
                            }
                            if (this.myTrades === undefined) {
                                const limit = this.safeInteger(
                                    this.options,
                                    "tradesLimit",
                                    1000
                                );
                                this.myTrades = new ArrayCacheBySymbolById(
                                    limit
                                );
                            }
                            const myTrades = this.myTrades;
                            myTrades.append(trade);
                            client.resolve(this.myTrades, messageHash);
                            const messageHashSymbol =
                                messageHash + ":" + symbol;
                            client.resolve(this.myTrades, messageHashSymbol);
                        }
                    }

                    handleOrder(client, message) {
                        const messageHash = "orders";
                        const parsed = this.parseWsOrder(message);
                        const symbol = this.safeString(parsed, "symbol");
                        const orderId = this.safeString(parsed, "id");
                        if (symbol !== undefined) {
                            if (this.orders === undefined) {
                                const limit = this.safeInteger(
                                    this.options,
                                    "ordersLimit",
                                    1000
                                );
                                this.orders = new ArrayCacheBySymbolById(limit);
                            }
                            const cachedOrders = this.orders;
                            const orders = this.safeValue(
                                cachedOrders.hashmap,
                                symbol,
                                {}
                            );
                            const order = this.safeValue(orders, orderId);
                            if (order !== undefined) {
                                const fee = this.safeValue(order, "fee");
                                if (fee !== undefined) {
                                    parsed["fee"] = fee;
                                }
                                const fees = this.safeValue(order, "fees");
                                if (fees !== undefined) {
                                    parsed["fees"] = fees;
                                }
                                parsed["trades"] = this.safeValue(
                                    order,
                                    "trades"
                                );
                                parsed["timestamp"] = this.safeInteger(
                                    order,
                                    "timestamp"
                                );
                                parsed["datetime"] = this.safeString(
                                    order,
                                    "datetime"
                                );
                            }
                            cachedOrders.append(parsed);
                            client.resolve(this.orders, messageHash);
                            const messageHashSymbol =
                                messageHash + ":" + symbol;
                            client.resolve(this.orders, messageHashSymbol);
                        }
                    }

                    handleMessage(client, message) {
                        const methods = {
                            depthUpdate: this.handleOrderBook,
                            trade: this.handleTrade,
                            aggTrade: this.handleTrade,
                            kline: this.handleOHLCV,
                            "24hrTicker@arr": this.handleTickers,
                            "24hrMiniTicker@arr": this.handleTickers,
                            "24hrTicker": this.handleTicker,
                            "24hrMiniTicker": this.handleTicker,
                            bookTicker: this.handleTicker,
                            outboundAccountPosition: this.handleBalance,
                            balanceUpdate: this.handleBalance,
                            ACCOUNT_UPDATE: this.handleBalance,
                            executionReport: this.handleOrderUpdate,
                            ORDER_TRADE_UPDATE: this.handleOrderUpdate,
                        };
                        let event = this.safeString(message, "e");
                        if (Array.isArray(message)) {
                            const data = message[0];
                            event = this.safeString(data, "e") + "@arr";
                        }
                        const method = this.safeValue(methods, event);
                        if (method === undefined) {
                            const requestId = this.safeString(message, "id");
                            if (requestId !== undefined) {
                                return this.handleSubscriptionStatus(
                                    client,
                                    message
                                );
                            }
                            // special case for the real-time bookTicker, since it comes without an event identifier
                            //
                            //     {
                            //         u: 7488717758,
                            //         s: 'BTCUSDT',
                            //         b: '28621.74000000',
                            //         B: '1.43278800',
                            //         a: '28621.75000000',
                            //         A: '2.52500800'
                            //     }
                            //
                            if (event === undefined) {
                                this.handleTicker(client, message);
                            }
                        } else {
                            return method.call(this, client, message);
                        }
                    }
                };
            },
            {
                "../base/Precise": 4,
                "../base/errors": 6,
                "../binance.js": 18,
                "./base/Cache": 21,
            },
        ],
        30: [
            function (require, module, exports) {
                "use strict";

                //  ---------------------------------------------------------------------------

                const coinbaseproRest = require("../coinbasepro.js");
                const { BadSymbol } = require("../base/errors");
                const {
                    ArrayCache,
                    ArrayCacheBySymbolById,
                } = require("./base/Cache");

                //  ---------------------------------------------------------------------------

                module.exports = class coinbasepro extends coinbaseproRest {
                    describe() {
                        return this.deepExtend(super.describe(), {
                            has: {
                                ws: true,
                                watchOHLCV: false, // missing on the exchange side
                                watchOrderBook: true,
                                watchTicker: true,
                                watchTickers: false, // for now
                                watchTrades: true,
                                watchBalance: false,
                                watchStatus: false, // for now
                                watchOrders: true,
                                watchMyTrades: true,
                            },
                            urls: {
                                api: {
                                    ws: "wss://ws-feed.pro.coinbase.com",
                                },
                            },
                            options: {
                                tradesLimit: 1000,
                                ordersLimit: 1000,
                                myTradesLimit: 1000,
                            },
                        });
                    }

                    authenticate() {
                        this.checkRequiredCredentials();
                        const path = "/users/self/verify";
                        const nonce = this.nonce();
                        const payload = nonce.toString() + "GET" + path;
                        const signature = this.hmac(
                            this.encode(payload),
                            this.base64ToBinary(this.secret),
                            "sha256",
                            "base64"
                        );
                        return {
                            timestamp: nonce,
                            key: this.apiKey,
                            signature: signature,
                            passphrase: this.password,
                        };
                    }

                    async subscribe(
                        name,
                        symbol,
                        messageHashStart,
                        params = {}
                    ) {
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        const messageHash =
                            messageHashStart + ":" + market["id"];
                        let url = this.urls["api"]["ws"];
                        if ("signature" in params) {
                            // need to distinguish between public trades and user trades
                            url = url + "?";
                        }
                        const subscribe = {
                            type: "subscribe",
                            product_ids: [market["id"]],
                            channels: [name],
                        };
                        const request = this.extend(subscribe, params);
                        return await this.watch(
                            url,
                            messageHash,
                            request,
                            messageHash
                        );
                    }

                    async watchTicker(symbol, params = {}) {
                        /**
                         * @method
                         * @name coinbasepro#watchTicker
                         * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
                         * @param {string} symbol unified symbol of the market to fetch the ticker for
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure}
                         */
                        const name = "ticker";
                        return await this.subscribe(name, symbol, name, params);
                    }

                    async watchTrades(
                        symbol,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#watchTrades
                         * @description get the list of most recent trades for a particular symbol
                         * @param {string} symbol unified symbol of the market to fetch trades for
                         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
                         * @param {int|undefined} limit the maximum amount of trades to fetch
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
                         */
                        await this.loadMarkets();
                        symbol = this.symbol(symbol);
                        const name = "matches";
                        const trades = await this.subscribe(
                            name,
                            symbol,
                            name,
                            params
                        );
                        if (this.newUpdates) {
                            limit = trades.getLimit(symbol, limit);
                        }
                        return this.filterBySinceLimit(
                            trades,
                            since,
                            limit,
                            "timestamp",
                            true
                        );
                    }

                    async watchMyTrades(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#watchMyTrades
                         * @description watches information on multiple trades made by the user
                         * @param {string} symbol unified market symbol of the market orders were made in
                         * @param {int|undefined} since the earliest time in ms to fetch orders for
                         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure
                         */
                        if (symbol === undefined) {
                            throw new BadSymbol(
                                this.id + " watchMyTrades requires a symbol"
                            );
                        }
                        await this.loadMarkets();
                        symbol = this.symbol(symbol);
                        const name = "user";
                        const messageHash = "myTrades";
                        const authentication = this.authenticate();
                        const trades = await this.subscribe(
                            name,
                            symbol,
                            messageHash,
                            this.extend(params, authentication)
                        );
                        if (this.newUpdates) {
                            limit = trades.getLimit(symbol, limit);
                        }
                        return this.filterBySinceLimit(
                            trades,
                            since,
                            limit,
                            "timestamp",
                            true
                        );
                    }

                    async watchOrders(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#watchOrders
                         * @description watches information on multiple orders made by the user
                         * @param {string|undefined} symbol unified market symbol of the market orders were made in
                         * @param {int|undefined} since the earliest time in ms to fetch orders for
                         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        if (symbol === undefined) {
                            throw new BadSymbol(
                                this.id + " watchMyTrades requires a symbol"
                            );
                        }
                        await this.loadMarkets();
                        symbol = this.symbol(symbol);
                        const name = "user";
                        const messageHash = "orders";
                        const authentication = this.authenticate();
                        const orders = await this.subscribe(
                            name,
                            symbol,
                            messageHash,
                            this.extend(params, authentication)
                        );
                        if (this.newUpdates) {
                            limit = orders.getLimit(symbol, limit);
                        }
                        return this.filterBySinceLimit(
                            orders,
                            since,
                            limit,
                            "timestamp",
                            true
                        );
                    }

                    async watchOrderBook(
                        symbol,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name coinbasepro#watchOrderBook
                         * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
                         * @param {string} symbol unified symbol of the market to fetch the order book for
                         * @param {int|undefined} limit the maximum amount of order book entries to return
                         * @param {object} params extra parameters specific to the coinbasepro api endpoint
                         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure} indexed by market symbols
                         */
                        const name = "level2";
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        symbol = market["symbol"];
                        const messageHash = name + ":" + market["id"];
                        const url = this.urls["api"]["ws"];
                        const subscribe = {
                            type: "subscribe",
                            product_ids: [market["id"]],
                            channels: [name],
                        };
                        const request = this.extend(subscribe, params);
                        const subscription = {
                            messageHash: messageHash,
                            symbol: symbol,
                            marketId: market["id"],
                            limit: limit,
                        };
                        const orderbook = await this.watch(
                            url,
                            messageHash,
                            request,
                            messageHash,
                            subscription
                        );
                        return orderbook.limit();
                    }

                    handleTrade(client, message) {
                        //
                        //     {
                        //         type: 'match',
                        //         trade_id: 82047307,
                        //         maker_order_id: '0f358725-2134-435e-be11-753912a326e0',
                        //         taker_order_id: '252b7002-87a3-425c-ac73-f5b9e23f3caf',
                        //         side: 'sell',
                        //         size: '0.00513192',
                        //         price: '9314.78',
                        //         product_id: 'BTC-USD',
                        //         sequence: 12038915443,
                        //         time: '2020-01-31T20:03:41.158814Z'
                        //     }
                        //
                        const marketId = this.safeString(message, "product_id");
                        if (marketId !== undefined) {
                            const trade = this.parseWsTrade(message);
                            const symbol = trade["symbol"];
                            // the exchange sends type = 'match'
                            // but requires 'matches' upon subscribing
                            // therefore we resolve 'matches' here instead of 'match'
                            const type = "matches";
                            const messageHash = type + ":" + marketId;
                            let tradesArray = this.safeValue(
                                this.trades,
                                symbol
                            );
                            if (tradesArray === undefined) {
                                const tradesLimit = this.safeInteger(
                                    this.options,
                                    "tradesLimit",
                                    1000
                                );
                                tradesArray = new ArrayCache(tradesLimit);
                                this.trades[symbol] = tradesArray;
                            }
                            tradesArray.append(trade);
                            client.resolve(tradesArray, messageHash);
                        }
                        return message;
                    }

                    handleMyTrade(client, message) {
                        const marketId = this.safeString(message, "product_id");
                        if (marketId !== undefined) {
                            const trade = this.parseWsTrade(message);
                            const type = "myTrades";
                            const messageHash = type + ":" + marketId;
                            let tradesArray = this.myTrades;
                            if (tradesArray === undefined) {
                                const limit = this.safeInteger(
                                    this.options,
                                    "myTradesLimit",
                                    1000
                                );
                                tradesArray = new ArrayCacheBySymbolById(limit);
                                this.myTrades = tradesArray;
                            }
                            tradesArray.append(trade);
                            client.resolve(tradesArray, messageHash);
                        }
                        return message;
                    }

                    parseWsTrade(trade) {
                        //
                        // private trades
                        // {
                        //     "type": "match",
                        //     "trade_id": 10,
                        //     "sequence": 50,
                        //     "maker_order_id": "ac928c66-ca53-498f-9c13-a110027a60e8",
                        //     "taker_order_id": "132fb6ae-456b-4654-b4e0-d681ac05cea1",
                        //     "time": "2014-11-07T08:19:27.028459Z",
                        //     "product_id": "BTC-USD",
                        //     "size": "5.23512",
                        //     "price": "400.23",
                        //     "side": "sell",
                        //     "taker_user_id: "5844eceecf7e803e259d0365",
                        //     "user_id": "5844eceecf7e803e259d0365",
                        //     "taker_profile_id": "765d1549-9660-4be2-97d4-fa2d65fa3352",
                        //     "profile_id": "765d1549-9660-4be2-97d4-fa2d65fa3352",
                        //     "taker_fee_rate": "0.005"
                        // }
                        //
                        // {
                        //     "type": "match",
                        //     "trade_id": 10,
                        //     "sequence": 50,
                        //     "maker_order_id": "ac928c66-ca53-498f-9c13-a110027a60e8",
                        //     "taker_order_id": "132fb6ae-456b-4654-b4e0-d681ac05cea1",
                        //     "time": "2014-11-07T08:19:27.028459Z",
                        //     "product_id": "BTC-USD",
                        //     "size": "5.23512",
                        //     "price": "400.23",
                        //     "side": "sell",
                        //     "maker_user_id: "5844eceecf7e803e259d0365",
                        //     "maker_id": "5844eceecf7e803e259d0365",
                        //     "maker_profile_id": "765d1549-9660-4be2-97d4-fa2d65fa3352",
                        //     "profile_id": "765d1549-9660-4be2-97d4-fa2d65fa3352",
                        //     "maker_fee_rate": "0.001"
                        // }
                        //
                        // public trades
                        // {
                        //     "type": "received",
                        //     "time": "2014-11-07T08:19:27.028459Z",
                        //     "product_id": "BTC-USD",
                        //     "sequence": 10,
                        //     "order_id": "d50ec984-77a8-460a-b958-66f114b0de9b",
                        //     "size": "1.34",
                        //     "price": "502.1",
                        //     "side": "buy",
                        //     "order_type": "limit"
                        // }
                        const parsed = super.parseTrade(trade);
                        let feeRate = undefined;
                        if ("maker_fee_rate" in trade) {
                            parsed["takerOrMaker"] = "maker";
                            feeRate = this.safeNumber(trade, "maker_fee_rate");
                        } else {
                            parsed["takerOrMaker"] = "taker";
                            feeRate = this.safeNumber(trade, "taker_fee_rate");
                        }
                        const market = this.market(parsed["symbol"]);
                        const feeCurrency = market["quote"];
                        let feeCost = undefined;
                        if (
                            parsed["cost"] !== undefined &&
                            feeRate !== undefined
                        ) {
                            feeCost = parsed["cost"] * feeRate;
                        }
                        parsed["fee"] = {
                            rate: feeRate,
                            cost: feeCost,
                            currency: feeCurrency,
                        };
                        return parsed;
                    }

                    parseWsOrderStatus(status) {
                        const statuses = {
                            filled: "closed",
                            canceled: "canceled",
                        };
                        return this.safeString(statuses, status, "open");
                    }

                    handleOrder(client, message) {
                        //
                        // Order is created
                        //
                        //     {
                        //         type: 'received',
                        //         side: 'sell',
                        //         product_id: 'BTC-USDC',
                        //         time: '2021-03-05T16:42:21.878177Z',
                        //         sequence: 5641953814,
                        //         profile_id: '774ee0ce-fdda-405f-aa8d-47189a14ba0a',
                        //         user_id: '54fc141576dcf32596000133',
                        //         order_id: '11838707-bf9c-4d65-8cec-b57c9a7cab42',
                        //         order_type: 'limit',
                        //         size: '0.0001',
                        //         price: '50000',
                        //         client_oid: 'a317abb9-2b30-4370-ebfe-0deecb300180'
                        //     }
                        //
                        //     {
                        //         "type": "received",
                        //         "time": "2014-11-09T08:19:27.028459Z",
                        //         "product_id": "BTC-USD",
                        //         "sequence": 12,
                        //         "order_id": "dddec984-77a8-460a-b958-66f114b0de9b",
                        //         "funds": "3000.234",
                        //         "side": "buy",
                        //         "order_type": "market"
                        //     }
                        //
                        // Order is on the order book
                        //
                        //     {
                        //         type: 'open',
                        //         side: 'sell',
                        //         product_id: 'BTC-USDC',
                        //         time: '2021-03-05T16:42:21.878177Z',
                        //         sequence: 5641953815,
                        //         profile_id: '774ee0ce-fdda-405f-aa8d-47189a14ba0a',
                        //         user_id: '54fc141576dcf32596000133',
                        //         price: '50000',
                        //         order_id: '11838707-bf9c-4d65-8cec-b57c9a7cab42',
                        //         remaining_size: '0.0001'
                        //     }
                        //
                        // Order is partially or completely filled
                        //
                        //     {
                        //         type: 'match',
                        //         side: 'sell',
                        //         product_id: 'BTC-USDC',
                        //         time: '2021-03-05T16:37:13.396107Z',
                        //         sequence: 5641897876,
                        //         profile_id: '774ee0ce-fdda-405f-aa8d-47189a14ba0a',
                        //         user_id: '54fc141576dcf32596000133',
                        //         trade_id: 5455505,
                        //         maker_order_id: 'e5f5754d-70a3-4346-95a6-209bcb503629',
                        //         taker_order_id: '88bf7086-7b15-40ff-8b19-ab4e08516d69',
                        //         size: '0.00021019',
                        //         price: '47338.46',
                        //         taker_profile_id: '774ee0ce-fdda-405f-aa8d-47189a14ba0a',
                        //         taker_user_id: '54fc141576dcf32596000133',
                        //         taker_fee_rate: '0.005'
                        //     }
                        //
                        // Order is canceled / closed
                        //
                        //     {
                        //         type: 'done',
                        //         side: 'buy',
                        //         product_id: 'BTC-USDC',
                        //         time: '2021-03-05T16:37:13.396107Z',
                        //         sequence: 5641897877,
                        //         profile_id: '774ee0ce-fdda-405f-aa8d-47189a14ba0a',
                        //         user_id: '54fc141576dcf32596000133',
                        //         order_id: '88bf7086-7b15-40ff-8b19-ab4e08516d69',
                        //         reason: 'filled'
                        //     }
                        //
                        let orders = this.orders;
                        if (orders === undefined) {
                            const limit = this.safeInteger(
                                this.options,
                                "ordersLimit",
                                1000
                            );
                            orders = new ArrayCacheBySymbolById(limit);
                            this.orders = orders;
                        }
                        const type = this.safeString(message, "type");
                        const marketId = this.safeString(message, "product_id");
                        if (marketId !== undefined) {
                            const messageHash = "orders:" + marketId;
                            const symbol = this.safeSymbol(marketId);
                            const orderId = this.safeString(
                                message,
                                "order_id"
                            );
                            const makerOrderId = this.safeString(
                                message,
                                "maker_order_id"
                            );
                            const takerOrderId = this.safeString(
                                message,
                                "taker_order_id"
                            );
                            const orders = this.orders;
                            const previousOrders = this.safeValue(
                                orders.hashmap,
                                symbol,
                                {}
                            );
                            let previousOrder = this.safeValue(
                                previousOrders,
                                orderId
                            );
                            if (previousOrder === undefined) {
                                previousOrder = this.safeValue2(
                                    previousOrders,
                                    makerOrderId,
                                    takerOrderId
                                );
                            }
                            if (previousOrder === undefined) {
                                const parsed = this.parseWsOrder(message);
                                orders.append(parsed);
                                client.resolve(orders, messageHash);
                            } else {
                                const sequence = this.safeInteger(
                                    message,
                                    "sequence"
                                );
                                const previousInfo = this.safeValue(
                                    previousOrder,
                                    "info",
                                    {}
                                );
                                const previousSequence = this.safeInteger(
                                    previousInfo,
                                    "sequence"
                                );
                                if (
                                    previousSequence === undefined ||
                                    sequence > previousSequence
                                ) {
                                    if (type === "match") {
                                        const trade =
                                            this.parseWsTrade(message);
                                        if (
                                            previousOrder["trades"] ===
                                            undefined
                                        ) {
                                            previousOrder["trades"] = [];
                                        }
                                        previousOrder["trades"].push(trade);
                                        previousOrder["lastTradeTimestamp"] =
                                            trade["timestamp"];
                                        let totalCost = 0;
                                        let totalAmount = 0;
                                        const trades = previousOrder["trades"];
                                        for (
                                            let i = 0;
                                            i < trades.length;
                                            i++
                                        ) {
                                            const trade = trades[i];
                                            totalCost = this.sum(
                                                totalCost,
                                                trade["cost"]
                                            );
                                            totalAmount = this.sum(
                                                totalAmount,
                                                trade["amount"]
                                            );
                                        }
                                        if (totalAmount > 0) {
                                            previousOrder["average"] =
                                                totalCost / totalAmount;
                                        }
                                        previousOrder["cost"] = totalCost;
                                        if (
                                            previousOrder["filled"] !==
                                            undefined
                                        ) {
                                            previousOrder["filled"] +=
                                                trade["amount"];
                                            if (
                                                previousOrder["amount"] !==
                                                undefined
                                            ) {
                                                previousOrder["remaining"] =
                                                    previousOrder["amount"] -
                                                    previousOrder["filled"];
                                            }
                                        }
                                        if (
                                            previousOrder["fee"] === undefined
                                        ) {
                                            previousOrder["fee"] = {
                                                cost: 0,
                                                currency:
                                                    trade["fee"]["currency"],
                                            };
                                        }
                                        if (
                                            previousOrder["fee"]["cost"] !==
                                                undefined &&
                                            trade["fee"]["cost"] !== undefined
                                        ) {
                                            previousOrder["fee"]["cost"] =
                                                this.sum(
                                                    previousOrder["fee"][
                                                        "cost"
                                                    ],
                                                    trade["fee"]["cost"]
                                                );
                                        }
                                        // update the newUpdates count
                                        orders.append(previousOrder);
                                        client.resolve(orders, messageHash);
                                    } else if (
                                        type === "received" ||
                                        type === "done"
                                    ) {
                                        const info = this.extend(
                                            previousOrder["info"],
                                            message
                                        );
                                        const order = this.parseWsOrder(info);
                                        const keys = Object.keys(order);
                                        // update the reference
                                        for (let i = 0; i < keys.length; i++) {
                                            const key = keys[i];
                                            if (order[key] !== undefined) {
                                                previousOrder[key] = order[key];
                                            }
                                        }
                                        // update the newUpdates count
                                        orders.append(previousOrder);
                                        client.resolve(orders, messageHash);
                                    }
                                }
                            }
                        }
                    }

                    parseWsOrder(order) {
                        const id = this.safeString(order, "order_id");
                        const clientOrderId = this.safeString(
                            order,
                            "client_oid"
                        );
                        const marketId = this.safeString(order, "product_id");
                        const symbol = this.safeSymbol(marketId);
                        const side = this.safeString(order, "side");
                        const price = this.safeNumber(order, "price");
                        const amount = this.safeNumber2(order, "size", "funds");
                        const time = this.safeString(order, "time");
                        const timestamp = this.parse8601(time);
                        const reason = this.safeString(order, "reason");
                        const status = this.parseWsOrderStatus(reason);
                        const orderType = this.safeString(order, "order_type");
                        let remaining = this.safeNumber(
                            order,
                            "remaining_size"
                        );
                        const type = this.safeString(order, "type");
                        let filled = undefined;
                        if (amount !== undefined && remaining !== undefined) {
                            filled = amount - remaining;
                        } else if (type === "received") {
                            filled = 0;
                            if (amount !== undefined) {
                                remaining = amount - filled;
                            }
                        }
                        let cost = undefined;
                        if (price !== undefined && amount !== undefined) {
                            cost = price * amount;
                        }
                        return {
                            info: order,
                            symbol: symbol,
                            id: id,
                            clientOrderId: clientOrderId,
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            lastTradeTimestamp: undefined,
                            type: orderType,
                            timeInForce: undefined,
                            postOnly: undefined,
                            side: side,
                            price: price,
                            stopPrice: undefined,
                            triggerPrice: undefined,
                            amount: amount,
                            cost: cost,
                            average: undefined,
                            filled: filled,
                            remaining: remaining,
                            status: status,
                            fee: undefined,
                            trades: undefined,
                        };
                    }

                    handleTicker(client, message) {
                        //
                        //     {
                        //         type: 'ticker',
                        //         sequence: 12042642428,
                        //         product_id: 'BTC-USD',
                        //         price: '9380.55',
                        //         open_24h: '9450.81000000',
                        //         volume_24h: '9611.79166047',
                        //         low_24h: '9195.49000000',
                        //         high_24h: '9475.19000000',
                        //         volume_30d: '327812.00311873',
                        //         best_bid: '9380.54',
                        //         best_ask: '9380.55',
                        //         side: 'buy',
                        //         time: '2020-02-01T01:40:16.253563Z',
                        //         trade_id: 82062566,
                        //         last_size: '0.41969131'
                        //     }
                        //
                        const marketId = this.safeString(message, "product_id");
                        if (marketId !== undefined) {
                            const ticker = this.parseTicker(message);
                            const symbol = ticker["symbol"];
                            this.tickers[symbol] = ticker;
                            const type = this.safeString(message, "type");
                            const messageHash = type + ":" + marketId;
                            client.resolve(ticker, messageHash);
                        }
                        return message;
                    }

                    parseTicker(ticker, market = undefined) {
                        //
                        //     {
                        //         type: 'ticker',
                        //         sequence: 12042642428,
                        //         product_id: 'BTC-USD',
                        //         price: '9380.55',
                        //         open_24h: '9450.81000000',
                        //         volume_24h: '9611.79166047',
                        //         low_24h: '9195.49000000',
                        //         high_24h: '9475.19000000',
                        //         volume_30d: '327812.00311873',
                        //         best_bid: '9380.54',
                        //         best_ask: '9380.55',
                        //         side: 'buy',
                        //         time: '2020-02-01T01:40:16.253563Z',
                        //         trade_id: 82062566,
                        //         last_size: '0.41969131'
                        //     }
                        //
                        const type = this.safeString(ticker, "type");
                        if (type === undefined) {
                            return super.parseTicker(ticker, market);
                        }
                        const marketId = this.safeString(ticker, "product_id");
                        const symbol = this.safeSymbol(marketId, market, "-");
                        const timestamp = this.parse8601(
                            this.safeString(ticker, "time")
                        );
                        const last = this.safeNumber(ticker, "price");
                        return {
                            symbol: symbol,
                            timestamp: timestamp,
                            datetime: this.iso8601(timestamp),
                            high: this.safeNumber(ticker, "high_24h"),
                            low: this.safeNumber(ticker, "low_24h"),
                            bid: this.safeNumber(ticker, "best_bid"),
                            bidVolume: undefined,
                            ask: this.safeNumber(ticker, "best_ask"),
                            askVolume: undefined,
                            vwap: undefined,
                            open: this.safeNumber(ticker, "open_24h"),
                            close: last,
                            last: last,
                            previousClose: undefined,
                            change: undefined,
                            percentage: undefined,
                            average: undefined,
                            baseVolume: this.safeNumber(ticker, "volume_24h"),
                            quoteVolume: undefined,
                            info: ticker,
                        };
                    }

                    handleDelta(bookside, delta) {
                        const price = this.safeNumber(delta, 0);
                        const amount = this.safeNumber(delta, 1);
                        bookside.store(price, amount);
                    }

                    handleDeltas(bookside, deltas) {
                        for (let i = 0; i < deltas.length; i++) {
                            this.handleDelta(bookside, deltas[i]);
                        }
                    }

                    handleOrderBook(client, message) {
                        //
                        // first message (snapshot)
                        //
                        //     {
                        //         "type": "snapshot",
                        //         "product_id": "BTC-USD",
                        //         "bids": [
                        //             ["10101.10", "0.45054140"]
                        //         ],
                        //         "asks": [
                        //             ["10102.55", "0.57753524"]
                        //         ]
                        //     }
                        //
                        // subsequent updates
                        //
                        //     {
                        //         "type": "l2update",
                        //         "product_id": "BTC-USD",
                        //         "time": "2019-08-14T20:42:27.265Z",
                        //         "changes": [
                        //             [ "buy", "10101.80000000", "0.162567" ]
                        //         ]
                        //     }
                        //
                        const type = this.safeString(message, "type");
                        const marketId = this.safeString(message, "product_id");
                        const market = this.safeMarket(
                            marketId,
                            undefined,
                            "-"
                        );
                        const symbol = market["symbol"];
                        const name = "level2";
                        const messageHash = name + ":" + marketId;
                        const subscription = this.safeValue(
                            client.subscriptions,
                            messageHash,
                            {}
                        );
                        const limit = this.safeInteger(subscription, "limit");
                        if (type === "snapshot") {
                            this.orderbooks[symbol] = this.orderBook({}, limit);
                            const orderbook = this.orderbooks[symbol];
                            this.handleDeltas(
                                orderbook["asks"],
                                this.safeValue(message, "asks", [])
                            );
                            this.handleDeltas(
                                orderbook["bids"],
                                this.safeValue(message, "bids", [])
                            );
                            orderbook["timestamp"] = undefined;
                            orderbook["datetime"] = undefined;
                            client.resolve(orderbook, messageHash);
                        } else if (type === "l2update") {
                            const orderbook = this.orderbooks[symbol];
                            const timestamp = this.parse8601(
                                this.safeString(message, "time")
                            );
                            const changes = this.safeValue(
                                message,
                                "changes",
                                []
                            );
                            const sides = {
                                sell: "asks",
                                buy: "bids",
                            };
                            for (let i = 0; i < changes.length; i++) {
                                const change = changes[i];
                                const key = this.safeString(change, 0);
                                const side = this.safeString(sides, key);
                                const price = this.safeNumber(change, 1);
                                const amount = this.safeNumber(change, 2);
                                const bookside = orderbook[side];
                                bookside.store(price, amount);
                            }
                            orderbook["timestamp"] = timestamp;
                            orderbook["datetime"] = this.iso8601(timestamp);
                            client.resolve(orderbook, messageHash);
                        }
                    }

                    handleSubscriptionStatus(client, message) {
                        //
                        //     {
                        //         type: 'subscriptions',
                        //         channels: [
                        //             {
                        //                 name: 'level2',
                        //                 product_ids: [ 'ETH-BTC' ]
                        //             }
                        //         ]
                        //     }
                        //
                        return message;
                    }

                    handleMessage(client, message) {
                        const type = this.safeString(message, "type");
                        const methods = {
                            snapshot: this.handleOrderBook,
                            l2update: this.handleOrderBook,
                            subscribe: this.handleSubscriptionStatus,
                            ticker: this.handleTicker,
                            received: this.handleOrder,
                            open: this.handleOrder,
                            change: this.handleOrder,
                            done: this.handleOrder,
                        };
                        const length = client.url.length - 0;
                        const authenticated = client.url[length - 1] === "?";
                        const method = this.safeValue(methods, type);
                        if (method === undefined) {
                            if (type === "match") {
                                if (authenticated) {
                                    this.handleMyTrade(client, message);
                                    this.handleOrder(client, message);
                                } else {
                                    this.handleTrade(client, message);
                                }
                            }
                        } else {
                            return method.call(this, client, message);
                        }
                    }
                };
            },
            {
                "../base/errors": 6,
                "../coinbasepro.js": 19,
                "./base/Cache": 21,
            },
        ],
        31: [
            function (require, module, exports) {
                "use strict";

                //  ---------------------------------------------------------------------------

                const kucoinRest = require("../kucoin.js");
                const {
                    ExchangeError,
                    InvalidNonce,
                    NetworkError,
                } = require("../base/errors");
                const {
                    ArrayCache,
                    ArrayCacheByTimestamp,
                    ArrayCacheBySymbolById,
                } = require("./base/Cache");

                //  ---------------------------------------------------------------------------

                module.exports = class kucoin extends kucoinRest {
                    describe() {
                        return this.deepExtend(super.describe(), {
                            has: {
                                ws: true,
                                watchOrderBook: true,
                                watchOrders: true,
                                watchMyTrades: true,
                                watchTickers: false, // for now
                                watchTicker: true,
                                watchTrades: true,
                                watchBalance: true,
                                watchOHLCV: true,
                            },
                            options: {
                                tradesLimit: 1000,
                                watchOrderBookRate: 100, // get updates every 100ms or 1000ms
                                fetchOrderBookSnapshot: {
                                    maxAttempts: 3, // default number of sync attempts
                                    delay: 1000, // warmup delay in ms before synchronizing
                                },
                                watchTicker: {
                                    name: "market/snapshot", // market/ticker
                                },
                            },
                            streaming: {
                                // kucoin does not support built-in ws protocol-level ping-pong
                                // instead it requires a custom json-based text ping-pong
                                // https://docs.kucoin.com/#ping
                                ping: this.ping,
                            },
                        });
                    }

                    async negotiate(params = {}) {
                        const client = this.client("ws");
                        const messageHash = "negotiate";
                        let future = this.safeValue(
                            client.subscriptions,
                            messageHash
                        );
                        if (future === undefined) {
                            future = client.future(messageHash);
                            client.subscriptions[messageHash] = future;
                            let response = undefined;
                            const throwException = false;
                            if (this.checkRequiredCredentials(throwException)) {
                                response =
                                    await this.privatePostBulletPrivate();
                                //
                                //     {
                                //         code: "200000",
                                //         data: {
                                //             instanceServers: [
                                //                 {
                                //                     pingInterval:  50000,
                                //                     endpoint: "wss://push-private.kucoin.com/endpoint",
                                //                     protocol: "websocket",
                                //                     encrypt: true,
                                //                     pingTimeout: 10000
                                //                 }
                                //             ],
                                //             token: "2neAiuYvAU61ZDXANAGAsiL4-iAExhsBXZxftpOeh_55i3Ysy2q2LEsEWU64mdzUOPusi34M_wGoSf7iNyEWJ1UQy47YbpY4zVdzilNP-Bj3iXzrjjGlWtiYB9J6i9GjsxUuhPw3BlrzazF6ghq4Lzf7scStOz3KkxjwpsOBCH4=.WNQmhZQeUKIkh97KYgU0Lg=="
                                //         }
                                //     }
                                //
                            } else {
                                response = await this.publicPostBulletPublic();
                            }
                            client.resolve(response, messageHash);
                            // const data = this.safeValue (response, 'data', {});
                            // const instanceServers = this.safeValue (data, 'instanceServers', []);
                            // const firstServer = this.safeValue (instanceServers, 0, {});
                            // const endpoint = this.safeString (firstServer, 'endpoint');
                            // const token = this.safeString (data, 'token');
                        }
                        return await future;
                    }

                    requestId() {
                        const requestId = this.sum(
                            this.safeInteger(this.options, "requestId", 0),
                            1
                        );
                        this.options["requestId"] = requestId;
                        return requestId;
                    }

                    async subscribe(
                        negotiation,
                        topic,
                        messageHash,
                        method,
                        symbol,
                        params = {}
                    ) {
                        await this.loadMarkets();
                        // const market = this.market (symbol);
                        const data = this.safeValue(negotiation, "data", {});
                        const instanceServers = this.safeValue(
                            data,
                            "instanceServers",
                            []
                        );
                        const firstServer = this.safeValue(
                            instanceServers,
                            0,
                            {}
                        );
                        const endpoint = this.safeString(
                            firstServer,
                            "endpoint"
                        );
                        const token = this.safeString(data, "token");
                        const nonce = this.requestId();
                        const query = {
                            token: token,
                            acceptUserMessage: "true",
                            // 'connectId': nonce, // user-defined id is supported, received by handleSystemStatus
                        };
                        const url = endpoint + "?" + this.urlencode(query);
                        // const topic = '/market/snapshot'; // '/market/ticker';
                        // const messageHash = topic + ':' + market['id'];
                        const subscribe = {
                            id: nonce,
                            type: "subscribe",
                            topic: topic,
                            response: true,
                        };
                        const subscription = {
                            id: nonce.toString(),
                            symbol: symbol,
                            topic: topic,
                            messageHash: messageHash,
                            method: method,
                        };
                        const request = this.extend(subscribe, params);
                        const subscriptionHash = topic;
                        return await this.watch(
                            url,
                            messageHash,
                            request,
                            subscriptionHash,
                            subscription
                        );
                    }

                    async watchTicker(symbol, params = {}) {
                        /**
                         * @method
                         * @name kucoin#watchTicker
                         * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
                         * @param {string} symbol unified symbol of the market to fetch the ticker for
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure}
                         */
                        await this.loadMarkets();
                        const market = this.market(symbol);
                        symbol = market["symbol"];
                        const negotiation = await this.negotiate();
                        const options = this.safeValue(
                            this.options,
                            "watchTicker",
                            {}
                        );
                        const channel = this.safeString2(
                            options,
                            "name",
                            "topic",
                            "market/snapshot"
                        ); // topic option is deprecated use name instead
                        const topic = "/" + channel + ":" + market["id"];
                        const messageHash = topic;
                        return await this.subscribe(
                            negotiation,
                            topic,
                            messageHash,
                            undefined,
                            symbol,
                            params
                        );
                    }

                    handleTicker(client, message) {
                        //
                        // market/snapshot
                        //
                        // updates come in every 2 sec unless there
                        // were no changes since the previous update
                        //
                        //     {
                        //         "data": {
                        //             "sequence": "1545896669291",
                        //             "data": {
                        //                 "trading": true,
                        //                 "symbol": "KCS-BTC",
                        //                 "buy": 0.00011,
                        //                 "sell": 0.00012,
                        //                 "sort": 100,
                        //                 "volValue": 3.13851792584, // total
                        //                 "baseCurrency": "KCS",
                        //                 "market": "BTC",
                        //                 "quoteCurrency": "BTC",
                        //                 "symbolCode": "KCS-BTC",
                        //                 "datetime": 1548388122031,
                        //                 "high": 0.00013,
                        //                 "vol": 27514.34842,
                        //                 "low": 0.0001,
                        //                 "changePrice": -1.0e-5,
                        //                 "changeRate": -0.0769,
                        //                 "lastTradedPrice": 0.00012,
                        //                 "board": 0,
                        //                 "mark": 0
                        //             }
                        //         },
                        //         "subject": "trade.snapshot",
                        //         "topic": "/market/snapshot:KCS-BTC",
                        //         "type": "message"
                        //     }
                        //
                        // market/ticker
                        //
                        //     {
                        //         type: 'message',
                        //         topic: '/market/ticker:BTC-USDT',
                        //         subject: 'trade.ticker',
                        //         data: {
                        //             bestAsk: '62163',
                        //             bestAskSize: '0.99011388',
                        //             bestBid: '62162.9',
                        //             bestBidSize: '0.04794181',
                        //             price: '62162.9',
                        //             sequence: '1621383371852',
                        //             size: '0.00832274',
                        //             time: 1634641987564
                        //         }
                        //     }
                        //
                        const topic = this.safeString(message, "topic");
                        let market = undefined;
                        if (topic !== undefined) {
                            const parts = topic.split(":");
                            const marketId = this.safeString(parts, 1);
                            market = this.safeMarket(marketId, market, "-");
                        }
                        const data = this.safeValue(message, "data", {});
                        const rawTicker = this.safeValue(data, "data", data);
                        const ticker = this.parseTicker(rawTicker, market);
                        const symbol = ticker["symbol"];
                        this.tickers[symbol] = ticker;
                        const messageHash = this.safeString(message, "topic");
                        if (messageHash !== undefined) {
                            client.resolve(ticker, messageHash);
                        }
                        return message;
                    }

                    async watchOHLCV(
                        symbol,
                        timeframe = "1m",
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#watchOHLCV
                         * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
                         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
                         * @param {string} timeframe the length of time each candle represents
                         * @param {int|undefined} since timestamp in ms of the earliest candle to fetch
                         * @param {int|undefined} limit the maximum amount of candles to fetch
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {[[int]]} A list of candles ordered as timestamp, open, high, low, close, volume
                         */
                        await this.loadMarkets();
                        const negotiation = await this.negotiate();
                        const market = this.market(symbol);
                        symbol = market["symbol"];
                        const period = this.timeframes[timeframe];
                        const topic =
                            "/market/candles:" + market["id"] + "_" + period;
                        const messageHash = topic;
                        const ohlcv = await this.subscribe(
                            negotiation,
                            topic,
                            messageHash,
                            undefined,
                            symbol,
                            params
                        );
                        if (this.newUpdates) {
                            limit = ohlcv.getLimit(symbol, limit);
                        }
                        return this.filterBySinceLimit(
                            ohlcv,
                            since,
                            limit,
                            0,
                            true
                        );
                    }

                    handleOHLCV(client, message) {
                        //
                        //     {
                        //         data: {
                        //             symbol: 'BTC-USDT',
                        //             candles: [
                        //                 '1624881240',
                        //                 '34138.8',
                        //                 '34121.6',
                        //                 '34138.8',
                        //                 '34097.9',
                        //                 '3.06097133',
                        //                 '104430.955068564'
                        //             ],
                        //             time: 1624881284466023700
                        //         },
                        //         subject: 'trade.candles.update',
                        //         topic: '/market/candles:BTC-USDT_1min',
                        //         type: 'message'
                        //     }
                        //
                        const data = this.safeValue(message, "data", {});
                        const marketId = this.safeString(data, "symbol");
                        const candles = this.safeValue(data, "candles", []);
                        const topic = this.safeString(message, "topic");
                        const parts = topic.split("_");
                        const interval = this.safeString(parts, 1);
                        // use a reverse lookup in a static map instead
                        const timeframe = this.findTimeframe(interval);
                        const symbol = this.safeSymbol(marketId);
                        const market = this.market(symbol);
                        this.ohlcvs[symbol] = this.safeValue(
                            this.ohlcvs,
                            symbol,
                            {}
                        );
                        let stored = this.safeValue(
                            this.ohlcvs[symbol],
                            timeframe
                        );
                        if (stored === undefined) {
                            const limit = this.safeInteger(
                                this.options,
                                "OHLCVLimit",
                                1000
                            );
                            stored = new ArrayCacheByTimestamp(limit);
                            this.ohlcvs[symbol][timeframe] = stored;
                        }
                        const ohlcv = this.parseOHLCV(candles, market);
                        stored.append(ohlcv);
                        client.resolve(stored, topic);
                    }

                    async watchTrades(
                        symbol,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#watchTrades
                         * @description get the list of most recent trades for a particular symbol
                         * @param {string} symbol unified symbol of the market to fetch trades for
                         * @param {int|undefined} since timestamp in ms of the earliest trade to fetch
                         * @param {int|undefined} limit the maximum amount of trades to fetch
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {[object]} a list of [trade structures]{@link https://docs.ccxt.com/en/latest/manual.html?#public-trades}
                         */
                        await this.loadMarkets();
                        const negotiation = await this.negotiate();
                        const market = this.market(symbol);
                        symbol = market["symbol"];
                        const topic = "/market/match:" + market["id"];
                        const messageHash = topic;
                        const trades = await this.subscribe(
                            negotiation,
                            topic,
                            messageHash,
                            undefined,
                            symbol,
                            params
                        );
                        if (this.newUpdates) {
                            limit = trades.getLimit(symbol, limit);
                        }
                        return this.filterBySinceLimit(
                            trades,
                            since,
                            limit,
                            "timestamp",
                            true
                        );
                    }

                    handleTrade(client, message) {
                        //
                        //     {
                        //         data: {
                        //             sequence: '1568787654360',
                        //             symbol: 'BTC-USDT',
                        //             side: 'buy',
                        //             size: '0.00536577',
                        //             price: '9345',
                        //             takerOrderId: '5e356c4a9f1a790008f8d921',
                        //             time: '1580559434436443257',
                        //             type: 'match',
                        //             makerOrderId: '5e356bffedf0010008fa5d7f',
                        //             tradeId: '5e356c4aeefabd62c62a1ece'
                        //         },
                        //         subject: 'trade.l3match',
                        //         topic: '/market/match:BTC-USDT',
                        //         type: 'message'
                        //     }
                        //
                        const data = this.safeValue(message, "data", {});
                        const trade = this.parseTrade(data);
                        const messageHash = this.safeString(message, "topic");
                        const symbol = trade["symbol"];
                        let trades = this.safeValue(this.trades, symbol);
                        if (trades === undefined) {
                            const limit = this.safeInteger(
                                this.options,
                                "tradesLimit",
                                1000
                            );
                            trades = new ArrayCache(limit);
                            this.trades[symbol] = trades;
                        }
                        trades.append(trade);
                        client.resolve(trades, messageHash);
                        return message;
                    }

                    async watchOrderBook(
                        symbol,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#watchOrderBook
                         * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
                         * @param {string} symbol unified symbol of the market to fetch the order book for
                         * @param {int|undefined} limit the maximum amount of order book entries to return
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-book-structure} indexed by market symbols
                         */
                        //
                        // https://docs.kucoin.com/#level-2-market-data
                        //
                        // 1. After receiving the websocket Level 2 data flow, cache the data.
                        // 2. Initiate a REST request to get the snapshot data of Level 2 order book.
                        // 3. Playback the cached Level 2 data flow.
                        // 4. Apply the new Level 2 data flow to the local snapshot to ensure that
                        // the sequence of the new Level 2 update lines up with the sequence of
                        // the previous Level 2 data. Discard all the message prior to that
                        // sequence, and then playback the change to snapshot.
                        // 5. Update the level2 full data based on sequence according to the
                        // size. If the price is 0, ignore the messages and update the sequence.
                        // If the size=0, update the sequence and remove the price of which the
                        // size is 0 out of level 2. For other cases, please update the price.
                        //
                        if (limit !== undefined) {
                            if (limit !== 20 && limit !== 100) {
                                throw new ExchangeError(
                                    this.id +
                                        " watchOrderBook 'limit' argument must be undefined, 20 or 100"
                                );
                            }
                        }
                        await this.loadMarkets();
                        const negotiation = await this.negotiate();
                        const market = this.market(symbol);
                        symbol = market["symbol"];
                        const topic = "/market/level2:" + market["id"];
                        const messageHash = topic;
                        const orderbook = await this.subscribe(
                            negotiation,
                            topic,
                            messageHash,
                            this.handleOrderBookSubscription,
                            symbol,
                            params
                        );
                        return orderbook.limit();
                    }

                    retryFetchOrderBookSnapshot(client, message, subscription) {
                        const symbol = this.safeString(subscription, "symbol");
                        const messageHash = this.safeString(
                            subscription,
                            "messageHash"
                        );
                        // console.log ('fetchOrderBookSnapshot', nonce, previousSequence, nonce >= previousSequence);
                        const options = this.safeValue(
                            this.options,
                            "fetchOrderBookSnapshot",
                            {}
                        );
                        const maxAttempts = this.safeInteger(
                            options,
                            "maxAttempts",
                            3
                        );
                        let numAttempts = this.safeInteger(
                            subscription,
                            "numAttempts",
                            0
                        );
                        // retry to syncrhonize if we haven't reached maxAttempts yet
                        if (numAttempts < maxAttempts) {
                            // safety guard
                            if (messageHash in client.subscriptions) {
                                numAttempts = this.sum(numAttempts, 1);
                                subscription["numAttempts"] = numAttempts;
                                client.subscriptions[messageHash] =
                                    subscription;
                                this.spawn(
                                    this.fetchOrderBookSnapshot,
                                    client,
                                    message,
                                    subscription
                                );
                            }
                        } else {
                            if (messageHash in client.subscriptions) {
                                subscription[
                                    "fetchingOrderBookSnapshot"
                                ] = false;
                                subscription["numAttempts"] = 0;
                                client.subscriptions[messageHash] =
                                    subscription;
                            }
                            const e = new InvalidNonce(
                                this.id +
                                    " failed to synchronize WebSocket feed with the snapshot for symbol " +
                                    symbol +
                                    " in " +
                                    maxAttempts.toString() +
                                    " attempts"
                            );
                            client.reject(e, messageHash);
                        }
                    }

                    async fetchOrderBookSnapshot(
                        client,
                        message,
                        subscription
                    ) {
                        const symbol = this.safeString(subscription, "symbol");
                        const limit = this.safeInteger(subscription, "limit");
                        const messageHash = this.safeString(
                            subscription,
                            "messageHash"
                        );
                        try {
                            // 2. Initiate a REST request to get the snapshot data of Level 2 order book.
                            // todo: this is a synch blocking call in ccxt.php - make it async
                            const snapshot = await this.fetchOrderBook(
                                symbol,
                                limit
                            );
                            const orderbook = this.orderbooks[symbol];
                            const messages = orderbook.cache;
                            // make sure we have at least one delta before fetching the snapshot
                            // otherwise we cannot synchronize the feed with the snapshot
                            // and that will lead to a bidask cross as reported here
                            // https://github.com/ccxt/ccxt/issues/6762
                            const firstMessage = this.safeValue(
                                messages,
                                0,
                                {}
                            );
                            const data = this.safeValue(
                                firstMessage,
                                "data",
                                {}
                            );
                            const sequenceStart = this.safeInteger(
                                data,
                                "sequenceStart"
                            );
                            const nonce = this.safeInteger(snapshot, "nonce");
                            const previousSequence = sequenceStart - 1;
                            // if the received snapshot is earlier than the first cached delta
                            // then we cannot align it with the cached deltas and we need to
                            // retry synchronizing in maxAttempts
                            if (nonce < previousSequence) {
                                this.retryFetchOrderBookSnapshot(
                                    client,
                                    message,
                                    subscription
                                );
                            } else {
                                orderbook.reset(snapshot);
                                // unroll the accumulated deltas
                                // 3. Playback the cached Level 2 data flow.
                                for (let i = 0; i < messages.length; i++) {
                                    const message = messages[i];
                                    this.handleOrderBookMessage(
                                        client,
                                        message,
                                        orderbook
                                    );
                                }
                                this.orderbooks[symbol] = orderbook;
                                client.resolve(orderbook, messageHash);
                            }
                        } catch (e) {
                            if (e instanceof NetworkError) {
                                this.retryFetchOrderBookSnapshot(
                                    client,
                                    message,
                                    subscription
                                );
                            } else {
                                client.reject(e, messageHash);
                            }
                        }
                    }

                    handleDelta(bookside, delta, nonce) {
                        const price = this.safeFloat(delta, 0);
                        if (price > 0) {
                            const sequence = this.safeInteger(delta, 2);
                            if (sequence > nonce) {
                                const amount = this.safeFloat(delta, 1);
                                bookside.store(price, amount);
                            }
                        }
                    }

                    handleDeltas(bookside, deltas, nonce) {
                        for (let i = 0; i < deltas.length; i++) {
                            this.handleDelta(bookside, deltas[i], nonce);
                        }
                    }

                    handleOrderBookMessage(client, message, orderbook) {
                        //
                        //     {
                        //         "type":"message",
                        //         "topic":"/market/level2:BTC-USDT",
                        //         "subject":"trade.l2update",
                        //         "data":{
                        //             "sequenceStart":1545896669105,
                        //             "sequenceEnd":1545896669106,
                        //             "symbol":"BTC-USDT",
                        //             "changes": {
                        //                 "asks": [["6","1","1545896669105"]], // price, size, sequence
                        //                 "bids": [["4","1","1545896669106"]]
                        //             }
                        //         }
                        //     }
                        //
                        const data = this.safeValue(message, "data", {});
                        const sequenceEnd = this.safeInteger(
                            data,
                            "sequenceEnd"
                        );
                        // 4. Apply the new Level 2 data flow to the local snapshot to ensure that
                        // the sequence of the new Level 2 update lines up with the sequence of
                        // the previous Level 2 data. Discard all the message prior to that
                        // sequence, and then playback the change to snapshot.
                        if (sequenceEnd > orderbook["nonce"]) {
                            const sequenceStart = this.safeInteger(
                                message,
                                "sequenceStart"
                            );
                            if (
                                sequenceStart !== undefined &&
                                sequenceStart - 1 > orderbook["nonce"]
                            ) {
                                // todo: client.reject from handleOrderBookMessage properly
                                throw new ExchangeError(
                                    this.id +
                                        " handleOrderBook received an out-of-order nonce"
                                );
                            }
                            const changes = this.safeValue(data, "changes", {});
                            let asks = this.safeValue(changes, "asks", []);
                            let bids = this.safeValue(changes, "bids", []);
                            asks = this.sortBy(asks, 2); // sort by sequence
                            bids = this.sortBy(bids, 2);
                            // 5. Update the level2 full data based on sequence according to the
                            // size. If the price is 0, ignore the messages and update the sequence.
                            // If the size=0, update the sequence and remove the price of which the
                            // size is 0 out of level 2. For other cases, please update the price.
                            this.handleDeltas(
                                orderbook["asks"],
                                asks,
                                orderbook["nonce"]
                            );
                            this.handleDeltas(
                                orderbook["bids"],
                                bids,
                                orderbook["nonce"]
                            );
                            orderbook["nonce"] = sequenceEnd;
                            orderbook["timestamp"] = undefined;
                            orderbook["datetime"] = undefined;
                        }
                        return orderbook;
                    }

                    handleOrderBook(client, message) {
                        //
                        // initial snapshot is fetched with ccxt's fetchOrderBook
                        // the feed does not include a snapshot, just the deltas
                        //
                        //     {
                        //         "type":"message",
                        //         "topic":"/market/level2:BTC-USDT",
                        //         "subject":"trade.l2update",
                        //         "data":{
                        //             "sequenceStart":1545896669105,
                        //             "sequenceEnd":1545896669106,
                        //             "symbol":"BTC-USDT",
                        //             "changes": {
                        //                 "asks": [["6","1","1545896669105"]], // price, size, sequence
                        //                 "bids": [["4","1","1545896669106"]]
                        //             }
                        //         }
                        //     }
                        //
                        const messageHash = this.safeString(message, "topic");
                        const data = this.safeValue(message, "data");
                        const marketId = this.safeString(data, "symbol");
                        const symbol = this.safeSymbol(
                            marketId,
                            undefined,
                            "-"
                        );
                        const orderbook = this.orderbooks[symbol];
                        if (orderbook["nonce"] === undefined) {
                            const subscription = this.safeValue(
                                client.subscriptions,
                                messageHash
                            );
                            const fetchingOrderBookSnapshot = this.safeValue(
                                subscription,
                                "fetchingOrderBookSnapshot"
                            );
                            if (fetchingOrderBookSnapshot === undefined) {
                                subscription[
                                    "fetchingOrderBookSnapshot"
                                ] = true;
                                client.subscriptions[messageHash] =
                                    subscription;
                                const options = this.safeValue(
                                    this.options,
                                    "fetchOrderBookSnapshot",
                                    {}
                                );
                                const delay = this.safeInteger(
                                    options,
                                    "delay",
                                    this.rateLimit
                                );
                                // fetch the snapshot in a separate async call after a warmup delay
                                this.delay(
                                    delay,
                                    this.fetchOrderBookSnapshot,
                                    client,
                                    message,
                                    subscription
                                );
                            }
                            // 1. After receiving the websocket Level 2 data flow, cache the data.
                            orderbook.cache.push(message);
                        } else {
                            this.handleOrderBookMessage(
                                client,
                                message,
                                orderbook
                            );
                            client.resolve(orderbook, messageHash);
                        }
                    }

                    handleOrderBookSubscription(client, message, subscription) {
                        const symbol = this.safeString(subscription, "symbol");
                        const limit = this.safeString(subscription, "limit");
                        if (symbol in this.orderbooks) {
                            delete this.orderbooks[symbol];
                        }
                        this.orderbooks[symbol] = this.orderBook({}, limit);
                        // moved snapshot initialization to handleOrderBook to fix
                        // https://github.com/ccxt/ccxt/issues/6820
                        // the general idea is to fetch the snapshot after the first delta
                        // but not before, because otherwise we cannot synchronize the feed
                    }

                    handleSubscriptionStatus(client, message) {
                        //
                        //     {
                        //         id: '1578090438322',
                        //         type: 'ack'
                        //     }
                        //
                        const id = this.safeString(message, "id");
                        const subscriptionsById = this.indexBy(
                            client.subscriptions,
                            "id"
                        );
                        const subscription = this.safeValue(
                            subscriptionsById,
                            id,
                            {}
                        );
                        const method = this.safeValue(subscription, "method");
                        if (method !== undefined) {
                            method.call(this, client, message, subscription);
                        }
                        return message;
                    }

                    handleSystemStatus(client, message) {
                        //
                        // todo: answer the question whether handleSystemStatus should be renamed
                        // and unified as handleStatus for any usage pattern that
                        // involves system status and maintenance updates
                        //
                        //     {
                        //         id: '1578090234088', // connectId
                        //         type: 'welcome',
                        //     }
                        //
                        return message;
                    }

                    async watchOrders(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#watchOrders
                         * @description watches information on multiple orders made by the user
                         * @param {string|undefined} symbol unified market symbol of the market orders were made in
                         * @param {int|undefined} since the earliest time in ms to fetch orders for
                         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure}
                         */
                        await this.loadMarkets();
                        const negotiation = await this.negotiate();
                        const topic = "/spotMarket/tradeOrders";
                        const request = {
                            privateChannel: true,
                        };
                        let messageHash = topic;
                        if (symbol !== undefined) {
                            const market = this.market(symbol);
                            symbol = market["symbol"];
                            messageHash = messageHash + ":" + market["symbol"];
                        }
                        const orders = await this.subscribe(
                            negotiation,
                            topic,
                            messageHash,
                            undefined,
                            undefined,
                            this.extend(request, params)
                        );
                        if (this.newUpdates) {
                            limit = orders.getLimit(symbol, limit);
                        }
                        return this.filterBySymbolSinceLimit(
                            orders,
                            symbol,
                            since,
                            limit,
                            true
                        );
                    }

                    parseWsOrderStatus(status) {
                        const statuses = {
                            open: "open",
                            filled: "closed",
                            match: "open",
                            update: "open",
                            canceled: "canceled",
                        };
                        return this.safeString(statuses, status, status);
                    }

                    parseWsOrder(order, market = undefined) {
                        //
                        //     {
                        //         'symbol': 'XCAD-USDT',
                        //         'orderType': 'limit',
                        //         'side': 'buy',
                        //         'orderId': '6249167327218b000135e749',
                        //         'type': 'canceled',
                        //         'orderTime': 1648957043065280224,
                        //         'size': '100.452',
                        //         'filledSize': '0',
                        //         'price': '2.9635',
                        //         'clientOid': 'buy-XCAD-USDT-1648957043010159',
                        //         'remainSize': '0',
                        //         'status': 'done',
                        //         'ts': 1648957054031001037
                        //     }
                        //
                        const id = this.safeString(order, "orderId");
                        const clientOrderId = this.safeString(
                            order,
                            "clientOid"
                        );
                        const orderType = this.safeStringLower(
                            order,
                            "orderType"
                        );
                        const price = this.safeString(order, "price");
                        const filled = this.safeString(order, "filledSize");
                        const amount = this.safeString(order, "size");
                        const rawType = this.safeString(order, "type");
                        const status = this.parseWsOrderStatus(rawType);
                        const timestamp = this.safeIntegerProduct(
                            order,
                            "orderTime",
                            0.000001
                        );
                        const marketId = this.safeString(order, "symbol");
                        market = this.safeMarket(marketId, market);
                        const symbol = market["symbol"];
                        const side = this.safeStringLower(order, "side");
                        return this.safeOrder(
                            {
                                info: order,
                                symbol: symbol,
                                id: id,
                                clientOrderId: clientOrderId,
                                timestamp: timestamp,
                                datetime: this.iso8601(timestamp),
                                lastTradeTimestamp: undefined,
                                type: orderType,
                                timeInForce: undefined,
                                postOnly: undefined,
                                side: side,
                                price: price,
                                stopPrice: undefined,
                                triggerPrice: undefined,
                                amount: amount,
                                cost: undefined,
                                average: undefined,
                                filled: filled,
                                remaining: undefined,
                                status: status,
                                fee: undefined,
                                trades: undefined,
                            },
                            market
                        );
                    }

                    handleOrder(client, message) {
                        const messageHash = "/spotMarket/tradeOrders";
                        const data = this.safeValue(message, "data");
                        const parsed = this.parseWsOrder(data);
                        const symbol = this.safeString(parsed, "symbol");
                        const orderId = this.safeString(parsed, "id");
                        if (symbol !== undefined) {
                            if (this.orders === undefined) {
                                const limit = this.safeInteger(
                                    this.options,
                                    "ordersLimit",
                                    1000
                                );
                                this.orders = new ArrayCacheBySymbolById(limit);
                            }
                            const cachedOrders = this.orders;
                            const orders = this.safeValue(
                                cachedOrders.hashmap,
                                symbol,
                                {}
                            );
                            const order = this.safeValue(orders, orderId);
                            if (order !== undefined) {
                                // todo add others to calculate average etc
                                const stopPrice = this.safeValue(
                                    order,
                                    "stopPrice"
                                );
                                if (stopPrice !== undefined) {
                                    parsed["stopPrice"] = stopPrice;
                                }
                                if (order["status"] === "closed") {
                                    parsed["status"] = "closed";
                                }
                            }
                            cachedOrders.append(parsed);
                            client.resolve(this.orders, messageHash);
                            const symbolSpecificMessageHash =
                                messageHash + ":" + symbol;
                            client.resolve(
                                this.orders,
                                symbolSpecificMessageHash
                            );
                        }
                    }

                    async watchMyTrades(
                        symbol = undefined,
                        since = undefined,
                        limit = undefined,
                        params = {}
                    ) {
                        /**
                         * @method
                         * @name kucoin#watchMyTrades
                         * @description watches information on multiple trades made by the user
                         * @param {string} symbol unified market symbol of the market orders were made in
                         * @param {int|undefined} since the earliest time in ms to fetch orders for
                         * @param {int|undefined} limit the maximum number of  orde structures to retrieve
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {[object]} a list of [order structures]{@link https://docs.ccxt.com/en/latest/manual.html#order-structure
                         */
                        await this.loadMarkets();
                        const negotiation = await this.negotiate();
                        const topic = "/spot/tradeFills";
                        const request = {
                            privateChannel: true,
                        };
                        let messageHash = topic;
                        if (symbol !== undefined) {
                            const market = this.market(symbol);
                            symbol = market["symbol"];
                            messageHash = messageHash + ":" + market["symbol"];
                        }
                        const trades = await this.subscribe(
                            negotiation,
                            topic,
                            messageHash,
                            undefined,
                            undefined,
                            this.extend(request, params)
                        );
                        if (this.newUpdates) {
                            limit = trades.getLimit(symbol, limit);
                        }
                        return this.filterBySymbolSinceLimit(
                            trades,
                            symbol,
                            since,
                            limit
                        );
                    }

                    handleMyTrade(client, message) {
                        let trades = this.myTrades;
                        if (trades === undefined) {
                            const limit = this.safeInteger(
                                this.options,
                                "tradesLimit",
                                1000
                            );
                            trades = new ArrayCacheBySymbolById(limit);
                        }
                        const data = this.safeValue(message, "data");
                        const parsed = this.parseWsTrade(data);
                        trades.append(parsed);
                        const messageHash = "/spot/tradeFills";
                        client.resolve(trades, messageHash);
                        const symbolSpecificMessageHash =
                            messageHash + ":" + parsed["symbol"];
                        client.resolve(trades, symbolSpecificMessageHash);
                    }

                    parseWsTrade(trade, market = undefined) {
                        //
                        // {
                        //     fee: 0.00262148,
                        //     feeCurrency: 'USDT',
                        //     feeRate: 0.001,
                        //     orderId: '62417436b29df8000183df2f',
                        //     orderType: 'market',
                        //     price: 131.074,
                        //     side: 'sell',
                        //     size: 0.02,
                        //     symbol: 'LTC-USDT',
                        //     time: '1648456758734571745',
                        //     tradeId: '624174362e113d2f467b3043'
                        //   }
                        //
                        const marketId = this.safeString(trade, "symbol");
                        market = this.safeMarket(marketId, market, "-");
                        const symbol = market["symbol"];
                        const type = this.safeString(trade, "orderType");
                        const side = this.safeString(trade, "side");
                        const tradeId = this.safeString(trade, "tradeId");
                        const price = this.safeString(trade, "price");
                        const amount = this.safeString(trade, "size");
                        const order = this.safeString(trade, "orderId");
                        const timestamp = this.safeIntegerProduct(
                            trade,
                            "time",
                            0.000001
                        );
                        const feeCurrency = market["quote"];
                        const feeRate = this.safeString(trade, "feeRate");
                        const fee = {
                            cost: undefined,
                            rate: feeRate,
                            currency: feeCurrency,
                        };
                        return this.safeTrade(
                            {
                                info: trade,
                                timestamp: timestamp,
                                datetime: this.iso8601(timestamp),
                                symbol: symbol,
                                id: tradeId,
                                order: order,
                                type: type,
                                takerOrMaker: undefined,
                                side: side,
                                price: price,
                                amount: amount,
                                cost: undefined,
                                fee: fee,
                            },
                            market
                        );
                    }

                    async watchBalance(params = {}) {
                        /**
                         * @method
                         * @name kucoin#watchBalance
                         * @description query for balance and get the amount of funds available for trading or funds locked in orders
                         * @param {object} params extra parameters specific to the kucoin api endpoint
                         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/en/latest/manual.html?#balance-structure}
                         */
                        await this.loadMarkets();
                        const negotiation = await this.negotiate();
                        const topic = "/account/balance";
                        const request = {
                            privateChannel: true,
                        };
                        const messageHash = topic;
                        return await this.subscribe(
                            negotiation,
                            topic,
                            messageHash,
                            this.handleBalanceSubscription,
                            undefined,
                            this.extend(request, params)
                        );
                    }

                    handleBalance(client, message) {
                        //
                        // {
                        //     "id":"6217a451294b030001e3a26a",
                        //     "type":"message",
                        //     "topic":"/account/balance",
                        //     "userId":"6217707c52f97f00012a67db",
                        //     "channelType":"private",
                        //     "subject":"account.balance",
                        //     "data":{
                        //        "accountId":"62177fe67810720001db2f18",
                        //        "available":"89",
                        //        "availableChange":"-30",
                        //        "currency":"USDT",
                        //        "hold":"0",
                        //        "holdChange":"0",
                        //        "relationContext":{
                        //        },
                        //        "relationEvent":"main.transfer",
                        //        "relationEventId":"6217a451294b030001e3a26a",
                        //        "time":"1645716561816",
                        //        "total":"89"
                        //     }
                        //
                        const data = this.safeValue(message, "data", {});
                        const messageHash = this.safeString(message, "topic");
                        const currencyId = this.safeString(data, "currency");
                        const relationEvent = this.safeString(
                            data,
                            "relationEvent"
                        );
                        let requestAccountType = undefined;
                        if (relationEvent !== undefined) {
                            const relationEventParts = relationEvent.split(".");
                            requestAccountType = this.safeString(
                                relationEventParts,
                                0
                            );
                        }
                        const selectedType = this.safeString2(
                            this.options,
                            "watchBalance",
                            "defaultType",
                            "trade"
                        ); // trade, main, margin or other
                        const accountsByType = this.safeValue(
                            this.options,
                            "accountsByType"
                        );
                        const uniformType = this.safeString(
                            accountsByType,
                            requestAccountType,
                            "trade"
                        );
                        if (!(uniformType in this.balance)) {
                            this.balance[uniformType] = {};
                        }
                        const code = this.safeCurrencyCode(currencyId);
                        const account = this.account();
                        account["free"] = this.safeString(data, "available");
                        account["used"] = this.safeString(data, "hold");
                        account["total"] = this.safeString(data, "total");
                        this.balance[uniformType][code] = account;
                        this.balance[uniformType] = this.safeBalance(
                            this.balance[uniformType]
                        );
                        if (uniformType === selectedType) {
                            client.resolve(
                                this.balance[uniformType],
                                messageHash
                            );
                        }
                    }

                    handleBalanceSubscription(client, message, subscription) {
                        this.spawn(this.fetchBalanceSnapshot, client, message);
                    }

                    async fetchBalanceSnapshot(client, message) {
                        await this.loadMarkets();
                        this.checkRequiredCredentials();
                        const messageHash = "/account/balance";
                        const selectedType = this.safeString2(
                            this.options,
                            "watchBalance",
                            "defaultType",
                            "spot"
                        ); // spot, margin, main, funding, future, mining, trade, contract, pool
                        const params = {
                            type: selectedType,
                        };
                        const snapshot = await this.fetchBalance(params);
                        //
                        // {
                        //     "info":{
                        //        "code":"200000",
                        //        "data":[
                        //           {
                        //              "id":"6217a451cbe8910001ed3aa8",
                        //              "currency":"USDT",
                        //              "type":"trade",
                        //              "balance":"10",
                        //              "available":"4.995",
                        //              "holds":"5.005"
                        //           }
                        //        ]
                        //     },
                        //     "USDT":{
                        //        "free":4.995,
                        //        "used":5.005,
                        //        "total":10
                        //     },
                        //     "free":{
                        //        "USDT":4.995
                        //     },
                        //     "used":{
                        //        "USDT":5.005
                        //     },
                        //     "total":{
                        //        "USDT":10
                        //     }
                        //  }
                        //
                        const data = this.safeValue(
                            snapshot["info"],
                            "data",
                            []
                        );
                        if (data.length > 0) {
                            const selectedType = this.safeString2(
                                this.options,
                                "watchBalance",
                                "defaultType",
                                "trade"
                            ); // trade, main, margin or other
                            for (let i = 0; i < data.length; i++) {
                                const balance = data[i];
                                const type = this.safeString(balance, "type");
                                const accountsByType = this.safeValue(
                                    this.options,
                                    "accountsByType"
                                );
                                const uniformType = this.safeString(
                                    accountsByType,
                                    type,
                                    "trade"
                                );
                                if (!(uniformType in this.balance)) {
                                    this.balance[uniformType] = {};
                                }
                                const currencyId = this.safeString(
                                    balance,
                                    "currency"
                                );
                                const code = this.safeCurrencyCode(currencyId);
                                const account = this.account();
                                account["free"] = this.safeString(
                                    balance,
                                    "available"
                                );
                                account["used"] = this.safeString(
                                    balance,
                                    "holds"
                                );
                                account["total"] = this.safeString(
                                    balance,
                                    "total"
                                );
                                this.balance[selectedType][code] = account;
                                this.balance[selectedType] = this.safeBalance(
                                    this.balance[selectedType]
                                );
                            }
                            client.resolve(
                                this.balance[selectedType],
                                messageHash
                            );
                        }
                    }

                    handleSubject(client, message) {
                        //
                        //     {
                        //         "type":"message",
                        //         "topic":"/market/level2:BTC-USDT",
                        //         "subject":"trade.l2update",
                        //         "data":{
                        //             "sequenceStart":1545896669105,
                        //             "sequenceEnd":1545896669106,
                        //             "symbol":"BTC-USDT",
                        //             "changes": {
                        //                 "asks": [["6","1","1545896669105"]], // price, size, sequence
                        //                 "bids": [["4","1","1545896669106"]]
                        //             }
                        //         }
                        //     }
                        //
                        const subject = this.safeString(message, "subject");
                        const methods = {
                            "trade.l2update": this.handleOrderBook,
                            "trade.ticker": this.handleTicker,
                            "trade.snapshot": this.handleTicker,
                            "trade.l3match": this.handleTrade,
                            "trade.candles.update": this.handleOHLCV,
                            "account.balance": this.handleBalance,
                            "/spot/tradeFills": this.handleMyTrade,
                            orderChange: this.handleOrder,
                        };
                        const method = this.safeValue(methods, subject);
                        if (method === undefined) {
                            return message;
                        } else {
                            return method.call(this, client, message);
                        }
                    }

                    ping(client) {
                        // kucoin does not support built-in ws protocol-level ping-pong
                        // instead it requires a custom json-based text ping-pong
                        // https://docs.kucoin.com/#ping
                        const id = this.requestId().toString();
                        return {
                            id: id,
                            type: "ping",
                        };
                    }

                    handlePong(client, message) {
                        // https://docs.kucoin.com/#ping
                        client.lastPong = this.milliseconds();
                        return message;
                    }

                    handleErrorMessage(client, message) {
                        return message;
                    }

                    handleMessage(client, message) {
                        if (this.handleErrorMessage(client, message)) {
                            const type = this.safeString(message, "type");
                            const methods = {
                                // 'heartbeat': this.handleHeartbeat,
                                welcome: this.handleSystemStatus,
                                ack: this.handleSubscriptionStatus,
                                message: this.handleSubject,
                                pong: this.handlePong,
                            };
                            const method = this.safeValue(methods, type);
                            if (method === undefined) {
                                return message;
                            } else {
                                return method.call(this, client, message);
                            }
                        }
                    }
                };
            },
            { "../base/errors": 6, "../kucoin.js": 20, "./base/Cache": 21 },
        ],
        32: [
            function (require, module, exports) {
                (function (module, exports) {
                    "use strict";

                    // Utils
                    function assert(val, msg) {
                        if (!val) throw new Error(msg || "Assertion failed");
                    }

                    // Could use `inherits` module, but don't want to move from single file
                    // architecture yet.
                    function inherits(ctor, superCtor) {
                        ctor.super_ = superCtor;
                        var TempCtor = function () {};
                        TempCtor.prototype = superCtor.prototype;
                        ctor.prototype = new TempCtor();
                        ctor.prototype.constructor = ctor;
                    }

                    // BN

                    function BN(number, base, endian) {
                        if (BN.isBN(number)) {
                            return number;
                        }

                        this.negative = 0;
                        this.words = null;
                        this.length = 0;

                        // Reduction context
                        this.red = null;

                        if (number !== null) {
                            if (base === "le" || base === "be") {
                                endian = base;
                                base = 10;
                            }

                            this._init(number || 0, base || 10, endian || "be");
                        }
                    }
                    if (typeof module === "object") {
                        module.exports = BN;
                    } else {
                        exports.BN = BN;
                    }

                    BN.BN = BN;
                    BN.wordSize = 26;

                    var Buffer;
                    try {
                        Buffer = require("buffer").Buffer;
                    } catch (e) {}

                    BN.isBN = function isBN(num) {
                        if (num instanceof BN) {
                            return true;
                        }

                        return (
                            num !== null &&
                            typeof num === "object" &&
                            num.constructor.wordSize === BN.wordSize &&
                            Array.isArray(num.words)
                        );
                    };

                    BN.max = function max(left, right) {
                        if (left.cmp(right) > 0) return left;
                        return right;
                    };

                    BN.min = function min(left, right) {
                        if (left.cmp(right) < 0) return left;
                        return right;
                    };

                    BN.prototype._init = function init(number, base, endian) {
                        if (typeof number === "number") {
                            return this._initNumber(number, base, endian);
                        }

                        if (typeof number === "object") {
                            return this._initArray(number, base, endian);
                        }

                        if (base === "hex") {
                            base = 16;
                        }
                        assert(base === (base | 0) && base >= 2 && base <= 36);

                        number = number.toString().replace(/\s+/g, "");
                        var start = 0;
                        if (number[0] === "-") {
                            start++;
                        }

                        if (base === 16) {
                            this._parseHex(number, start);
                        } else {
                            this._parseBase(number, base, start);
                        }

                        if (number[0] === "-") {
                            this.negative = 1;
                        }

                        this._strip();

                        if (endian !== "le") return;

                        this._initArray(this.toArray(), base, endian);
                    };

                    BN.prototype._initNumber = function _initNumber(
                        number,
                        base,
                        endian
                    ) {
                        if (number < 0) {
                            this.negative = 1;
                            number = -number;
                        }
                        if (number < 0x4000000) {
                            this.words = [number & 0x3ffffff];
                            this.length = 1;
                        } else if (number < 0x10000000000000) {
                            this.words = [
                                number & 0x3ffffff,
                                (number / 0x4000000) & 0x3ffffff,
                            ];
                            this.length = 2;
                        } else {
                            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
                            this.words = [
                                number & 0x3ffffff,
                                (number / 0x4000000) & 0x3ffffff,
                                1,
                            ];
                            this.length = 3;
                        }

                        if (endian !== "le") return;

                        // Reverse the bytes
                        this._initArray(this.toArray(), base, endian);
                    };

                    BN.prototype._initArray = function _initArray(
                        number,
                        base,
                        endian
                    ) {
                        // Perhaps a Uint8Array
                        assert(typeof number.length === "number");
                        if (number.length <= 0) {
                            this.words = [0];
                            this.length = 1;
                            return this;
                        }

                        this.length = Math.ceil(number.length / 3);
                        this.words = new Array(this.length);
                        for (var i = 0; i < this.length; i++) {
                            this.words[i] = 0;
                        }

                        var j, w;
                        var off = 0;
                        if (endian === "be") {
                            for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                                w =
                                    number[i] |
                                    (number[i - 1] << 8) |
                                    (number[i - 2] << 16);
                                this.words[j] |= (w << off) & 0x3ffffff;
                                this.words[j + 1] =
                                    (w >>> (26 - off)) & 0x3ffffff;
                                off += 24;
                                if (off >= 26) {
                                    off -= 26;
                                    j++;
                                }
                            }
                        } else if (endian === "le") {
                            for (i = 0, j = 0; i < number.length; i += 3) {
                                w =
                                    number[i] |
                                    (number[i + 1] << 8) |
                                    (number[i + 2] << 16);
                                this.words[j] |= (w << off) & 0x3ffffff;
                                this.words[j + 1] =
                                    (w >>> (26 - off)) & 0x3ffffff;
                                off += 24;
                                if (off >= 26) {
                                    off -= 26;
                                    j++;
                                }
                            }
                        }
                        return this._strip();
                    };

                    function parseHex(str, start, end) {
                        var r = 0;
                        var len = Math.min(str.length, end);
                        var z = 0;
                        for (var i = start; i < len; i++) {
                            var c = str.charCodeAt(i) - 48;

                            r <<= 4;

                            var b;

                            // 'a' - 'f'
                            if (c >= 49 && c <= 54) {
                                b = c - 49 + 0xa;

                                // 'A' - 'F'
                            } else if (c >= 17 && c <= 22) {
                                b = c - 17 + 0xa;

                                // '0' - '9'
                            } else {
                                b = c;
                            }

                            r |= b;
                            z |= b;
                        }

                        assert(!(z & 0xf0), "Invalid character in " + str);
                        return r;
                    }

                    BN.prototype._parseHex = function _parseHex(number, start) {
                        // Create possibly bigger array to ensure that it fits the number
                        this.length = Math.ceil((number.length - start) / 6);
                        this.words = new Array(this.length);
                        for (var i = 0; i < this.length; i++) {
                            this.words[i] = 0;
                        }

                        var j, w;
                        // Scan 24-bit chunks and add them to the number
                        var off = 0;
                        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
                            w = parseHex(number, i, i + 6);
                            this.words[j] |= (w << off) & 0x3ffffff;
                            // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
                            this.words[j + 1] |= (w >>> (26 - off)) & 0x3fffff;
                            off += 24;
                            if (off >= 26) {
                                off -= 26;
                                j++;
                            }
                        }
                        if (i + 6 !== start) {
                            w = parseHex(number, start, i + 6);
                            this.words[j] |= (w << off) & 0x3ffffff;
                            this.words[j + 1] |= (w >>> (26 - off)) & 0x3fffff;
                        }
                        this._strip();
                    };

                    function parseBase(str, start, end, mul) {
                        var r = 0;
                        var b = 0;
                        var len = Math.min(str.length, end);
                        for (var i = start; i < len; i++) {
                            var c = str.charCodeAt(i) - 48;

                            r *= mul;

                            // 'a'
                            if (c >= 49) {
                                b = c - 49 + 0xa;

                                // 'A'
                            } else if (c >= 17) {
                                b = c - 17 + 0xa;

                                // '0' - '9'
                            } else {
                                b = c;
                            }
                            assert(c >= 0 && b < mul, "Invalid character");
                            r += b;
                        }
                        return r;
                    }

                    BN.prototype._parseBase = function _parseBase(
                        number,
                        base,
                        start
                    ) {
                        // Initialize as zero
                        this.words = [0];
                        this.length = 1;

                        // Find length of limb in base
                        for (
                            var limbLen = 0, limbPow = 1;
                            limbPow <= 0x3ffffff;
                            limbPow *= base
                        ) {
                            limbLen++;
                        }
                        limbLen--;
                        limbPow = (limbPow / base) | 0;

                        var total = number.length - start;
                        var mod = total % limbLen;
                        var end = Math.min(total, total - mod) + start;

                        var word = 0;
                        for (var i = start; i < end; i += limbLen) {
                            word = parseBase(number, i, i + limbLen, base);

                            this.imuln(limbPow);
                            if (this.words[0] + word < 0x4000000) {
                                this.words[0] += word;
                            } else {
                                this._iaddn(word);
                            }
                        }

                        if (mod !== 0) {
                            var pow = 1;
                            word = parseBase(number, i, number.length, base);

                            for (i = 0; i < mod; i++) {
                                pow *= base;
                            }

                            this.imuln(pow);
                            if (this.words[0] + word < 0x4000000) {
                                this.words[0] += word;
                            } else {
                                this._iaddn(word);
                            }
                        }
                    };

                    BN.prototype.copy = function copy(dest) {
                        dest.words = new Array(this.length);
                        for (var i = 0; i < this.length; i++) {
                            dest.words[i] = this.words[i];
                        }
                        dest.length = this.length;
                        dest.negative = this.negative;
                        dest.red = this.red;
                    };

                    BN.prototype._move = function _move(dest) {
                        dest.words = this.words;
                        dest.length = this.length;
                        dest.negative = this.negative;
                        dest.red = this.red;
                    };

                    BN.prototype.clone = function clone() {
                        var r = new BN(null);
                        this.copy(r);
                        return r;
                    };

                    BN.prototype._expand = function _expand(size) {
                        while (this.length < size) {
                            this.words[this.length++] = 0;
                        }
                        return this;
                    };

                    // Remove leading `0` from `this`
                    BN.prototype._strip = function strip() {
                        while (
                            this.length > 1 &&
                            this.words[this.length - 1] === 0
                        ) {
                            this.length--;
                        }
                        return this._normSign();
                    };

                    BN.prototype._normSign = function _normSign() {
                        // -0 = 0
                        if (this.length === 1 && this.words[0] === 0) {
                            this.negative = 0;
                        }
                        return this;
                    };

                    // Check Symbol.for because not everywhere where Symbol defined
                    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
                    if (
                        typeof Symbol !== "undefined" &&
                        typeof Symbol.for === "function"
                    ) {
                        BN.prototype[Symbol.for("nodejs.util.inspect.custom")] =
                            inspect;
                    } else {
                        BN.prototype.inspect = inspect;
                    }

                    function inspect() {
                        return (
                            (this.red ? "<BN-R: " : "<BN: ") +
                            this.toString(16) +
                            ">"
                        );
                    }

                    /*

        var zeros = [];
        var groupSizes = [];
        var groupBases = [];

        var s = '';
        var i = -1;
        while (++i < BN.wordSize) {
          zeros[i] = s;
          s += '0';
        }
        groupSizes[0] = 0;
        groupSizes[1] = 0;
        groupBases[0] = 0;
        groupBases[1] = 0;
        var base = 2 - 1;
        while (++base < 36 + 1) {
          var groupSize = 0;
          var groupBase = 1;
          while (groupBase < (1 << BN.wordSize) / base) {
            groupBase *= base;
            groupSize += 1;
          }
          groupSizes[base] = groupSize;
          groupBases[base] = groupBase;
        }

        */

                    var zeros = [
                        "",
                        "0",
                        "00",
                        "000",
                        "0000",
                        "00000",
                        "000000",
                        "0000000",
                        "00000000",
                        "000000000",
                        "0000000000",
                        "00000000000",
                        "000000000000",
                        "0000000000000",
                        "00000000000000",
                        "000000000000000",
                        "0000000000000000",
                        "00000000000000000",
                        "000000000000000000",
                        "0000000000000000000",
                        "00000000000000000000",
                        "000000000000000000000",
                        "0000000000000000000000",
                        "00000000000000000000000",
                        "000000000000000000000000",
                        "0000000000000000000000000",
                    ];

                    var groupSizes = [
                        0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6,
                        6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                        5,
                    ];

                    var groupBases = [
                        0, 0, 33554432, 43046721, 16777216, 48828125, 60466176,
                        40353607, 16777216, 43046721, 10000000, 19487171,
                        35831808, 62748517, 7529536, 11390625, 16777216,
                        24137569, 34012224, 47045881, 64000000, 4084101,
                        5153632, 6436343, 7962624, 9765625, 11881376, 14348907,
                        17210368, 20511149, 24300000, 28629151, 33554432,
                        39135393, 45435424, 52521875, 60466176,
                    ];

                    BN.prototype.toString = function toString(base, padding) {
                        base = base || 10;
                        padding = padding | 0 || 1;

                        var out;
                        if (base === 16 || base === "hex") {
                            out = "";
                            var off = 0;
                            var carry = 0;
                            for (var i = 0; i < this.length; i++) {
                                var w = this.words[i];
                                var word = (
                                    ((w << off) | carry) &
                                    0xffffff
                                ).toString(16);
                                carry = (w >>> (24 - off)) & 0xffffff;
                                if (carry !== 0 || i !== this.length - 1) {
                                    out = zeros[6 - word.length] + word + out;
                                } else {
                                    out = word + out;
                                }
                                off += 2;
                                if (off >= 26) {
                                    off -= 26;
                                    i--;
                                }
                            }
                            if (carry !== 0) {
                                out = carry.toString(16) + out;
                            }
                            while (out.length % padding !== 0) {
                                out = "0" + out;
                            }
                            if (this.negative !== 0) {
                                out = "-" + out;
                            }
                            return out;
                        }

                        if (base === (base | 0) && base >= 2 && base <= 36) {
                            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
                            var groupSize = groupSizes[base];
                            // var groupBase = Math.pow(base, groupSize);
                            var groupBase = groupBases[base];
                            out = "";
                            var c = this.clone();
                            c.negative = 0;
                            while (!c.isZero()) {
                                var r = c.modrn(groupBase).toString(base);
                                c = c.idivn(groupBase);

                                if (!c.isZero()) {
                                    out = zeros[groupSize - r.length] + r + out;
                                } else {
                                    out = r + out;
                                }
                            }
                            if (this.isZero()) {
                                out = "0" + out;
                            }
                            while (out.length % padding !== 0) {
                                out = "0" + out;
                            }
                            if (this.negative !== 0) {
                                out = "-" + out;
                            }
                            return out;
                        }

                        assert(false, "Base should be between 2 and 36");
                    };

                    BN.prototype.toNumber = function toNumber() {
                        var ret = this.words[0];
                        if (this.length === 2) {
                            ret += this.words[1] * 0x4000000;
                        } else if (
                            this.length === 3 &&
                            this.words[2] === 0x01
                        ) {
                            // NOTE: at this stage it is known that the top bit is set
                            ret += 0x10000000000000 + this.words[1] * 0x4000000;
                        } else if (this.length > 2) {
                            assert(
                                false,
                                "Number can only safely store up to 53 bits"
                            );
                        }
                        return this.negative !== 0 ? -ret : ret;
                    };

                    BN.prototype.toJSON = function toJSON() {
                        return this.toString(16, 2);
                    };

                    if (Buffer) {
                        BN.prototype.toBuffer = function toBuffer(
                            endian,
                            length
                        ) {
                            return this.toArrayLike(Buffer, endian, length);
                        };
                    }

                    BN.prototype.toArray = function toArray(endian, length) {
                        return this.toArrayLike(Array, endian, length);
                    };

                    var allocate = function allocate(ArrayType, size) {
                        if (ArrayType.allocUnsafe) {
                            return ArrayType.allocUnsafe(size);
                        }
                        return new ArrayType(size);
                    };

                    BN.prototype.toArrayLike = function toArrayLike(
                        ArrayType,
                        endian,
                        length
                    ) {
                        this._strip();

                        var byteLength = this.byteLength();
                        var reqLength = length || Math.max(1, byteLength);
                        assert(
                            byteLength <= reqLength,
                            "byte array longer than desired length"
                        );
                        assert(reqLength > 0, "Requested array length <= 0");

                        var res = allocate(ArrayType, reqLength);
                        var postfix = endian === "le" ? "LE" : "BE";
                        this["_toArrayLike" + postfix](res, byteLength);
                        return res;
                    };

                    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(
                        res,
                        byteLength
                    ) {
                        var position = 0;
                        var carry = 0;

                        for (var i = 0, shift = 0; i < this.length; i++) {
                            var word = (this.words[i] << shift) | carry;

                            res[position++] = word & 0xff;
                            if (position < res.length) {
                                res[position++] = (word >> 8) & 0xff;
                            }
                            if (position < res.length) {
                                res[position++] = (word >> 16) & 0xff;
                            }

                            if (shift === 6) {
                                if (position < res.length) {
                                    res[position++] = (word >> 24) & 0xff;
                                }
                                carry = 0;
                                shift = 0;
                            } else {
                                carry = word >>> 24;
                                shift += 2;
                            }
                        }

                        if (position < res.length) {
                            res[position++] = carry;

                            while (position < res.length) {
                                res[position++] = 0;
                            }
                        }
                    };

                    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(
                        res,
                        byteLength
                    ) {
                        var position = res.length - 1;
                        var carry = 0;

                        for (var i = 0, shift = 0; i < this.length; i++) {
                            var word = (this.words[i] << shift) | carry;

                            res[position--] = word & 0xff;
                            if (position >= 0) {
                                res[position--] = (word >> 8) & 0xff;
                            }
                            if (position >= 0) {
                                res[position--] = (word >> 16) & 0xff;
                            }

                            if (shift === 6) {
                                if (position >= 0) {
                                    res[position--] = (word >> 24) & 0xff;
                                }
                                carry = 0;
                                shift = 0;
                            } else {
                                carry = word >>> 24;
                                shift += 2;
                            }
                        }

                        if (position >= 0) {
                            res[position--] = carry;

                            while (position >= 0) {
                                res[position--] = 0;
                            }
                        }
                    };

                    if (Math.clz32) {
                        BN.prototype._countBits = function _countBits(w) {
                            return 32 - Math.clz32(w);
                        };
                    } else {
                        BN.prototype._countBits = function _countBits(w) {
                            var t = w;
                            var r = 0;
                            if (t >= 0x1000) {
                                r += 13;
                                t >>>= 13;
                            }
                            if (t >= 0x40) {
                                r += 7;
                                t >>>= 7;
                            }
                            if (t >= 0x8) {
                                r += 4;
                                t >>>= 4;
                            }
                            if (t >= 0x02) {
                                r += 2;
                                t >>>= 2;
                            }
                            return r + t;
                        };
                    }

                    BN.prototype._zeroBits = function _zeroBits(w) {
                        // Short-cut
                        if (w === 0) return 26;

                        var t = w;
                        var r = 0;
                        if ((t & 0x1fff) === 0) {
                            r += 13;
                            t >>>= 13;
                        }
                        if ((t & 0x7f) === 0) {
                            r += 7;
                            t >>>= 7;
                        }
                        if ((t & 0xf) === 0) {
                            r += 4;
                            t >>>= 4;
                        }
                        if ((t & 0x3) === 0) {
                            r += 2;
                            t >>>= 2;
                        }
                        if ((t & 0x1) === 0) {
                            r++;
                        }
                        return r;
                    };

                    // Return number of used bits in a BN
                    BN.prototype.bitLength = function bitLength() {
                        var w = this.words[this.length - 1];
                        var hi = this._countBits(w);
                        return (this.length - 1) * 26 + hi;
                    };

                    function toBitArray(num) {
                        var w = new Array(num.bitLength());

                        for (var bit = 0; bit < w.length; bit++) {
                            var off = (bit / 26) | 0;
                            var wbit = bit % 26;

                            w[bit] = (num.words[off] >>> wbit) & 0x01;
                        }

                        return w;
                    }

                    // Number of trailing zero bits
                    BN.prototype.zeroBits = function zeroBits() {
                        if (this.isZero()) return 0;

                        var r = 0;
                        for (var i = 0; i < this.length; i++) {
                            var b = this._zeroBits(this.words[i]);
                            r += b;
                            if (b !== 26) break;
                        }
                        return r;
                    };

                    BN.prototype.byteLength = function byteLength() {
                        return Math.ceil(this.bitLength() / 8);
                    };

                    BN.prototype.toTwos = function toTwos(width) {
                        if (this.negative !== 0) {
                            return this.abs().inotn(width).iaddn(1);
                        }
                        return this.clone();
                    };

                    BN.prototype.fromTwos = function fromTwos(width) {
                        if (this.testn(width - 1)) {
                            return this.notn(width).iaddn(1).ineg();
                        }
                        return this.clone();
                    };

                    BN.prototype.isNeg = function isNeg() {
                        return this.negative !== 0;
                    };

                    // Return negative clone of `this`
                    BN.prototype.neg = function neg() {
                        return this.clone().ineg();
                    };

                    BN.prototype.ineg = function ineg() {
                        if (!this.isZero()) {
                            this.negative ^= 1;
                        }

                        return this;
                    };

                    // Or `num` with `this` in-place
                    BN.prototype.iuor = function iuor(num) {
                        while (this.length < num.length) {
                            this.words[this.length++] = 0;
                        }

                        for (var i = 0; i < num.length; i++) {
                            this.words[i] = this.words[i] | num.words[i];
                        }

                        return this._strip();
                    };

                    BN.prototype.ior = function ior(num) {
                        assert((this.negative | num.negative) === 0);
                        return this.iuor(num);
                    };

                    // Or `num` with `this`
                    BN.prototype.or = function or(num) {
                        if (this.length > num.length)
                            return this.clone().ior(num);
                        return num.clone().ior(this);
                    };

                    BN.prototype.uor = function uor(num) {
                        if (this.length > num.length)
                            return this.clone().iuor(num);
                        return num.clone().iuor(this);
                    };

                    // And `num` with `this` in-place
                    BN.prototype.iuand = function iuand(num) {
                        // b = min-length(num, this)
                        var b;
                        if (this.length > num.length) {
                            b = num;
                        } else {
                            b = this;
                        }

                        for (var i = 0; i < b.length; i++) {
                            this.words[i] = this.words[i] & num.words[i];
                        }

                        this.length = b.length;

                        return this._strip();
                    };

                    BN.prototype.iand = function iand(num) {
                        assert((this.negative | num.negative) === 0);
                        return this.iuand(num);
                    };

                    // And `num` with `this`
                    BN.prototype.and = function and(num) {
                        if (this.length > num.length)
                            return this.clone().iand(num);
                        return num.clone().iand(this);
                    };

                    BN.prototype.uand = function uand(num) {
                        if (this.length > num.length)
                            return this.clone().iuand(num);
                        return num.clone().iuand(this);
                    };

                    // Xor `num` with `this` in-place
                    BN.prototype.iuxor = function iuxor(num) {
                        // a.length > b.length
                        var a;
                        var b;
                        if (this.length > num.length) {
                            a = this;
                            b = num;
                        } else {
                            a = num;
                            b = this;
                        }

                        for (var i = 0; i < b.length; i++) {
                            this.words[i] = a.words[i] ^ b.words[i];
                        }

                        if (this !== a) {
                            for (; i < a.length; i++) {
                                this.words[i] = a.words[i];
                            }
                        }

                        this.length = a.length;

                        return this._strip();
                    };

                    BN.prototype.ixor = function ixor(num) {
                        assert((this.negative | num.negative) === 0);
                        return this.iuxor(num);
                    };

                    // Xor `num` with `this`
                    BN.prototype.xor = function xor(num) {
                        if (this.length > num.length)
                            return this.clone().ixor(num);
                        return num.clone().ixor(this);
                    };

                    BN.prototype.uxor = function uxor(num) {
                        if (this.length > num.length)
                            return this.clone().iuxor(num);
                        return num.clone().iuxor(this);
                    };

                    // Not ``this`` with ``width`` bitwidth
                    BN.prototype.inotn = function inotn(width) {
                        assert(typeof width === "number" && width >= 0);

                        var bytesNeeded = Math.ceil(width / 26) | 0;
                        var bitsLeft = width % 26;

                        // Extend the buffer with leading zeroes
                        this._expand(bytesNeeded);

                        if (bitsLeft > 0) {
                            bytesNeeded--;
                        }

                        // Handle complete words
                        for (var i = 0; i < bytesNeeded; i++) {
                            this.words[i] = ~this.words[i] & 0x3ffffff;
                        }

                        // Handle the residue
                        if (bitsLeft > 0) {
                            this.words[i] =
                                ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
                        }

                        // And remove leading zeroes
                        return this._strip();
                    };

                    BN.prototype.notn = function notn(width) {
                        return this.clone().inotn(width);
                    };

                    // Set `bit` of `this`
                    BN.prototype.setn = function setn(bit, val) {
                        assert(typeof bit === "number" && bit >= 0);

                        var off = (bit / 26) | 0;
                        var wbit = bit % 26;

                        this._expand(off + 1);

                        if (val) {
                            this.words[off] = this.words[off] | (1 << wbit);
                        } else {
                            this.words[off] = this.words[off] & ~(1 << wbit);
                        }

                        return this._strip();
                    };

                    // Add `num` to `this` in-place
                    BN.prototype.iadd = function iadd(num) {
                        var r;

                        // negative + positive
                        if (this.negative !== 0 && num.negative === 0) {
                            this.negative = 0;
                            r = this.isub(num);
                            this.negative ^= 1;
                            return this._normSign();

                            // positive + negative
                        } else if (this.negative === 0 && num.negative !== 0) {
                            num.negative = 0;
                            r = this.isub(num);
                            num.negative = 1;
                            return r._normSign();
                        }

                        // a.length > b.length
                        var a, b;
                        if (this.length > num.length) {
                            a = this;
                            b = num;
                        } else {
                            a = num;
                            b = this;
                        }

                        var carry = 0;
                        for (var i = 0; i < b.length; i++) {
                            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                            this.words[i] = r & 0x3ffffff;
                            carry = r >>> 26;
                        }
                        for (; carry !== 0 && i < a.length; i++) {
                            r = (a.words[i] | 0) + carry;
                            this.words[i] = r & 0x3ffffff;
                            carry = r >>> 26;
                        }

                        this.length = a.length;
                        if (carry !== 0) {
                            this.words[this.length] = carry;
                            this.length++;
                            // Copy the rest of the words
                        } else if (a !== this) {
                            for (; i < a.length; i++) {
                                this.words[i] = a.words[i];
                            }
                        }

                        return this;
                    };

                    // Add `num` to `this`
                    BN.prototype.add = function add(num) {
                        var res;
                        if (num.negative !== 0 && this.negative === 0) {
                            num.negative = 0;
                            res = this.sub(num);
                            num.negative ^= 1;
                            return res;
                        } else if (num.negative === 0 && this.negative !== 0) {
                            this.negative = 0;
                            res = num.sub(this);
                            this.negative = 1;
                            return res;
                        }

                        if (this.length > num.length)
                            return this.clone().iadd(num);

                        return num.clone().iadd(this);
                    };

                    // Subtract `num` from `this` in-place
                    BN.prototype.isub = function isub(num) {
                        // this - (-num) = this + num
                        if (num.negative !== 0) {
                            num.negative = 0;
                            var r = this.iadd(num);
                            num.negative = 1;
                            return r._normSign();

                            // -this - num = -(this + num)
                        } else if (this.negative !== 0) {
                            this.negative = 0;
                            this.iadd(num);
                            this.negative = 1;
                            return this._normSign();
                        }

                        // At this point both numbers are positive
                        var cmp = this.cmp(num);

                        // Optimization - zeroify
                        if (cmp === 0) {
                            this.negative = 0;
                            this.length = 1;
                            this.words[0] = 0;
                            return this;
                        }

                        // a > b
                        var a, b;
                        if (cmp > 0) {
                            a = this;
                            b = num;
                        } else {
                            a = num;
                            b = this;
                        }

                        var carry = 0;
                        for (var i = 0; i < b.length; i++) {
                            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                            carry = r >> 26;
                            this.words[i] = r & 0x3ffffff;
                        }
                        for (; carry !== 0 && i < a.length; i++) {
                            r = (a.words[i] | 0) + carry;
                            carry = r >> 26;
                            this.words[i] = r & 0x3ffffff;
                        }

                        // Copy rest of the words
                        if (carry === 0 && i < a.length && a !== this) {
                            for (; i < a.length; i++) {
                                this.words[i] = a.words[i];
                            }
                        }

                        this.length = Math.max(this.length, i);

                        if (a !== this) {
                            this.negative = 1;
                        }

                        return this._strip();
                    };

                    // Subtract `num` from `this`
                    BN.prototype.sub = function sub(num) {
                        return this.clone().isub(num);
                    };

                    function smallMulTo(self, num, out) {
                        out.negative = num.negative ^ self.negative;
                        var len = (self.length + num.length) | 0;
                        out.length = len;
                        len = (len - 1) | 0;

                        // Peel one iteration (compiler can't do it, because of code complexity)
                        var a = self.words[0] | 0;
                        var b = num.words[0] | 0;
                        var r = a * b;

                        var lo = r & 0x3ffffff;
                        var carry = (r / 0x4000000) | 0;
                        out.words[0] = lo;

                        for (var k = 1; k < len; k++) {
                            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                            // note that ncarry could be >= 0x3ffffff
                            var ncarry = carry >>> 26;
                            var rword = carry & 0x3ffffff;
                            var maxJ = Math.min(k, num.length - 1);
                            for (
                                var j = Math.max(0, k - self.length + 1);
                                j <= maxJ;
                                j++
                            ) {
                                var i = (k - j) | 0;
                                a = self.words[i] | 0;
                                b = num.words[j] | 0;
                                r = a * b + rword;
                                ncarry += (r / 0x4000000) | 0;
                                rword = r & 0x3ffffff;
                            }
                            out.words[k] = rword | 0;
                            carry = ncarry | 0;
                        }
                        if (carry !== 0) {
                            out.words[k] = carry | 0;
                        } else {
                            out.length--;
                        }

                        return out._strip();
                    }

                    // TODO(indutny): it may be reasonable to omit it for users who don't need
                    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
                    // multiplication (like elliptic secp256k1).
                    var comb10MulTo = function comb10MulTo(self, num, out) {
                        var a = self.words;
                        var b = num.words;
                        var o = out.words;
                        var c = 0;
                        var lo;
                        var mid;
                        var hi;
                        var a0 = a[0] | 0;
                        var al0 = a0 & 0x1fff;
                        var ah0 = a0 >>> 13;
                        var a1 = a[1] | 0;
                        var al1 = a1 & 0x1fff;
                        var ah1 = a1 >>> 13;
                        var a2 = a[2] | 0;
                        var al2 = a2 & 0x1fff;
                        var ah2 = a2 >>> 13;
                        var a3 = a[3] | 0;
                        var al3 = a3 & 0x1fff;
                        var ah3 = a3 >>> 13;
                        var a4 = a[4] | 0;
                        var al4 = a4 & 0x1fff;
                        var ah4 = a4 >>> 13;
                        var a5 = a[5] | 0;
                        var al5 = a5 & 0x1fff;
                        var ah5 = a5 >>> 13;
                        var a6 = a[6] | 0;
                        var al6 = a6 & 0x1fff;
                        var ah6 = a6 >>> 13;
                        var a7 = a[7] | 0;
                        var al7 = a7 & 0x1fff;
                        var ah7 = a7 >>> 13;
                        var a8 = a[8] | 0;
                        var al8 = a8 & 0x1fff;
                        var ah8 = a8 >>> 13;
                        var a9 = a[9] | 0;
                        var al9 = a9 & 0x1fff;
                        var ah9 = a9 >>> 13;
                        var b0 = b[0] | 0;
                        var bl0 = b0 & 0x1fff;
                        var bh0 = b0 >>> 13;
                        var b1 = b[1] | 0;
                        var bl1 = b1 & 0x1fff;
                        var bh1 = b1 >>> 13;
                        var b2 = b[2] | 0;
                        var bl2 = b2 & 0x1fff;
                        var bh2 = b2 >>> 13;
                        var b3 = b[3] | 0;
                        var bl3 = b3 & 0x1fff;
                        var bh3 = b3 >>> 13;
                        var b4 = b[4] | 0;
                        var bl4 = b4 & 0x1fff;
                        var bh4 = b4 >>> 13;
                        var b5 = b[5] | 0;
                        var bl5 = b5 & 0x1fff;
                        var bh5 = b5 >>> 13;
                        var b6 = b[6] | 0;
                        var bl6 = b6 & 0x1fff;
                        var bh6 = b6 >>> 13;
                        var b7 = b[7] | 0;
                        var bl7 = b7 & 0x1fff;
                        var bh7 = b7 >>> 13;
                        var b8 = b[8] | 0;
                        var bl8 = b8 & 0x1fff;
                        var bh8 = b8 >>> 13;
                        var b9 = b[9] | 0;
                        var bl9 = b9 & 0x1fff;
                        var bh9 = b9 >>> 13;

                        out.negative = self.negative ^ num.negative;
                        out.length = 19;
                        /* k = 0 */
                        lo = Math.imul(al0, bl0);
                        mid = Math.imul(al0, bh0);
                        mid = (mid + Math.imul(ah0, bl0)) | 0;
                        hi = Math.imul(ah0, bh0);
                        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
                        w0 &= 0x3ffffff;
                        /* k = 1 */
                        lo = Math.imul(al1, bl0);
                        mid = Math.imul(al1, bh0);
                        mid = (mid + Math.imul(ah1, bl0)) | 0;
                        hi = Math.imul(ah1, bh0);
                        lo = (lo + Math.imul(al0, bl1)) | 0;
                        mid = (mid + Math.imul(al0, bh1)) | 0;
                        mid = (mid + Math.imul(ah0, bl1)) | 0;
                        hi = (hi + Math.imul(ah0, bh1)) | 0;
                        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
                        w1 &= 0x3ffffff;
                        /* k = 2 */
                        lo = Math.imul(al2, bl0);
                        mid = Math.imul(al2, bh0);
                        mid = (mid + Math.imul(ah2, bl0)) | 0;
                        hi = Math.imul(ah2, bh0);
                        lo = (lo + Math.imul(al1, bl1)) | 0;
                        mid = (mid + Math.imul(al1, bh1)) | 0;
                        mid = (mid + Math.imul(ah1, bl1)) | 0;
                        hi = (hi + Math.imul(ah1, bh1)) | 0;
                        lo = (lo + Math.imul(al0, bl2)) | 0;
                        mid = (mid + Math.imul(al0, bh2)) | 0;
                        mid = (mid + Math.imul(ah0, bl2)) | 0;
                        hi = (hi + Math.imul(ah0, bh2)) | 0;
                        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
                        w2 &= 0x3ffffff;
                        /* k = 3 */
                        lo = Math.imul(al3, bl0);
                        mid = Math.imul(al3, bh0);
                        mid = (mid + Math.imul(ah3, bl0)) | 0;
                        hi = Math.imul(ah3, bh0);
                        lo = (lo + Math.imul(al2, bl1)) | 0;
                        mid = (mid + Math.imul(al2, bh1)) | 0;
                        mid = (mid + Math.imul(ah2, bl1)) | 0;
                        hi = (hi + Math.imul(ah2, bh1)) | 0;
                        lo = (lo + Math.imul(al1, bl2)) | 0;
                        mid = (mid + Math.imul(al1, bh2)) | 0;
                        mid = (mid + Math.imul(ah1, bl2)) | 0;
                        hi = (hi + Math.imul(ah1, bh2)) | 0;
                        lo = (lo + Math.imul(al0, bl3)) | 0;
                        mid = (mid + Math.imul(al0, bh3)) | 0;
                        mid = (mid + Math.imul(ah0, bl3)) | 0;
                        hi = (hi + Math.imul(ah0, bh3)) | 0;
                        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
                        w3 &= 0x3ffffff;
                        /* k = 4 */
                        lo = Math.imul(al4, bl0);
                        mid = Math.imul(al4, bh0);
                        mid = (mid + Math.imul(ah4, bl0)) | 0;
                        hi = Math.imul(ah4, bh0);
                        lo = (lo + Math.imul(al3, bl1)) | 0;
                        mid = (mid + Math.imul(al3, bh1)) | 0;
                        mid = (mid + Math.imul(ah3, bl1)) | 0;
                        hi = (hi + Math.imul(ah3, bh1)) | 0;
                        lo = (lo + Math.imul(al2, bl2)) | 0;
                        mid = (mid + Math.imul(al2, bh2)) | 0;
                        mid = (mid + Math.imul(ah2, bl2)) | 0;
                        hi = (hi + Math.imul(ah2, bh2)) | 0;
                        lo = (lo + Math.imul(al1, bl3)) | 0;
                        mid = (mid + Math.imul(al1, bh3)) | 0;
                        mid = (mid + Math.imul(ah1, bl3)) | 0;
                        hi = (hi + Math.imul(ah1, bh3)) | 0;
                        lo = (lo + Math.imul(al0, bl4)) | 0;
                        mid = (mid + Math.imul(al0, bh4)) | 0;
                        mid = (mid + Math.imul(ah0, bl4)) | 0;
                        hi = (hi + Math.imul(ah0, bh4)) | 0;
                        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
                        w4 &= 0x3ffffff;
                        /* k = 5 */
                        lo = Math.imul(al5, bl0);
                        mid = Math.imul(al5, bh0);
                        mid = (mid + Math.imul(ah5, bl0)) | 0;
                        hi = Math.imul(ah5, bh0);
                        lo = (lo + Math.imul(al4, bl1)) | 0;
                        mid = (mid + Math.imul(al4, bh1)) | 0;
                        mid = (mid + Math.imul(ah4, bl1)) | 0;
                        hi = (hi + Math.imul(ah4, bh1)) | 0;
                        lo = (lo + Math.imul(al3, bl2)) | 0;
                        mid = (mid + Math.imul(al3, bh2)) | 0;
                        mid = (mid + Math.imul(ah3, bl2)) | 0;
                        hi = (hi + Math.imul(ah3, bh2)) | 0;
                        lo = (lo + Math.imul(al2, bl3)) | 0;
                        mid = (mid + Math.imul(al2, bh3)) | 0;
                        mid = (mid + Math.imul(ah2, bl3)) | 0;
                        hi = (hi + Math.imul(ah2, bh3)) | 0;
                        lo = (lo + Math.imul(al1, bl4)) | 0;
                        mid = (mid + Math.imul(al1, bh4)) | 0;
                        mid = (mid + Math.imul(ah1, bl4)) | 0;
                        hi = (hi + Math.imul(ah1, bh4)) | 0;
                        lo = (lo + Math.imul(al0, bl5)) | 0;
                        mid = (mid + Math.imul(al0, bh5)) | 0;
                        mid = (mid + Math.imul(ah0, bl5)) | 0;
                        hi = (hi + Math.imul(ah0, bh5)) | 0;
                        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
                        w5 &= 0x3ffffff;
                        /* k = 6 */
                        lo = Math.imul(al6, bl0);
                        mid = Math.imul(al6, bh0);
                        mid = (mid + Math.imul(ah6, bl0)) | 0;
                        hi = Math.imul(ah6, bh0);
                        lo = (lo + Math.imul(al5, bl1)) | 0;
                        mid = (mid + Math.imul(al5, bh1)) | 0;
                        mid = (mid + Math.imul(ah5, bl1)) | 0;
                        hi = (hi + Math.imul(ah5, bh1)) | 0;
                        lo = (lo + Math.imul(al4, bl2)) | 0;
                        mid = (mid + Math.imul(al4, bh2)) | 0;
                        mid = (mid + Math.imul(ah4, bl2)) | 0;
                        hi = (hi + Math.imul(ah4, bh2)) | 0;
                        lo = (lo + Math.imul(al3, bl3)) | 0;
                        mid = (mid + Math.imul(al3, bh3)) | 0;
                        mid = (mid + Math.imul(ah3, bl3)) | 0;
                        hi = (hi + Math.imul(ah3, bh3)) | 0;
                        lo = (lo + Math.imul(al2, bl4)) | 0;
                        mid = (mid + Math.imul(al2, bh4)) | 0;
                        mid = (mid + Math.imul(ah2, bl4)) | 0;
                        hi = (hi + Math.imul(ah2, bh4)) | 0;
                        lo = (lo + Math.imul(al1, bl5)) | 0;
                        mid = (mid + Math.imul(al1, bh5)) | 0;
                        mid = (mid + Math.imul(ah1, bl5)) | 0;
                        hi = (hi + Math.imul(ah1, bh5)) | 0;
                        lo = (lo + Math.imul(al0, bl6)) | 0;
                        mid = (mid + Math.imul(al0, bh6)) | 0;
                        mid = (mid + Math.imul(ah0, bl6)) | 0;
                        hi = (hi + Math.imul(ah0, bh6)) | 0;
                        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
                        w6 &= 0x3ffffff;
                        /* k = 7 */
                        lo = Math.imul(al7, bl0);
                        mid = Math.imul(al7, bh0);
                        mid = (mid + Math.imul(ah7, bl0)) | 0;
                        hi = Math.imul(ah7, bh0);
                        lo = (lo + Math.imul(al6, bl1)) | 0;
                        mid = (mid + Math.imul(al6, bh1)) | 0;
                        mid = (mid + Math.imul(ah6, bl1)) | 0;
                        hi = (hi + Math.imul(ah6, bh1)) | 0;
                        lo = (lo + Math.imul(al5, bl2)) | 0;
                        mid = (mid + Math.imul(al5, bh2)) | 0;
                        mid = (mid + Math.imul(ah5, bl2)) | 0;
                        hi = (hi + Math.imul(ah5, bh2)) | 0;
                        lo = (lo + Math.imul(al4, bl3)) | 0;
                        mid = (mid + Math.imul(al4, bh3)) | 0;
                        mid = (mid + Math.imul(ah4, bl3)) | 0;
                        hi = (hi + Math.imul(ah4, bh3)) | 0;
                        lo = (lo + Math.imul(al3, bl4)) | 0;
                        mid = (mid + Math.imul(al3, bh4)) | 0;
                        mid = (mid + Math.imul(ah3, bl4)) | 0;
                        hi = (hi + Math.imul(ah3, bh4)) | 0;
                        lo = (lo + Math.imul(al2, bl5)) | 0;
                        mid = (mid + Math.imul(al2, bh5)) | 0;
                        mid = (mid + Math.imul(ah2, bl5)) | 0;
                        hi = (hi + Math.imul(ah2, bh5)) | 0;
                        lo = (lo + Math.imul(al1, bl6)) | 0;
                        mid = (mid + Math.imul(al1, bh6)) | 0;
                        mid = (mid + Math.imul(ah1, bl6)) | 0;
                        hi = (hi + Math.imul(ah1, bh6)) | 0;
                        lo = (lo + Math.imul(al0, bl7)) | 0;
                        mid = (mid + Math.imul(al0, bh7)) | 0;
                        mid = (mid + Math.imul(ah0, bl7)) | 0;
                        hi = (hi + Math.imul(ah0, bh7)) | 0;
                        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
                        w7 &= 0x3ffffff;
                        /* k = 8 */
                        lo = Math.imul(al8, bl0);
                        mid = Math.imul(al8, bh0);
                        mid = (mid + Math.imul(ah8, bl0)) | 0;
                        hi = Math.imul(ah8, bh0);
                        lo = (lo + Math.imul(al7, bl1)) | 0;
                        mid = (mid + Math.imul(al7, bh1)) | 0;
                        mid = (mid + Math.imul(ah7, bl1)) | 0;
                        hi = (hi + Math.imul(ah7, bh1)) | 0;
                        lo = (lo + Math.imul(al6, bl2)) | 0;
                        mid = (mid + Math.imul(al6, bh2)) | 0;
                        mid = (mid + Math.imul(ah6, bl2)) | 0;
                        hi = (hi + Math.imul(ah6, bh2)) | 0;
                        lo = (lo + Math.imul(al5, bl3)) | 0;
                        mid = (mid + Math.imul(al5, bh3)) | 0;
                        mid = (mid + Math.imul(ah5, bl3)) | 0;
                        hi = (hi + Math.imul(ah5, bh3)) | 0;
                        lo = (lo + Math.imul(al4, bl4)) | 0;
                        mid = (mid + Math.imul(al4, bh4)) | 0;
                        mid = (mid + Math.imul(ah4, bl4)) | 0;
                        hi = (hi + Math.imul(ah4, bh4)) | 0;
                        lo = (lo + Math.imul(al3, bl5)) | 0;
                        mid = (mid + Math.imul(al3, bh5)) | 0;
                        mid = (mid + Math.imul(ah3, bl5)) | 0;
                        hi = (hi + Math.imul(ah3, bh5)) | 0;
                        lo = (lo + Math.imul(al2, bl6)) | 0;
                        mid = (mid + Math.imul(al2, bh6)) | 0;
                        mid = (mid + Math.imul(ah2, bl6)) | 0;
                        hi = (hi + Math.imul(ah2, bh6)) | 0;
                        lo = (lo + Math.imul(al1, bl7)) | 0;
                        mid = (mid + Math.imul(al1, bh7)) | 0;
                        mid = (mid + Math.imul(ah1, bl7)) | 0;
                        hi = (hi + Math.imul(ah1, bh7)) | 0;
                        lo = (lo + Math.imul(al0, bl8)) | 0;
                        mid = (mid + Math.imul(al0, bh8)) | 0;
                        mid = (mid + Math.imul(ah0, bl8)) | 0;
                        hi = (hi + Math.imul(ah0, bh8)) | 0;
                        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
                        w8 &= 0x3ffffff;
                        /* k = 9 */
                        lo = Math.imul(al9, bl0);
                        mid = Math.imul(al9, bh0);
                        mid = (mid + Math.imul(ah9, bl0)) | 0;
                        hi = Math.imul(ah9, bh0);
                        lo = (lo + Math.imul(al8, bl1)) | 0;
                        mid = (mid + Math.imul(al8, bh1)) | 0;
                        mid = (mid + Math.imul(ah8, bl1)) | 0;
                        hi = (hi + Math.imul(ah8, bh1)) | 0;
                        lo = (lo + Math.imul(al7, bl2)) | 0;
                        mid = (mid + Math.imul(al7, bh2)) | 0;
                        mid = (mid + Math.imul(ah7, bl2)) | 0;
                        hi = (hi + Math.imul(ah7, bh2)) | 0;
                        lo = (lo + Math.imul(al6, bl3)) | 0;
                        mid = (mid + Math.imul(al6, bh3)) | 0;
                        mid = (mid + Math.imul(ah6, bl3)) | 0;
                        hi = (hi + Math.imul(ah6, bh3)) | 0;
                        lo = (lo + Math.imul(al5, bl4)) | 0;
                        mid = (mid + Math.imul(al5, bh4)) | 0;
                        mid = (mid + Math.imul(ah5, bl4)) | 0;
                        hi = (hi + Math.imul(ah5, bh4)) | 0;
                        lo = (lo + Math.imul(al4, bl5)) | 0;
                        mid = (mid + Math.imul(al4, bh5)) | 0;
                        mid = (mid + Math.imul(ah4, bl5)) | 0;
                        hi = (hi + Math.imul(ah4, bh5)) | 0;
                        lo = (lo + Math.imul(al3, bl6)) | 0;
                        mid = (mid + Math.imul(al3, bh6)) | 0;
                        mid = (mid + Math.imul(ah3, bl6)) | 0;
                        hi = (hi + Math.imul(ah3, bh6)) | 0;
                        lo = (lo + Math.imul(al2, bl7)) | 0;
                        mid = (mid + Math.imul(al2, bh7)) | 0;
                        mid = (mid + Math.imul(ah2, bl7)) | 0;
                        hi = (hi + Math.imul(ah2, bh7)) | 0;
                        lo = (lo + Math.imul(al1, bl8)) | 0;
                        mid = (mid + Math.imul(al1, bh8)) | 0;
                        mid = (mid + Math.imul(ah1, bl8)) | 0;
                        hi = (hi + Math.imul(ah1, bh8)) | 0;
                        lo = (lo + Math.imul(al0, bl9)) | 0;
                        mid = (mid + Math.imul(al0, bh9)) | 0;
                        mid = (mid + Math.imul(ah0, bl9)) | 0;
                        hi = (hi + Math.imul(ah0, bh9)) | 0;
                        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
                        w9 &= 0x3ffffff;
                        /* k = 10 */
                        lo = Math.imul(al9, bl1);
                        mid = Math.imul(al9, bh1);
                        mid = (mid + Math.imul(ah9, bl1)) | 0;
                        hi = Math.imul(ah9, bh1);
                        lo = (lo + Math.imul(al8, bl2)) | 0;
                        mid = (mid + Math.imul(al8, bh2)) | 0;
                        mid = (mid + Math.imul(ah8, bl2)) | 0;
                        hi = (hi + Math.imul(ah8, bh2)) | 0;
                        lo = (lo + Math.imul(al7, bl3)) | 0;
                        mid = (mid + Math.imul(al7, bh3)) | 0;
                        mid = (mid + Math.imul(ah7, bl3)) | 0;
                        hi = (hi + Math.imul(ah7, bh3)) | 0;
                        lo = (lo + Math.imul(al6, bl4)) | 0;
                        mid = (mid + Math.imul(al6, bh4)) | 0;
                        mid = (mid + Math.imul(ah6, bl4)) | 0;
                        hi = (hi + Math.imul(ah6, bh4)) | 0;
                        lo = (lo + Math.imul(al5, bl5)) | 0;
                        mid = (mid + Math.imul(al5, bh5)) | 0;
                        mid = (mid + Math.imul(ah5, bl5)) | 0;
                        hi = (hi + Math.imul(ah5, bh5)) | 0;
                        lo = (lo + Math.imul(al4, bl6)) | 0;
                        mid = (mid + Math.imul(al4, bh6)) | 0;
                        mid = (mid + Math.imul(ah4, bl6)) | 0;
                        hi = (hi + Math.imul(ah4, bh6)) | 0;
                        lo = (lo + Math.imul(al3, bl7)) | 0;
                        mid = (mid + Math.imul(al3, bh7)) | 0;
                        mid = (mid + Math.imul(ah3, bl7)) | 0;
                        hi = (hi + Math.imul(ah3, bh7)) | 0;
                        lo = (lo + Math.imul(al2, bl8)) | 0;
                        mid = (mid + Math.imul(al2, bh8)) | 0;
                        mid = (mid + Math.imul(ah2, bl8)) | 0;
                        hi = (hi + Math.imul(ah2, bh8)) | 0;
                        lo = (lo + Math.imul(al1, bl9)) | 0;
                        mid = (mid + Math.imul(al1, bh9)) | 0;
                        mid = (mid + Math.imul(ah1, bl9)) | 0;
                        hi = (hi + Math.imul(ah1, bh9)) | 0;
                        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
                        w10 &= 0x3ffffff;
                        /* k = 11 */
                        lo = Math.imul(al9, bl2);
                        mid = Math.imul(al9, bh2);
                        mid = (mid + Math.imul(ah9, bl2)) | 0;
                        hi = Math.imul(ah9, bh2);
                        lo = (lo + Math.imul(al8, bl3)) | 0;
                        mid = (mid + Math.imul(al8, bh3)) | 0;
                        mid = (mid + Math.imul(ah8, bl3)) | 0;
                        hi = (hi + Math.imul(ah8, bh3)) | 0;
                        lo = (lo + Math.imul(al7, bl4)) | 0;
                        mid = (mid + Math.imul(al7, bh4)) | 0;
                        mid = (mid + Math.imul(ah7, bl4)) | 0;
                        hi = (hi + Math.imul(ah7, bh4)) | 0;
                        lo = (lo + Math.imul(al6, bl5)) | 0;
                        mid = (mid + Math.imul(al6, bh5)) | 0;
                        mid = (mid + Math.imul(ah6, bl5)) | 0;
                        hi = (hi + Math.imul(ah6, bh5)) | 0;
                        lo = (lo + Math.imul(al5, bl6)) | 0;
                        mid = (mid + Math.imul(al5, bh6)) | 0;
                        mid = (mid + Math.imul(ah5, bl6)) | 0;
                        hi = (hi + Math.imul(ah5, bh6)) | 0;
                        lo = (lo + Math.imul(al4, bl7)) | 0;
                        mid = (mid + Math.imul(al4, bh7)) | 0;
                        mid = (mid + Math.imul(ah4, bl7)) | 0;
                        hi = (hi + Math.imul(ah4, bh7)) | 0;
                        lo = (lo + Math.imul(al3, bl8)) | 0;
                        mid = (mid + Math.imul(al3, bh8)) | 0;
                        mid = (mid + Math.imul(ah3, bl8)) | 0;
                        hi = (hi + Math.imul(ah3, bh8)) | 0;
                        lo = (lo + Math.imul(al2, bl9)) | 0;
                        mid = (mid + Math.imul(al2, bh9)) | 0;
                        mid = (mid + Math.imul(ah2, bl9)) | 0;
                        hi = (hi + Math.imul(ah2, bh9)) | 0;
                        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
                        w11 &= 0x3ffffff;
                        /* k = 12 */
                        lo = Math.imul(al9, bl3);
                        mid = Math.imul(al9, bh3);
                        mid = (mid + Math.imul(ah9, bl3)) | 0;
                        hi = Math.imul(ah9, bh3);
                        lo = (lo + Math.imul(al8, bl4)) | 0;
                        mid = (mid + Math.imul(al8, bh4)) | 0;
                        mid = (mid + Math.imul(ah8, bl4)) | 0;
                        hi = (hi + Math.imul(ah8, bh4)) | 0;
                        lo = (lo + Math.imul(al7, bl5)) | 0;
                        mid = (mid + Math.imul(al7, bh5)) | 0;
                        mid = (mid + Math.imul(ah7, bl5)) | 0;
                        hi = (hi + Math.imul(ah7, bh5)) | 0;
                        lo = (lo + Math.imul(al6, bl6)) | 0;
                        mid = (mid + Math.imul(al6, bh6)) | 0;
                        mid = (mid + Math.imul(ah6, bl6)) | 0;
                        hi = (hi + Math.imul(ah6, bh6)) | 0;
                        lo = (lo + Math.imul(al5, bl7)) | 0;
                        mid = (mid + Math.imul(al5, bh7)) | 0;
                        mid = (mid + Math.imul(ah5, bl7)) | 0;
                        hi = (hi + Math.imul(ah5, bh7)) | 0;
                        lo = (lo + Math.imul(al4, bl8)) | 0;
                        mid = (mid + Math.imul(al4, bh8)) | 0;
                        mid = (mid + Math.imul(ah4, bl8)) | 0;
                        hi = (hi + Math.imul(ah4, bh8)) | 0;
                        lo = (lo + Math.imul(al3, bl9)) | 0;
                        mid = (mid + Math.imul(al3, bh9)) | 0;
                        mid = (mid + Math.imul(ah3, bl9)) | 0;
                        hi = (hi + Math.imul(ah3, bh9)) | 0;
                        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
                        w12 &= 0x3ffffff;
                        /* k = 13 */
                        lo = Math.imul(al9, bl4);
                        mid = Math.imul(al9, bh4);
                        mid = (mid + Math.imul(ah9, bl4)) | 0;
                        hi = Math.imul(ah9, bh4);
                        lo = (lo + Math.imul(al8, bl5)) | 0;
                        mid = (mid + Math.imul(al8, bh5)) | 0;
                        mid = (mid + Math.imul(ah8, bl5)) | 0;
                        hi = (hi + Math.imul(ah8, bh5)) | 0;
                        lo = (lo + Math.imul(al7, bl6)) | 0;
                        mid = (mid + Math.imul(al7, bh6)) | 0;
                        mid = (mid + Math.imul(ah7, bl6)) | 0;
                        hi = (hi + Math.imul(ah7, bh6)) | 0;
                        lo = (lo + Math.imul(al6, bl7)) | 0;
                        mid = (mid + Math.imul(al6, bh7)) | 0;
                        mid = (mid + Math.imul(ah6, bl7)) | 0;
                        hi = (hi + Math.imul(ah6, bh7)) | 0;
                        lo = (lo + Math.imul(al5, bl8)) | 0;
                        mid = (mid + Math.imul(al5, bh8)) | 0;
                        mid = (mid + Math.imul(ah5, bl8)) | 0;
                        hi = (hi + Math.imul(ah5, bh8)) | 0;
                        lo = (lo + Math.imul(al4, bl9)) | 0;
                        mid = (mid + Math.imul(al4, bh9)) | 0;
                        mid = (mid + Math.imul(ah4, bl9)) | 0;
                        hi = (hi + Math.imul(ah4, bh9)) | 0;
                        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
                        w13 &= 0x3ffffff;
                        /* k = 14 */
                        lo = Math.imul(al9, bl5);
                        mid = Math.imul(al9, bh5);
                        mid = (mid + Math.imul(ah9, bl5)) | 0;
                        hi = Math.imul(ah9, bh5);
                        lo = (lo + Math.imul(al8, bl6)) | 0;
                        mid = (mid + Math.imul(al8, bh6)) | 0;
                        mid = (mid + Math.imul(ah8, bl6)) | 0;
                        hi = (hi + Math.imul(ah8, bh6)) | 0;
                        lo = (lo + Math.imul(al7, bl7)) | 0;
                        mid = (mid + Math.imul(al7, bh7)) | 0;
                        mid = (mid + Math.imul(ah7, bl7)) | 0;
                        hi = (hi + Math.imul(ah7, bh7)) | 0;
                        lo = (lo + Math.imul(al6, bl8)) | 0;
                        mid = (mid + Math.imul(al6, bh8)) | 0;
                        mid = (mid + Math.imul(ah6, bl8)) | 0;
                        hi = (hi + Math.imul(ah6, bh8)) | 0;
                        lo = (lo + Math.imul(al5, bl9)) | 0;
                        mid = (mid + Math.imul(al5, bh9)) | 0;
                        mid = (mid + Math.imul(ah5, bl9)) | 0;
                        hi = (hi + Math.imul(ah5, bh9)) | 0;
                        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
                        w14 &= 0x3ffffff;
                        /* k = 15 */
                        lo = Math.imul(al9, bl6);
                        mid = Math.imul(al9, bh6);
                        mid = (mid + Math.imul(ah9, bl6)) | 0;
                        hi = Math.imul(ah9, bh6);
                        lo = (lo + Math.imul(al8, bl7)) | 0;
                        mid = (mid + Math.imul(al8, bh7)) | 0;
                        mid = (mid + Math.imul(ah8, bl7)) | 0;
                        hi = (hi + Math.imul(ah8, bh7)) | 0;
                        lo = (lo + Math.imul(al7, bl8)) | 0;
                        mid = (mid + Math.imul(al7, bh8)) | 0;
                        mid = (mid + Math.imul(ah7, bl8)) | 0;
                        hi = (hi + Math.imul(ah7, bh8)) | 0;
                        lo = (lo + Math.imul(al6, bl9)) | 0;
                        mid = (mid + Math.imul(al6, bh9)) | 0;
                        mid = (mid + Math.imul(ah6, bl9)) | 0;
                        hi = (hi + Math.imul(ah6, bh9)) | 0;
                        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
                        w15 &= 0x3ffffff;
                        /* k = 16 */
                        lo = Math.imul(al9, bl7);
                        mid = Math.imul(al9, bh7);
                        mid = (mid + Math.imul(ah9, bl7)) | 0;
                        hi = Math.imul(ah9, bh7);
                        lo = (lo + Math.imul(al8, bl8)) | 0;
                        mid = (mid + Math.imul(al8, bh8)) | 0;
                        mid = (mid + Math.imul(ah8, bl8)) | 0;
                        hi = (hi + Math.imul(ah8, bh8)) | 0;
                        lo = (lo + Math.imul(al7, bl9)) | 0;
                        mid = (mid + Math.imul(al7, bh9)) | 0;
                        mid = (mid + Math.imul(ah7, bl9)) | 0;
                        hi = (hi + Math.imul(ah7, bh9)) | 0;
                        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
                        w16 &= 0x3ffffff;
                        /* k = 17 */
                        lo = Math.imul(al9, bl8);
                        mid = Math.imul(al9, bh8);
                        mid = (mid + Math.imul(ah9, bl8)) | 0;
                        hi = Math.imul(ah9, bh8);
                        lo = (lo + Math.imul(al8, bl9)) | 0;
                        mid = (mid + Math.imul(al8, bh9)) | 0;
                        mid = (mid + Math.imul(ah8, bl9)) | 0;
                        hi = (hi + Math.imul(ah8, bh9)) | 0;
                        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
                        w17 &= 0x3ffffff;
                        /* k = 18 */
                        lo = Math.imul(al9, bl9);
                        mid = Math.imul(al9, bh9);
                        mid = (mid + Math.imul(ah9, bl9)) | 0;
                        hi = Math.imul(ah9, bh9);
                        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
                        w18 &= 0x3ffffff;
                        o[0] = w0;
                        o[1] = w1;
                        o[2] = w2;
                        o[3] = w3;
                        o[4] = w4;
                        o[5] = w5;
                        o[6] = w6;
                        o[7] = w7;
                        o[8] = w8;
                        o[9] = w9;
                        o[10] = w10;
                        o[11] = w11;
                        o[12] = w12;
                        o[13] = w13;
                        o[14] = w14;
                        o[15] = w15;
                        o[16] = w16;
                        o[17] = w17;
                        o[18] = w18;
                        if (c !== 0) {
                            o[19] = c;
                            out.length++;
                        }
                        return out;
                    };

                    // Polyfill comb
                    if (!Math.imul) {
                        comb10MulTo = smallMulTo;
                    }

                    function bigMulTo(self, num, out) {
                        out.negative = num.negative ^ self.negative;
                        out.length = self.length + num.length;

                        var carry = 0;
                        var hncarry = 0;
                        for (var k = 0; k < out.length - 1; k++) {
                            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                            // note that ncarry could be >= 0x3ffffff
                            var ncarry = hncarry;
                            hncarry = 0;
                            var rword = carry & 0x3ffffff;
                            var maxJ = Math.min(k, num.length - 1);
                            for (
                                var j = Math.max(0, k - self.length + 1);
                                j <= maxJ;
                                j++
                            ) {
                                var i = k - j;
                                var a = self.words[i] | 0;
                                var b = num.words[j] | 0;
                                var r = a * b;

                                var lo = r & 0x3ffffff;
                                ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                                lo = (lo + rword) | 0;
                                rword = lo & 0x3ffffff;
                                ncarry = (ncarry + (lo >>> 26)) | 0;

                                hncarry += ncarry >>> 26;
                                ncarry &= 0x3ffffff;
                            }
                            out.words[k] = rword;
                            carry = ncarry;
                            ncarry = hncarry;
                        }
                        if (carry !== 0) {
                            out.words[k] = carry;
                        } else {
                            out.length--;
                        }

                        return out._strip();
                    }

                    function jumboMulTo(self, num, out) {
                        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
                        // var fftm = new FFTM();
                        // return fftm.mulp(self, num, out);
                        return bigMulTo(self, num, out);
                    }

                    BN.prototype.mulTo = function mulTo(num, out) {
                        var res;
                        var len = this.length + num.length;
                        if (this.length === 10 && num.length === 10) {
                            res = comb10MulTo(this, num, out);
                        } else if (len < 63) {
                            res = smallMulTo(this, num, out);
                        } else if (len < 1024) {
                            res = bigMulTo(this, num, out);
                        } else {
                            res = jumboMulTo(this, num, out);
                        }

                        return res;
                    };

                    // Cooley-Tukey algorithm for FFT
                    // slightly revisited to rely on looping instead of recursion

                    function FFTM(x, y) {
                        this.x = x;
                        this.y = y;
                    }

                    FFTM.prototype.makeRBT = function makeRBT(N) {
                        var t = new Array(N);
                        var l = BN.prototype._countBits(N) - 1;
                        for (var i = 0; i < N; i++) {
                            t[i] = this.revBin(i, l, N);
                        }

                        return t;
                    };

                    // Returns binary-reversed representation of `x`
                    FFTM.prototype.revBin = function revBin(x, l, N) {
                        if (x === 0 || x === N - 1) return x;

                        var rb = 0;
                        for (var i = 0; i < l; i++) {
                            rb |= (x & 1) << (l - i - 1);
                            x >>= 1;
                        }

                        return rb;
                    };

                    // Performs "tweedling" phase, therefore 'emulating'
                    // behaviour of the recursive algorithm
                    FFTM.prototype.permute = function permute(
                        rbt,
                        rws,
                        iws,
                        rtws,
                        itws,
                        N
                    ) {
                        for (var i = 0; i < N; i++) {
                            rtws[i] = rws[rbt[i]];
                            itws[i] = iws[rbt[i]];
                        }
                    };

                    FFTM.prototype.transform = function transform(
                        rws,
                        iws,
                        rtws,
                        itws,
                        N,
                        rbt
                    ) {
                        this.permute(rbt, rws, iws, rtws, itws, N);

                        for (var s = 1; s < N; s <<= 1) {
                            var l = s << 1;

                            var rtwdf = Math.cos((2 * Math.PI) / l);
                            var itwdf = Math.sin((2 * Math.PI) / l);

                            for (var p = 0; p < N; p += l) {
                                var rtwdf_ = rtwdf;
                                var itwdf_ = itwdf;

                                for (var j = 0; j < s; j++) {
                                    var re = rtws[p + j];
                                    var ie = itws[p + j];

                                    var ro = rtws[p + j + s];
                                    var io = itws[p + j + s];

                                    var rx = rtwdf_ * ro - itwdf_ * io;

                                    io = rtwdf_ * io + itwdf_ * ro;
                                    ro = rx;

                                    rtws[p + j] = re + ro;
                                    itws[p + j] = ie + io;

                                    rtws[p + j + s] = re - ro;
                                    itws[p + j + s] = ie - io;

                                    /* jshint maxdepth : false */
                                    if (j !== l) {
                                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                                        itwdf_ =
                                            rtwdf * itwdf_ + itwdf * rtwdf_;
                                        rtwdf_ = rx;
                                    }
                                }
                            }
                        }
                    };

                    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
                        var N = Math.max(m, n) | 1;
                        var odd = N & 1;
                        var i = 0;
                        for (N = (N / 2) | 0; N; N = N >>> 1) {
                            i++;
                        }

                        return 1 << (i + 1 + odd);
                    };

                    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
                        if (N <= 1) return;

                        for (var i = 0; i < N / 2; i++) {
                            var t = rws[i];

                            rws[i] = rws[N - i - 1];
                            rws[N - i - 1] = t;

                            t = iws[i];

                            iws[i] = -iws[N - i - 1];
                            iws[N - i - 1] = -t;
                        }
                    };

                    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
                        var carry = 0;
                        for (var i = 0; i < N / 2; i++) {
                            var w =
                                Math.round(ws[2 * i + 1] / N) * 0x2000 +
                                Math.round(ws[2 * i] / N) +
                                carry;

                            ws[i] = w & 0x3ffffff;

                            if (w < 0x4000000) {
                                carry = 0;
                            } else {
                                carry = (w / 0x4000000) | 0;
                            }
                        }

                        return ws;
                    };

                    FFTM.prototype.convert13b = function convert13b(
                        ws,
                        len,
                        rws,
                        N
                    ) {
                        var carry = 0;
                        for (var i = 0; i < len; i++) {
                            carry = carry + (ws[i] | 0);

                            rws[2 * i] = carry & 0x1fff;
                            carry = carry >>> 13;
                            rws[2 * i + 1] = carry & 0x1fff;
                            carry = carry >>> 13;
                        }

                        // Pad with zeroes
                        for (i = 2 * len; i < N; ++i) {
                            rws[i] = 0;
                        }

                        assert(carry === 0);
                        assert((carry & ~0x1fff) === 0);
                    };

                    FFTM.prototype.stub = function stub(N) {
                        var ph = new Array(N);
                        for (var i = 0; i < N; i++) {
                            ph[i] = 0;
                        }

                        return ph;
                    };

                    FFTM.prototype.mulp = function mulp(x, y, out) {
                        var N = 2 * this.guessLen13b(x.length, y.length);

                        var rbt = this.makeRBT(N);

                        var _ = this.stub(N);

                        var rws = new Array(N);
                        var rwst = new Array(N);
                        var iwst = new Array(N);

                        var nrws = new Array(N);
                        var nrwst = new Array(N);
                        var niwst = new Array(N);

                        var rmws = out.words;
                        rmws.length = N;

                        this.convert13b(x.words, x.length, rws, N);
                        this.convert13b(y.words, y.length, nrws, N);

                        this.transform(rws, _, rwst, iwst, N, rbt);
                        this.transform(nrws, _, nrwst, niwst, N, rbt);

                        for (var i = 0; i < N; i++) {
                            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                            rwst[i] = rx;
                        }

                        this.conjugate(rwst, iwst, N);
                        this.transform(rwst, iwst, rmws, _, N, rbt);
                        this.conjugate(rmws, _, N);
                        this.normalize13b(rmws, N);

                        out.negative = x.negative ^ y.negative;
                        out.length = x.length + y.length;
                        return out._strip();
                    };

                    // Multiply `this` by `num`
                    BN.prototype.mul = function mul(num) {
                        var out = new BN(null);
                        out.words = new Array(this.length + num.length);
                        return this.mulTo(num, out);
                    };

                    // Multiply employing FFT
                    BN.prototype.mulf = function mulf(num) {
                        var out = new BN(null);
                        out.words = new Array(this.length + num.length);
                        return jumboMulTo(this, num, out);
                    };

                    // In-place Multiplication
                    BN.prototype.imul = function imul(num) {
                        return this.clone().mulTo(num, this);
                    };

                    BN.prototype.imuln = function imuln(num) {
                        var isNegNum = num < 0;
                        if (isNegNum) num = -num;

                        assert(typeof num === "number");
                        assert(num < 0x4000000);

                        // Carry
                        var carry = 0;
                        for (var i = 0; i < this.length; i++) {
                            var w = (this.words[i] | 0) * num;
                            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
                            carry >>= 26;
                            carry += (w / 0x4000000) | 0;
                            // NOTE: lo is 27bit maximum
                            carry += lo >>> 26;
                            this.words[i] = lo & 0x3ffffff;
                        }

                        if (carry !== 0) {
                            this.words[i] = carry;
                            this.length++;
                        }

                        return isNegNum ? this.ineg() : this;
                    };

                    BN.prototype.muln = function muln(num) {
                        return this.clone().imuln(num);
                    };

                    // `this` * `this`
                    BN.prototype.sqr = function sqr() {
                        return this.mul(this);
                    };

                    // `this` * `this` in-place
                    BN.prototype.isqr = function isqr() {
                        return this.imul(this.clone());
                    };

                    // Math.pow(`this`, `num`)
                    BN.prototype.pow = function pow(num) {
                        var w = toBitArray(num);
                        if (w.length === 0) return new BN(1);

                        // Skip leading zeroes
                        var res = this;
                        for (var i = 0; i < w.length; i++, res = res.sqr()) {
                            if (w[i] !== 0) break;
                        }

                        if (++i < w.length) {
                            for (
                                var q = res.sqr();
                                i < w.length;
                                i++, q = q.sqr()
                            ) {
                                if (w[i] === 0) continue;

                                res = res.mul(q);
                            }
                        }

                        return res;
                    };

                    // Shift-left in-place
                    BN.prototype.iushln = function iushln(bits) {
                        assert(typeof bits === "number" && bits >= 0);
                        var r = bits % 26;
                        var s = (bits - r) / 26;
                        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
                        var i;

                        if (r !== 0) {
                            var carry = 0;

                            for (i = 0; i < this.length; i++) {
                                var newCarry = this.words[i] & carryMask;
                                var c = ((this.words[i] | 0) - newCarry) << r;
                                this.words[i] = c | carry;
                                carry = newCarry >>> (26 - r);
                            }

                            if (carry) {
                                this.words[i] = carry;
                                this.length++;
                            }
                        }

                        if (s !== 0) {
                            for (i = this.length - 1; i >= 0; i--) {
                                this.words[i + s] = this.words[i];
                            }

                            for (i = 0; i < s; i++) {
                                this.words[i] = 0;
                            }

                            this.length += s;
                        }

                        return this._strip();
                    };

                    BN.prototype.ishln = function ishln(bits) {
                        // TODO(indutny): implement me
                        assert(this.negative === 0);
                        return this.iushln(bits);
                    };

                    // Shift-right in-place
                    // NOTE: `hint` is a lowest bit before trailing zeroes
                    // NOTE: if `extended` is present - it will be filled with destroyed bits
                    BN.prototype.iushrn = function iushrn(
                        bits,
                        hint,
                        extended
                    ) {
                        assert(typeof bits === "number" && bits >= 0);
                        var h;
                        if (hint) {
                            h = (hint - (hint % 26)) / 26;
                        } else {
                            h = 0;
                        }

                        var r = bits % 26;
                        var s = Math.min((bits - r) / 26, this.length);
                        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
                        var maskedWords = extended;

                        h -= s;
                        h = Math.max(0, h);

                        // Extended mode, copy masked part
                        if (maskedWords) {
                            for (var i = 0; i < s; i++) {
                                maskedWords.words[i] = this.words[i];
                            }
                            maskedWords.length = s;
                        }

                        if (s === 0) {
                            // No-op, we should not move anything at all
                        } else if (this.length > s) {
                            this.length -= s;
                            for (i = 0; i < this.length; i++) {
                                this.words[i] = this.words[i + s];
                            }
                        } else {
                            this.words[0] = 0;
                            this.length = 1;
                        }

                        var carry = 0;
                        for (
                            i = this.length - 1;
                            i >= 0 && (carry !== 0 || i >= h);
                            i--
                        ) {
                            var word = this.words[i] | 0;
                            this.words[i] = (carry << (26 - r)) | (word >>> r);
                            carry = word & mask;
                        }

                        // Push carried bits as a mask
                        if (maskedWords && carry !== 0) {
                            maskedWords.words[maskedWords.length++] = carry;
                        }

                        if (this.length === 0) {
                            this.words[0] = 0;
                            this.length = 1;
                        }

                        return this._strip();
                    };

                    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
                        // TODO(indutny): implement me
                        assert(this.negative === 0);
                        return this.iushrn(bits, hint, extended);
                    };

                    // Shift-left
                    BN.prototype.shln = function shln(bits) {
                        return this.clone().ishln(bits);
                    };

                    BN.prototype.ushln = function ushln(bits) {
                        return this.clone().iushln(bits);
                    };

                    // Shift-right
                    BN.prototype.shrn = function shrn(bits) {
                        return this.clone().ishrn(bits);
                    };

                    BN.prototype.ushrn = function ushrn(bits) {
                        return this.clone().iushrn(bits);
                    };

                    // Test if n bit is set
                    BN.prototype.testn = function testn(bit) {
                        assert(typeof bit === "number" && bit >= 0);
                        var r = bit % 26;
                        var s = (bit - r) / 26;
                        var q = 1 << r;

                        // Fast case: bit is much higher than all existing words
                        if (this.length <= s) return false;

                        // Check bit and return
                        var w = this.words[s];

                        return !!(w & q);
                    };

                    // Return only lowers bits of number (in-place)
                    BN.prototype.imaskn = function imaskn(bits) {
                        assert(typeof bits === "number" && bits >= 0);
                        var r = bits % 26;
                        var s = (bits - r) / 26;

                        assert(
                            this.negative === 0,
                            "imaskn works only with positive numbers"
                        );

                        if (this.length <= s) {
                            return this;
                        }

                        if (r !== 0) {
                            s++;
                        }
                        this.length = Math.min(s, this.length);

                        if (r !== 0) {
                            var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
                            this.words[this.length - 1] &= mask;
                        }

                        return this._strip();
                    };

                    // Return only lowers bits of number
                    BN.prototype.maskn = function maskn(bits) {
                        return this.clone().imaskn(bits);
                    };

                    // Add plain number `num` to `this`
                    BN.prototype.iaddn = function iaddn(num) {
                        assert(typeof num === "number");
                        assert(num < 0x4000000);
                        if (num < 0) return this.isubn(-num);

                        // Possible sign change
                        if (this.negative !== 0) {
                            if (
                                this.length === 1 &&
                                (this.words[0] | 0) <= num
                            ) {
                                this.words[0] = num - (this.words[0] | 0);
                                this.negative = 0;
                                return this;
                            }

                            this.negative = 0;
                            this.isubn(num);
                            this.negative = 1;
                            return this;
                        }

                        // Add without checks
                        return this._iaddn(num);
                    };

                    BN.prototype._iaddn = function _iaddn(num) {
                        this.words[0] += num;

                        // Carry
                        for (
                            var i = 0;
                            i < this.length && this.words[i] >= 0x4000000;
                            i++
                        ) {
                            this.words[i] -= 0x4000000;
                            if (i === this.length - 1) {
                                this.words[i + 1] = 1;
                            } else {
                                this.words[i + 1]++;
                            }
                        }
                        this.length = Math.max(this.length, i + 1);

                        return this;
                    };

                    // Subtract plain number `num` from `this`
                    BN.prototype.isubn = function isubn(num) {
                        assert(typeof num === "number");
                        assert(num < 0x4000000);
                        if (num < 0) return this.iaddn(-num);

                        if (this.negative !== 0) {
                            this.negative = 0;
                            this.iaddn(num);
                            this.negative = 1;
                            return this;
                        }

                        this.words[0] -= num;

                        if (this.length === 1 && this.words[0] < 0) {
                            this.words[0] = -this.words[0];
                            this.negative = 1;
                        } else {
                            // Carry
                            for (
                                var i = 0;
                                i < this.length && this.words[i] < 0;
                                i++
                            ) {
                                this.words[i] += 0x4000000;
                                this.words[i + 1] -= 1;
                            }
                        }

                        return this._strip();
                    };

                    BN.prototype.addn = function addn(num) {
                        return this.clone().iaddn(num);
                    };

                    BN.prototype.subn = function subn(num) {
                        return this.clone().isubn(num);
                    };

                    BN.prototype.iabs = function iabs() {
                        this.negative = 0;

                        return this;
                    };

                    BN.prototype.abs = function abs() {
                        return this.clone().iabs();
                    };

                    BN.prototype._ishlnsubmul = function _ishlnsubmul(
                        num,
                        mul,
                        shift
                    ) {
                        var len = num.length + shift;
                        var i;

                        this._expand(len);

                        var w;
                        var carry = 0;
                        for (i = 0; i < num.length; i++) {
                            w = (this.words[i + shift] | 0) + carry;
                            var right = (num.words[i] | 0) * mul;
                            w -= right & 0x3ffffff;
                            carry = (w >> 26) - ((right / 0x4000000) | 0);
                            this.words[i + shift] = w & 0x3ffffff;
                        }
                        for (; i < this.length - shift; i++) {
                            w = (this.words[i + shift] | 0) + carry;
                            carry = w >> 26;
                            this.words[i + shift] = w & 0x3ffffff;
                        }

                        if (carry === 0) return this._strip();

                        // Subtraction overflow
                        assert(carry === -1);
                        carry = 0;
                        for (i = 0; i < this.length; i++) {
                            w = -(this.words[i] | 0) + carry;
                            carry = w >> 26;
                            this.words[i] = w & 0x3ffffff;
                        }
                        this.negative = 1;

                        return this._strip();
                    };

                    BN.prototype._wordDiv = function _wordDiv(num, mode) {
                        var shift = this.length - num.length;

                        var a = this.clone();
                        var b = num;

                        // Normalize
                        var bhi = b.words[b.length - 1] | 0;
                        var bhiBits = this._countBits(bhi);
                        shift = 26 - bhiBits;
                        if (shift !== 0) {
                            b = b.ushln(shift);
                            a.iushln(shift);
                            bhi = b.words[b.length - 1] | 0;
                        }

                        // Initialize quotient
                        var m = a.length - b.length;
                        var q;

                        if (mode !== "mod") {
                            q = new BN(null);
                            q.length = m + 1;
                            q.words = new Array(q.length);
                            for (var i = 0; i < q.length; i++) {
                                q.words[i] = 0;
                            }
                        }

                        var diff = a.clone()._ishlnsubmul(b, 1, m);
                        if (diff.negative === 0) {
                            a = diff;
                            if (q) {
                                q.words[m] = 1;
                            }
                        }

                        for (var j = m - 1; j >= 0; j--) {
                            var qj =
                                (a.words[b.length + j] | 0) * 0x4000000 +
                                (a.words[b.length + j - 1] | 0);

                            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
                            // (0x7ffffff)
                            qj = Math.min((qj / bhi) | 0, 0x3ffffff);

                            a._ishlnsubmul(b, qj, j);
                            while (a.negative !== 0) {
                                qj--;
                                a.negative = 0;
                                a._ishlnsubmul(b, 1, j);
                                if (!a.isZero()) {
                                    a.negative ^= 1;
                                }
                            }
                            if (q) {
                                q.words[j] = qj;
                            }
                        }
                        if (q) {
                            q._strip();
                        }
                        a._strip();

                        // Denormalize
                        if (mode !== "div" && shift !== 0) {
                            a.iushrn(shift);
                        }

                        return {
                            div: q || null,
                            mod: a,
                        };
                    };

                    // NOTE: 1) `mode` can be set to `mod` to request mod only,
                    //       to `div` to request div only, or be absent to
                    //       request both div & mod
                    //       2) `positive` is true if unsigned mod is requested
                    BN.prototype.divmod = function divmod(num, mode, positive) {
                        assert(!num.isZero());

                        if (this.isZero()) {
                            return {
                                div: new BN(0),
                                mod: new BN(0),
                            };
                        }

                        var div, mod, res;
                        if (this.negative !== 0 && num.negative === 0) {
                            res = this.neg().divmod(num, mode);

                            if (mode !== "mod") {
                                div = res.div.neg();
                            }

                            if (mode !== "div") {
                                mod = res.mod.neg();
                                if (positive && mod.negative !== 0) {
                                    mod.iadd(num);
                                }
                            }

                            return {
                                div: div,
                                mod: mod,
                            };
                        }

                        if (this.negative === 0 && num.negative !== 0) {
                            res = this.divmod(num.neg(), mode);

                            if (mode !== "mod") {
                                div = res.div.neg();
                            }

                            return {
                                div: div,
                                mod: res.mod,
                            };
                        }

                        if ((this.negative & num.negative) !== 0) {
                            res = this.neg().divmod(num.neg(), mode);

                            if (mode !== "div") {
                                mod = res.mod.neg();
                                if (positive && mod.negative !== 0) {
                                    mod.isub(num);
                                }
                            }

                            return {
                                div: res.div,
                                mod: mod,
                            };
                        }

                        // Both numbers are positive at this point

                        // Strip both numbers to approximate shift value
                        if (num.length > this.length || this.cmp(num) < 0) {
                            return {
                                div: new BN(0),
                                mod: this,
                            };
                        }

                        // Very short reduction
                        if (num.length === 1) {
                            if (mode === "div") {
                                return {
                                    div: this.divn(num.words[0]),
                                    mod: null,
                                };
                            }

                            if (mode === "mod") {
                                return {
                                    div: null,
                                    mod: new BN(this.modrn(num.words[0])),
                                };
                            }

                            return {
                                div: this.divn(num.words[0]),
                                mod: new BN(this.modrn(num.words[0])),
                            };
                        }

                        return this._wordDiv(num, mode);
                    };

                    // Find `this` / `num`
                    BN.prototype.div = function div(num) {
                        return this.divmod(num, "div", false).div;
                    };

                    // Find `this` % `num`
                    BN.prototype.mod = function mod(num) {
                        return this.divmod(num, "mod", false).mod;
                    };

                    BN.prototype.umod = function umod(num) {
                        return this.divmod(num, "mod", true).mod;
                    };

                    // Find Round(`this` / `num`)
                    BN.prototype.divRound = function divRound(num) {
                        var dm = this.divmod(num);

                        // Fast case - exact division
                        if (dm.mod.isZero()) return dm.div;

                        var mod =
                            dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

                        var half = num.ushrn(1);
                        var r2 = num.andln(1);
                        var cmp = mod.cmp(half);

                        // Round down
                        if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

                        // Round up
                        return dm.div.negative !== 0
                            ? dm.div.isubn(1)
                            : dm.div.iaddn(1);
                    };

                    BN.prototype.modrn = function modrn(num) {
                        var isNegNum = num < 0;
                        if (isNegNum) num = -num;

                        assert(num <= 0x3ffffff);
                        var p = (1 << 26) % num;

                        var acc = 0;
                        for (var i = this.length - 1; i >= 0; i--) {
                            acc = (p * acc + (this.words[i] | 0)) % num;
                        }

                        return isNegNum ? -acc : acc;
                    };

                    // WARNING: DEPRECATED
                    BN.prototype.modn = function modn(num) {
                        return this.modrn(num);
                    };

                    // In-place division by number
                    BN.prototype.idivn = function idivn(num) {
                        var isNegNum = num < 0;
                        if (isNegNum) num = -num;

                        assert(num <= 0x3ffffff);

                        var carry = 0;
                        for (var i = this.length - 1; i >= 0; i--) {
                            var w = (this.words[i] | 0) + carry * 0x4000000;
                            this.words[i] = (w / num) | 0;
                            carry = w % num;
                        }

                        this._strip();
                        return isNegNum ? this.ineg() : this;
                    };

                    BN.prototype.divn = function divn(num) {
                        return this.clone().idivn(num);
                    };

                    BN.prototype.egcd = function egcd(p) {
                        assert(p.negative === 0);
                        assert(!p.isZero());

                        var x = this;
                        var y = p.clone();

                        if (x.negative !== 0) {
                            x = x.umod(p);
                        } else {
                            x = x.clone();
                        }

                        // A * x + B * y = x
                        var A = new BN(1);
                        var B = new BN(0);

                        // C * x + D * y = y
                        var C = new BN(0);
                        var D = new BN(1);

                        var g = 0;

                        while (x.isEven() && y.isEven()) {
                            x.iushrn(1);
                            y.iushrn(1);
                            ++g;
                        }

                        var yp = y.clone();
                        var xp = x.clone();

                        while (!x.isZero()) {
                            for (
                                var i = 0, im = 1;
                                (x.words[0] & im) === 0 && i < 26;
                                ++i, im <<= 1
                            );
                            if (i > 0) {
                                x.iushrn(i);
                                while (i-- > 0) {
                                    if (A.isOdd() || B.isOdd()) {
                                        A.iadd(yp);
                                        B.isub(xp);
                                    }

                                    A.iushrn(1);
                                    B.iushrn(1);
                                }
                            }

                            for (
                                var j = 0, jm = 1;
                                (y.words[0] & jm) === 0 && j < 26;
                                ++j, jm <<= 1
                            );
                            if (j > 0) {
                                y.iushrn(j);
                                while (j-- > 0) {
                                    if (C.isOdd() || D.isOdd()) {
                                        C.iadd(yp);
                                        D.isub(xp);
                                    }

                                    C.iushrn(1);
                                    D.iushrn(1);
                                }
                            }

                            if (x.cmp(y) >= 0) {
                                x.isub(y);
                                A.isub(C);
                                B.isub(D);
                            } else {
                                y.isub(x);
                                C.isub(A);
                                D.isub(B);
                            }
                        }

                        return {
                            a: C,
                            b: D,
                            gcd: y.iushln(g),
                        };
                    };

                    // This is reduced incarnation of the binary EEA
                    // above, designated to invert members of the
                    // _prime_ fields F(p) at a maximal speed
                    BN.prototype._invmp = function _invmp(p) {
                        assert(p.negative === 0);
                        assert(!p.isZero());

                        var a = this;
                        var b = p.clone();

                        if (a.negative !== 0) {
                            a = a.umod(p);
                        } else {
                            a = a.clone();
                        }

                        var x1 = new BN(1);
                        var x2 = new BN(0);

                        var delta = b.clone();

                        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
                            for (
                                var i = 0, im = 1;
                                (a.words[0] & im) === 0 && i < 26;
                                ++i, im <<= 1
                            );
                            if (i > 0) {
                                a.iushrn(i);
                                while (i-- > 0) {
                                    if (x1.isOdd()) {
                                        x1.iadd(delta);
                                    }

                                    x1.iushrn(1);
                                }
                            }

                            for (
                                var j = 0, jm = 1;
                                (b.words[0] & jm) === 0 && j < 26;
                                ++j, jm <<= 1
                            );
                            if (j > 0) {
                                b.iushrn(j);
                                while (j-- > 0) {
                                    if (x2.isOdd()) {
                                        x2.iadd(delta);
                                    }

                                    x2.iushrn(1);
                                }
                            }

                            if (a.cmp(b) >= 0) {
                                a.isub(b);
                                x1.isub(x2);
                            } else {
                                b.isub(a);
                                x2.isub(x1);
                            }
                        }

                        var res;
                        if (a.cmpn(1) === 0) {
                            res = x1;
                        } else {
                            res = x2;
                        }

                        if (res.cmpn(0) < 0) {
                            res.iadd(p);
                        }

                        return res;
                    };

                    BN.prototype.gcd = function gcd(num) {
                        if (this.isZero()) return num.abs();
                        if (num.isZero()) return this.abs();

                        var a = this.clone();
                        var b = num.clone();
                        a.negative = 0;
                        b.negative = 0;

                        // Remove common factor of two
                        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
                            a.iushrn(1);
                            b.iushrn(1);
                        }

                        do {
                            while (a.isEven()) {
                                a.iushrn(1);
                            }
                            while (b.isEven()) {
                                b.iushrn(1);
                            }

                            var r = a.cmp(b);
                            if (r < 0) {
                                // Swap `a` and `b` to make `a` always bigger than `b`
                                var t = a;
                                a = b;
                                b = t;
                            } else if (r === 0 || b.cmpn(1) === 0) {
                                break;
                            }

                            a.isub(b);
                        } while (true);

                        return b.iushln(shift);
                    };

                    // Invert number in the field F(num)
                    BN.prototype.invm = function invm(num) {
                        return this.egcd(num).a.umod(num);
                    };

                    BN.prototype.isEven = function isEven() {
                        return (this.words[0] & 1) === 0;
                    };

                    BN.prototype.isOdd = function isOdd() {
                        return (this.words[0] & 1) === 1;
                    };

                    // And first word and num
                    BN.prototype.andln = function andln(num) {
                        return this.words[0] & num;
                    };

                    // Increment at the bit position in-line
                    BN.prototype.bincn = function bincn(bit) {
                        assert(typeof bit === "number");
                        var r = bit % 26;
                        var s = (bit - r) / 26;
                        var q = 1 << r;

                        // Fast case: bit is much higher than all existing words
                        if (this.length <= s) {
                            this._expand(s + 1);
                            this.words[s] |= q;
                            return this;
                        }

                        // Add bit and propagate, if needed
                        var carry = q;
                        for (var i = s; carry !== 0 && i < this.length; i++) {
                            var w = this.words[i] | 0;
                            w += carry;
                            carry = w >>> 26;
                            w &= 0x3ffffff;
                            this.words[i] = w;
                        }
                        if (carry !== 0) {
                            this.words[i] = carry;
                            this.length++;
                        }
                        return this;
                    };

                    BN.prototype.isZero = function isZero() {
                        return this.length === 1 && this.words[0] === 0;
                    };

                    BN.prototype.cmpn = function cmpn(num) {
                        var negative = num < 0;

                        if (this.negative !== 0 && !negative) return -1;
                        if (this.negative === 0 && negative) return 1;

                        this._strip();

                        var res;
                        if (this.length > 1) {
                            res = 1;
                        } else {
                            if (negative) {
                                num = -num;
                            }

                            assert(num <= 0x3ffffff, "Number is too big");

                            var w = this.words[0] | 0;
                            res = w === num ? 0 : w < num ? -1 : 1;
                        }
                        if (this.negative !== 0) return -res | 0;
                        return res;
                    };

                    // Compare two numbers and return:
                    // 1 - if `this` > `num`
                    // 0 - if `this` == `num`
                    // -1 - if `this` < `num`
                    BN.prototype.cmp = function cmp(num) {
                        if (this.negative !== 0 && num.negative === 0)
                            return -1;
                        if (this.negative === 0 && num.negative !== 0) return 1;

                        var res = this.ucmp(num);
                        if (this.negative !== 0) return -res | 0;
                        return res;
                    };

                    // Unsigned comparison
                    BN.prototype.ucmp = function ucmp(num) {
                        // At this point both numbers have the same sign
                        if (this.length > num.length) return 1;
                        if (this.length < num.length) return -1;

                        var res = 0;
                        for (var i = this.length - 1; i >= 0; i--) {
                            var a = this.words[i] | 0;
                            var b = num.words[i] | 0;

                            if (a === b) continue;
                            if (a < b) {
                                res = -1;
                            } else if (a > b) {
                                res = 1;
                            }
                            break;
                        }
                        return res;
                    };

                    BN.prototype.gtn = function gtn(num) {
                        return this.cmpn(num) === 1;
                    };

                    BN.prototype.gt = function gt(num) {
                        return this.cmp(num) === 1;
                    };

                    BN.prototype.gten = function gten(num) {
                        return this.cmpn(num) >= 0;
                    };

                    BN.prototype.gte = function gte(num) {
                        return this.cmp(num) >= 0;
                    };

                    BN.prototype.ltn = function ltn(num) {
                        return this.cmpn(num) === -1;
                    };

                    BN.prototype.lt = function lt(num) {
                        return this.cmp(num) === -1;
                    };

                    BN.prototype.lten = function lten(num) {
                        return this.cmpn(num) <= 0;
                    };

                    BN.prototype.lte = function lte(num) {
                        return this.cmp(num) <= 0;
                    };

                    BN.prototype.eqn = function eqn(num) {
                        return this.cmpn(num) === 0;
                    };

                    BN.prototype.eq = function eq(num) {
                        return this.cmp(num) === 0;
                    };

                    //
                    // A reduce context, could be using montgomery or something better, depending
                    // on the `m` itself.
                    //
                    BN.red = function red(num) {
                        return new Red(num);
                    };

                    BN.prototype.toRed = function toRed(ctx) {
                        assert(
                            !this.red,
                            "Already a number in reduction context"
                        );
                        assert(
                            this.negative === 0,
                            "red works only with positives"
                        );
                        return ctx.convertTo(this)._forceRed(ctx);
                    };

                    BN.prototype.fromRed = function fromRed() {
                        assert(
                            this.red,
                            "fromRed works only with numbers in reduction context"
                        );
                        return this.red.convertFrom(this);
                    };

                    BN.prototype._forceRed = function _forceRed(ctx) {
                        this.red = ctx;
                        return this;
                    };

                    BN.prototype.forceRed = function forceRed(ctx) {
                        assert(
                            !this.red,
                            "Already a number in reduction context"
                        );
                        return this._forceRed(ctx);
                    };

                    BN.prototype.redAdd = function redAdd(num) {
                        assert(this.red, "redAdd works only with red numbers");
                        return this.red.add(this, num);
                    };

                    BN.prototype.redIAdd = function redIAdd(num) {
                        assert(this.red, "redIAdd works only with red numbers");
                        return this.red.iadd(this, num);
                    };

                    BN.prototype.redSub = function redSub(num) {
                        assert(this.red, "redSub works only with red numbers");
                        return this.red.sub(this, num);
                    };

                    BN.prototype.redISub = function redISub(num) {
                        assert(this.red, "redISub works only with red numbers");
                        return this.red.isub(this, num);
                    };

                    BN.prototype.redShl = function redShl(num) {
                        assert(this.red, "redShl works only with red numbers");
                        return this.red.shl(this, num);
                    };

                    BN.prototype.redMul = function redMul(num) {
                        assert(this.red, "redMul works only with red numbers");
                        this.red._verify2(this, num);
                        return this.red.mul(this, num);
                    };

                    BN.prototype.redIMul = function redIMul(num) {
                        assert(this.red, "redMul works only with red numbers");
                        this.red._verify2(this, num);
                        return this.red.imul(this, num);
                    };

                    BN.prototype.redSqr = function redSqr() {
                        assert(this.red, "redSqr works only with red numbers");
                        this.red._verify1(this);
                        return this.red.sqr(this);
                    };

                    BN.prototype.redISqr = function redISqr() {
                        assert(this.red, "redISqr works only with red numbers");
                        this.red._verify1(this);
                        return this.red.isqr(this);
                    };

                    // Square root over p
                    BN.prototype.redSqrt = function redSqrt() {
                        assert(this.red, "redSqrt works only with red numbers");
                        this.red._verify1(this);
                        return this.red.sqrt(this);
                    };

                    BN.prototype.redInvm = function redInvm() {
                        assert(this.red, "redInvm works only with red numbers");
                        this.red._verify1(this);
                        return this.red.invm(this);
                    };

                    // Return negative clone of `this` % `red modulo`
                    BN.prototype.redNeg = function redNeg() {
                        assert(this.red, "redNeg works only with red numbers");
                        this.red._verify1(this);
                        return this.red.neg(this);
                    };

                    BN.prototype.redPow = function redPow(num) {
                        assert(this.red && !num.red, "redPow(normalNum)");
                        this.red._verify1(this);
                        return this.red.pow(this, num);
                    };

                    // Prime numbers with efficient reduction
                    var primes = {
                        k256: null,
                        p224: null,
                        p192: null,
                        p25519: null,
                    };

                    // Pseudo-Mersenne prime
                    function MPrime(name, p) {
                        // P = 2 ^ N - K
                        this.name = name;
                        this.p = new BN(p, 16);
                        this.n = this.p.bitLength();
                        this.k = new BN(1).iushln(this.n).isub(this.p);

                        this.tmp = this._tmp();
                    }

                    MPrime.prototype._tmp = function _tmp() {
                        var tmp = new BN(null);
                        tmp.words = new Array(Math.ceil(this.n / 13));
                        return tmp;
                    };

                    MPrime.prototype.ireduce = function ireduce(num) {
                        // Assumes that `num` is less than `P^2`
                        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
                        var r = num;
                        var rlen;

                        do {
                            this.split(r, this.tmp);
                            r = this.imulK(r);
                            r = r.iadd(this.tmp);
                            rlen = r.bitLength();
                        } while (rlen > this.n);

                        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
                        if (cmp === 0) {
                            r.words[0] = 0;
                            r.length = 1;
                        } else if (cmp > 0) {
                            r.isub(this.p);
                        } else {
                            r._strip();
                        }

                        return r;
                    };

                    MPrime.prototype.split = function split(input, out) {
                        input.iushrn(this.n, 0, out);
                    };

                    MPrime.prototype.imulK = function imulK(num) {
                        return num.imul(this.k);
                    };

                    function K256() {
                        MPrime.call(
                            this,
                            "k256",
                            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
                        );
                    }
                    inherits(K256, MPrime);

                    K256.prototype.split = function split(input, output) {
                        // 256 = 9 * 26 + 22
                        var mask = 0x3fffff;

                        var outLen = Math.min(input.length, 9);
                        for (var i = 0; i < outLen; i++) {
                            output.words[i] = input.words[i];
                        }
                        output.length = outLen;

                        if (input.length <= 9) {
                            input.words[0] = 0;
                            input.length = 1;
                            return;
                        }

                        // Shift by 9 limbs
                        var prev = input.words[9];
                        output.words[output.length++] = prev & mask;

                        for (i = 10; i < input.length; i++) {
                            var next = input.words[i] | 0;
                            input.words[i - 10] =
                                ((next & mask) << 4) | (prev >>> 22);
                            prev = next;
                        }
                        prev >>>= 22;
                        input.words[i - 10] = prev;
                        if (prev === 0 && input.length > 10) {
                            input.length -= 10;
                        } else {
                            input.length -= 9;
                        }
                    };

                    K256.prototype.imulK = function imulK(num) {
                        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
                        num.words[num.length] = 0;
                        num.words[num.length + 1] = 0;
                        num.length += 2;

                        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
                        var lo = 0;
                        for (var i = 0; i < num.length; i++) {
                            var w = num.words[i] | 0;
                            lo += w * 0x3d1;
                            num.words[i] = lo & 0x3ffffff;
                            lo = w * 0x40 + ((lo / 0x4000000) | 0);
                        }

                        // Fast length reduction
                        if (num.words[num.length - 1] === 0) {
                            num.length--;
                            if (num.words[num.length - 1] === 0) {
                                num.length--;
                            }
                        }
                        return num;
                    };

                    function P224() {
                        MPrime.call(
                            this,
                            "p224",
                            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
                        );
                    }
                    inherits(P224, MPrime);

                    function P192() {
                        MPrime.call(
                            this,
                            "p192",
                            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
                        );
                    }
                    inherits(P192, MPrime);

                    function P25519() {
                        // 2 ^ 255 - 19
                        MPrime.call(
                            this,
                            "25519",
                            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
                        );
                    }
                    inherits(P25519, MPrime);

                    P25519.prototype.imulK = function imulK(num) {
                        // K = 0x13
                        var carry = 0;
                        for (var i = 0; i < num.length; i++) {
                            var hi = (num.words[i] | 0) * 0x13 + carry;
                            var lo = hi & 0x3ffffff;
                            hi >>>= 26;

                            num.words[i] = lo;
                            carry = hi;
                        }
                        if (carry !== 0) {
                            num.words[num.length++] = carry;
                        }
                        return num;
                    };

                    // Exported mostly for testing purposes, use plain name instead
                    BN._prime = function prime(name) {
                        // Cached version of prime
                        if (primes[name]) return primes[name];

                        var prime;
                        if (name === "k256") {
                            prime = new K256();
                        } else if (name === "p224") {
                            prime = new P224();
                        } else if (name === "p192") {
                            prime = new P192();
                        } else if (name === "p25519") {
                            prime = new P25519();
                        } else {
                            throw new Error("Unknown prime " + name);
                        }
                        primes[name] = prime;

                        return prime;
                    };

                    //
                    // Base reduction engine
                    //
                    function Red(m) {
                        if (typeof m === "string") {
                            var prime = BN._prime(m);
                            this.m = prime.p;
                            this.prime = prime;
                        } else {
                            assert(m.gtn(1), "modulus must be greater than 1");
                            this.m = m;
                            this.prime = null;
                        }
                    }

                    Red.prototype._verify1 = function _verify1(a) {
                        assert(
                            a.negative === 0,
                            "red works only with positives"
                        );
                        assert(a.red, "red works only with red numbers");
                    };

                    Red.prototype._verify2 = function _verify2(a, b) {
                        assert(
                            (a.negative | b.negative) === 0,
                            "red works only with positives"
                        );
                        assert(
                            a.red && a.red === b.red,
                            "red works only with red numbers"
                        );
                    };

                    Red.prototype.imod = function imod(a) {
                        if (this.prime)
                            return this.prime.ireduce(a)._forceRed(this);

                        a.umod(this.m)._forceRed(this)._move(a);
                        return a;
                    };

                    Red.prototype.neg = function neg(a) {
                        if (a.isZero()) {
                            return a.clone();
                        }

                        return this.m.sub(a)._forceRed(this);
                    };

                    Red.prototype.add = function add(a, b) {
                        this._verify2(a, b);

                        var res = a.add(b);
                        if (res.cmp(this.m) >= 0) {
                            res.isub(this.m);
                        }
                        return res._forceRed(this);
                    };

                    Red.prototype.iadd = function iadd(a, b) {
                        this._verify2(a, b);

                        var res = a.iadd(b);
                        if (res.cmp(this.m) >= 0) {
                            res.isub(this.m);
                        }
                        return res;
                    };

                    Red.prototype.sub = function sub(a, b) {
                        this._verify2(a, b);

                        var res = a.sub(b);
                        if (res.cmpn(0) < 0) {
                            res.iadd(this.m);
                        }
                        return res._forceRed(this);
                    };

                    Red.prototype.isub = function isub(a, b) {
                        this._verify2(a, b);

                        var res = a.isub(b);
                        if (res.cmpn(0) < 0) {
                            res.iadd(this.m);
                        }
                        return res;
                    };

                    Red.prototype.shl = function shl(a, num) {
                        this._verify1(a);
                        return this.imod(a.ushln(num));
                    };

                    Red.prototype.imul = function imul(a, b) {
                        this._verify2(a, b);
                        return this.imod(a.imul(b));
                    };

                    Red.prototype.mul = function mul(a, b) {
                        this._verify2(a, b);
                        return this.imod(a.mul(b));
                    };

                    Red.prototype.isqr = function isqr(a) {
                        return this.imul(a, a.clone());
                    };

                    Red.prototype.sqr = function sqr(a) {
                        return this.mul(a, a);
                    };

                    Red.prototype.sqrt = function sqrt(a) {
                        if (a.isZero()) return a.clone();

                        var mod3 = this.m.andln(3);
                        assert(mod3 % 2 === 1);

                        // Fast case
                        if (mod3 === 3) {
                            var pow = this.m.add(new BN(1)).iushrn(2);
                            return this.pow(a, pow);
                        }

                        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
                        //
                        // Find Q and S, that Q * 2 ^ S = (P - 1)
                        var q = this.m.subn(1);
                        var s = 0;
                        while (!q.isZero() && q.andln(1) === 0) {
                            s++;
                            q.iushrn(1);
                        }
                        assert(!q.isZero());

                        var one = new BN(1).toRed(this);
                        var nOne = one.redNeg();

                        // Find quadratic non-residue
                        // NOTE: Max is such because of generalized Riemann hypothesis.
                        var lpow = this.m.subn(1).iushrn(1);
                        var z = this.m.bitLength();
                        z = new BN(2 * z * z).toRed(this);

                        while (this.pow(z, lpow).cmp(nOne) !== 0) {
                            z.redIAdd(nOne);
                        }

                        var c = this.pow(z, q);
                        var r = this.pow(a, q.addn(1).iushrn(1));
                        var t = this.pow(a, q);
                        var m = s;
                        while (t.cmp(one) !== 0) {
                            var tmp = t;
                            for (var i = 0; tmp.cmp(one) !== 0; i++) {
                                tmp = tmp.redSqr();
                            }
                            assert(i < m);
                            var b = this.pow(c, new BN(1).iushln(m - i - 1));

                            r = r.redMul(b);
                            c = b.redSqr();
                            t = t.redMul(c);
                            m = i;
                        }

                        return r;
                    };

                    Red.prototype.invm = function invm(a) {
                        var inv = a._invmp(this.m);
                        if (inv.negative !== 0) {
                            inv.negative = 0;
                            return this.imod(inv).redNeg();
                        } else {
                            return this.imod(inv);
                        }
                    };

                    Red.prototype.pow = function pow(a, num) {
                        if (num.isZero()) return new BN(1).toRed(this);
                        if (num.cmpn(1) === 0) return a.clone();

                        var windowSize = 4;
                        var wnd = new Array(1 << windowSize);
                        wnd[0] = new BN(1).toRed(this);
                        wnd[1] = a;
                        for (var i = 2; i < wnd.length; i++) {
                            wnd[i] = this.mul(wnd[i - 1], a);
                        }

                        var res = wnd[0];
                        var current = 0;
                        var currentLen = 0;
                        var start = num.bitLength() % 26;
                        if (start === 0) {
                            start = 26;
                        }

                        for (i = num.length - 1; i >= 0; i--) {
                            var word = num.words[i];
                            for (var j = start - 1; j >= 0; j--) {
                                var bit = (word >> j) & 1;
                                if (res !== wnd[0]) {
                                    res = this.sqr(res);
                                }

                                if (bit === 0 && current === 0) {
                                    currentLen = 0;
                                    continue;
                                }

                                current <<= 1;
                                current |= bit;
                                currentLen++;
                                if (
                                    currentLen !== windowSize &&
                                    (i !== 0 || j !== 0)
                                )
                                    continue;

                                res = this.mul(res, wnd[current]);
                                currentLen = 0;
                                current = 0;
                            }
                            start = 26;
                        }

                        return res;
                    };

                    Red.prototype.convertTo = function convertTo(num) {
                        var r = num.umod(this.m);

                        return r === num ? r.clone() : r;
                    };

                    Red.prototype.convertFrom = function convertFrom(num) {
                        var res = num.clone();
                        res.red = null;
                        return res;
                    };

                    //
                    // Montgomery method engine
                    //

                    BN.mont = function mont(num) {
                        return new Mont(num);
                    };

                    function Mont(m) {
                        Red.call(this, m);

                        this.shift = this.m.bitLength();
                        if (this.shift % 26 !== 0) {
                            this.shift += 26 - (this.shift % 26);
                        }

                        this.r = new BN(1).iushln(this.shift);
                        this.r2 = this.imod(this.r.sqr());
                        this.rinv = this.r._invmp(this.m);

                        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
                        this.minv = this.minv.umod(this.r);
                        this.minv = this.r.sub(this.minv);
                    }
                    inherits(Mont, Red);

                    Mont.prototype.convertTo = function convertTo(num) {
                        return this.imod(num.ushln(this.shift));
                    };

                    Mont.prototype.convertFrom = function convertFrom(num) {
                        var r = this.imod(num.mul(this.rinv));
                        r.red = null;
                        return r;
                    };

                    Mont.prototype.imul = function imul(a, b) {
                        if (a.isZero() || b.isZero()) {
                            a.words[0] = 0;
                            a.length = 1;
                            return a;
                        }

                        var t = a.imul(b);
                        var c = t
                            .maskn(this.shift)
                            .mul(this.minv)
                            .imaskn(this.shift)
                            .mul(this.m);
                        var u = t.isub(c).iushrn(this.shift);
                        var res = u;

                        if (u.cmp(this.m) >= 0) {
                            res = u.isub(this.m);
                        } else if (u.cmpn(0) < 0) {
                            res = u.iadd(this.m);
                        }

                        return res._forceRed(this);
                    };

                    Mont.prototype.mul = function mul(a, b) {
                        if (a.isZero() || b.isZero())
                            return new BN(0)._forceRed(this);

                        var t = a.mul(b);
                        var c = t
                            .maskn(this.shift)
                            .mul(this.minv)
                            .imaskn(this.shift)
                            .mul(this.m);
                        var u = t.isub(c).iushrn(this.shift);
                        var res = u;
                        if (u.cmp(this.m) >= 0) {
                            res = u.isub(this.m);
                        } else if (u.cmpn(0) < 0) {
                            res = u.iadd(this.m);
                        }

                        return res._forceRed(this);
                    };

                    Mont.prototype.invm = function invm(a) {
                        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
                        var res = this.imod(a._invmp(this.m).mul(this.r2));
                        return res._forceRed(this);
                    };
                })(typeof module === "undefined" || module, this);
            },
            { buffer: 80 },
        ],
        33: [
            function (require, module, exports) {
                (function (root, factory) {
                    if (typeof exports === "object") {
                        // CommonJS
                        module.exports = exports = factory();
                    } else if (typeof define === "function" && define.amd) {
                        // AMD
                        define([], factory);
                    } else {
                        // Global (browser)
                        root.CryptoJS = factory();
                    }
                })(this, function () {
                    /**
                     * CryptoJS core components.
                     */
                    var CryptoJS =
                        CryptoJS ||
                        (function (Math, undefined) {
                            /*
                             * Local polyfil of Object.create
                             */
                            var create =
                                Object.create ||
                                (function () {
                                    function F() {}

                                    return function (obj) {
                                        var subtype;

                                        F.prototype = obj;

                                        subtype = new F();

                                        F.prototype = null;

                                        return subtype;
                                    };
                                })();

                            /**
                             * CryptoJS namespace.
                             */
                            var C = {};

                            /**
                             * Library namespace.
                             */
                            var C_lib = (C.lib = {});

                            /**
                             * Base object for prototypal inheritance.
                             */
                            var Base = (C_lib.Base = (function () {
                                return {
                                    /**
                                     * Creates a new object that inherits from this object.
                                     *
                                     * @param {Object} overrides Properties to copy into the new object.
                                     *
                                     * @return {Object} The new object.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var MyType = CryptoJS.lib.Base.extend({
                                     *         field: 'value',
                                     *
                                     *         method: function () {
                                     *         }
                                     *     });
                                     */
                                    extend: function (overrides) {
                                        // Spawn
                                        var subtype = create(this);

                                        // Augment
                                        if (overrides) {
                                            subtype.mixIn(overrides);
                                        }

                                        // Create default initializer
                                        if (
                                            !subtype.hasOwnProperty("init") ||
                                            this.init === subtype.init
                                        ) {
                                            subtype.init = function () {
                                                subtype.$super.init.apply(
                                                    this,
                                                    arguments
                                                );
                                            };
                                        }

                                        // Initializer's prototype is the subtype object
                                        subtype.init.prototype = subtype;

                                        // Reference supertype
                                        subtype.$super = this;

                                        return subtype;
                                    },

                                    /**
                                     * Extends this object and runs the init method.
                                     * Arguments to create() will be passed to init().
                                     *
                                     * @return {Object} The new object.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var instance = MyType.create();
                                     */
                                    create: function () {
                                        var instance = this.extend();
                                        instance.init.apply(
                                            instance,
                                            arguments
                                        );

                                        return instance;
                                    },

                                    /**
                                     * Initializes a newly created object.
                                     * Override this method to add some logic when your objects are created.
                                     *
                                     * @example
                                     *
                                     *     var MyType = CryptoJS.lib.Base.extend({
                                     *         init: function () {
                                     *             // ...
                                     *         }
                                     *     });
                                     */
                                    init: function () {},

                                    /**
                                     * Copies properties into this object.
                                     *
                                     * @param {Object} properties The properties to mix in.
                                     *
                                     * @example
                                     *
                                     *     MyType.mixIn({
                                     *         field: 'value'
                                     *     });
                                     */
                                    mixIn: function (properties) {
                                        for (var propertyName in properties) {
                                            if (
                                                properties.hasOwnProperty(
                                                    propertyName
                                                )
                                            ) {
                                                this[propertyName] =
                                                    properties[propertyName];
                                            }
                                        }

                                        // IE won't copy toString using the loop above
                                        if (
                                            properties.hasOwnProperty(
                                                "toString"
                                            )
                                        ) {
                                            this.toString = properties.toString;
                                        }
                                    },

                                    /**
                                     * Creates a copy of this object.
                                     *
                                     * @return {Object} The clone.
                                     *
                                     * @example
                                     *
                                     *     var clone = instance.clone();
                                     */
                                    clone: function () {
                                        return this.init.prototype.extend(this);
                                    },
                                };
                            })());

                            /**
                             * An array of 32-bit words.
                             *
                             * @property {Array} words The array of 32-bit words.
                             * @property {number} sigBytes The number of significant bytes in this word array.
                             */
                            var WordArray = (C_lib.WordArray = Base.extend({
                                /**
                                 * Initializes a newly created word array.
                                 *
                                 * @param {Array} words (Optional) An array of 32-bit words.
                                 * @param {number} sigBytes (Optional) The number of significant bytes in the words.
                                 *
                                 * @example
                                 *
                                 *     var wordArray = CryptoJS.lib.WordArray.create();
                                 *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
                                 *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
                                 */
                                init: function (words, sigBytes) {
                                    words = this.words = words || [];

                                    if (sigBytes != undefined) {
                                        this.sigBytes = sigBytes;
                                    } else {
                                        this.sigBytes = words.length * 4;
                                    }
                                },

                                /**
                                 * Converts this word array to a string.
                                 *
                                 * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
                                 *
                                 * @return {string} The stringified word array.
                                 *
                                 * @example
                                 *
                                 *     var string = wordArray + '';
                                 *     var string = wordArray.toString();
                                 *     var string = wordArray.toString(CryptoJS.enc.Utf8);
                                 */
                                toString: function (encoder) {
                                    return (encoder || Hex).stringify(this);
                                },

                                /**
                                 * Concatenates a word array to this word array.
                                 *
                                 * @param {WordArray} wordArray The word array to append.
                                 *
                                 * @return {WordArray} This word array.
                                 *
                                 * @example
                                 *
                                 *     wordArray1.concat(wordArray2);
                                 */
                                concat: function (wordArray) {
                                    // Shortcuts
                                    var thisWords = this.words;
                                    var thatWords = wordArray.words;
                                    var thisSigBytes = this.sigBytes;
                                    var thatSigBytes = wordArray.sigBytes;

                                    // Clamp excess bits
                                    this.clamp();

                                    // Concat
                                    if (thisSigBytes % 4) {
                                        // Copy one byte at a time
                                        for (var i = 0; i < thatSigBytes; i++) {
                                            var thatByte =
                                                (thatWords[i >>> 2] >>>
                                                    (24 - (i % 4) * 8)) &
                                                0xff;
                                            thisWords[
                                                (thisSigBytes + i) >>> 2
                                            ] |=
                                                thatByte <<
                                                (24 -
                                                    ((thisSigBytes + i) % 4) *
                                                        8);
                                        }
                                    } else {
                                        // Copy one word at a time
                                        for (
                                            var i = 0;
                                            i < thatSigBytes;
                                            i += 4
                                        ) {
                                            thisWords[
                                                (thisSigBytes + i) >>> 2
                                            ] = thatWords[i >>> 2];
                                        }
                                    }
                                    this.sigBytes += thatSigBytes;

                                    // Chainable
                                    return this;
                                },

                                /**
                                 * Removes insignificant bits.
                                 *
                                 * @example
                                 *
                                 *     wordArray.clamp();
                                 */
                                clamp: function () {
                                    // Shortcuts
                                    var words = this.words;
                                    var sigBytes = this.sigBytes;

                                    // Clamp
                                    words[sigBytes >>> 2] &=
                                        0xffffffff << (32 - (sigBytes % 4) * 8);
                                    words.length = Math.ceil(sigBytes / 4);
                                },

                                /**
                                 * Creates a copy of this word array.
                                 *
                                 * @return {WordArray} The clone.
                                 *
                                 * @example
                                 *
                                 *     var clone = wordArray.clone();
                                 */
                                clone: function () {
                                    var clone = Base.clone.call(this);
                                    clone.words = this.words.slice(0);

                                    return clone;
                                },

                                /**
                                 * Creates a word array filled with random bytes.
                                 *
                                 * @param {number} nBytes The number of random bytes to generate.
                                 *
                                 * @return {WordArray} The random word array.
                                 *
                                 * @static
                                 *
                                 * @example
                                 *
                                 *     var wordArray = CryptoJS.lib.WordArray.random(16);
                                 */
                                random: function (nBytes) {
                                    var words = [];

                                    var r = function (m_w) {
                                        var m_w = m_w;
                                        var m_z = 0x3ade68b1;
                                        var mask = 0xffffffff;

                                        return function () {
                                            m_z =
                                                (0x9069 * (m_z & 0xffff) +
                                                    (m_z >> 0x10)) &
                                                mask;
                                            m_w =
                                                (0x4650 * (m_w & 0xffff) +
                                                    (m_w >> 0x10)) &
                                                mask;
                                            var result =
                                                ((m_z << 0x10) + m_w) & mask;
                                            result /= 0x100000000;
                                            result += 0.5;
                                            return (
                                                result *
                                                (Math.random() > 0.5 ? 1 : -1)
                                            );
                                        };
                                    };

                                    for (
                                        var i = 0, rcache;
                                        i < nBytes;
                                        i += 4
                                    ) {
                                        var _r = r(
                                            (rcache || Math.random()) *
                                                0x100000000
                                        );

                                        rcache = _r() * 0x3ade67b7;
                                        words.push((_r() * 0x100000000) | 0);
                                    }

                                    return new WordArray.init(words, nBytes);
                                },
                            }));

                            /**
                             * Encoder namespace.
                             */
                            var C_enc = (C.enc = {});

                            /**
                             * Hex encoding strategy.
                             */
                            var Hex = (C_enc.Hex = {
                                /**
                                 * Converts a word array to a hex string.
                                 *
                                 * @param {WordArray} wordArray The word array.
                                 *
                                 * @return {string} The hex string.
                                 *
                                 * @static
                                 *
                                 * @example
                                 *
                                 *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
                                 */
                                stringify: function (wordArray) {
                                    // Shortcuts
                                    var words = wordArray.words;
                                    var sigBytes = wordArray.sigBytes;

                                    // Convert
                                    var hexChars = [];
                                    for (var i = 0; i < sigBytes; i++) {
                                        var bite =
                                            (words[i >>> 2] >>>
                                                (24 - (i % 4) * 8)) &
                                            0xff;
                                        hexChars.push(
                                            (bite >>> 4).toString(16)
                                        );
                                        hexChars.push(
                                            (bite & 0x0f).toString(16)
                                        );
                                    }

                                    return hexChars.join("");
                                },

                                /**
                                 * Converts a hex string to a word array.
                                 *
                                 * @param {string} hexStr The hex string.
                                 *
                                 * @return {WordArray} The word array.
                                 *
                                 * @static
                                 *
                                 * @example
                                 *
                                 *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
                                 */
                                parse: function (hexStr) {
                                    // Shortcut
                                    var hexStrLength = hexStr.length;

                                    // Convert
                                    var words = [];
                                    for (var i = 0; i < hexStrLength; i += 2) {
                                        words[i >>> 3] |=
                                            parseInt(hexStr.substr(i, 2), 16) <<
                                            (24 - (i % 8) * 4);
                                    }

                                    return new WordArray.init(
                                        words,
                                        hexStrLength / 2
                                    );
                                },
                            });

                            /**
                             * Latin1 encoding strategy.
                             */
                            var Latin1 = (C_enc.Latin1 = {
                                /**
                                 * Converts a word array to a Latin1 string.
                                 *
                                 * @param {WordArray} wordArray The word array.
                                 *
                                 * @return {string} The Latin1 string.
                                 *
                                 * @static
                                 *
                                 * @example
                                 *
                                 *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
                                 */
                                stringify: function (wordArray) {
                                    // Shortcuts
                                    var words = wordArray.words;
                                    var sigBytes = wordArray.sigBytes;

                                    // Convert
                                    var latin1Chars = [];
                                    for (var i = 0; i < sigBytes; i++) {
                                        var bite =
                                            (words[i >>> 2] >>>
                                                (24 - (i % 4) * 8)) &
                                            0xff;
                                        latin1Chars.push(
                                            String.fromCharCode(bite)
                                        );
                                    }

                                    return latin1Chars.join("");
                                },

                                /**
                                 * Converts a Latin1 string to a word array.
                                 *
                                 * @param {string} latin1Str The Latin1 string.
                                 *
                                 * @return {WordArray} The word array.
                                 *
                                 * @static
                                 *
                                 * @example
                                 *
                                 *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
                                 */
                                parse: function (latin1Str) {
                                    // Shortcut
                                    var latin1StrLength = latin1Str.length;

                                    // Convert
                                    var words = [];
                                    for (var i = 0; i < latin1StrLength; i++) {
                                        words[i >>> 2] |=
                                            (latin1Str.charCodeAt(i) & 0xff) <<
                                            (24 - (i % 4) * 8);
                                    }

                                    return new WordArray.init(
                                        words,
                                        latin1StrLength
                                    );
                                },
                            });

                            /**
                             * UTF-8 encoding strategy.
                             */
                            var Utf8 = (C_enc.Utf8 = {
                                /**
                                 * Converts a word array to a UTF-8 string.
                                 *
                                 * @param {WordArray} wordArray The word array.
                                 *
                                 * @return {string} The UTF-8 string.
                                 *
                                 * @static
                                 *
                                 * @example
                                 *
                                 *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
                                 */
                                stringify: function (wordArray) {
                                    try {
                                        return decodeURIComponent(
                                            escape(Latin1.stringify(wordArray))
                                        );
                                    } catch (e) {
                                        throw new Error("Malformed UTF-8 data");
                                    }
                                },

                                /**
                                 * Converts a UTF-8 string to a word array.
                                 *
                                 * @param {string} utf8Str The UTF-8 string.
                                 *
                                 * @return {WordArray} The word array.
                                 *
                                 * @static
                                 *
                                 * @example
                                 *
                                 *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
                                 */
                                parse: function (utf8Str) {
                                    return Latin1.parse(
                                        unescape(encodeURIComponent(utf8Str))
                                    );
                                },
                            });

                            /**
                             * Abstract buffered block algorithm template.
                             *
                             * The property blockSize must be implemented in a concrete subtype.
                             *
                             * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
                             */
                            var BufferedBlockAlgorithm =
                                (C_lib.BufferedBlockAlgorithm = Base.extend({
                                    /**
                                     * Resets this block algorithm's data buffer to its initial state.
                                     *
                                     * @example
                                     *
                                     *     bufferedBlockAlgorithm.reset();
                                     */
                                    reset: function () {
                                        // Initial values
                                        this._data = new WordArray.init();
                                        this._nDataBytes = 0;
                                    },

                                    /**
                                     * Adds new data to this block algorithm's buffer.
                                     *
                                     * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
                                     *
                                     * @example
                                     *
                                     *     bufferedBlockAlgorithm._append('data');
                                     *     bufferedBlockAlgorithm._append(wordArray);
                                     */
                                    _append: function (data) {
                                        // Convert string to WordArray, else assume WordArray already
                                        if (typeof data == "string") {
                                            data = Utf8.parse(data);
                                        }

                                        // Append
                                        this._data.concat(data);
                                        this._nDataBytes += data.sigBytes;
                                    },

                                    /**
                                     * Processes available data blocks.
                                     *
                                     * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
                                     *
                                     * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
                                     *
                                     * @return {WordArray} The processed data.
                                     *
                                     * @example
                                     *
                                     *     var processedData = bufferedBlockAlgorithm._process();
                                     *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
                                     */
                                    _process: function (doFlush) {
                                        // Shortcuts
                                        var data = this._data;
                                        var dataWords = data.words;
                                        var dataSigBytes = data.sigBytes;
                                        var blockSize = this.blockSize;
                                        var blockSizeBytes = blockSize * 4;

                                        // Count blocks ready
                                        var nBlocksReady =
                                            dataSigBytes / blockSizeBytes;
                                        if (doFlush) {
                                            // Round up to include partial blocks
                                            nBlocksReady =
                                                Math.ceil(nBlocksReady);
                                        } else {
                                            // Round down to include only full blocks,
                                            // less the number of blocks that must remain in the buffer
                                            nBlocksReady = Math.max(
                                                (nBlocksReady | 0) -
                                                    this._minBufferSize,
                                                0
                                            );
                                        }

                                        // Count words ready
                                        var nWordsReady =
                                            nBlocksReady * blockSize;

                                        // Count bytes ready
                                        var nBytesReady = Math.min(
                                            nWordsReady * 4,
                                            dataSigBytes
                                        );

                                        // Process blocks
                                        if (nWordsReady) {
                                            for (
                                                var offset = 0;
                                                offset < nWordsReady;
                                                offset += blockSize
                                            ) {
                                                // Perform concrete-algorithm logic
                                                this._doProcessBlock(
                                                    dataWords,
                                                    offset
                                                );
                                            }

                                            // Remove processed words
                                            var processedWords =
                                                dataWords.splice(
                                                    0,
                                                    nWordsReady
                                                );
                                            data.sigBytes -= nBytesReady;
                                        }

                                        // Return processed words
                                        return new WordArray.init(
                                            processedWords,
                                            nBytesReady
                                        );
                                    },

                                    /**
                                     * Creates a copy of this object.
                                     *
                                     * @return {Object} The clone.
                                     *
                                     * @example
                                     *
                                     *     var clone = bufferedBlockAlgorithm.clone();
                                     */
                                    clone: function () {
                                        var clone = Base.clone.call(this);
                                        clone._data = this._data.clone();

                                        return clone;
                                    },

                                    _minBufferSize: 0,
                                }));

                            /**
                             * Abstract hasher template.
                             *
                             * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
                             */
                            var Hasher = (C_lib.Hasher =
                                BufferedBlockAlgorithm.extend({
                                    /**
                                     * Configuration options.
                                     */
                                    cfg: Base.extend(),

                                    /**
                                     * Initializes a newly created hasher.
                                     *
                                     * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
                                     *
                                     * @example
                                     *
                                     *     var hasher = CryptoJS.algo.SHA256.create();
                                     */
                                    init: function (cfg) {
                                        // Apply config defaults
                                        this.cfg = this.cfg.extend(cfg);

                                        // Set initial values
                                        this.reset();
                                    },

                                    /**
                                     * Resets this hasher to its initial state.
                                     *
                                     * @example
                                     *
                                     *     hasher.reset();
                                     */
                                    reset: function () {
                                        // Reset data buffer
                                        BufferedBlockAlgorithm.reset.call(this);

                                        // Perform concrete-hasher logic
                                        this._doReset();
                                    },

                                    /**
                                     * Updates this hasher with a message.
                                     *
                                     * @param {WordArray|string} messageUpdate The message to append.
                                     *
                                     * @return {Hasher} This hasher.
                                     *
                                     * @example
                                     *
                                     *     hasher.update('message');
                                     *     hasher.update(wordArray);
                                     */
                                    update: function (messageUpdate) {
                                        // Append
                                        this._append(messageUpdate);

                                        // Update the hash
                                        this._process();

                                        // Chainable
                                        return this;
                                    },

                                    /**
                                     * Finalizes the hash computation.
                                     * Note that the finalize operation is effectively a destructive, read-once operation.
                                     *
                                     * @param {WordArray|string} messageUpdate (Optional) A final message update.
                                     *
                                     * @return {WordArray} The hash.
                                     *
                                     * @example
                                     *
                                     *     var hash = hasher.finalize();
                                     *     var hash = hasher.finalize('message');
                                     *     var hash = hasher.finalize(wordArray);
                                     */
                                    finalize: function (messageUpdate) {
                                        // Final message update
                                        if (messageUpdate) {
                                            this._append(messageUpdate);
                                        }

                                        // Perform concrete-hasher logic
                                        var hash = this._doFinalize();

                                        return hash;
                                    },

                                    blockSize: 512 / 32,

                                    /**
                                     * Creates a shortcut function to a hasher's object interface.
                                     *
                                     * @param {Hasher} hasher The hasher to create a helper for.
                                     *
                                     * @return {Function} The shortcut function.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
                                     */
                                    _createHelper: function (hasher) {
                                        return function (message, cfg) {
                                            return new hasher.init(
                                                cfg
                                            ).finalize(message);
                                        };
                                    },

                                    /**
                                     * Creates a shortcut function to the HMAC's object interface.
                                     *
                                     * @param {Hasher} hasher The hasher to use in this HMAC helper.
                                     *
                                     * @return {Function} The shortcut function.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
                                     */
                                    _createHmacHelper: function (hasher) {
                                        return function (message, key) {
                                            return new C_algo.HMAC.init(
                                                hasher,
                                                key
                                            ).finalize(message);
                                        };
                                    },
                                }));

                            /**
                             * Algorithm namespace.
                             */
                            var C_algo = (C.algo = {});

                            return C;
                        })(Math);

                    (function () {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var WordArray = C_lib.WordArray;
                        var C_enc = C.enc;

                        /**
                         * Base64 encoding strategy.
                         */
                        var Base64 = (C_enc.Base64 = {
                            /**
                             * Converts a word array to a Base64 string.
                             *
                             * @param {WordArray} wordArray The word array.
                             *
                             * @return {string} The Base64 string.
                             *
                             * @static
                             *
                             * @example
                             *
                             *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
                             */
                            stringify: function (wordArray) {
                                // Shortcuts
                                var words = wordArray.words;
                                var sigBytes = wordArray.sigBytes;
                                var map = this._map;

                                // Clamp excess bits
                                wordArray.clamp();

                                // Convert
                                var base64Chars = [];
                                for (var i = 0; i < sigBytes; i += 3) {
                                    var byte1 =
                                        (words[i >>> 2] >>>
                                            (24 - (i % 4) * 8)) &
                                        0xff;
                                    var byte2 =
                                        (words[(i + 1) >>> 2] >>>
                                            (24 - ((i + 1) % 4) * 8)) &
                                        0xff;
                                    var byte3 =
                                        (words[(i + 2) >>> 2] >>>
                                            (24 - ((i + 2) % 4) * 8)) &
                                        0xff;

                                    var triplet =
                                        (byte1 << 16) | (byte2 << 8) | byte3;

                                    for (
                                        var j = 0;
                                        j < 4 && i + j * 0.75 < sigBytes;
                                        j++
                                    ) {
                                        base64Chars.push(
                                            map.charAt(
                                                (triplet >>> (6 * (3 - j))) &
                                                    0x3f
                                            )
                                        );
                                    }
                                }

                                // Add padding
                                var paddingChar = map.charAt(64);
                                if (paddingChar) {
                                    while (base64Chars.length % 4) {
                                        base64Chars.push(paddingChar);
                                    }
                                }

                                return base64Chars.join("");
                            },

                            /**
                             * Converts a Base64 string to a word array.
                             *
                             * @param {string} base64Str The Base64 string.
                             *
                             * @return {WordArray} The word array.
                             *
                             * @static
                             *
                             * @example
                             *
                             *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
                             */
                            parse: function (base64Str) {
                                // Shortcuts
                                var base64StrLength = base64Str.length;
                                var map = this._map;
                                var reverseMap = this._reverseMap;

                                if (!reverseMap) {
                                    reverseMap = this._reverseMap = [];
                                    for (var j = 0; j < map.length; j++) {
                                        reverseMap[map.charCodeAt(j)] = j;
                                    }
                                }

                                // Ignore padding
                                var paddingChar = map.charAt(64);
                                if (paddingChar) {
                                    var paddingIndex =
                                        base64Str.indexOf(paddingChar);
                                    if (paddingIndex !== -1) {
                                        base64StrLength = paddingIndex;
                                    }
                                }

                                // Convert
                                return parseLoop(
                                    base64Str,
                                    base64StrLength,
                                    reverseMap
                                );
                            },

                            _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
                        });

                        function parseLoop(
                            base64Str,
                            base64StrLength,
                            reverseMap
                        ) {
                            var words = [];
                            var nBytes = 0;
                            for (var i = 0; i < base64StrLength; i++) {
                                if (i % 4) {
                                    var bits1 =
                                        reverseMap[
                                            base64Str.charCodeAt(i - 1)
                                        ] <<
                                        ((i % 4) * 2);
                                    var bits2 =
                                        reverseMap[base64Str.charCodeAt(i)] >>>
                                        (6 - (i % 4) * 2);
                                    words[nBytes >>> 2] |=
                                        (bits1 | bits2) <<
                                        (24 - (nBytes % 4) * 8);
                                    nBytes++;
                                }
                            }
                            return WordArray.create(words, nBytes);
                        }
                    })();

                    (function (Math) {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var WordArray = C_lib.WordArray;
                        var Hasher = C_lib.Hasher;
                        var C_algo = C.algo;

                        // Constants table
                        var T = [];

                        // Compute constants
                        (function () {
                            for (var i = 0; i < 64; i++) {
                                T[i] =
                                    (Math.abs(Math.sin(i + 1)) * 0x100000000) |
                                    0;
                            }
                        })();

                        /**
                         * MD5 hash algorithm.
                         */
                        var MD5 = (C_algo.MD5 = Hasher.extend({
                            _doReset: function () {
                                this._hash = new WordArray.init([
                                    0x67452301, 0xefcdab89, 0x98badcfe,
                                    0x10325476,
                                ]);
                            },

                            _doProcessBlock: function (M, offset) {
                                // Swap endian
                                for (var i = 0; i < 16; i++) {
                                    // Shortcuts
                                    var offset_i = offset + i;
                                    var M_offset_i = M[offset_i];

                                    M[offset_i] =
                                        (((M_offset_i << 8) |
                                            (M_offset_i >>> 24)) &
                                            0x00ff00ff) |
                                        (((M_offset_i << 24) |
                                            (M_offset_i >>> 8)) &
                                            0xff00ff00);
                                }

                                // Shortcuts
                                var H = this._hash.words;

                                var M_offset_0 = M[offset + 0];
                                var M_offset_1 = M[offset + 1];
                                var M_offset_2 = M[offset + 2];
                                var M_offset_3 = M[offset + 3];
                                var M_offset_4 = M[offset + 4];
                                var M_offset_5 = M[offset + 5];
                                var M_offset_6 = M[offset + 6];
                                var M_offset_7 = M[offset + 7];
                                var M_offset_8 = M[offset + 8];
                                var M_offset_9 = M[offset + 9];
                                var M_offset_10 = M[offset + 10];
                                var M_offset_11 = M[offset + 11];
                                var M_offset_12 = M[offset + 12];
                                var M_offset_13 = M[offset + 13];
                                var M_offset_14 = M[offset + 14];
                                var M_offset_15 = M[offset + 15];

                                // Working varialbes
                                var a = H[0];
                                var b = H[1];
                                var c = H[2];
                                var d = H[3];

                                // Computation
                                a = FF(a, b, c, d, M_offset_0, 7, T[0]);
                                d = FF(d, a, b, c, M_offset_1, 12, T[1]);
                                c = FF(c, d, a, b, M_offset_2, 17, T[2]);
                                b = FF(b, c, d, a, M_offset_3, 22, T[3]);
                                a = FF(a, b, c, d, M_offset_4, 7, T[4]);
                                d = FF(d, a, b, c, M_offset_5, 12, T[5]);
                                c = FF(c, d, a, b, M_offset_6, 17, T[6]);
                                b = FF(b, c, d, a, M_offset_7, 22, T[7]);
                                a = FF(a, b, c, d, M_offset_8, 7, T[8]);
                                d = FF(d, a, b, c, M_offset_9, 12, T[9]);
                                c = FF(c, d, a, b, M_offset_10, 17, T[10]);
                                b = FF(b, c, d, a, M_offset_11, 22, T[11]);
                                a = FF(a, b, c, d, M_offset_12, 7, T[12]);
                                d = FF(d, a, b, c, M_offset_13, 12, T[13]);
                                c = FF(c, d, a, b, M_offset_14, 17, T[14]);
                                b = FF(b, c, d, a, M_offset_15, 22, T[15]);

                                a = GG(a, b, c, d, M_offset_1, 5, T[16]);
                                d = GG(d, a, b, c, M_offset_6, 9, T[17]);
                                c = GG(c, d, a, b, M_offset_11, 14, T[18]);
                                b = GG(b, c, d, a, M_offset_0, 20, T[19]);
                                a = GG(a, b, c, d, M_offset_5, 5, T[20]);
                                d = GG(d, a, b, c, M_offset_10, 9, T[21]);
                                c = GG(c, d, a, b, M_offset_15, 14, T[22]);
                                b = GG(b, c, d, a, M_offset_4, 20, T[23]);
                                a = GG(a, b, c, d, M_offset_9, 5, T[24]);
                                d = GG(d, a, b, c, M_offset_14, 9, T[25]);
                                c = GG(c, d, a, b, M_offset_3, 14, T[26]);
                                b = GG(b, c, d, a, M_offset_8, 20, T[27]);
                                a = GG(a, b, c, d, M_offset_13, 5, T[28]);
                                d = GG(d, a, b, c, M_offset_2, 9, T[29]);
                                c = GG(c, d, a, b, M_offset_7, 14, T[30]);
                                b = GG(b, c, d, a, M_offset_12, 20, T[31]);

                                a = HH(a, b, c, d, M_offset_5, 4, T[32]);
                                d = HH(d, a, b, c, M_offset_8, 11, T[33]);
                                c = HH(c, d, a, b, M_offset_11, 16, T[34]);
                                b = HH(b, c, d, a, M_offset_14, 23, T[35]);
                                a = HH(a, b, c, d, M_offset_1, 4, T[36]);
                                d = HH(d, a, b, c, M_offset_4, 11, T[37]);
                                c = HH(c, d, a, b, M_offset_7, 16, T[38]);
                                b = HH(b, c, d, a, M_offset_10, 23, T[39]);
                                a = HH(a, b, c, d, M_offset_13, 4, T[40]);
                                d = HH(d, a, b, c, M_offset_0, 11, T[41]);
                                c = HH(c, d, a, b, M_offset_3, 16, T[42]);
                                b = HH(b, c, d, a, M_offset_6, 23, T[43]);
                                a = HH(a, b, c, d, M_offset_9, 4, T[44]);
                                d = HH(d, a, b, c, M_offset_12, 11, T[45]);
                                c = HH(c, d, a, b, M_offset_15, 16, T[46]);
                                b = HH(b, c, d, a, M_offset_2, 23, T[47]);

                                a = II(a, b, c, d, M_offset_0, 6, T[48]);
                                d = II(d, a, b, c, M_offset_7, 10, T[49]);
                                c = II(c, d, a, b, M_offset_14, 15, T[50]);
                                b = II(b, c, d, a, M_offset_5, 21, T[51]);
                                a = II(a, b, c, d, M_offset_12, 6, T[52]);
                                d = II(d, a, b, c, M_offset_3, 10, T[53]);
                                c = II(c, d, a, b, M_offset_10, 15, T[54]);
                                b = II(b, c, d, a, M_offset_1, 21, T[55]);
                                a = II(a, b, c, d, M_offset_8, 6, T[56]);
                                d = II(d, a, b, c, M_offset_15, 10, T[57]);
                                c = II(c, d, a, b, M_offset_6, 15, T[58]);
                                b = II(b, c, d, a, M_offset_13, 21, T[59]);
                                a = II(a, b, c, d, M_offset_4, 6, T[60]);
                                d = II(d, a, b, c, M_offset_11, 10, T[61]);
                                c = II(c, d, a, b, M_offset_2, 15, T[62]);
                                b = II(b, c, d, a, M_offset_9, 21, T[63]);

                                // Intermediate hash value
                                H[0] = (H[0] + a) | 0;
                                H[1] = (H[1] + b) | 0;
                                H[2] = (H[2] + c) | 0;
                                H[3] = (H[3] + d) | 0;
                            },

                            _doFinalize: function () {
                                // Shortcuts
                                var data = this._data;
                                var dataWords = data.words;

                                var nBitsTotal = this._nDataBytes * 8;
                                var nBitsLeft = data.sigBytes * 8;

                                // Add padding
                                dataWords[nBitsLeft >>> 5] |=
                                    0x80 << (24 - (nBitsLeft % 32));

                                var nBitsTotalH = Math.floor(
                                    nBitsTotal / 0x100000000
                                );
                                var nBitsTotalL = nBitsTotal;
                                dataWords[
                                    (((nBitsLeft + 64) >>> 9) << 4) + 15
                                ] =
                                    (((nBitsTotalH << 8) |
                                        (nBitsTotalH >>> 24)) &
                                        0x00ff00ff) |
                                    (((nBitsTotalH << 24) |
                                        (nBitsTotalH >>> 8)) &
                                        0xff00ff00);
                                dataWords[
                                    (((nBitsLeft + 64) >>> 9) << 4) + 14
                                ] =
                                    (((nBitsTotalL << 8) |
                                        (nBitsTotalL >>> 24)) &
                                        0x00ff00ff) |
                                    (((nBitsTotalL << 24) |
                                        (nBitsTotalL >>> 8)) &
                                        0xff00ff00);

                                data.sigBytes = (dataWords.length + 1) * 4;

                                // Hash final blocks
                                this._process();

                                // Shortcuts
                                var hash = this._hash;
                                var H = hash.words;

                                // Swap endian
                                for (var i = 0; i < 4; i++) {
                                    // Shortcut
                                    var H_i = H[i];

                                    H[i] =
                                        (((H_i << 8) | (H_i >>> 24)) &
                                            0x00ff00ff) |
                                        (((H_i << 24) | (H_i >>> 8)) &
                                            0xff00ff00);
                                }

                                // Return final computed hash
                                return hash;
                            },

                            clone: function () {
                                var clone = Hasher.clone.call(this);
                                clone._hash = this._hash.clone();

                                return clone;
                            },
                        }));

                        function FF(a, b, c, d, x, s, t) {
                            var n = a + ((b & c) | (~b & d)) + x + t;
                            return ((n << s) | (n >>> (32 - s))) + b;
                        }

                        function GG(a, b, c, d, x, s, t) {
                            var n = a + ((b & d) | (c & ~d)) + x + t;
                            return ((n << s) | (n >>> (32 - s))) + b;
                        }

                        function HH(a, b, c, d, x, s, t) {
                            var n = a + (b ^ c ^ d) + x + t;
                            return ((n << s) | (n >>> (32 - s))) + b;
                        }

                        function II(a, b, c, d, x, s, t) {
                            var n = a + (c ^ (b | ~d)) + x + t;
                            return ((n << s) | (n >>> (32 - s))) + b;
                        }

                        /**
                         * Shortcut function to the hasher's object interface.
                         *
                         * @param {WordArray|string} message The message to hash.
                         *
                         * @return {WordArray} The hash.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hash = CryptoJS.MD5('message');
                         *     var hash = CryptoJS.MD5(wordArray);
                         */
                        C.MD5 = Hasher._createHelper(MD5);

                        /**
                         * Shortcut function to the HMAC's object interface.
                         *
                         * @param {WordArray|string} message The message to hash.
                         * @param {WordArray|string} key The secret key.
                         *
                         * @return {WordArray} The HMAC.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hmac = CryptoJS.HmacMD5(message, key);
                         */
                        C.HmacMD5 = Hasher._createHmacHelper(MD5);
                    })(Math);

                    (function () {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var WordArray = C_lib.WordArray;
                        var Hasher = C_lib.Hasher;
                        var C_algo = C.algo;

                        // Reusable object
                        var W = [];

                        /**
                         * SHA-1 hash algorithm.
                         */
                        var SHA1 = (C_algo.SHA1 = Hasher.extend({
                            _doReset: function () {
                                this._hash = new WordArray.init([
                                    0x67452301, 0xefcdab89, 0x98badcfe,
                                    0x10325476, 0xc3d2e1f0,
                                ]);
                            },

                            _doProcessBlock: function (M, offset) {
                                // Shortcut
                                var H = this._hash.words;

                                // Working variables
                                var a = H[0];
                                var b = H[1];
                                var c = H[2];
                                var d = H[3];
                                var e = H[4];

                                // Computation
                                for (var i = 0; i < 80; i++) {
                                    if (i < 16) {
                                        W[i] = M[offset + i] | 0;
                                    } else {
                                        var n =
                                            W[i - 3] ^
                                            W[i - 8] ^
                                            W[i - 14] ^
                                            W[i - 16];
                                        W[i] = (n << 1) | (n >>> 31);
                                    }

                                    var t = ((a << 5) | (a >>> 27)) + e + W[i];
                                    if (i < 20) {
                                        t += ((b & c) | (~b & d)) + 0x5a827999;
                                    } else if (i < 40) {
                                        t += (b ^ c ^ d) + 0x6ed9eba1;
                                    } else if (i < 60) {
                                        t +=
                                            ((b & c) | (b & d) | (c & d)) -
                                            0x70e44324;
                                    } /* if (i < 80) */ else {
                                        t += (b ^ c ^ d) - 0x359d3e2a;
                                    }

                                    e = d;
                                    d = c;
                                    c = (b << 30) | (b >>> 2);
                                    b = a;
                                    a = t;
                                }

                                // Intermediate hash value
                                H[0] = (H[0] + a) | 0;
                                H[1] = (H[1] + b) | 0;
                                H[2] = (H[2] + c) | 0;
                                H[3] = (H[3] + d) | 0;
                                H[4] = (H[4] + e) | 0;
                            },

                            _doFinalize: function () {
                                // Shortcuts
                                var data = this._data;
                                var dataWords = data.words;

                                var nBitsTotal = this._nDataBytes * 8;
                                var nBitsLeft = data.sigBytes * 8;

                                // Add padding
                                dataWords[nBitsLeft >>> 5] |=
                                    0x80 << (24 - (nBitsLeft % 32));
                                dataWords[
                                    (((nBitsLeft + 64) >>> 9) << 4) + 14
                                ] = Math.floor(nBitsTotal / 0x100000000);
                                dataWords[
                                    (((nBitsLeft + 64) >>> 9) << 4) + 15
                                ] = nBitsTotal;
                                data.sigBytes = dataWords.length * 4;

                                // Hash final blocks
                                this._process();

                                // Return final computed hash
                                return this._hash;
                            },

                            clone: function () {
                                var clone = Hasher.clone.call(this);
                                clone._hash = this._hash.clone();

                                return clone;
                            },
                        }));

                        /**
                         * Shortcut function to the hasher's object interface.
                         *
                         * @param {WordArray|string} message The message to hash.
                         *
                         * @return {WordArray} The hash.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hash = CryptoJS.SHA1('message');
                         *     var hash = CryptoJS.SHA1(wordArray);
                         */
                        C.SHA1 = Hasher._createHelper(SHA1);

                        /**
                         * Shortcut function to the HMAC's object interface.
                         *
                         * @param {WordArray|string} message The message to hash.
                         * @param {WordArray|string} key The secret key.
                         *
                         * @return {WordArray} The HMAC.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hmac = CryptoJS.HmacSHA1(message, key);
                         */
                        C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
                    })();

                    (function (Math) {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var WordArray = C_lib.WordArray;
                        var Hasher = C_lib.Hasher;
                        var C_algo = C.algo;

                        // Initialization and round constants tables
                        var H = [];
                        var K = [];

                        // Compute constants
                        (function () {
                            function isPrime(n) {
                                var sqrtN = Math.sqrt(n);
                                for (
                                    var factor = 2;
                                    factor <= sqrtN;
                                    factor++
                                ) {
                                    if (!(n % factor)) {
                                        return false;
                                    }
                                }

                                return true;
                            }

                            function getFractionalBits(n) {
                                return ((n - (n | 0)) * 0x100000000) | 0;
                            }

                            var n = 2;
                            var nPrime = 0;
                            while (nPrime < 64) {
                                if (isPrime(n)) {
                                    if (nPrime < 8) {
                                        H[nPrime] = getFractionalBits(
                                            Math.pow(n, 1 / 2)
                                        );
                                    }
                                    K[nPrime] = getFractionalBits(
                                        Math.pow(n, 1 / 3)
                                    );

                                    nPrime++;
                                }

                                n++;
                            }
                        })();

                        // Reusable object
                        var W = [];

                        /**
                         * SHA-256 hash algorithm.
                         */
                        var SHA256 = (C_algo.SHA256 = Hasher.extend({
                            _doReset: function () {
                                this._hash = new WordArray.init(H.slice(0));
                            },

                            _doProcessBlock: function (M, offset) {
                                // Shortcut
                                var H = this._hash.words;

                                // Working variables
                                var a = H[0];
                                var b = H[1];
                                var c = H[2];
                                var d = H[3];
                                var e = H[4];
                                var f = H[5];
                                var g = H[6];
                                var h = H[7];

                                // Computation
                                for (var i = 0; i < 64; i++) {
                                    if (i < 16) {
                                        W[i] = M[offset + i] | 0;
                                    } else {
                                        var gamma0x = W[i - 15];
                                        var gamma0 =
                                            ((gamma0x << 25) |
                                                (gamma0x >>> 7)) ^
                                            ((gamma0x << 14) |
                                                (gamma0x >>> 18)) ^
                                            (gamma0x >>> 3);

                                        var gamma1x = W[i - 2];
                                        var gamma1 =
                                            ((gamma1x << 15) |
                                                (gamma1x >>> 17)) ^
                                            ((gamma1x << 13) |
                                                (gamma1x >>> 19)) ^
                                            (gamma1x >>> 10);

                                        W[i] =
                                            gamma0 +
                                            W[i - 7] +
                                            gamma1 +
                                            W[i - 16];
                                    }

                                    var ch = (e & f) ^ (~e & g);
                                    var maj = (a & b) ^ (a & c) ^ (b & c);

                                    var sigma0 =
                                        ((a << 30) | (a >>> 2)) ^
                                        ((a << 19) | (a >>> 13)) ^
                                        ((a << 10) | (a >>> 22));
                                    var sigma1 =
                                        ((e << 26) | (e >>> 6)) ^
                                        ((e << 21) | (e >>> 11)) ^
                                        ((e << 7) | (e >>> 25));

                                    var t1 = h + sigma1 + ch + K[i] + W[i];
                                    var t2 = sigma0 + maj;

                                    h = g;
                                    g = f;
                                    f = e;
                                    e = (d + t1) | 0;
                                    d = c;
                                    c = b;
                                    b = a;
                                    a = (t1 + t2) | 0;
                                }

                                // Intermediate hash value
                                H[0] = (H[0] + a) | 0;
                                H[1] = (H[1] + b) | 0;
                                H[2] = (H[2] + c) | 0;
                                H[3] = (H[3] + d) | 0;
                                H[4] = (H[4] + e) | 0;
                                H[5] = (H[5] + f) | 0;
                                H[6] = (H[6] + g) | 0;
                                H[7] = (H[7] + h) | 0;
                            },

                            _doFinalize: function () {
                                // Shortcuts
                                var data = this._data;
                                var dataWords = data.words;

                                var nBitsTotal = this._nDataBytes * 8;
                                var nBitsLeft = data.sigBytes * 8;

                                // Add padding
                                dataWords[nBitsLeft >>> 5] |=
                                    0x80 << (24 - (nBitsLeft % 32));
                                dataWords[
                                    (((nBitsLeft + 64) >>> 9) << 4) + 14
                                ] = Math.floor(nBitsTotal / 0x100000000);
                                dataWords[
                                    (((nBitsLeft + 64) >>> 9) << 4) + 15
                                ] = nBitsTotal;
                                data.sigBytes = dataWords.length * 4;

                                // Hash final blocks
                                this._process();

                                // Return final computed hash
                                return this._hash;
                            },

                            clone: function () {
                                var clone = Hasher.clone.call(this);
                                clone._hash = this._hash.clone();

                                return clone;
                            },
                        }));

                        /**
                         * Shortcut function to the hasher's object interface.
                         *
                         * @param {WordArray|string} message The message to hash.
                         *
                         * @return {WordArray} The hash.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hash = CryptoJS.SHA256('message');
                         *     var hash = CryptoJS.SHA256(wordArray);
                         */
                        C.SHA256 = Hasher._createHelper(SHA256);

                        /**
                         * Shortcut function to the HMAC's object interface.
                         *
                         * @param {WordArray|string} message The message to hash.
                         * @param {WordArray|string} key The secret key.
                         *
                         * @return {WordArray} The HMAC.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hmac = CryptoJS.HmacSHA256(message, key);
                         */
                        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
                    })(Math);

                    (function () {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var WordArray = C_lib.WordArray;
                        var C_enc = C.enc;

                        /**
                         * UTF-16 BE encoding strategy.
                         */
                        var Utf16BE =
                            (C_enc.Utf16 =
                            C_enc.Utf16BE =
                                {
                                    /**
                                     * Converts a word array to a UTF-16 BE string.
                                     *
                                     * @param {WordArray} wordArray The word array.
                                     *
                                     * @return {string} The UTF-16 BE string.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
                                     */
                                    stringify: function (wordArray) {
                                        // Shortcuts
                                        var words = wordArray.words;
                                        var sigBytes = wordArray.sigBytes;

                                        // Convert
                                        var utf16Chars = [];
                                        for (var i = 0; i < sigBytes; i += 2) {
                                            var codePoint =
                                                (words[i >>> 2] >>>
                                                    (16 - (i % 4) * 8)) &
                                                0xffff;
                                            utf16Chars.push(
                                                String.fromCharCode(codePoint)
                                            );
                                        }

                                        return utf16Chars.join("");
                                    },

                                    /**
                                     * Converts a UTF-16 BE string to a word array.
                                     *
                                     * @param {string} utf16Str The UTF-16 BE string.
                                     *
                                     * @return {WordArray} The word array.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
                                     */
                                    parse: function (utf16Str) {
                                        // Shortcut
                                        var utf16StrLength = utf16Str.length;

                                        // Convert
                                        var words = [];
                                        for (
                                            var i = 0;
                                            i < utf16StrLength;
                                            i++
                                        ) {
                                            words[i >>> 1] |=
                                                utf16Str.charCodeAt(i) <<
                                                (16 - (i % 2) * 16);
                                        }

                                        return WordArray.create(
                                            words,
                                            utf16StrLength * 2
                                        );
                                    },
                                });

                        /**
                         * UTF-16 LE encoding strategy.
                         */
                        C_enc.Utf16LE = {
                            /**
                             * Converts a word array to a UTF-16 LE string.
                             *
                             * @param {WordArray} wordArray The word array.
                             *
                             * @return {string} The UTF-16 LE string.
                             *
                             * @static
                             *
                             * @example
                             *
                             *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
                             */
                            stringify: function (wordArray) {
                                // Shortcuts
                                var words = wordArray.words;
                                var sigBytes = wordArray.sigBytes;

                                // Convert
                                var utf16Chars = [];
                                for (var i = 0; i < sigBytes; i += 2) {
                                    var codePoint = swapEndian(
                                        (words[i >>> 2] >>>
                                            (16 - (i % 4) * 8)) &
                                            0xffff
                                    );
                                    utf16Chars.push(
                                        String.fromCharCode(codePoint)
                                    );
                                }

                                return utf16Chars.join("");
                            },

                            /**
                             * Converts a UTF-16 LE string to a word array.
                             *
                             * @param {string} utf16Str The UTF-16 LE string.
                             *
                             * @return {WordArray} The word array.
                             *
                             * @static
                             *
                             * @example
                             *
                             *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
                             */
                            parse: function (utf16Str) {
                                // Shortcut
                                var utf16StrLength = utf16Str.length;

                                // Convert
                                var words = [];
                                for (var i = 0; i < utf16StrLength; i++) {
                                    words[i >>> 1] |= swapEndian(
                                        utf16Str.charCodeAt(i) <<
                                            (16 - (i % 2) * 16)
                                    );
                                }

                                return WordArray.create(
                                    words,
                                    utf16StrLength * 2
                                );
                            },
                        };

                        function swapEndian(word) {
                            return (
                                ((word << 8) & 0xff00ff00) |
                                ((word >>> 8) & 0x00ff00ff)
                            );
                        }
                    })();

                    (function () {
                        // Check if typed arrays are supported
                        if (typeof ArrayBuffer != "function") {
                            return;
                        }

                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var WordArray = C_lib.WordArray;

                        // Reference original init
                        var superInit = WordArray.init;

                        // Augment WordArray.init to handle typed arrays
                        var subInit = (WordArray.init = function (typedArray) {
                            // Convert buffers to uint8
                            if (typedArray instanceof ArrayBuffer) {
                                typedArray = new Uint8Array(typedArray);
                            }

                            // Convert other array views to uint8
                            if (
                                typedArray instanceof Int8Array ||
                                (typeof Uint8ClampedArray !== "undefined" &&
                                    typedArray instanceof Uint8ClampedArray) ||
                                typedArray instanceof Int16Array ||
                                typedArray instanceof Uint16Array ||
                                typedArray instanceof Int32Array ||
                                typedArray instanceof Uint32Array ||
                                typedArray instanceof Float32Array ||
                                typedArray instanceof Float64Array
                            ) {
                                typedArray = new Uint8Array(
                                    typedArray.buffer,
                                    typedArray.byteOffset,
                                    typedArray.byteLength
                                );
                            }

                            // Handle Uint8Array
                            if (typedArray instanceof Uint8Array) {
                                // Shortcut
                                var typedArrayByteLength =
                                    typedArray.byteLength;

                                // Extract bytes
                                var words = [];
                                for (var i = 0; i < typedArrayByteLength; i++) {
                                    words[i >>> 2] |=
                                        typedArray[i] << (24 - (i % 4) * 8);
                                }

                                // Initialize this word array
                                superInit.call(
                                    this,
                                    words,
                                    typedArrayByteLength
                                );
                            } else {
                                // Else call normal init
                                superInit.apply(this, arguments);
                            }
                        });

                        subInit.prototype = WordArray;
                    })();

                    /** @preserve
        (c) 2012 by Cédric Mesnil. All rights reserved.

        Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

            - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
            - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        */

                    (function (Math) {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var WordArray = C_lib.WordArray;
                        var Hasher = C_lib.Hasher;
                        var C_algo = C.algo;

                        // Constants table
                        var _zl = WordArray.create([
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
                            15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14,
                            11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13,
                            11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15,
                            14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8,
                            11, 6, 15, 13,
                        ]);
                        var _zr = WordArray.create([
                            5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3,
                            12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9,
                            1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0,
                            4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7,
                            10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0,
                            3, 9, 11,
                        ]);
                        var _sl = WordArray.create([
                            11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9,
                            8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7,
                            13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6,
                            5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5,
                            6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12,
                            13, 14, 11, 8, 5, 6,
                        ]);
                        var _sr = WordArray.create([
                            8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12,
                            6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15,
                            13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14,
                            13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12,
                            9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13,
                            6, 5, 15, 13, 11, 11,
                        ]);

                        var _hl = WordArray.create([
                            0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc,
                            0xa953fd4e,
                        ]);
                        var _hr = WordArray.create([
                            0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9,
                            0x00000000,
                        ]);

                        /**
                         * RIPEMD160 hash algorithm.
                         */
                        var RIPEMD160 = (C_algo.RIPEMD160 = Hasher.extend({
                            _doReset: function () {
                                this._hash = WordArray.create([
                                    0x67452301, 0xefcdab89, 0x98badcfe,
                                    0x10325476, 0xc3d2e1f0,
                                ]);
                            },

                            _doProcessBlock: function (M, offset) {
                                // Swap endian
                                for (var i = 0; i < 16; i++) {
                                    // Shortcuts
                                    var offset_i = offset + i;
                                    var M_offset_i = M[offset_i];

                                    // Swap
                                    M[offset_i] =
                                        (((M_offset_i << 8) |
                                            (M_offset_i >>> 24)) &
                                            0x00ff00ff) |
                                        (((M_offset_i << 24) |
                                            (M_offset_i >>> 8)) &
                                            0xff00ff00);
                                }
                                // Shortcut
                                var H = this._hash.words;
                                var hl = _hl.words;
                                var hr = _hr.words;
                                var zl = _zl.words;
                                var zr = _zr.words;
                                var sl = _sl.words;
                                var sr = _sr.words;

                                // Working variables
                                var al, bl, cl, dl, el;
                                var ar, br, cr, dr, er;

                                ar = al = H[0];
                                br = bl = H[1];
                                cr = cl = H[2];
                                dr = dl = H[3];
                                er = el = H[4];
                                // Computation
                                var t;
                                for (var i = 0; i < 80; i += 1) {
                                    t = (al + M[offset + zl[i]]) | 0;
                                    if (i < 16) {
                                        t += f1(bl, cl, dl) + hl[0];
                                    } else if (i < 32) {
                                        t += f2(bl, cl, dl) + hl[1];
                                    } else if (i < 48) {
                                        t += f3(bl, cl, dl) + hl[2];
                                    } else if (i < 64) {
                                        t += f4(bl, cl, dl) + hl[3];
                                    } else {
                                        // if (i<80) {
                                        t += f5(bl, cl, dl) + hl[4];
                                    }
                                    t = t | 0;
                                    t = rotl(t, sl[i]);
                                    t = (t + el) | 0;
                                    al = el;
                                    el = dl;
                                    dl = rotl(cl, 10);
                                    cl = bl;
                                    bl = t;

                                    t = (ar + M[offset + zr[i]]) | 0;
                                    if (i < 16) {
                                        t += f5(br, cr, dr) + hr[0];
                                    } else if (i < 32) {
                                        t += f4(br, cr, dr) + hr[1];
                                    } else if (i < 48) {
                                        t += f3(br, cr, dr) + hr[2];
                                    } else if (i < 64) {
                                        t += f2(br, cr, dr) + hr[3];
                                    } else {
                                        // if (i<80) {
                                        t += f1(br, cr, dr) + hr[4];
                                    }
                                    t = t | 0;
                                    t = rotl(t, sr[i]);
                                    t = (t + er) | 0;
                                    ar = er;
                                    er = dr;
                                    dr = rotl(cr, 10);
                                    cr = br;
                                    br = t;
                                }
                                // Intermediate hash value
                                t = (H[1] + cl + dr) | 0;
                                H[1] = (H[2] + dl + er) | 0;
                                H[2] = (H[3] + el + ar) | 0;
                                H[3] = (H[4] + al + br) | 0;
                                H[4] = (H[0] + bl + cr) | 0;
                                H[0] = t;
                            },

                            _doFinalize: function () {
                                // Shortcuts
                                var data = this._data;
                                var dataWords = data.words;

                                var nBitsTotal = this._nDataBytes * 8;
                                var nBitsLeft = data.sigBytes * 8;

                                // Add padding
                                dataWords[nBitsLeft >>> 5] |=
                                    0x80 << (24 - (nBitsLeft % 32));
                                dataWords[
                                    (((nBitsLeft + 64) >>> 9) << 4) + 14
                                ] =
                                    (((nBitsTotal << 8) | (nBitsTotal >>> 24)) &
                                        0x00ff00ff) |
                                    (((nBitsTotal << 24) | (nBitsTotal >>> 8)) &
                                        0xff00ff00);
                                data.sigBytes = (dataWords.length + 1) * 4;

                                // Hash final blocks
                                this._process();

                                // Shortcuts
                                var hash = this._hash;
                                var H = hash.words;

                                // Swap endian
                                for (var i = 0; i < 5; i++) {
                                    // Shortcut
                                    var H_i = H[i];

                                    // Swap
                                    H[i] =
                                        (((H_i << 8) | (H_i >>> 24)) &
                                            0x00ff00ff) |
                                        (((H_i << 24) | (H_i >>> 8)) &
                                            0xff00ff00);
                                }

                                // Return final computed hash
                                return hash;
                            },

                            clone: function () {
                                var clone = Hasher.clone.call(this);
                                clone._hash = this._hash.clone();

                                return clone;
                            },
                        }));

                        function f1(x, y, z) {
                            return x ^ y ^ z;
                        }

                        function f2(x, y, z) {
                            return (x & y) | (~x & z);
                        }

                        function f3(x, y, z) {
                            return (x | ~y) ^ z;
                        }

                        function f4(x, y, z) {
                            return (x & z) | (y & ~z);
                        }

                        function f5(x, y, z) {
                            return x ^ (y | ~z);
                        }

                        function rotl(x, n) {
                            return (x << n) | (x >>> (32 - n));
                        }

                        /**
                         * Shortcut function to the hasher's object interface.
                         *
                         * @param {WordArray|string} message The message to hash.
                         *
                         * @return {WordArray} The hash.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hash = CryptoJS.RIPEMD160('message');
                         *     var hash = CryptoJS.RIPEMD160(wordArray);
                         */
                        C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

                        /**
                         * Shortcut function to the HMAC's object interface.
                         *
                         * @param {WordArray|string} message The message to hash.
                         * @param {WordArray|string} key The secret key.
                         *
                         * @return {WordArray} The HMAC.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
                         */
                        C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
                    })(Math);

                    (function () {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var Base = C_lib.Base;
                        var C_enc = C.enc;
                        var Utf8 = C_enc.Utf8;
                        var C_algo = C.algo;

                        /**
                         * HMAC algorithm.
                         */
                        var HMAC = (C_algo.HMAC = Base.extend({
                            /**
                             * Initializes a newly created HMAC.
                             *
                             * @param {Hasher} hasher The hash algorithm to use.
                             * @param {WordArray|string} key The secret key.
                             *
                             * @example
                             *
                             *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
                             */
                            init: function (hasher, key) {
                                // Init hasher
                                hasher = this._hasher = new hasher.init();

                                // Convert string to WordArray, else assume WordArray already
                                if (typeof key == "string") {
                                    key = Utf8.parse(key);
                                }

                                // Shortcuts
                                var hasherBlockSize = hasher.blockSize;
                                var hasherBlockSizeBytes = hasherBlockSize * 4;

                                // Allow arbitrary length keys
                                if (key.sigBytes > hasherBlockSizeBytes) {
                                    key = hasher.finalize(key);
                                }

                                // Clamp excess bits
                                key.clamp();

                                // Clone key for inner and outer pads
                                var oKey = (this._oKey = key.clone());
                                var iKey = (this._iKey = key.clone());

                                // Shortcuts
                                var oKeyWords = oKey.words;
                                var iKeyWords = iKey.words;

                                // XOR keys with pad constants
                                for (var i = 0; i < hasherBlockSize; i++) {
                                    oKeyWords[i] ^= 0x5c5c5c5c;
                                    iKeyWords[i] ^= 0x36363636;
                                }
                                oKey.sigBytes = iKey.sigBytes =
                                    hasherBlockSizeBytes;

                                // Set initial values
                                this.reset();
                            },

                            /**
                             * Resets this HMAC to its initial state.
                             *
                             * @example
                             *
                             *     hmacHasher.reset();
                             */
                            reset: function () {
                                // Shortcut
                                var hasher = this._hasher;

                                // Reset
                                hasher.reset();
                                hasher.update(this._iKey);
                            },

                            /**
                             * Updates this HMAC with a message.
                             *
                             * @param {WordArray|string} messageUpdate The message to append.
                             *
                             * @return {HMAC} This HMAC instance.
                             *
                             * @example
                             *
                             *     hmacHasher.update('message');
                             *     hmacHasher.update(wordArray);
                             */
                            update: function (messageUpdate) {
                                this._hasher.update(messageUpdate);

                                // Chainable
                                return this;
                            },

                            /**
                             * Finalizes the HMAC computation.
                             * Note that the finalize operation is effectively a destructive, read-once operation.
                             *
                             * @param {WordArray|string} messageUpdate (Optional) A final message update.
                             *
                             * @return {WordArray} The HMAC.
                             *
                             * @example
                             *
                             *     var hmac = hmacHasher.finalize();
                             *     var hmac = hmacHasher.finalize('message');
                             *     var hmac = hmacHasher.finalize(wordArray);
                             */
                            finalize: function (messageUpdate) {
                                // Shortcut
                                var hasher = this._hasher;

                                // Compute HMAC
                                var innerHash = hasher.finalize(messageUpdate);
                                hasher.reset();
                                var hmac = hasher.finalize(
                                    this._oKey.clone().concat(innerHash)
                                );

                                return hmac;
                            },
                        }));
                    })();

                    (function () {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var Base = C_lib.Base;
                        var WordArray = C_lib.WordArray;
                        var C_algo = C.algo;
                        var SHA1 = C_algo.SHA1;
                        var HMAC = C_algo.HMAC;

                        /**
                         * Password-Based Key Derivation Function 2 algorithm.
                         */
                        var PBKDF2 = (C_algo.PBKDF2 = Base.extend({
                            /**
                             * Configuration options.
                             *
                             * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
                             * @property {Hasher} hasher The hasher to use. Default: SHA1
                             * @property {number} iterations The number of iterations to perform. Default: 1
                             */
                            cfg: Base.extend({
                                keySize: 128 / 32,
                                hasher: SHA1,
                                iterations: 1,
                            }),

                            /**
                             * Initializes a newly created key derivation function.
                             *
                             * @param {Object} cfg (Optional) The configuration options to use for the derivation.
                             *
                             * @example
                             *
                             *     var kdf = CryptoJS.algo.PBKDF2.create();
                             *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
                             *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
                             */
                            init: function (cfg) {
                                this.cfg = this.cfg.extend(cfg);
                            },

                            /**
                             * Computes the Password-Based Key Derivation Function 2.
                             *
                             * @param {WordArray|string} password The password.
                             * @param {WordArray|string} salt A salt.
                             *
                             * @return {WordArray} The derived key.
                             *
                             * @example
                             *
                             *     var key = kdf.compute(password, salt);
                             */
                            compute: function (password, salt) {
                                // Shortcut
                                var cfg = this.cfg;

                                // Init HMAC
                                var hmac = HMAC.create(cfg.hasher, password);

                                // Initial values
                                var derivedKey = WordArray.create();
                                var blockIndex = WordArray.create([0x00000001]);

                                // Shortcuts
                                var derivedKeyWords = derivedKey.words;
                                var blockIndexWords = blockIndex.words;
                                var keySize = cfg.keySize;
                                var iterations = cfg.iterations;

                                // Generate key
                                while (derivedKeyWords.length < keySize) {
                                    var block = hmac
                                        .update(salt)
                                        .finalize(blockIndex);
                                    hmac.reset();

                                    // Shortcuts
                                    var blockWords = block.words;
                                    var blockWordsLength = blockWords.length;

                                    // Iterations
                                    var intermediate = block;
                                    for (var i = 1; i < iterations; i++) {
                                        intermediate =
                                            hmac.finalize(intermediate);
                                        hmac.reset();

                                        // Shortcut
                                        var intermediateWords =
                                            intermediate.words;

                                        // XOR intermediate with block
                                        for (
                                            var j = 0;
                                            j < blockWordsLength;
                                            j++
                                        ) {
                                            blockWords[j] ^=
                                                intermediateWords[j];
                                        }
                                    }

                                    derivedKey.concat(block);
                                    blockIndexWords[0]++;
                                }
                                derivedKey.sigBytes = keySize * 4;

                                return derivedKey;
                            },
                        }));

                        /**
                         * Computes the Password-Based Key Derivation Function 2.
                         *
                         * @param {WordArray|string} password The password.
                         * @param {WordArray|string} salt A salt.
                         * @param {Object} cfg (Optional) The configuration options to use for this computation.
                         *
                         * @return {WordArray} The derived key.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var key = CryptoJS.PBKDF2(password, salt);
                         *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
                         *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
                         */
                        C.PBKDF2 = function (password, salt, cfg) {
                            return PBKDF2.create(cfg).compute(password, salt);
                        };
                    })();

                    (function () {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var Base = C_lib.Base;
                        var WordArray = C_lib.WordArray;
                        var C_algo = C.algo;
                        var MD5 = C_algo.MD5;

                        /**
                         * This key derivation function is meant to conform with EVP_BytesToKey.
                         * www.openssl.org/docs/crypto/EVP_BytesToKey.html
                         */
                        var EvpKDF = (C_algo.EvpKDF = Base.extend({
                            /**
                             * Configuration options.
                             *
                             * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
                             * @property {Hasher} hasher The hash algorithm to use. Default: MD5
                             * @property {number} iterations The number of iterations to perform. Default: 1
                             */
                            cfg: Base.extend({
                                keySize: 128 / 32,
                                hasher: MD5,
                                iterations: 1,
                            }),

                            /**
                             * Initializes a newly created key derivation function.
                             *
                             * @param {Object} cfg (Optional) The configuration options to use for the derivation.
                             *
                             * @example
                             *
                             *     var kdf = CryptoJS.algo.EvpKDF.create();
                             *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
                             *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
                             */
                            init: function (cfg) {
                                this.cfg = this.cfg.extend(cfg);
                            },

                            /**
                             * Derives a key from a password.
                             *
                             * @param {WordArray|string} password The password.
                             * @param {WordArray|string} salt A salt.
                             *
                             * @return {WordArray} The derived key.
                             *
                             * @example
                             *
                             *     var key = kdf.compute(password, salt);
                             */
                            compute: function (password, salt) {
                                // Shortcut
                                var cfg = this.cfg;

                                // Init hasher
                                var hasher = cfg.hasher.create();

                                // Initial values
                                var derivedKey = WordArray.create();

                                // Shortcuts
                                var derivedKeyWords = derivedKey.words;
                                var keySize = cfg.keySize;
                                var iterations = cfg.iterations;

                                // Generate key
                                while (derivedKeyWords.length < keySize) {
                                    if (block) {
                                        hasher.update(block);
                                    }
                                    var block = hasher
                                        .update(password)
                                        .finalize(salt);
                                    hasher.reset();

                                    // Iterations
                                    for (var i = 1; i < iterations; i++) {
                                        block = hasher.finalize(block);
                                        hasher.reset();
                                    }

                                    derivedKey.concat(block);
                                }
                                derivedKey.sigBytes = keySize * 4;

                                return derivedKey;
                            },
                        }));

                        /**
                         * Derives a key from a password.
                         *
                         * @param {WordArray|string} password The password.
                         * @param {WordArray|string} salt A salt.
                         * @param {Object} cfg (Optional) The configuration options to use for this computation.
                         *
                         * @return {WordArray} The derived key.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var key = CryptoJS.EvpKDF(password, salt);
                         *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
                         *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
                         */
                        C.EvpKDF = function (password, salt, cfg) {
                            return EvpKDF.create(cfg).compute(password, salt);
                        };
                    })();

                    (function () {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var WordArray = C_lib.WordArray;
                        var C_algo = C.algo;
                        var SHA256 = C_algo.SHA256;

                        /**
                         * SHA-224 hash algorithm.
                         */
                        var SHA224 = (C_algo.SHA224 = SHA256.extend({
                            _doReset: function () {
                                this._hash = new WordArray.init([
                                    0xc1059ed8, 0x367cd507, 0x3070dd17,
                                    0xf70e5939, 0xffc00b31, 0x68581511,
                                    0x64f98fa7, 0xbefa4fa4,
                                ]);
                            },

                            _doFinalize: function () {
                                var hash = SHA256._doFinalize.call(this);

                                hash.sigBytes -= 4;

                                return hash;
                            },
                        }));

                        /**
                         * Shortcut function to the hasher's object interface.
                         *
                         * @param {WordArray|string} message The message to hash.
                         *
                         * @return {WordArray} The hash.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hash = CryptoJS.SHA224('message');
                         *     var hash = CryptoJS.SHA224(wordArray);
                         */
                        C.SHA224 = SHA256._createHelper(SHA224);

                        /**
                         * Shortcut function to the HMAC's object interface.
                         *
                         * @param {WordArray|string} message The message to hash.
                         * @param {WordArray|string} key The secret key.
                         *
                         * @return {WordArray} The HMAC.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hmac = CryptoJS.HmacSHA224(message, key);
                         */
                        C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
                    })();

                    (function (undefined) {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var Base = C_lib.Base;
                        var X32WordArray = C_lib.WordArray;

                        /**
                         * x64 namespace.
                         */
                        var C_x64 = (C.x64 = {});

                        /**
                         * A 64-bit word.
                         */
                        var X64Word = (C_x64.Word = Base.extend({
                            /**
                             * Initializes a newly created 64-bit word.
                             *
                             * @param {number} high The high 32 bits.
                             * @param {number} low The low 32 bits.
                             *
                             * @example
                             *
                             *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
                             */
                            init: function (high, low) {
                                this.high = high;
                                this.low = low;
                            },

                            /**
                             * Bitwise NOTs this word.
                             *
                             * @return {X64Word} A new x64-Word object after negating.
                             *
                             * @example
                             *
                             *     var negated = x64Word.not();
                             */
                            // not: function () {
                            // var high = ~this.high;
                            // var low = ~this.low;

                            // return X64Word.create(high, low);
                            // },

                            /**
                             * Bitwise ANDs this word with the passed word.
                             *
                             * @param {X64Word} word The x64-Word to AND with this word.
                             *
                             * @return {X64Word} A new x64-Word object after ANDing.
                             *
                             * @example
                             *
                             *     var anded = x64Word.and(anotherX64Word);
                             */
                            // and: function (word) {
                            // var high = this.high & word.high;
                            // var low = this.low & word.low;

                            // return X64Word.create(high, low);
                            // },

                            /**
                             * Bitwise ORs this word with the passed word.
                             *
                             * @param {X64Word} word The x64-Word to OR with this word.
                             *
                             * @return {X64Word} A new x64-Word object after ORing.
                             *
                             * @example
                             *
                             *     var ored = x64Word.or(anotherX64Word);
                             */
                            // or: function (word) {
                            // var high = this.high | word.high;
                            // var low = this.low | word.low;

                            // return X64Word.create(high, low);
                            // },

                            /**
                             * Bitwise XORs this word with the passed word.
                             *
                             * @param {X64Word} word The x64-Word to XOR with this word.
                             *
                             * @return {X64Word} A new x64-Word object after XORing.
                             *
                             * @example
                             *
                             *     var xored = x64Word.xor(anotherX64Word);
                             */
                            // xor: function (word) {
                            // var high = this.high ^ word.high;
                            // var low = this.low ^ word.low;

                            // return X64Word.create(high, low);
                            // },

                            /**
                             * Shifts this word n bits to the left.
                             *
                             * @param {number} n The number of bits to shift.
                             *
                             * @return {X64Word} A new x64-Word object after shifting.
                             *
                             * @example
                             *
                             *     var shifted = x64Word.shiftL(25);
                             */
                            // shiftL: function (n) {
                            // if (n < 32) {
                            // var high = (this.high << n) | (this.low >>> (32 - n));
                            // var low = this.low << n;
                            // } else {
                            // var high = this.low << (n - 32);
                            // var low = 0;
                            // }

                            // return X64Word.create(high, low);
                            // },

                            /**
                             * Shifts this word n bits to the right.
                             *
                             * @param {number} n The number of bits to shift.
                             *
                             * @return {X64Word} A new x64-Word object after shifting.
                             *
                             * @example
                             *
                             *     var shifted = x64Word.shiftR(7);
                             */
                            // shiftR: function (n) {
                            // if (n < 32) {
                            // var low = (this.low >>> n) | (this.high << (32 - n));
                            // var high = this.high >>> n;
                            // } else {
                            // var low = this.high >>> (n - 32);
                            // var high = 0;
                            // }

                            // return X64Word.create(high, low);
                            // },

                            /**
                             * Rotates this word n bits to the left.
                             *
                             * @param {number} n The number of bits to rotate.
                             *
                             * @return {X64Word} A new x64-Word object after rotating.
                             *
                             * @example
                             *
                             *     var rotated = x64Word.rotL(25);
                             */
                            // rotL: function (n) {
                            // return this.shiftL(n).or(this.shiftR(64 - n));
                            // },

                            /**
                             * Rotates this word n bits to the right.
                             *
                             * @param {number} n The number of bits to rotate.
                             *
                             * @return {X64Word} A new x64-Word object after rotating.
                             *
                             * @example
                             *
                             *     var rotated = x64Word.rotR(7);
                             */
                            // rotR: function (n) {
                            // return this.shiftR(n).or(this.shiftL(64 - n));
                            // },

                            /**
                             * Adds this word with the passed word.
                             *
                             * @param {X64Word} word The x64-Word to add with this word.
                             *
                             * @return {X64Word} A new x64-Word object after adding.
                             *
                             * @example
                             *
                             *     var added = x64Word.add(anotherX64Word);
                             */
                            // add: function (word) {
                            // var low = (this.low + word.low) | 0;
                            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
                            // var high = (this.high + word.high + carry) | 0;

                            // return X64Word.create(high, low);
                            // }
                        }));

                        /**
                         * An array of 64-bit words.
                         *
                         * @property {Array} words The array of CryptoJS.x64.Word objects.
                         * @property {number} sigBytes The number of significant bytes in this word array.
                         */
                        var X64WordArray = (C_x64.WordArray = Base.extend({
                            /**
                             * Initializes a newly created word array.
                             *
                             * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
                             * @param {number} sigBytes (Optional) The number of significant bytes in the words.
                             *
                             * @example
                             *
                             *     var wordArray = CryptoJS.x64.WordArray.create();
                             *
                             *     var wordArray = CryptoJS.x64.WordArray.create([
                             *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
                             *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
                             *     ]);
                             *
                             *     var wordArray = CryptoJS.x64.WordArray.create([
                             *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
                             *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
                             *     ], 10);
                             */
                            init: function (words, sigBytes) {
                                words = this.words = words || [];

                                if (sigBytes != undefined) {
                                    this.sigBytes = sigBytes;
                                } else {
                                    this.sigBytes = words.length * 8;
                                }
                            },

                            /**
                             * Converts this 64-bit word array to a 32-bit word array.
                             *
                             * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
                             *
                             * @example
                             *
                             *     var x32WordArray = x64WordArray.toX32();
                             */
                            toX32: function () {
                                // Shortcuts
                                var x64Words = this.words;
                                var x64WordsLength = x64Words.length;

                                // Convert
                                var x32Words = [];
                                for (var i = 0; i < x64WordsLength; i++) {
                                    var x64Word = x64Words[i];
                                    x32Words.push(x64Word.high);
                                    x32Words.push(x64Word.low);
                                }

                                return X32WordArray.create(
                                    x32Words,
                                    this.sigBytes
                                );
                            },

                            /**
                             * Creates a copy of this word array.
                             *
                             * @return {X64WordArray} The clone.
                             *
                             * @example
                             *
                             *     var clone = x64WordArray.clone();
                             */
                            clone: function () {
                                var clone = Base.clone.call(this);

                                // Clone "words" array
                                var words = (clone.words = this.words.slice(0));

                                // Clone each X64Word object
                                var wordsLength = words.length;
                                for (var i = 0; i < wordsLength; i++) {
                                    words[i] = words[i].clone();
                                }

                                return clone;
                            },
                        }));
                    })();

                    (function (Math) {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var WordArray = C_lib.WordArray;
                        var Hasher = C_lib.Hasher;
                        var C_x64 = C.x64;
                        var X64Word = C_x64.Word;
                        var C_algo = C.algo;

                        // Constants tables
                        var RHO_OFFSETS = [];
                        var PI_INDEXES = [];
                        var ROUND_CONSTANTS = [];

                        // Compute Constants
                        (function () {
                            // Compute rho offset constants
                            var x = 1,
                                y = 0;
                            for (var t = 0; t < 24; t++) {
                                RHO_OFFSETS[x + 5 * y] =
                                    (((t + 1) * (t + 2)) / 2) % 64;

                                var newX = y % 5;
                                var newY = (2 * x + 3 * y) % 5;
                                x = newX;
                                y = newY;
                            }

                            // Compute pi index constants
                            for (var x = 0; x < 5; x++) {
                                for (var y = 0; y < 5; y++) {
                                    PI_INDEXES[x + 5 * y] =
                                        y + ((2 * x + 3 * y) % 5) * 5;
                                }
                            }

                            // Compute round constants
                            var LFSR = 0x01;
                            for (var i = 0; i < 24; i++) {
                                var roundConstantMsw = 0;
                                var roundConstantLsw = 0;

                                for (var j = 0; j < 7; j++) {
                                    if (LFSR & 0x01) {
                                        var bitPosition = (1 << j) - 1;
                                        if (bitPosition < 32) {
                                            roundConstantLsw ^=
                                                1 << bitPosition;
                                        } /* if (bitPosition >= 32) */ else {
                                            roundConstantMsw ^=
                                                1 << (bitPosition - 32);
                                        }
                                    }

                                    // Compute next LFSR
                                    if (LFSR & 0x80) {
                                        // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
                                        LFSR = (LFSR << 1) ^ 0x71;
                                    } else {
                                        LFSR <<= 1;
                                    }
                                }

                                ROUND_CONSTANTS[i] = X64Word.create(
                                    roundConstantMsw,
                                    roundConstantLsw
                                );
                            }
                        })();

                        // Reusable objects for temporary values
                        var T = [];
                        (function () {
                            for (var i = 0; i < 25; i++) {
                                T[i] = X64Word.create();
                            }
                        })();

                        /**
                         * SHA-3 hash algorithm.
                         */
                        var SHA3 = (C_algo.SHA3 = Hasher.extend({
                            /**
                             * Configuration options.
                             *
                             * @property {number} outputLength
                             *   The desired number of bits in the output hash.
                             *   Only values permitted are: 224, 256, 384, 512.
                             *   Default: 512
                             */
                            cfg: Hasher.cfg.extend({
                                outputLength: 512,
                            }),

                            _doReset: function () {
                                var state = (this._state = []);
                                for (var i = 0; i < 25; i++) {
                                    state[i] = new X64Word.init();
                                }

                                this.blockSize =
                                    (1600 - 2 * this.cfg.outputLength) / 32;
                            },

                            _doProcessBlock: function (M, offset) {
                                // Shortcuts
                                var state = this._state;
                                var nBlockSizeLanes = this.blockSize / 2;

                                // Absorb
                                for (var i = 0; i < nBlockSizeLanes; i++) {
                                    // Shortcuts
                                    var M2i = M[offset + 2 * i];
                                    var M2i1 = M[offset + 2 * i + 1];

                                    // Swap endian
                                    M2i =
                                        (((M2i << 8) | (M2i >>> 24)) &
                                            0x00ff00ff) |
                                        (((M2i << 24) | (M2i >>> 8)) &
                                            0xff00ff00);
                                    M2i1 =
                                        (((M2i1 << 8) | (M2i1 >>> 24)) &
                                            0x00ff00ff) |
                                        (((M2i1 << 24) | (M2i1 >>> 8)) &
                                            0xff00ff00);

                                    // Absorb message into state
                                    var lane = state[i];
                                    lane.high ^= M2i1;
                                    lane.low ^= M2i;
                                }

                                // Rounds
                                for (var round = 0; round < 24; round++) {
                                    // Theta
                                    for (var x = 0; x < 5; x++) {
                                        // Mix column lanes
                                        var tMsw = 0,
                                            tLsw = 0;
                                        for (var y = 0; y < 5; y++) {
                                            var lane = state[x + 5 * y];
                                            tMsw ^= lane.high;
                                            tLsw ^= lane.low;
                                        }

                                        // Temporary values
                                        var Tx = T[x];
                                        Tx.high = tMsw;
                                        Tx.low = tLsw;
                                    }
                                    for (var x = 0; x < 5; x++) {
                                        // Shortcuts
                                        var Tx4 = T[(x + 4) % 5];
                                        var Tx1 = T[(x + 1) % 5];
                                        var Tx1Msw = Tx1.high;
                                        var Tx1Lsw = Tx1.low;

                                        // Mix surrounding columns
                                        var tMsw =
                                            Tx4.high ^
                                            ((Tx1Msw << 1) | (Tx1Lsw >>> 31));
                                        var tLsw =
                                            Tx4.low ^
                                            ((Tx1Lsw << 1) | (Tx1Msw >>> 31));
                                        for (var y = 0; y < 5; y++) {
                                            var lane = state[x + 5 * y];
                                            lane.high ^= tMsw;
                                            lane.low ^= tLsw;
                                        }
                                    }

                                    // Rho Pi
                                    for (
                                        var laneIndex = 1;
                                        laneIndex < 25;
                                        laneIndex++
                                    ) {
                                        // Shortcuts
                                        var lane = state[laneIndex];
                                        var laneMsw = lane.high;
                                        var laneLsw = lane.low;
                                        var rhoOffset = RHO_OFFSETS[laneIndex];

                                        // Rotate lanes
                                        if (rhoOffset < 32) {
                                            var tMsw =
                                                (laneMsw << rhoOffset) |
                                                (laneLsw >>> (32 - rhoOffset));
                                            var tLsw =
                                                (laneLsw << rhoOffset) |
                                                (laneMsw >>> (32 - rhoOffset));
                                        } /* if (rhoOffset >= 32) */ else {
                                            var tMsw =
                                                (laneLsw << (rhoOffset - 32)) |
                                                (laneMsw >>> (64 - rhoOffset));
                                            var tLsw =
                                                (laneMsw << (rhoOffset - 32)) |
                                                (laneLsw >>> (64 - rhoOffset));
                                        }

                                        // Transpose lanes
                                        var TPiLane = T[PI_INDEXES[laneIndex]];
                                        TPiLane.high = tMsw;
                                        TPiLane.low = tLsw;
                                    }

                                    // Rho pi at x = y = 0
                                    var T0 = T[0];
                                    var state0 = state[0];
                                    T0.high = state0.high;
                                    T0.low = state0.low;

                                    // Chi
                                    for (var x = 0; x < 5; x++) {
                                        for (var y = 0; y < 5; y++) {
                                            // Shortcuts
                                            var laneIndex = x + 5 * y;
                                            var lane = state[laneIndex];
                                            var TLane = T[laneIndex];
                                            var Tx1Lane =
                                                T[((x + 1) % 5) + 5 * y];
                                            var Tx2Lane =
                                                T[((x + 2) % 5) + 5 * y];

                                            // Mix rows
                                            lane.high =
                                                TLane.high ^
                                                (~Tx1Lane.high & Tx2Lane.high);
                                            lane.low =
                                                TLane.low ^
                                                (~Tx1Lane.low & Tx2Lane.low);
                                        }
                                    }

                                    // Iota
                                    var lane = state[0];
                                    var roundConstant = ROUND_CONSTANTS[round];
                                    lane.high ^= roundConstant.high;
                                    lane.low ^= roundConstant.low;
                                }
                            },

                            _doFinalize: function () {
                                // Shortcuts
                                var data = this._data;
                                var dataWords = data.words;
                                var nBitsTotal = this._nDataBytes * 8;
                                var nBitsLeft = data.sigBytes * 8;
                                var blockSizeBits = this.blockSize * 32;

                                // Add padding
                                dataWords[nBitsLeft >>> 5] |=
                                    0x1 << (24 - (nBitsLeft % 32));
                                dataWords[
                                    ((Math.ceil(
                                        (nBitsLeft + 1) / blockSizeBits
                                    ) *
                                        blockSizeBits) >>>
                                        5) -
                                        1
                                ] |= 0x80;
                                data.sigBytes = dataWords.length * 4;

                                // Hash final blocks
                                this._process();

                                // Shortcuts
                                var state = this._state;
                                var outputLengthBytes =
                                    this.cfg.outputLength / 8;
                                var outputLengthLanes = outputLengthBytes / 8;

                                // Squeeze
                                var hashWords = [];
                                for (var i = 0; i < outputLengthLanes; i++) {
                                    // Shortcuts
                                    var lane = state[i];
                                    var laneMsw = lane.high;
                                    var laneLsw = lane.low;

                                    // Swap endian
                                    laneMsw =
                                        (((laneMsw << 8) | (laneMsw >>> 24)) &
                                            0x00ff00ff) |
                                        (((laneMsw << 24) | (laneMsw >>> 8)) &
                                            0xff00ff00);
                                    laneLsw =
                                        (((laneLsw << 8) | (laneLsw >>> 24)) &
                                            0x00ff00ff) |
                                        (((laneLsw << 24) | (laneLsw >>> 8)) &
                                            0xff00ff00);

                                    // Squeeze state to retrieve hash
                                    hashWords.push(laneLsw);
                                    hashWords.push(laneMsw);
                                }

                                // Return final computed hash
                                return new WordArray.init(
                                    hashWords,
                                    outputLengthBytes
                                );
                            },

                            clone: function () {
                                var clone = Hasher.clone.call(this);

                                var state = (clone._state =
                                    this._state.slice(0));
                                for (var i = 0; i < 25; i++) {
                                    state[i] = state[i].clone();
                                }

                                return clone;
                            },
                        }));

                        /**
                         * Shortcut function to the hasher's object interface.
                         *
                         * @param {WordArray|string} message The message to hash.
                         *
                         * @return {WordArray} The hash.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hash = CryptoJS.SHA3('message');
                         *     var hash = CryptoJS.SHA3(wordArray);
                         */
                        C.SHA3 = Hasher._createHelper(SHA3);

                        /**
                         * Shortcut function to the HMAC's object interface.
                         *
                         * @param {WordArray|string} message The message to hash.
                         * @param {WordArray|string} key The secret key.
                         *
                         * @return {WordArray} The HMAC.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hmac = CryptoJS.HmacSHA3(message, key);
                         */
                        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
                    })(Math);

                    (function () {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var Hasher = C_lib.Hasher;
                        var C_x64 = C.x64;
                        var X64Word = C_x64.Word;
                        var X64WordArray = C_x64.WordArray;
                        var C_algo = C.algo;

                        function X64Word_create() {
                            return X64Word.create.apply(X64Word, arguments);
                        }

                        // Constants
                        var K = [
                            X64Word_create(0x428a2f98, 0xd728ae22),
                            X64Word_create(0x71374491, 0x23ef65cd),
                            X64Word_create(0xb5c0fbcf, 0xec4d3b2f),
                            X64Word_create(0xe9b5dba5, 0x8189dbbc),
                            X64Word_create(0x3956c25b, 0xf348b538),
                            X64Word_create(0x59f111f1, 0xb605d019),
                            X64Word_create(0x923f82a4, 0xaf194f9b),
                            X64Word_create(0xab1c5ed5, 0xda6d8118),
                            X64Word_create(0xd807aa98, 0xa3030242),
                            X64Word_create(0x12835b01, 0x45706fbe),
                            X64Word_create(0x243185be, 0x4ee4b28c),
                            X64Word_create(0x550c7dc3, 0xd5ffb4e2),
                            X64Word_create(0x72be5d74, 0xf27b896f),
                            X64Word_create(0x80deb1fe, 0x3b1696b1),
                            X64Word_create(0x9bdc06a7, 0x25c71235),
                            X64Word_create(0xc19bf174, 0xcf692694),
                            X64Word_create(0xe49b69c1, 0x9ef14ad2),
                            X64Word_create(0xefbe4786, 0x384f25e3),
                            X64Word_create(0x0fc19dc6, 0x8b8cd5b5),
                            X64Word_create(0x240ca1cc, 0x77ac9c65),
                            X64Word_create(0x2de92c6f, 0x592b0275),
                            X64Word_create(0x4a7484aa, 0x6ea6e483),
                            X64Word_create(0x5cb0a9dc, 0xbd41fbd4),
                            X64Word_create(0x76f988da, 0x831153b5),
                            X64Word_create(0x983e5152, 0xee66dfab),
                            X64Word_create(0xa831c66d, 0x2db43210),
                            X64Word_create(0xb00327c8, 0x98fb213f),
                            X64Word_create(0xbf597fc7, 0xbeef0ee4),
                            X64Word_create(0xc6e00bf3, 0x3da88fc2),
                            X64Word_create(0xd5a79147, 0x930aa725),
                            X64Word_create(0x06ca6351, 0xe003826f),
                            X64Word_create(0x14292967, 0x0a0e6e70),
                            X64Word_create(0x27b70a85, 0x46d22ffc),
                            X64Word_create(0x2e1b2138, 0x5c26c926),
                            X64Word_create(0x4d2c6dfc, 0x5ac42aed),
                            X64Word_create(0x53380d13, 0x9d95b3df),
                            X64Word_create(0x650a7354, 0x8baf63de),
                            X64Word_create(0x766a0abb, 0x3c77b2a8),
                            X64Word_create(0x81c2c92e, 0x47edaee6),
                            X64Word_create(0x92722c85, 0x1482353b),
                            X64Word_create(0xa2bfe8a1, 0x4cf10364),
                            X64Word_create(0xa81a664b, 0xbc423001),
                            X64Word_create(0xc24b8b70, 0xd0f89791),
                            X64Word_create(0xc76c51a3, 0x0654be30),
                            X64Word_create(0xd192e819, 0xd6ef5218),
                            X64Word_create(0xd6990624, 0x5565a910),
                            X64Word_create(0xf40e3585, 0x5771202a),
                            X64Word_create(0x106aa070, 0x32bbd1b8),
                            X64Word_create(0x19a4c116, 0xb8d2d0c8),
                            X64Word_create(0x1e376c08, 0x5141ab53),
                            X64Word_create(0x2748774c, 0xdf8eeb99),
                            X64Word_create(0x34b0bcb5, 0xe19b48a8),
                            X64Word_create(0x391c0cb3, 0xc5c95a63),
                            X64Word_create(0x4ed8aa4a, 0xe3418acb),
                            X64Word_create(0x5b9cca4f, 0x7763e373),
                            X64Word_create(0x682e6ff3, 0xd6b2b8a3),
                            X64Word_create(0x748f82ee, 0x5defb2fc),
                            X64Word_create(0x78a5636f, 0x43172f60),
                            X64Word_create(0x84c87814, 0xa1f0ab72),
                            X64Word_create(0x8cc70208, 0x1a6439ec),
                            X64Word_create(0x90befffa, 0x23631e28),
                            X64Word_create(0xa4506ceb, 0xde82bde9),
                            X64Word_create(0xbef9a3f7, 0xb2c67915),
                            X64Word_create(0xc67178f2, 0xe372532b),
                            X64Word_create(0xca273ece, 0xea26619c),
                            X64Word_create(0xd186b8c7, 0x21c0c207),
                            X64Word_create(0xeada7dd6, 0xcde0eb1e),
                            X64Word_create(0xf57d4f7f, 0xee6ed178),
                            X64Word_create(0x06f067aa, 0x72176fba),
                            X64Word_create(0x0a637dc5, 0xa2c898a6),
                            X64Word_create(0x113f9804, 0xbef90dae),
                            X64Word_create(0x1b710b35, 0x131c471b),
                            X64Word_create(0x28db77f5, 0x23047d84),
                            X64Word_create(0x32caab7b, 0x40c72493),
                            X64Word_create(0x3c9ebe0a, 0x15c9bebc),
                            X64Word_create(0x431d67c4, 0x9c100d4c),
                            X64Word_create(0x4cc5d4be, 0xcb3e42b6),
                            X64Word_create(0x597f299c, 0xfc657e2a),
                            X64Word_create(0x5fcb6fab, 0x3ad6faec),
                            X64Word_create(0x6c44198c, 0x4a475817),
                        ];

                        // Reusable objects
                        var W = [];
                        (function () {
                            for (var i = 0; i < 80; i++) {
                                W[i] = X64Word_create();
                            }
                        })();

                        /**
                         * SHA-512 hash algorithm.
                         */
                        var SHA512 = (C_algo.SHA512 = Hasher.extend({
                            _doReset: function () {
                                this._hash = new X64WordArray.init([
                                    new X64Word.init(0x6a09e667, 0xf3bcc908),
                                    new X64Word.init(0xbb67ae85, 0x84caa73b),
                                    new X64Word.init(0x3c6ef372, 0xfe94f82b),
                                    new X64Word.init(0xa54ff53a, 0x5f1d36f1),
                                    new X64Word.init(0x510e527f, 0xade682d1),
                                    new X64Word.init(0x9b05688c, 0x2b3e6c1f),
                                    new X64Word.init(0x1f83d9ab, 0xfb41bd6b),
                                    new X64Word.init(0x5be0cd19, 0x137e2179),
                                ]);
                            },

                            _doProcessBlock: function (M, offset) {
                                // Shortcuts
                                var H = this._hash.words;

                                var H0 = H[0];
                                var H1 = H[1];
                                var H2 = H[2];
                                var H3 = H[3];
                                var H4 = H[4];
                                var H5 = H[5];
                                var H6 = H[6];
                                var H7 = H[7];

                                var H0h = H0.high;
                                var H0l = H0.low;
                                var H1h = H1.high;
                                var H1l = H1.low;
                                var H2h = H2.high;
                                var H2l = H2.low;
                                var H3h = H3.high;
                                var H3l = H3.low;
                                var H4h = H4.high;
                                var H4l = H4.low;
                                var H5h = H5.high;
                                var H5l = H5.low;
                                var H6h = H6.high;
                                var H6l = H6.low;
                                var H7h = H7.high;
                                var H7l = H7.low;

                                // Working variables
                                var ah = H0h;
                                var al = H0l;
                                var bh = H1h;
                                var bl = H1l;
                                var ch = H2h;
                                var cl = H2l;
                                var dh = H3h;
                                var dl = H3l;
                                var eh = H4h;
                                var el = H4l;
                                var fh = H5h;
                                var fl = H5l;
                                var gh = H6h;
                                var gl = H6l;
                                var hh = H7h;
                                var hl = H7l;

                                // Rounds
                                for (var i = 0; i < 80; i++) {
                                    // Shortcut
                                    var Wi = W[i];

                                    // Extend message
                                    if (i < 16) {
                                        var Wih = (Wi.high =
                                            M[offset + i * 2] | 0);
                                        var Wil = (Wi.low =
                                            M[offset + i * 2 + 1] | 0);
                                    } else {
                                        // Gamma0
                                        var gamma0x = W[i - 15];
                                        var gamma0xh = gamma0x.high;
                                        var gamma0xl = gamma0x.low;
                                        var gamma0h =
                                            ((gamma0xh >>> 1) |
                                                (gamma0xl << 31)) ^
                                            ((gamma0xh >>> 8) |
                                                (gamma0xl << 24)) ^
                                            (gamma0xh >>> 7);
                                        var gamma0l =
                                            ((gamma0xl >>> 1) |
                                                (gamma0xh << 31)) ^
                                            ((gamma0xl >>> 8) |
                                                (gamma0xh << 24)) ^
                                            ((gamma0xl >>> 7) |
                                                (gamma0xh << 25));

                                        // Gamma1
                                        var gamma1x = W[i - 2];
                                        var gamma1xh = gamma1x.high;
                                        var gamma1xl = gamma1x.low;
                                        var gamma1h =
                                            ((gamma1xh >>> 19) |
                                                (gamma1xl << 13)) ^
                                            ((gamma1xh << 3) |
                                                (gamma1xl >>> 29)) ^
                                            (gamma1xh >>> 6);
                                        var gamma1l =
                                            ((gamma1xl >>> 19) |
                                                (gamma1xh << 13)) ^
                                            ((gamma1xl << 3) |
                                                (gamma1xh >>> 29)) ^
                                            ((gamma1xl >>> 6) |
                                                (gamma1xh << 26));

                                        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
                                        var Wi7 = W[i - 7];
                                        var Wi7h = Wi7.high;
                                        var Wi7l = Wi7.low;

                                        var Wi16 = W[i - 16];
                                        var Wi16h = Wi16.high;
                                        var Wi16l = Wi16.low;

                                        var Wil = gamma0l + Wi7l;
                                        var Wih =
                                            gamma0h +
                                            Wi7h +
                                            (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                                        var Wil = Wil + gamma1l;
                                        var Wih =
                                            Wih +
                                            gamma1h +
                                            (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                                        var Wil = Wil + Wi16l;
                                        var Wih =
                                            Wih +
                                            Wi16h +
                                            (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);

                                        Wi.high = Wih;
                                        Wi.low = Wil;
                                    }

                                    var chh = (eh & fh) ^ (~eh & gh);
                                    var chl = (el & fl) ^ (~el & gl);
                                    var majh =
                                        (ah & bh) ^ (ah & ch) ^ (bh & ch);
                                    var majl =
                                        (al & bl) ^ (al & cl) ^ (bl & cl);

                                    var sigma0h =
                                        ((ah >>> 28) | (al << 4)) ^
                                        ((ah << 30) | (al >>> 2)) ^
                                        ((ah << 25) | (al >>> 7));
                                    var sigma0l =
                                        ((al >>> 28) | (ah << 4)) ^
                                        ((al << 30) | (ah >>> 2)) ^
                                        ((al << 25) | (ah >>> 7));
                                    var sigma1h =
                                        ((eh >>> 14) | (el << 18)) ^
                                        ((eh >>> 18) | (el << 14)) ^
                                        ((eh << 23) | (el >>> 9));
                                    var sigma1l =
                                        ((el >>> 14) | (eh << 18)) ^
                                        ((el >>> 18) | (eh << 14)) ^
                                        ((el << 23) | (eh >>> 9));

                                    // t1 = h + sigma1 + ch + K[i] + W[i]
                                    var Ki = K[i];
                                    var Kih = Ki.high;
                                    var Kil = Ki.low;

                                    var t1l = hl + sigma1l;
                                    var t1h =
                                        hh +
                                        sigma1h +
                                        (t1l >>> 0 < hl >>> 0 ? 1 : 0);
                                    var t1l = t1l + chl;
                                    var t1h =
                                        t1h +
                                        chh +
                                        (t1l >>> 0 < chl >>> 0 ? 1 : 0);
                                    var t1l = t1l + Kil;
                                    var t1h =
                                        t1h +
                                        Kih +
                                        (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
                                    var t1l = t1l + Wil;
                                    var t1h =
                                        t1h +
                                        Wih +
                                        (t1l >>> 0 < Wil >>> 0 ? 1 : 0);

                                    // t2 = sigma0 + maj
                                    var t2l = sigma0l + majl;
                                    var t2h =
                                        sigma0h +
                                        majh +
                                        (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);

                                    // Update working variables
                                    hh = gh;
                                    hl = gl;
                                    gh = fh;
                                    gl = fl;
                                    fh = eh;
                                    fl = el;
                                    el = (dl + t1l) | 0;
                                    eh =
                                        (dh +
                                            t1h +
                                            (el >>> 0 < dl >>> 0 ? 1 : 0)) |
                                        0;
                                    dh = ch;
                                    dl = cl;
                                    ch = bh;
                                    cl = bl;
                                    bh = ah;
                                    bl = al;
                                    al = (t1l + t2l) | 0;
                                    ah =
                                        (t1h +
                                            t2h +
                                            (al >>> 0 < t1l >>> 0 ? 1 : 0)) |
                                        0;
                                }

                                // Intermediate hash value
                                H0l = H0.low = H0l + al;
                                H0.high =
                                    H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
                                H1l = H1.low = H1l + bl;
                                H1.high =
                                    H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
                                H2l = H2.low = H2l + cl;
                                H2.high =
                                    H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
                                H3l = H3.low = H3l + dl;
                                H3.high =
                                    H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
                                H4l = H4.low = H4l + el;
                                H4.high =
                                    H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
                                H5l = H5.low = H5l + fl;
                                H5.high =
                                    H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
                                H6l = H6.low = H6l + gl;
                                H6.high =
                                    H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
                                H7l = H7.low = H7l + hl;
                                H7.high =
                                    H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
                            },

                            _doFinalize: function () {
                                // Shortcuts
                                var data = this._data;
                                var dataWords = data.words;

                                var nBitsTotal = this._nDataBytes * 8;
                                var nBitsLeft = data.sigBytes * 8;

                                // Add padding
                                dataWords[nBitsLeft >>> 5] |=
                                    0x80 << (24 - (nBitsLeft % 32));
                                dataWords[
                                    (((nBitsLeft + 128) >>> 10) << 5) + 30
                                ] = Math.floor(nBitsTotal / 0x100000000);
                                dataWords[
                                    (((nBitsLeft + 128) >>> 10) << 5) + 31
                                ] = nBitsTotal;
                                data.sigBytes = dataWords.length * 4;

                                // Hash final blocks
                                this._process();

                                // Convert hash to 32-bit word array before returning
                                var hash = this._hash.toX32();

                                // Return final computed hash
                                return hash;
                            },

                            clone: function () {
                                var clone = Hasher.clone.call(this);
                                clone._hash = this._hash.clone();

                                return clone;
                            },

                            blockSize: 1024 / 32,
                        }));

                        /**
                         * Shortcut function to the hasher's object interface.
                         *
                         * @param {WordArray|string} message The message to hash.
                         *
                         * @return {WordArray} The hash.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hash = CryptoJS.SHA512('message');
                         *     var hash = CryptoJS.SHA512(wordArray);
                         */
                        C.SHA512 = Hasher._createHelper(SHA512);

                        /**
                         * Shortcut function to the HMAC's object interface.
                         *
                         * @param {WordArray|string} message The message to hash.
                         * @param {WordArray|string} key The secret key.
                         *
                         * @return {WordArray} The HMAC.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hmac = CryptoJS.HmacSHA512(message, key);
                         */
                        C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
                    })();

                    (function () {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_x64 = C.x64;
                        var X64Word = C_x64.Word;
                        var X64WordArray = C_x64.WordArray;
                        var C_algo = C.algo;
                        var SHA512 = C_algo.SHA512;

                        /**
                         * SHA-384 hash algorithm.
                         */
                        var SHA384 = (C_algo.SHA384 = SHA512.extend({
                            _doReset: function () {
                                this._hash = new X64WordArray.init([
                                    new X64Word.init(0xcbbb9d5d, 0xc1059ed8),
                                    new X64Word.init(0x629a292a, 0x367cd507),
                                    new X64Word.init(0x9159015a, 0x3070dd17),
                                    new X64Word.init(0x152fecd8, 0xf70e5939),
                                    new X64Word.init(0x67332667, 0xffc00b31),
                                    new X64Word.init(0x8eb44a87, 0x68581511),
                                    new X64Word.init(0xdb0c2e0d, 0x64f98fa7),
                                    new X64Word.init(0x47b5481d, 0xbefa4fa4),
                                ]);
                            },

                            _doFinalize: function () {
                                var hash = SHA512._doFinalize.call(this);

                                hash.sigBytes -= 16;

                                return hash;
                            },
                        }));

                        /**
                         * Shortcut function to the hasher's object interface.
                         *
                         * @param {WordArray|string} message The message to hash.
                         *
                         * @return {WordArray} The hash.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hash = CryptoJS.SHA384('message');
                         *     var hash = CryptoJS.SHA384(wordArray);
                         */
                        C.SHA384 = SHA512._createHelper(SHA384);

                        /**
                         * Shortcut function to the HMAC's object interface.
                         *
                         * @param {WordArray|string} message The message to hash.
                         * @param {WordArray|string} key The secret key.
                         *
                         * @return {WordArray} The HMAC.
                         *
                         * @static
                         *
                         * @example
                         *
                         *     var hmac = CryptoJS.HmacSHA384(message, key);
                         */
                        C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
                    })();

                    /**
                     * Cipher core components.
                     */
                    CryptoJS.lib.Cipher ||
                        (function (undefined) {
                            // Shortcuts
                            var C = CryptoJS;
                            var C_lib = C.lib;
                            var Base = C_lib.Base;
                            var WordArray = C_lib.WordArray;
                            var BufferedBlockAlgorithm =
                                C_lib.BufferedBlockAlgorithm;
                            var C_enc = C.enc;
                            var Utf8 = C_enc.Utf8;
                            var Base64 = C_enc.Base64;
                            var C_algo = C.algo;
                            var EvpKDF = C_algo.EvpKDF;

                            /**
                             * Abstract base cipher template.
                             *
                             * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
                             * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
                             * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
                             * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
                             */
                            var Cipher = (C_lib.Cipher =
                                BufferedBlockAlgorithm.extend({
                                    /**
                                     * Configuration options.
                                     *
                                     * @property {WordArray} iv The IV to use for this operation.
                                     */
                                    cfg: Base.extend(),

                                    /**
                                     * Creates this cipher in encryption mode.
                                     *
                                     * @param {WordArray} key The key.
                                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                                     *
                                     * @return {Cipher} A cipher instance.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
                                     */
                                    createEncryptor: function (key, cfg) {
                                        return this.create(
                                            this._ENC_XFORM_MODE,
                                            key,
                                            cfg
                                        );
                                    },

                                    /**
                                     * Creates this cipher in decryption mode.
                                     *
                                     * @param {WordArray} key The key.
                                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                                     *
                                     * @return {Cipher} A cipher instance.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
                                     */
                                    createDecryptor: function (key, cfg) {
                                        return this.create(
                                            this._DEC_XFORM_MODE,
                                            key,
                                            cfg
                                        );
                                    },

                                    /**
                                     * Initializes a newly created cipher.
                                     *
                                     * @param {number} xformMode Either the encryption or decryption transormation mode constant.
                                     * @param {WordArray} key The key.
                                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                                     *
                                     * @example
                                     *
                                     *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
                                     */
                                    init: function (xformMode, key, cfg) {
                                        // Apply config defaults
                                        this.cfg = this.cfg.extend(cfg);

                                        // Store transform mode and key
                                        this._xformMode = xformMode;
                                        this._key = key;

                                        // Set initial values
                                        this.reset();
                                    },

                                    /**
                                     * Resets this cipher to its initial state.
                                     *
                                     * @example
                                     *
                                     *     cipher.reset();
                                     */
                                    reset: function () {
                                        // Reset data buffer
                                        BufferedBlockAlgorithm.reset.call(this);

                                        // Perform concrete-cipher logic
                                        this._doReset();
                                    },

                                    /**
                                     * Adds data to be encrypted or decrypted.
                                     *
                                     * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
                                     *
                                     * @return {WordArray} The data after processing.
                                     *
                                     * @example
                                     *
                                     *     var encrypted = cipher.process('data');
                                     *     var encrypted = cipher.process(wordArray);
                                     */
                                    process: function (dataUpdate) {
                                        // Append
                                        this._append(dataUpdate);

                                        // Process available blocks
                                        return this._process();
                                    },

                                    /**
                                     * Finalizes the encryption or decryption process.
                                     * Note that the finalize operation is effectively a destructive, read-once operation.
                                     *
                                     * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
                                     *
                                     * @return {WordArray} The data after final processing.
                                     *
                                     * @example
                                     *
                                     *     var encrypted = cipher.finalize();
                                     *     var encrypted = cipher.finalize('data');
                                     *     var encrypted = cipher.finalize(wordArray);
                                     */
                                    finalize: function (dataUpdate) {
                                        // Final data update
                                        if (dataUpdate) {
                                            this._append(dataUpdate);
                                        }

                                        // Perform concrete-cipher logic
                                        var finalProcessedData =
                                            this._doFinalize();

                                        return finalProcessedData;
                                    },

                                    keySize: 128 / 32,

                                    ivSize: 128 / 32,

                                    _ENC_XFORM_MODE: 1,

                                    _DEC_XFORM_MODE: 2,

                                    /**
                                     * Creates shortcut functions to a cipher's object interface.
                                     *
                                     * @param {Cipher} cipher The cipher to create a helper for.
                                     *
                                     * @return {Object} An object with encrypt and decrypt shortcut functions.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
                                     */
                                    _createHelper: (function () {
                                        function selectCipherStrategy(key) {
                                            if (typeof key == "string") {
                                                return PasswordBasedCipher;
                                            } else {
                                                return SerializableCipher;
                                            }
                                        }

                                        return function (cipher) {
                                            return {
                                                encrypt: function (
                                                    message,
                                                    key,
                                                    cfg
                                                ) {
                                                    return selectCipherStrategy(
                                                        key
                                                    ).encrypt(
                                                        cipher,
                                                        message,
                                                        key,
                                                        cfg
                                                    );
                                                },

                                                decrypt: function (
                                                    ciphertext,
                                                    key,
                                                    cfg
                                                ) {
                                                    return selectCipherStrategy(
                                                        key
                                                    ).decrypt(
                                                        cipher,
                                                        ciphertext,
                                                        key,
                                                        cfg
                                                    );
                                                },
                                            };
                                        };
                                    })(),
                                }));

                            /**
                             * Abstract base stream cipher template.
                             *
                             * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
                             */
                            var StreamCipher = (C_lib.StreamCipher =
                                Cipher.extend({
                                    _doFinalize: function () {
                                        // Process partial blocks
                                        var finalProcessedBlocks =
                                            this._process(!!"flush");

                                        return finalProcessedBlocks;
                                    },

                                    blockSize: 1,
                                }));

                            /**
                             * Mode namespace.
                             */
                            var C_mode = (C.mode = {});

                            /**
                             * Abstract base block cipher mode template.
                             */
                            var BlockCipherMode = (C_lib.BlockCipherMode =
                                Base.extend({
                                    /**
                                     * Creates this mode for encryption.
                                     *
                                     * @param {Cipher} cipher A block cipher instance.
                                     * @param {Array} iv The IV words.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
                                     */
                                    createEncryptor: function (cipher, iv) {
                                        return this.Encryptor.create(
                                            cipher,
                                            iv
                                        );
                                    },

                                    /**
                                     * Creates this mode for decryption.
                                     *
                                     * @param {Cipher} cipher A block cipher instance.
                                     * @param {Array} iv The IV words.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
                                     */
                                    createDecryptor: function (cipher, iv) {
                                        return this.Decryptor.create(
                                            cipher,
                                            iv
                                        );
                                    },

                                    /**
                                     * Initializes a newly created mode.
                                     *
                                     * @param {Cipher} cipher A block cipher instance.
                                     * @param {Array} iv The IV words.
                                     *
                                     * @example
                                     *
                                     *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
                                     */
                                    init: function (cipher, iv) {
                                        this._cipher = cipher;
                                        this._iv = iv;
                                    },
                                }));

                            /**
                             * Cipher Block Chaining mode.
                             */
                            var CBC = (C_mode.CBC = (function () {
                                /**
                                 * Abstract base CBC mode.
                                 */
                                var CBC = BlockCipherMode.extend();

                                /**
                                 * CBC encryptor.
                                 */
                                CBC.Encryptor = CBC.extend({
                                    /**
                                     * Processes the data block at offset.
                                     *
                                     * @param {Array} words The data words to operate on.
                                     * @param {number} offset The offset where the block starts.
                                     *
                                     * @example
                                     *
                                     *     mode.processBlock(data.words, offset);
                                     */
                                    processBlock: function (words, offset) {
                                        // Shortcuts
                                        var cipher = this._cipher;
                                        var blockSize = cipher.blockSize;

                                        // XOR and encrypt
                                        xorBlock.call(
                                            this,
                                            words,
                                            offset,
                                            blockSize
                                        );
                                        cipher.encryptBlock(words, offset);

                                        // Remember this block to use with next block
                                        this._prevBlock = words.slice(
                                            offset,
                                            offset + blockSize
                                        );
                                    },
                                });

                                /**
                                 * CBC decryptor.
                                 */
                                CBC.Decryptor = CBC.extend({
                                    /**
                                     * Processes the data block at offset.
                                     *
                                     * @param {Array} words The data words to operate on.
                                     * @param {number} offset The offset where the block starts.
                                     *
                                     * @example
                                     *
                                     *     mode.processBlock(data.words, offset);
                                     */
                                    processBlock: function (words, offset) {
                                        // Shortcuts
                                        var cipher = this._cipher;
                                        var blockSize = cipher.blockSize;

                                        // Remember this block to use with next block
                                        var thisBlock = words.slice(
                                            offset,
                                            offset + blockSize
                                        );

                                        // Decrypt and XOR
                                        cipher.decryptBlock(words, offset);
                                        xorBlock.call(
                                            this,
                                            words,
                                            offset,
                                            blockSize
                                        );

                                        // This block becomes the previous block
                                        this._prevBlock = thisBlock;
                                    },
                                });

                                function xorBlock(words, offset, blockSize) {
                                    // Shortcut
                                    var iv = this._iv;

                                    // Choose mixing block
                                    if (iv) {
                                        var block = iv;

                                        // Remove IV for subsequent blocks
                                        this._iv = undefined;
                                    } else {
                                        var block = this._prevBlock;
                                    }

                                    // XOR blocks
                                    for (var i = 0; i < blockSize; i++) {
                                        words[offset + i] ^= block[i];
                                    }
                                }

                                return CBC;
                            })());

                            /**
                             * Padding namespace.
                             */
                            var C_pad = (C.pad = {});

                            /**
                             * PKCS #5/7 padding strategy.
                             */
                            var Pkcs7 = (C_pad.Pkcs7 = {
                                /**
                                 * Pads data using the algorithm defined in PKCS #5/7.
                                 *
                                 * @param {WordArray} data The data to pad.
                                 * @param {number} blockSize The multiple that the data should be padded to.
                                 *
                                 * @static
                                 *
                                 * @example
                                 *
                                 *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
                                 */
                                pad: function (data, blockSize) {
                                    // Shortcut
                                    var blockSizeBytes = blockSize * 4;

                                    // Count padding bytes
                                    var nPaddingBytes =
                                        blockSizeBytes -
                                        (data.sigBytes % blockSizeBytes);

                                    // Create padding word
                                    var paddingWord =
                                        (nPaddingBytes << 24) |
                                        (nPaddingBytes << 16) |
                                        (nPaddingBytes << 8) |
                                        nPaddingBytes;

                                    // Create padding
                                    var paddingWords = [];
                                    for (var i = 0; i < nPaddingBytes; i += 4) {
                                        paddingWords.push(paddingWord);
                                    }
                                    var padding = WordArray.create(
                                        paddingWords,
                                        nPaddingBytes
                                    );

                                    // Add padding
                                    data.concat(padding);
                                },

                                /**
                                 * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
                                 *
                                 * @param {WordArray} data The data to unpad.
                                 *
                                 * @static
                                 *
                                 * @example
                                 *
                                 *     CryptoJS.pad.Pkcs7.unpad(wordArray);
                                 */
                                unpad: function (data) {
                                    // Get number of padding bytes from last byte
                                    var nPaddingBytes =
                                        data.words[(data.sigBytes - 1) >>> 2] &
                                        0xff;

                                    // Remove padding
                                    data.sigBytes -= nPaddingBytes;
                                },
                            });

                            /**
                             * Abstract base block cipher template.
                             *
                             * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
                             */
                            var BlockCipher = (C_lib.BlockCipher =
                                Cipher.extend({
                                    /**
                                     * Configuration options.
                                     *
                                     * @property {Mode} mode The block mode to use. Default: CBC
                                     * @property {Padding} padding The padding strategy to use. Default: Pkcs7
                                     */
                                    cfg: Cipher.cfg.extend({
                                        mode: CBC,
                                        padding: Pkcs7,
                                    }),

                                    reset: function () {
                                        // Reset cipher
                                        Cipher.reset.call(this);

                                        // Shortcuts
                                        var cfg = this.cfg;
                                        var iv = cfg.iv;
                                        var mode = cfg.mode;

                                        // Reset block mode
                                        if (
                                            this._xformMode ==
                                            this._ENC_XFORM_MODE
                                        ) {
                                            var modeCreator =
                                                mode.createEncryptor;
                                        } /* if (this._xformMode == this._DEC_XFORM_MODE) */ else {
                                            var modeCreator =
                                                mode.createDecryptor;
                                            // Keep at least one block in the buffer for unpadding
                                            this._minBufferSize = 1;
                                        }

                                        if (
                                            this._mode &&
                                            this._mode.__creator == modeCreator
                                        ) {
                                            this._mode.init(
                                                this,
                                                iv && iv.words
                                            );
                                        } else {
                                            this._mode = modeCreator.call(
                                                mode,
                                                this,
                                                iv && iv.words
                                            );
                                            this._mode.__creator = modeCreator;
                                        }
                                    },

                                    _doProcessBlock: function (words, offset) {
                                        this._mode.processBlock(words, offset);
                                    },

                                    _doFinalize: function () {
                                        // Shortcut
                                        var padding = this.cfg.padding;

                                        // Finalize
                                        if (
                                            this._xformMode ==
                                            this._ENC_XFORM_MODE
                                        ) {
                                            // Pad data
                                            padding.pad(
                                                this._data,
                                                this.blockSize
                                            );

                                            // Process final blocks
                                            var finalProcessedBlocks =
                                                this._process(!!"flush");
                                        } /* if (this._xformMode == this._DEC_XFORM_MODE) */ else {
                                            // Process final blocks
                                            var finalProcessedBlocks =
                                                this._process(!!"flush");

                                            // Unpad data
                                            padding.unpad(finalProcessedBlocks);
                                        }

                                        return finalProcessedBlocks;
                                    },

                                    blockSize: 128 / 32,
                                }));

                            /**
                             * A collection of cipher parameters.
                             *
                             * @property {WordArray} ciphertext The raw ciphertext.
                             * @property {WordArray} key The key to this ciphertext.
                             * @property {WordArray} iv The IV used in the ciphering operation.
                             * @property {WordArray} salt The salt used with a key derivation function.
                             * @property {Cipher} algorithm The cipher algorithm.
                             * @property {Mode} mode The block mode used in the ciphering operation.
                             * @property {Padding} padding The padding scheme used in the ciphering operation.
                             * @property {number} blockSize The block size of the cipher.
                             * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
                             */
                            var CipherParams = (C_lib.CipherParams =
                                Base.extend({
                                    /**
                                     * Initializes a newly created cipher params object.
                                     *
                                     * @param {Object} cipherParams An object with any of the possible cipher parameters.
                                     *
                                     * @example
                                     *
                                     *     var cipherParams = CryptoJS.lib.CipherParams.create({
                                     *         ciphertext: ciphertextWordArray,
                                     *         key: keyWordArray,
                                     *         iv: ivWordArray,
                                     *         salt: saltWordArray,
                                     *         algorithm: CryptoJS.algo.AES,
                                     *         mode: CryptoJS.mode.CBC,
                                     *         padding: CryptoJS.pad.PKCS7,
                                     *         blockSize: 4,
                                     *         formatter: CryptoJS.format.OpenSSL
                                     *     });
                                     */
                                    init: function (cipherParams) {
                                        this.mixIn(cipherParams);
                                    },

                                    /**
                                     * Converts this cipher params object to a string.
                                     *
                                     * @param {Format} formatter (Optional) The formatting strategy to use.
                                     *
                                     * @return {string} The stringified cipher params.
                                     *
                                     * @throws Error If neither the formatter nor the default formatter is set.
                                     *
                                     * @example
                                     *
                                     *     var string = cipherParams + '';
                                     *     var string = cipherParams.toString();
                                     *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
                                     */
                                    toString: function (formatter) {
                                        return (
                                            formatter || this.formatter
                                        ).stringify(this);
                                    },
                                }));

                            /**
                             * Format namespace.
                             */
                            var C_format = (C.format = {});

                            /**
                             * OpenSSL formatting strategy.
                             */
                            var OpenSSLFormatter = (C_format.OpenSSL = {
                                /**
                                 * Converts a cipher params object to an OpenSSL-compatible string.
                                 *
                                 * @param {CipherParams} cipherParams The cipher params object.
                                 *
                                 * @return {string} The OpenSSL-compatible string.
                                 *
                                 * @static
                                 *
                                 * @example
                                 *
                                 *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
                                 */
                                stringify: function (cipherParams) {
                                    // Shortcuts
                                    var ciphertext = cipherParams.ciphertext;
                                    var salt = cipherParams.salt;

                                    // Format
                                    if (salt) {
                                        var wordArray = WordArray.create([
                                            0x53616c74, 0x65645f5f,
                                        ])
                                            .concat(salt)
                                            .concat(ciphertext);
                                    } else {
                                        var wordArray = ciphertext;
                                    }

                                    return wordArray.toString(Base64);
                                },

                                /**
                                 * Converts an OpenSSL-compatible string to a cipher params object.
                                 *
                                 * @param {string} openSSLStr The OpenSSL-compatible string.
                                 *
                                 * @return {CipherParams} The cipher params object.
                                 *
                                 * @static
                                 *
                                 * @example
                                 *
                                 *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
                                 */
                                parse: function (openSSLStr) {
                                    // Parse base64
                                    var ciphertext = Base64.parse(openSSLStr);

                                    // Shortcut
                                    var ciphertextWords = ciphertext.words;

                                    // Test for salt
                                    if (
                                        ciphertextWords[0] == 0x53616c74 &&
                                        ciphertextWords[1] == 0x65645f5f
                                    ) {
                                        // Extract salt
                                        var salt = WordArray.create(
                                            ciphertextWords.slice(2, 4)
                                        );

                                        // Remove salt from ciphertext
                                        ciphertextWords.splice(0, 4);
                                        ciphertext.sigBytes -= 16;
                                    }

                                    return CipherParams.create({
                                        ciphertext: ciphertext,
                                        salt: salt,
                                    });
                                },
                            });

                            /**
                             * A cipher wrapper that returns ciphertext as a serializable cipher params object.
                             */
                            var SerializableCipher = (C_lib.SerializableCipher =
                                Base.extend({
                                    /**
                                     * Configuration options.
                                     *
                                     * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
                                     */
                                    cfg: Base.extend({
                                        format: OpenSSLFormatter,
                                    }),

                                    /**
                                     * Encrypts a message.
                                     *
                                     * @param {Cipher} cipher The cipher algorithm to use.
                                     * @param {WordArray|string} message The message to encrypt.
                                     * @param {WordArray} key The key.
                                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                                     *
                                     * @return {CipherParams} A cipher params object.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
                                     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
                                     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
                                     */
                                    encrypt: function (
                                        cipher,
                                        message,
                                        key,
                                        cfg
                                    ) {
                                        // Apply config defaults
                                        cfg = this.cfg.extend(cfg);

                                        // Encrypt
                                        var encryptor = cipher.createEncryptor(
                                            key,
                                            cfg
                                        );
                                        var ciphertext =
                                            encryptor.finalize(message);

                                        // Shortcut
                                        var cipherCfg = encryptor.cfg;

                                        // Create and return serializable cipher params
                                        return CipherParams.create({
                                            ciphertext: ciphertext,
                                            key: key,
                                            iv: cipherCfg.iv,
                                            algorithm: cipher,
                                            mode: cipherCfg.mode,
                                            padding: cipherCfg.padding,
                                            blockSize: cipher.blockSize,
                                            formatter: cfg.format,
                                        });
                                    },

                                    /**
                                     * Decrypts serialized ciphertext.
                                     *
                                     * @param {Cipher} cipher The cipher algorithm to use.
                                     * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
                                     * @param {WordArray} key The key.
                                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                                     *
                                     * @return {WordArray} The plaintext.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
                                     *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
                                     */
                                    decrypt: function (
                                        cipher,
                                        ciphertext,
                                        key,
                                        cfg
                                    ) {
                                        // Apply config defaults
                                        cfg = this.cfg.extend(cfg);

                                        // Convert string to CipherParams
                                        ciphertext = this._parse(
                                            ciphertext,
                                            cfg.format
                                        );

                                        // Decrypt
                                        var plaintext = cipher
                                            .createDecryptor(key, cfg)
                                            .finalize(ciphertext.ciphertext);

                                        return plaintext;
                                    },

                                    /**
                                     * Converts serialized ciphertext to CipherParams,
                                     * else assumed CipherParams already and returns ciphertext unchanged.
                                     *
                                     * @param {CipherParams|string} ciphertext The ciphertext.
                                     * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
                                     *
                                     * @return {CipherParams} The unserialized ciphertext.
                                     *
                                     * @static
                                     *
                                     * @example
                                     *
                                     *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
                                     */
                                    _parse: function (ciphertext, format) {
                                        if (typeof ciphertext == "string") {
                                            return format.parse(
                                                ciphertext,
                                                this
                                            );
                                        } else {
                                            return ciphertext;
                                        }
                                    },
                                }));

                            /**
                             * Key derivation function namespace.
                             */
                            var C_kdf = (C.kdf = {});

                            /**
                             * OpenSSL key derivation function.
                             */
                            var OpenSSLKdf = (C_kdf.OpenSSL = {
                                /**
                                 * Derives a key and IV from a password.
                                 *
                                 * @param {string} password The password to derive from.
                                 * @param {number} keySize The size in words of the key to generate.
                                 * @param {number} ivSize The size in words of the IV to generate.
                                 * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
                                 *
                                 * @return {CipherParams} A cipher params object with the key, IV, and salt.
                                 *
                                 * @static
                                 *
                                 * @example
                                 *
                                 *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
                                 *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
                                 */
                                execute: function (
                                    password,
                                    keySize,
                                    ivSize,
                                    salt
                                ) {
                                    // Generate random salt
                                    if (!salt) {
                                        salt = WordArray.random(64 / 8);
                                    }

                                    // Derive key and IV
                                    var key = EvpKDF.create({
                                        keySize: keySize + ivSize,
                                    }).compute(password, salt);

                                    // Separate key and IV
                                    var iv = WordArray.create(
                                        key.words.slice(keySize),
                                        ivSize * 4
                                    );
                                    key.sigBytes = keySize * 4;

                                    // Return params
                                    return CipherParams.create({
                                        key: key,
                                        iv: iv,
                                        salt: salt,
                                    });
                                },
                            });

                            /**
                             * A serializable cipher wrapper that derives the key from a password,
                             * and returns ciphertext as a serializable cipher params object.
                             */
                            var PasswordBasedCipher =
                                (C_lib.PasswordBasedCipher =
                                    SerializableCipher.extend({
                                        /**
                                         * Configuration options.
                                         *
                                         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
                                         */
                                        cfg: SerializableCipher.cfg.extend({
                                            kdf: OpenSSLKdf,
                                        }),

                                        /**
                                         * Encrypts a message using a password.
                                         *
                                         * @param {Cipher} cipher The cipher algorithm to use.
                                         * @param {WordArray|string} message The message to encrypt.
                                         * @param {string} password The password.
                                         * @param {Object} cfg (Optional) The configuration options to use for this operation.
                                         *
                                         * @return {CipherParams} A cipher params object.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
                                         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
                                         */
                                        encrypt: function (
                                            cipher,
                                            message,
                                            password,
                                            cfg
                                        ) {
                                            // Apply config defaults
                                            cfg = this.cfg.extend(cfg);

                                            // Derive key and other params
                                            var derivedParams = cfg.kdf.execute(
                                                password,
                                                cipher.keySize,
                                                cipher.ivSize
                                            );

                                            // Add IV to config
                                            cfg.iv = derivedParams.iv;

                                            // Encrypt
                                            var ciphertext =
                                                SerializableCipher.encrypt.call(
                                                    this,
                                                    cipher,
                                                    message,
                                                    derivedParams.key,
                                                    cfg
                                                );

                                            // Mix in derived params
                                            ciphertext.mixIn(derivedParams);

                                            return ciphertext;
                                        },

                                        /**
                                         * Decrypts serialized ciphertext using a password.
                                         *
                                         * @param {Cipher} cipher The cipher algorithm to use.
                                         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
                                         * @param {string} password The password.
                                         * @param {Object} cfg (Optional) The configuration options to use for this operation.
                                         *
                                         * @return {WordArray} The plaintext.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
                                         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
                                         */
                                        decrypt: function (
                                            cipher,
                                            ciphertext,
                                            password,
                                            cfg
                                        ) {
                                            // Apply config defaults
                                            cfg = this.cfg.extend(cfg);

                                            // Convert string to CipherParams
                                            ciphertext = this._parse(
                                                ciphertext,
                                                cfg.format
                                            );

                                            // Derive key and other params
                                            var derivedParams = cfg.kdf.execute(
                                                password,
                                                cipher.keySize,
                                                cipher.ivSize,
                                                ciphertext.salt
                                            );

                                            // Add IV to config
                                            cfg.iv = derivedParams.iv;

                                            // Decrypt
                                            var plaintext =
                                                SerializableCipher.decrypt.call(
                                                    this,
                                                    cipher,
                                                    ciphertext,
                                                    derivedParams.key,
                                                    cfg
                                                );

                                            return plaintext;
                                        },
                                    }));
                        })();

                    /**
                     * Cipher Feedback block mode.
                     */
                    CryptoJS.mode.CFB = (function () {
                        var CFB = CryptoJS.lib.BlockCipherMode.extend();

                        CFB.Encryptor = CFB.extend({
                            processBlock: function (words, offset) {
                                // Shortcuts
                                var cipher = this._cipher;
                                var blockSize = cipher.blockSize;

                                generateKeystreamAndEncrypt.call(
                                    this,
                                    words,
                                    offset,
                                    blockSize,
                                    cipher
                                );

                                // Remember this block to use with next block
                                this._prevBlock = words.slice(
                                    offset,
                                    offset + blockSize
                                );
                            },
                        });

                        CFB.Decryptor = CFB.extend({
                            processBlock: function (words, offset) {
                                // Shortcuts
                                var cipher = this._cipher;
                                var blockSize = cipher.blockSize;

                                // Remember this block to use with next block
                                var thisBlock = words.slice(
                                    offset,
                                    offset + blockSize
                                );

                                generateKeystreamAndEncrypt.call(
                                    this,
                                    words,
                                    offset,
                                    blockSize,
                                    cipher
                                );

                                // This block becomes the previous block
                                this._prevBlock = thisBlock;
                            },
                        });

                        function generateKeystreamAndEncrypt(
                            words,
                            offset,
                            blockSize,
                            cipher
                        ) {
                            // Shortcut
                            var iv = this._iv;

                            // Generate keystream
                            if (iv) {
                                var keystream = iv.slice(0);

                                // Remove IV for subsequent blocks
                                this._iv = undefined;
                            } else {
                                var keystream = this._prevBlock;
                            }
                            cipher.encryptBlock(keystream, 0);

                            // Encrypt
                            for (var i = 0; i < blockSize; i++) {
                                words[offset + i] ^= keystream[i];
                            }
                        }

                        return CFB;
                    })();

                    /**
                     * Electronic Codebook block mode.
                     */
                    CryptoJS.mode.ECB = (function () {
                        var ECB = CryptoJS.lib.BlockCipherMode.extend();

                        ECB.Encryptor = ECB.extend({
                            processBlock: function (words, offset) {
                                this._cipher.encryptBlock(words, offset);
                            },
                        });

                        ECB.Decryptor = ECB.extend({
                            processBlock: function (words, offset) {
                                this._cipher.decryptBlock(words, offset);
                            },
                        });

                        return ECB;
                    })();

                    /**
                     * ANSI X.923 padding strategy.
                     */
                    CryptoJS.pad.AnsiX923 = {
                        pad: function (data, blockSize) {
                            // Shortcuts
                            var dataSigBytes = data.sigBytes;
                            var blockSizeBytes = blockSize * 4;

                            // Count padding bytes
                            var nPaddingBytes =
                                blockSizeBytes -
                                (dataSigBytes % blockSizeBytes);

                            // Compute last byte position
                            var lastBytePos = dataSigBytes + nPaddingBytes - 1;

                            // Pad
                            data.clamp();
                            data.words[lastBytePos >>> 2] |=
                                nPaddingBytes << (24 - (lastBytePos % 4) * 8);
                            data.sigBytes += nPaddingBytes;
                        },

                        unpad: function (data) {
                            // Get number of padding bytes from last byte
                            var nPaddingBytes =
                                data.words[(data.sigBytes - 1) >>> 2] & 0xff;

                            // Remove padding
                            data.sigBytes -= nPaddingBytes;
                        },
                    };

                    /**
                     * ISO 10126 padding strategy.
                     */
                    CryptoJS.pad.Iso10126 = {
                        pad: function (data, blockSize) {
                            // Shortcut
                            var blockSizeBytes = blockSize * 4;

                            // Count padding bytes
                            var nPaddingBytes =
                                blockSizeBytes -
                                (data.sigBytes % blockSizeBytes);

                            // Pad
                            data.concat(
                                CryptoJS.lib.WordArray.random(nPaddingBytes - 1)
                            ).concat(
                                CryptoJS.lib.WordArray.create(
                                    [nPaddingBytes << 24],
                                    1
                                )
                            );
                        },

                        unpad: function (data) {
                            // Get number of padding bytes from last byte
                            var nPaddingBytes =
                                data.words[(data.sigBytes - 1) >>> 2] & 0xff;

                            // Remove padding
                            data.sigBytes -= nPaddingBytes;
                        },
                    };

                    /**
                     * ISO/IEC 9797-1 Padding Method 2.
                     */
                    CryptoJS.pad.Iso97971 = {
                        pad: function (data, blockSize) {
                            // Add 0x80 byte
                            data.concat(
                                CryptoJS.lib.WordArray.create([0x80000000], 1)
                            );

                            // Zero pad the rest
                            CryptoJS.pad.ZeroPadding.pad(data, blockSize);
                        },

                        unpad: function (data) {
                            // Remove zero padding
                            CryptoJS.pad.ZeroPadding.unpad(data);

                            // Remove one more byte -- the 0x80 byte
                            data.sigBytes--;
                        },
                    };

                    /**
                     * Output Feedback block mode.
                     */
                    CryptoJS.mode.OFB = (function () {
                        var OFB = CryptoJS.lib.BlockCipherMode.extend();

                        var Encryptor = (OFB.Encryptor = OFB.extend({
                            processBlock: function (words, offset) {
                                // Shortcuts
                                var cipher = this._cipher;
                                var blockSize = cipher.blockSize;
                                var iv = this._iv;
                                var keystream = this._keystream;

                                // Generate keystream
                                if (iv) {
                                    keystream = this._keystream = iv.slice(0);

                                    // Remove IV for subsequent blocks
                                    this._iv = undefined;
                                }
                                cipher.encryptBlock(keystream, 0);

                                // Encrypt
                                for (var i = 0; i < blockSize; i++) {
                                    words[offset + i] ^= keystream[i];
                                }
                            },
                        }));

                        OFB.Decryptor = Encryptor;

                        return OFB;
                    })();

                    /**
                     * A noop padding strategy.
                     */
                    CryptoJS.pad.NoPadding = {
                        pad: function () {},

                        unpad: function () {},
                    };

                    (function (undefined) {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var CipherParams = C_lib.CipherParams;
                        var C_enc = C.enc;
                        var Hex = C_enc.Hex;
                        var C_format = C.format;

                        var HexFormatter = (C_format.Hex = {
                            /**
                             * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
                             *
                             * @param {CipherParams} cipherParams The cipher params object.
                             *
                             * @return {string} The hexadecimally encoded string.
                             *
                             * @static
                             *
                             * @example
                             *
                             *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
                             */
                            stringify: function (cipherParams) {
                                return cipherParams.ciphertext.toString(Hex);
                            },

                            /**
                             * Converts a hexadecimally encoded ciphertext string to a cipher params object.
                             *
                             * @param {string} input The hexadecimally encoded string.
                             *
                             * @return {CipherParams} The cipher params object.
                             *
                             * @static
                             *
                             * @example
                             *
                             *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
                             */
                            parse: function (input) {
                                var ciphertext = Hex.parse(input);
                                return CipherParams.create({
                                    ciphertext: ciphertext,
                                });
                            },
                        });
                    })();

                    (function () {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var BlockCipher = C_lib.BlockCipher;
                        var C_algo = C.algo;

                        // Lookup tables
                        var SBOX = [];
                        var INV_SBOX = [];
                        var SUB_MIX_0 = [];
                        var SUB_MIX_1 = [];
                        var SUB_MIX_2 = [];
                        var SUB_MIX_3 = [];
                        var INV_SUB_MIX_0 = [];
                        var INV_SUB_MIX_1 = [];
                        var INV_SUB_MIX_2 = [];
                        var INV_SUB_MIX_3 = [];

                        // Compute lookup tables
                        (function () {
                            // Compute double table
                            var d = [];
                            for (var i = 0; i < 256; i++) {
                                if (i < 128) {
                                    d[i] = i << 1;
                                } else {
                                    d[i] = (i << 1) ^ 0x11b;
                                }
                            }

                            // Walk GF(2^8)
                            var x = 0;
                            var xi = 0;
                            for (var i = 0; i < 256; i++) {
                                // Compute sbox
                                var sx =
                                    xi ^
                                    (xi << 1) ^
                                    (xi << 2) ^
                                    (xi << 3) ^
                                    (xi << 4);
                                sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
                                SBOX[x] = sx;
                                INV_SBOX[sx] = x;

                                // Compute multiplication
                                var x2 = d[x];
                                var x4 = d[x2];
                                var x8 = d[x4];

                                // Compute sub bytes, mix columns tables
                                var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
                                SUB_MIX_0[x] = (t << 24) | (t >>> 8);
                                SUB_MIX_1[x] = (t << 16) | (t >>> 16);
                                SUB_MIX_2[x] = (t << 8) | (t >>> 24);
                                SUB_MIX_3[x] = t;

                                // Compute inv sub bytes, inv mix columns tables
                                var t =
                                    (x8 * 0x1010101) ^
                                    (x4 * 0x10001) ^
                                    (x2 * 0x101) ^
                                    (x * 0x1010100);
                                INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
                                INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
                                INV_SUB_MIX_2[sx] = (t << 8) | (t >>> 24);
                                INV_SUB_MIX_3[sx] = t;

                                // Compute next counter
                                if (!x) {
                                    x = xi = 1;
                                } else {
                                    x = x2 ^ d[d[d[x8 ^ x2]]];
                                    xi ^= d[d[xi]];
                                }
                            }
                        })();

                        // Precomputed Rcon lookup
                        var RCON = [
                            0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
                            0x80, 0x1b, 0x36,
                        ];

                        /**
                         * AES block cipher algorithm.
                         */
                        var AES = (C_algo.AES = BlockCipher.extend({
                            _doReset: function () {
                                // Skip reset of nRounds has been set before and key did not change
                                if (
                                    this._nRounds &&
                                    this._keyPriorReset === this._key
                                ) {
                                    return;
                                }

                                // Shortcuts
                                var key = (this._keyPriorReset = this._key);
                                var keyWords = key.words;
                                var keySize = key.sigBytes / 4;

                                // Compute number of rounds
                                var nRounds = (this._nRounds = keySize + 6);

                                // Compute number of key schedule rows
                                var ksRows = (nRounds + 1) * 4;

                                // Compute key schedule
                                var keySchedule = (this._keySchedule = []);
                                for (var ksRow = 0; ksRow < ksRows; ksRow++) {
                                    if (ksRow < keySize) {
                                        keySchedule[ksRow] = keyWords[ksRow];
                                    } else {
                                        var t = keySchedule[ksRow - 1];

                                        if (!(ksRow % keySize)) {
                                            // Rot word
                                            t = (t << 8) | (t >>> 24);

                                            // Sub word
                                            t =
                                                (SBOX[t >>> 24] << 24) |
                                                (SBOX[(t >>> 16) & 0xff] <<
                                                    16) |
                                                (SBOX[(t >>> 8) & 0xff] << 8) |
                                                SBOX[t & 0xff];

                                            // Mix Rcon
                                            t ^=
                                                RCON[(ksRow / keySize) | 0] <<
                                                24;
                                        } else if (
                                            keySize > 6 &&
                                            ksRow % keySize == 4
                                        ) {
                                            // Sub word
                                            t =
                                                (SBOX[t >>> 24] << 24) |
                                                (SBOX[(t >>> 16) & 0xff] <<
                                                    16) |
                                                (SBOX[(t >>> 8) & 0xff] << 8) |
                                                SBOX[t & 0xff];
                                        }

                                        keySchedule[ksRow] =
                                            keySchedule[ksRow - keySize] ^ t;
                                    }
                                }

                                // Compute inv key schedule
                                var invKeySchedule = (this._invKeySchedule =
                                    []);
                                for (
                                    var invKsRow = 0;
                                    invKsRow < ksRows;
                                    invKsRow++
                                ) {
                                    var ksRow = ksRows - invKsRow;

                                    if (invKsRow % 4) {
                                        var t = keySchedule[ksRow];
                                    } else {
                                        var t = keySchedule[ksRow - 4];
                                    }

                                    if (invKsRow < 4 || ksRow <= 4) {
                                        invKeySchedule[invKsRow] = t;
                                    } else {
                                        invKeySchedule[invKsRow] =
                                            INV_SUB_MIX_0[SBOX[t >>> 24]] ^
                                            INV_SUB_MIX_1[
                                                SBOX[(t >>> 16) & 0xff]
                                            ] ^
                                            INV_SUB_MIX_2[
                                                SBOX[(t >>> 8) & 0xff]
                                            ] ^
                                            INV_SUB_MIX_3[SBOX[t & 0xff]];
                                    }
                                }
                            },

                            encryptBlock: function (M, offset) {
                                this._doCryptBlock(
                                    M,
                                    offset,
                                    this._keySchedule,
                                    SUB_MIX_0,
                                    SUB_MIX_1,
                                    SUB_MIX_2,
                                    SUB_MIX_3,
                                    SBOX
                                );
                            },

                            decryptBlock: function (M, offset) {
                                // Swap 2nd and 4th rows
                                var t = M[offset + 1];
                                M[offset + 1] = M[offset + 3];
                                M[offset + 3] = t;

                                this._doCryptBlock(
                                    M,
                                    offset,
                                    this._invKeySchedule,
                                    INV_SUB_MIX_0,
                                    INV_SUB_MIX_1,
                                    INV_SUB_MIX_2,
                                    INV_SUB_MIX_3,
                                    INV_SBOX
                                );

                                // Inv swap 2nd and 4th rows
                                var t = M[offset + 1];
                                M[offset + 1] = M[offset + 3];
                                M[offset + 3] = t;
                            },

                            _doCryptBlock: function (
                                M,
                                offset,
                                keySchedule,
                                SUB_MIX_0,
                                SUB_MIX_1,
                                SUB_MIX_2,
                                SUB_MIX_3,
                                SBOX
                            ) {
                                // Shortcut
                                var nRounds = this._nRounds;

                                // Get input, add round key
                                var s0 = M[offset] ^ keySchedule[0];
                                var s1 = M[offset + 1] ^ keySchedule[1];
                                var s2 = M[offset + 2] ^ keySchedule[2];
                                var s3 = M[offset + 3] ^ keySchedule[3];

                                // Key schedule row counter
                                var ksRow = 4;

                                // Rounds
                                for (var round = 1; round < nRounds; round++) {
                                    // Shift rows, sub bytes, mix columns, add round key
                                    var t0 =
                                        SUB_MIX_0[s0 >>> 24] ^
                                        SUB_MIX_1[(s1 >>> 16) & 0xff] ^
                                        SUB_MIX_2[(s2 >>> 8) & 0xff] ^
                                        SUB_MIX_3[s3 & 0xff] ^
                                        keySchedule[ksRow++];
                                    var t1 =
                                        SUB_MIX_0[s1 >>> 24] ^
                                        SUB_MIX_1[(s2 >>> 16) & 0xff] ^
                                        SUB_MIX_2[(s3 >>> 8) & 0xff] ^
                                        SUB_MIX_3[s0 & 0xff] ^
                                        keySchedule[ksRow++];
                                    var t2 =
                                        SUB_MIX_0[s2 >>> 24] ^
                                        SUB_MIX_1[(s3 >>> 16) & 0xff] ^
                                        SUB_MIX_2[(s0 >>> 8) & 0xff] ^
                                        SUB_MIX_3[s1 & 0xff] ^
                                        keySchedule[ksRow++];
                                    var t3 =
                                        SUB_MIX_0[s3 >>> 24] ^
                                        SUB_MIX_1[(s0 >>> 16) & 0xff] ^
                                        SUB_MIX_2[(s1 >>> 8) & 0xff] ^
                                        SUB_MIX_3[s2 & 0xff] ^
                                        keySchedule[ksRow++];

                                    // Update state
                                    s0 = t0;
                                    s1 = t1;
                                    s2 = t2;
                                    s3 = t3;
                                }

                                // Shift rows, sub bytes, add round key
                                var t0 =
                                    ((SBOX[s0 >>> 24] << 24) |
                                        (SBOX[(s1 >>> 16) & 0xff] << 16) |
                                        (SBOX[(s2 >>> 8) & 0xff] << 8) |
                                        SBOX[s3 & 0xff]) ^
                                    keySchedule[ksRow++];
                                var t1 =
                                    ((SBOX[s1 >>> 24] << 24) |
                                        (SBOX[(s2 >>> 16) & 0xff] << 16) |
                                        (SBOX[(s3 >>> 8) & 0xff] << 8) |
                                        SBOX[s0 & 0xff]) ^
                                    keySchedule[ksRow++];
                                var t2 =
                                    ((SBOX[s2 >>> 24] << 24) |
                                        (SBOX[(s3 >>> 16) & 0xff] << 16) |
                                        (SBOX[(s0 >>> 8) & 0xff] << 8) |
                                        SBOX[s1 & 0xff]) ^
                                    keySchedule[ksRow++];
                                var t3 =
                                    ((SBOX[s3 >>> 24] << 24) |
                                        (SBOX[(s0 >>> 16) & 0xff] << 16) |
                                        (SBOX[(s1 >>> 8) & 0xff] << 8) |
                                        SBOX[s2 & 0xff]) ^
                                    keySchedule[ksRow++];

                                // Set output
                                M[offset] = t0;
                                M[offset + 1] = t1;
                                M[offset + 2] = t2;
                                M[offset + 3] = t3;
                            },

                            keySize: 256 / 32,
                        }));

                        /**
                         * Shortcut functions to the cipher's object interface.
                         *
                         * @example
                         *
                         *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
                         *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
                         */
                        C.AES = BlockCipher._createHelper(AES);
                    })();

                    (function () {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var WordArray = C_lib.WordArray;
                        var BlockCipher = C_lib.BlockCipher;
                        var C_algo = C.algo;

                        // Permuted Choice 1 constants
                        var PC1 = [
                            57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26,
                            18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52,
                            44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46,
                            38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5,
                            28, 20, 12, 4,
                        ];

                        // Permuted Choice 2 constants
                        var PC2 = [
                            14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19,
                            12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37,
                            47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34,
                            53, 46, 42, 50, 36, 29, 32,
                        ];

                        // Cumulative bit shift constants
                        var BIT_SHIFTS = [
                            1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25,
                            27, 28,
                        ];

                        // SBOXes and round permutation constants
                        var SBOX_P = [
                            {
                                0x0: 0x808200,
                                0x10000000: 0x8000,
                                0x20000000: 0x808002,
                                0x30000000: 0x2,
                                0x40000000: 0x200,
                                0x50000000: 0x808202,
                                0x60000000: 0x800202,
                                0x70000000: 0x800000,
                                0x80000000: 0x202,
                                0x90000000: 0x800200,
                                0xa0000000: 0x8200,
                                0xb0000000: 0x808000,
                                0xc0000000: 0x8002,
                                0xd0000000: 0x800002,
                                0xe0000000: 0x0,
                                0xf0000000: 0x8202,
                                0x8000000: 0x0,
                                0x18000000: 0x808202,
                                0x28000000: 0x8202,
                                0x38000000: 0x8000,
                                0x48000000: 0x808200,
                                0x58000000: 0x200,
                                0x68000000: 0x808002,
                                0x78000000: 0x2,
                                0x88000000: 0x800200,
                                0x98000000: 0x8200,
                                0xa8000000: 0x808000,
                                0xb8000000: 0x800202,
                                0xc8000000: 0x800002,
                                0xd8000000: 0x8002,
                                0xe8000000: 0x202,
                                0xf8000000: 0x800000,
                                0x1: 0x8000,
                                0x10000001: 0x2,
                                0x20000001: 0x808200,
                                0x30000001: 0x800000,
                                0x40000001: 0x808002,
                                0x50000001: 0x8200,
                                0x60000001: 0x200,
                                0x70000001: 0x800202,
                                0x80000001: 0x808202,
                                0x90000001: 0x808000,
                                0xa0000001: 0x800002,
                                0xb0000001: 0x8202,
                                0xc0000001: 0x202,
                                0xd0000001: 0x800200,
                                0xe0000001: 0x8002,
                                0xf0000001: 0x0,
                                0x8000001: 0x808202,
                                0x18000001: 0x808000,
                                0x28000001: 0x800000,
                                0x38000001: 0x200,
                                0x48000001: 0x8000,
                                0x58000001: 0x800002,
                                0x68000001: 0x2,
                                0x78000001: 0x8202,
                                0x88000001: 0x8002,
                                0x98000001: 0x800202,
                                0xa8000001: 0x202,
                                0xb8000001: 0x808200,
                                0xc8000001: 0x800200,
                                0xd8000001: 0x0,
                                0xe8000001: 0x8200,
                                0xf8000001: 0x808002,
                            },
                            {
                                0x0: 0x40084010,
                                0x1000000: 0x4000,
                                0x2000000: 0x80000,
                                0x3000000: 0x40080010,
                                0x4000000: 0x40000010,
                                0x5000000: 0x40084000,
                                0x6000000: 0x40004000,
                                0x7000000: 0x10,
                                0x8000000: 0x84000,
                                0x9000000: 0x40004010,
                                0xa000000: 0x40000000,
                                0xb000000: 0x84010,
                                0xc000000: 0x80010,
                                0xd000000: 0x0,
                                0xe000000: 0x4010,
                                0xf000000: 0x40080000,
                                0x800000: 0x40004000,
                                0x1800000: 0x84010,
                                0x2800000: 0x10,
                                0x3800000: 0x40004010,
                                0x4800000: 0x40084010,
                                0x5800000: 0x40000000,
                                0x6800000: 0x80000,
                                0x7800000: 0x40080010,
                                0x8800000: 0x80010,
                                0x9800000: 0x0,
                                0xa800000: 0x4000,
                                0xb800000: 0x40080000,
                                0xc800000: 0x40000010,
                                0xd800000: 0x84000,
                                0xe800000: 0x40084000,
                                0xf800000: 0x4010,
                                0x10000000: 0x0,
                                0x11000000: 0x40080010,
                                0x12000000: 0x40004010,
                                0x13000000: 0x40084000,
                                0x14000000: 0x40080000,
                                0x15000000: 0x10,
                                0x16000000: 0x84010,
                                0x17000000: 0x4000,
                                0x18000000: 0x4010,
                                0x19000000: 0x80000,
                                0x1a000000: 0x80010,
                                0x1b000000: 0x40000010,
                                0x1c000000: 0x84000,
                                0x1d000000: 0x40004000,
                                0x1e000000: 0x40000000,
                                0x1f000000: 0x40084010,
                                0x10800000: 0x84010,
                                0x11800000: 0x80000,
                                0x12800000: 0x40080000,
                                0x13800000: 0x4000,
                                0x14800000: 0x40004000,
                                0x15800000: 0x40084010,
                                0x16800000: 0x10,
                                0x17800000: 0x40000000,
                                0x18800000: 0x40084000,
                                0x19800000: 0x40000010,
                                0x1a800000: 0x40004010,
                                0x1b800000: 0x80010,
                                0x1c800000: 0x0,
                                0x1d800000: 0x4010,
                                0x1e800000: 0x40080010,
                                0x1f800000: 0x84000,
                            },
                            {
                                0x0: 0x104,
                                0x100000: 0x0,
                                0x200000: 0x4000100,
                                0x300000: 0x10104,
                                0x400000: 0x10004,
                                0x500000: 0x4000004,
                                0x600000: 0x4010104,
                                0x700000: 0x4010000,
                                0x800000: 0x4000000,
                                0x900000: 0x4010100,
                                0xa00000: 0x10100,
                                0xb00000: 0x4010004,
                                0xc00000: 0x4000104,
                                0xd00000: 0x10000,
                                0xe00000: 0x4,
                                0xf00000: 0x100,
                                0x80000: 0x4010100,
                                0x180000: 0x4010004,
                                0x280000: 0x0,
                                0x380000: 0x4000100,
                                0x480000: 0x4000004,
                                0x580000: 0x10000,
                                0x680000: 0x10004,
                                0x780000: 0x104,
                                0x880000: 0x4,
                                0x980000: 0x100,
                                0xa80000: 0x4010000,
                                0xb80000: 0x10104,
                                0xc80000: 0x10100,
                                0xd80000: 0x4000104,
                                0xe80000: 0x4010104,
                                0xf80000: 0x4000000,
                                0x1000000: 0x4010100,
                                0x1100000: 0x10004,
                                0x1200000: 0x10000,
                                0x1300000: 0x4000100,
                                0x1400000: 0x100,
                                0x1500000: 0x4010104,
                                0x1600000: 0x4000004,
                                0x1700000: 0x0,
                                0x1800000: 0x4000104,
                                0x1900000: 0x4000000,
                                0x1a00000: 0x4,
                                0x1b00000: 0x10100,
                                0x1c00000: 0x4010000,
                                0x1d00000: 0x104,
                                0x1e00000: 0x10104,
                                0x1f00000: 0x4010004,
                                0x1080000: 0x4000000,
                                0x1180000: 0x104,
                                0x1280000: 0x4010100,
                                0x1380000: 0x0,
                                0x1480000: 0x10004,
                                0x1580000: 0x4000100,
                                0x1680000: 0x100,
                                0x1780000: 0x4010004,
                                0x1880000: 0x10000,
                                0x1980000: 0x4010104,
                                0x1a80000: 0x10104,
                                0x1b80000: 0x4000004,
                                0x1c80000: 0x4000104,
                                0x1d80000: 0x4010000,
                                0x1e80000: 0x4,
                                0x1f80000: 0x10100,
                            },
                            {
                                0x0: 0x80401000,
                                0x10000: 0x80001040,
                                0x20000: 0x401040,
                                0x30000: 0x80400000,
                                0x40000: 0x0,
                                0x50000: 0x401000,
                                0x60000: 0x80000040,
                                0x70000: 0x400040,
                                0x80000: 0x80000000,
                                0x90000: 0x400000,
                                0xa0000: 0x40,
                                0xb0000: 0x80001000,
                                0xc0000: 0x80400040,
                                0xd0000: 0x1040,
                                0xe0000: 0x1000,
                                0xf0000: 0x80401040,
                                0x8000: 0x80001040,
                                0x18000: 0x40,
                                0x28000: 0x80400040,
                                0x38000: 0x80001000,
                                0x48000: 0x401000,
                                0x58000: 0x80401040,
                                0x68000: 0x0,
                                0x78000: 0x80400000,
                                0x88000: 0x1000,
                                0x98000: 0x80401000,
                                0xa8000: 0x400000,
                                0xb8000: 0x1040,
                                0xc8000: 0x80000000,
                                0xd8000: 0x400040,
                                0xe8000: 0x401040,
                                0xf8000: 0x80000040,
                                0x100000: 0x400040,
                                0x110000: 0x401000,
                                0x120000: 0x80000040,
                                0x130000: 0x0,
                                0x140000: 0x1040,
                                0x150000: 0x80400040,
                                0x160000: 0x80401000,
                                0x170000: 0x80001040,
                                0x180000: 0x80401040,
                                0x190000: 0x80000000,
                                0x1a0000: 0x80400000,
                                0x1b0000: 0x401040,
                                0x1c0000: 0x80001000,
                                0x1d0000: 0x400000,
                                0x1e0000: 0x40,
                                0x1f0000: 0x1000,
                                0x108000: 0x80400000,
                                0x118000: 0x80401040,
                                0x128000: 0x0,
                                0x138000: 0x401000,
                                0x148000: 0x400040,
                                0x158000: 0x80000000,
                                0x168000: 0x80001040,
                                0x178000: 0x40,
                                0x188000: 0x80000040,
                                0x198000: 0x1000,
                                0x1a8000: 0x80001000,
                                0x1b8000: 0x80400040,
                                0x1c8000: 0x1040,
                                0x1d8000: 0x80401000,
                                0x1e8000: 0x400000,
                                0x1f8000: 0x401040,
                            },
                            {
                                0x0: 0x80,
                                0x1000: 0x1040000,
                                0x2000: 0x40000,
                                0x3000: 0x20000000,
                                0x4000: 0x20040080,
                                0x5000: 0x1000080,
                                0x6000: 0x21000080,
                                0x7000: 0x40080,
                                0x8000: 0x1000000,
                                0x9000: 0x20040000,
                                0xa000: 0x20000080,
                                0xb000: 0x21040080,
                                0xc000: 0x21040000,
                                0xd000: 0x0,
                                0xe000: 0x1040080,
                                0xf000: 0x21000000,
                                0x800: 0x1040080,
                                0x1800: 0x21000080,
                                0x2800: 0x80,
                                0x3800: 0x1040000,
                                0x4800: 0x40000,
                                0x5800: 0x20040080,
                                0x6800: 0x21040000,
                                0x7800: 0x20000000,
                                0x8800: 0x20040000,
                                0x9800: 0x0,
                                0xa800: 0x21040080,
                                0xb800: 0x1000080,
                                0xc800: 0x20000080,
                                0xd800: 0x21000000,
                                0xe800: 0x1000000,
                                0xf800: 0x40080,
                                0x10000: 0x40000,
                                0x11000: 0x80,
                                0x12000: 0x20000000,
                                0x13000: 0x21000080,
                                0x14000: 0x1000080,
                                0x15000: 0x21040000,
                                0x16000: 0x20040080,
                                0x17000: 0x1000000,
                                0x18000: 0x21040080,
                                0x19000: 0x21000000,
                                0x1a000: 0x1040000,
                                0x1b000: 0x20040000,
                                0x1c000: 0x40080,
                                0x1d000: 0x20000080,
                                0x1e000: 0x0,
                                0x1f000: 0x1040080,
                                0x10800: 0x21000080,
                                0x11800: 0x1000000,
                                0x12800: 0x1040000,
                                0x13800: 0x20040080,
                                0x14800: 0x20000000,
                                0x15800: 0x1040080,
                                0x16800: 0x80,
                                0x17800: 0x21040000,
                                0x18800: 0x40080,
                                0x19800: 0x21040080,
                                0x1a800: 0x0,
                                0x1b800: 0x21000000,
                                0x1c800: 0x1000080,
                                0x1d800: 0x40000,
                                0x1e800: 0x20040000,
                                0x1f800: 0x20000080,
                            },
                            {
                                0x0: 0x10000008,
                                0x100: 0x2000,
                                0x200: 0x10200000,
                                0x300: 0x10202008,
                                0x400: 0x10002000,
                                0x500: 0x200000,
                                0x600: 0x200008,
                                0x700: 0x10000000,
                                0x800: 0x0,
                                0x900: 0x10002008,
                                0xa00: 0x202000,
                                0xb00: 0x8,
                                0xc00: 0x10200008,
                                0xd00: 0x202008,
                                0xe00: 0x2008,
                                0xf00: 0x10202000,
                                0x80: 0x10200000,
                                0x180: 0x10202008,
                                0x280: 0x8,
                                0x380: 0x200000,
                                0x480: 0x202008,
                                0x580: 0x10000008,
                                0x680: 0x10002000,
                                0x780: 0x2008,
                                0x880: 0x200008,
                                0x980: 0x2000,
                                0xa80: 0x10002008,
                                0xb80: 0x10200008,
                                0xc80: 0x0,
                                0xd80: 0x10202000,
                                0xe80: 0x202000,
                                0xf80: 0x10000000,
                                0x1000: 0x10002000,
                                0x1100: 0x10200008,
                                0x1200: 0x10202008,
                                0x1300: 0x2008,
                                0x1400: 0x200000,
                                0x1500: 0x10000000,
                                0x1600: 0x10000008,
                                0x1700: 0x202000,
                                0x1800: 0x202008,
                                0x1900: 0x0,
                                0x1a00: 0x8,
                                0x1b00: 0x10200000,
                                0x1c00: 0x2000,
                                0x1d00: 0x10002008,
                                0x1e00: 0x10202000,
                                0x1f00: 0x200008,
                                0x1080: 0x8,
                                0x1180: 0x202000,
                                0x1280: 0x200000,
                                0x1380: 0x10000008,
                                0x1480: 0x10002000,
                                0x1580: 0x2008,
                                0x1680: 0x10202008,
                                0x1780: 0x10200000,
                                0x1880: 0x10202000,
                                0x1980: 0x10200008,
                                0x1a80: 0x2000,
                                0x1b80: 0x202008,
                                0x1c80: 0x200008,
                                0x1d80: 0x0,
                                0x1e80: 0x10000000,
                                0x1f80: 0x10002008,
                            },
                            {
                                0x0: 0x100000,
                                0x10: 0x2000401,
                                0x20: 0x400,
                                0x30: 0x100401,
                                0x40: 0x2100401,
                                0x50: 0x0,
                                0x60: 0x1,
                                0x70: 0x2100001,
                                0x80: 0x2000400,
                                0x90: 0x100001,
                                0xa0: 0x2000001,
                                0xb0: 0x2100400,
                                0xc0: 0x2100000,
                                0xd0: 0x401,
                                0xe0: 0x100400,
                                0xf0: 0x2000000,
                                0x8: 0x2100001,
                                0x18: 0x0,
                                0x28: 0x2000401,
                                0x38: 0x2100400,
                                0x48: 0x100000,
                                0x58: 0x2000001,
                                0x68: 0x2000000,
                                0x78: 0x401,
                                0x88: 0x100401,
                                0x98: 0x2000400,
                                0xa8: 0x2100000,
                                0xb8: 0x100001,
                                0xc8: 0x400,
                                0xd8: 0x2100401,
                                0xe8: 0x1,
                                0xf8: 0x100400,
                                0x100: 0x2000000,
                                0x110: 0x100000,
                                0x120: 0x2000401,
                                0x130: 0x2100001,
                                0x140: 0x100001,
                                0x150: 0x2000400,
                                0x160: 0x2100400,
                                0x170: 0x100401,
                                0x180: 0x401,
                                0x190: 0x2100401,
                                0x1a0: 0x100400,
                                0x1b0: 0x1,
                                0x1c0: 0x0,
                                0x1d0: 0x2100000,
                                0x1e0: 0x2000001,
                                0x1f0: 0x400,
                                0x108: 0x100400,
                                0x118: 0x2000401,
                                0x128: 0x2100001,
                                0x138: 0x1,
                                0x148: 0x2000000,
                                0x158: 0x100000,
                                0x168: 0x401,
                                0x178: 0x2100400,
                                0x188: 0x2000001,
                                0x198: 0x2100000,
                                0x1a8: 0x0,
                                0x1b8: 0x2100401,
                                0x1c8: 0x100401,
                                0x1d8: 0x400,
                                0x1e8: 0x2000400,
                                0x1f8: 0x100001,
                            },
                            {
                                0x0: 0x8000820,
                                0x1: 0x20000,
                                0x2: 0x8000000,
                                0x3: 0x20,
                                0x4: 0x20020,
                                0x5: 0x8020820,
                                0x6: 0x8020800,
                                0x7: 0x800,
                                0x8: 0x8020000,
                                0x9: 0x8000800,
                                0xa: 0x20800,
                                0xb: 0x8020020,
                                0xc: 0x820,
                                0xd: 0x0,
                                0xe: 0x8000020,
                                0xf: 0x20820,
                                0x80000000: 0x800,
                                0x80000001: 0x8020820,
                                0x80000002: 0x8000820,
                                0x80000003: 0x8000000,
                                0x80000004: 0x8020000,
                                0x80000005: 0x20800,
                                0x80000006: 0x20820,
                                0x80000007: 0x20,
                                0x80000008: 0x8000020,
                                0x80000009: 0x820,
                                0x8000000a: 0x20020,
                                0x8000000b: 0x8020800,
                                0x8000000c: 0x0,
                                0x8000000d: 0x8020020,
                                0x8000000e: 0x8000800,
                                0x8000000f: 0x20000,
                                0x10: 0x20820,
                                0x11: 0x8020800,
                                0x12: 0x20,
                                0x13: 0x800,
                                0x14: 0x8000800,
                                0x15: 0x8000020,
                                0x16: 0x8020020,
                                0x17: 0x20000,
                                0x18: 0x0,
                                0x19: 0x20020,
                                0x1a: 0x8020000,
                                0x1b: 0x8000820,
                                0x1c: 0x8020820,
                                0x1d: 0x20800,
                                0x1e: 0x820,
                                0x1f: 0x8000000,
                                0x80000010: 0x20000,
                                0x80000011: 0x800,
                                0x80000012: 0x8020020,
                                0x80000013: 0x20820,
                                0x80000014: 0x20,
                                0x80000015: 0x8020000,
                                0x80000016: 0x8000000,
                                0x80000017: 0x8000820,
                                0x80000018: 0x8020820,
                                0x80000019: 0x8000020,
                                0x8000001a: 0x8000800,
                                0x8000001b: 0x0,
                                0x8000001c: 0x20800,
                                0x8000001d: 0x820,
                                0x8000001e: 0x20020,
                                0x8000001f: 0x8020800,
                            },
                        ];

                        // Masks that select the SBOX input
                        var SBOX_MASK = [
                            0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
                            0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f,
                        ];

                        /**
                         * DES block cipher algorithm.
                         */
                        var DES = (C_algo.DES = BlockCipher.extend({
                            _doReset: function () {
                                // Shortcuts
                                var key = this._key;
                                var keyWords = key.words;

                                // Select 56 bits according to PC1
                                var keyBits = [];
                                for (var i = 0; i < 56; i++) {
                                    var keyBitPos = PC1[i] - 1;
                                    keyBits[i] =
                                        (keyWords[keyBitPos >>> 5] >>>
                                            (31 - (keyBitPos % 32))) &
                                        1;
                                }

                                // Assemble 16 subkeys
                                var subKeys = (this._subKeys = []);
                                for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
                                    // Create subkey
                                    var subKey = (subKeys[nSubKey] = []);

                                    // Shortcut
                                    var bitShift = BIT_SHIFTS[nSubKey];

                                    // Select 48 bits according to PC2
                                    for (var i = 0; i < 24; i++) {
                                        // Select from the left 28 key bits
                                        subKey[(i / 6) | 0] |=
                                            keyBits[
                                                (PC2[i] - 1 + bitShift) % 28
                                            ] <<
                                            (31 - (i % 6));

                                        // Select from the right 28 key bits
                                        subKey[4 + ((i / 6) | 0)] |=
                                            keyBits[
                                                28 +
                                                    ((PC2[i + 24] -
                                                        1 +
                                                        bitShift) %
                                                        28)
                                            ] <<
                                            (31 - (i % 6));
                                    }

                                    // Since each subkey is applied to an expanded 32-bit input,
                                    // the subkey can be broken into 8 values scaled to 32-bits,
                                    // which allows the key to be used without expansion
                                    subKey[0] =
                                        (subKey[0] << 1) | (subKey[0] >>> 31);
                                    for (var i = 1; i < 7; i++) {
                                        subKey[i] =
                                            subKey[i] >>> ((i - 1) * 4 + 3);
                                    }
                                    subKey[7] =
                                        (subKey[7] << 5) | (subKey[7] >>> 27);
                                }

                                // Compute inverse subkeys
                                var invSubKeys = (this._invSubKeys = []);
                                for (var i = 0; i < 16; i++) {
                                    invSubKeys[i] = subKeys[15 - i];
                                }
                            },

                            encryptBlock: function (M, offset) {
                                this._doCryptBlock(M, offset, this._subKeys);
                            },

                            decryptBlock: function (M, offset) {
                                this._doCryptBlock(M, offset, this._invSubKeys);
                            },

                            _doCryptBlock: function (M, offset, subKeys) {
                                // Get input
                                this._lBlock = M[offset];
                                this._rBlock = M[offset + 1];

                                // Initial permutation
                                exchangeLR.call(this, 4, 0x0f0f0f0f);
                                exchangeLR.call(this, 16, 0x0000ffff);
                                exchangeRL.call(this, 2, 0x33333333);
                                exchangeRL.call(this, 8, 0x00ff00ff);
                                exchangeLR.call(this, 1, 0x55555555);

                                // Rounds
                                for (var round = 0; round < 16; round++) {
                                    // Shortcuts
                                    var subKey = subKeys[round];
                                    var lBlock = this._lBlock;
                                    var rBlock = this._rBlock;

                                    // Feistel function
                                    var f = 0;
                                    for (var i = 0; i < 8; i++) {
                                        f |=
                                            SBOX_P[i][
                                                ((rBlock ^ subKey[i]) &
                                                    SBOX_MASK[i]) >>>
                                                    0
                                            ];
                                    }
                                    this._lBlock = rBlock;
                                    this._rBlock = lBlock ^ f;
                                }

                                // Undo swap from last round
                                var t = this._lBlock;
                                this._lBlock = this._rBlock;
                                this._rBlock = t;

                                // Final permutation
                                exchangeLR.call(this, 1, 0x55555555);
                                exchangeRL.call(this, 8, 0x00ff00ff);
                                exchangeRL.call(this, 2, 0x33333333);
                                exchangeLR.call(this, 16, 0x0000ffff);
                                exchangeLR.call(this, 4, 0x0f0f0f0f);

                                // Set output
                                M[offset] = this._lBlock;
                                M[offset + 1] = this._rBlock;
                            },

                            keySize: 64 / 32,

                            ivSize: 64 / 32,

                            blockSize: 64 / 32,
                        }));

                        // Swap bits across the left and right words
                        function exchangeLR(offset, mask) {
                            var t =
                                ((this._lBlock >>> offset) ^ this._rBlock) &
                                mask;
                            this._rBlock ^= t;
                            this._lBlock ^= t << offset;
                        }

                        function exchangeRL(offset, mask) {
                            var t =
                                ((this._rBlock >>> offset) ^ this._lBlock) &
                                mask;
                            this._lBlock ^= t;
                            this._rBlock ^= t << offset;
                        }

                        /**
                         * Shortcut functions to the cipher's object interface.
                         *
                         * @example
                         *
                         *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
                         *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
                         */
                        C.DES = BlockCipher._createHelper(DES);

                        /**
                         * Triple-DES block cipher algorithm.
                         */
                        var TripleDES = (C_algo.TripleDES = BlockCipher.extend({
                            _doReset: function () {
                                // Shortcuts
                                var key = this._key;
                                var keyWords = key.words;

                                // Create DES instances
                                this._des1 = DES.createEncryptor(
                                    WordArray.create(keyWords.slice(0, 2))
                                );
                                this._des2 = DES.createEncryptor(
                                    WordArray.create(keyWords.slice(2, 4))
                                );
                                this._des3 = DES.createEncryptor(
                                    WordArray.create(keyWords.slice(4, 6))
                                );
                            },

                            encryptBlock: function (M, offset) {
                                this._des1.encryptBlock(M, offset);
                                this._des2.decryptBlock(M, offset);
                                this._des3.encryptBlock(M, offset);
                            },

                            decryptBlock: function (M, offset) {
                                this._des3.decryptBlock(M, offset);
                                this._des2.encryptBlock(M, offset);
                                this._des1.decryptBlock(M, offset);
                            },

                            keySize: 192 / 32,

                            ivSize: 64 / 32,

                            blockSize: 64 / 32,
                        }));

                        /**
                         * Shortcut functions to the cipher's object interface.
                         *
                         * @example
                         *
                         *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
                         *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
                         */
                        C.TripleDES = BlockCipher._createHelper(TripleDES);
                    })();

                    (function () {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var StreamCipher = C_lib.StreamCipher;
                        var C_algo = C.algo;

                        /**
                         * RC4 stream cipher algorithm.
                         */
                        var RC4 = (C_algo.RC4 = StreamCipher.extend({
                            _doReset: function () {
                                // Shortcuts
                                var key = this._key;
                                var keyWords = key.words;
                                var keySigBytes = key.sigBytes;

                                // Init sbox
                                var S = (this._S = []);
                                for (var i = 0; i < 256; i++) {
                                    S[i] = i;
                                }

                                // Key setup
                                for (var i = 0, j = 0; i < 256; i++) {
                                    var keyByteIndex = i % keySigBytes;
                                    var keyByte =
                                        (keyWords[keyByteIndex >>> 2] >>>
                                            (24 - (keyByteIndex % 4) * 8)) &
                                        0xff;

                                    j = (j + S[i] + keyByte) % 256;

                                    // Swap
                                    var t = S[i];
                                    S[i] = S[j];
                                    S[j] = t;
                                }

                                // Counters
                                this._i = this._j = 0;
                            },

                            _doProcessBlock: function (M, offset) {
                                M[offset] ^= generateKeystreamWord.call(this);
                            },

                            keySize: 256 / 32,

                            ivSize: 0,
                        }));

                        function generateKeystreamWord() {
                            // Shortcuts
                            var S = this._S;
                            var i = this._i;
                            var j = this._j;

                            // Generate keystream word
                            var keystreamWord = 0;
                            for (var n = 0; n < 4; n++) {
                                i = (i + 1) % 256;
                                j = (j + S[i]) % 256;

                                // Swap
                                var t = S[i];
                                S[i] = S[j];
                                S[j] = t;

                                keystreamWord |=
                                    S[(S[i] + S[j]) % 256] << (24 - n * 8);
                            }

                            // Update counters
                            this._i = i;
                            this._j = j;

                            return keystreamWord;
                        }

                        /**
                         * Shortcut functions to the cipher's object interface.
                         *
                         * @example
                         *
                         *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
                         *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
                         */
                        C.RC4 = StreamCipher._createHelper(RC4);

                        /**
                         * Modified RC4 stream cipher algorithm.
                         */
                        var RC4Drop = (C_algo.RC4Drop = RC4.extend({
                            /**
                             * Configuration options.
                             *
                             * @property {number} drop The number of keystream words to drop. Default 192
                             */
                            cfg: RC4.cfg.extend({
                                drop: 192,
                            }),

                            _doReset: function () {
                                RC4._doReset.call(this);

                                // Drop
                                for (var i = this.cfg.drop; i > 0; i--) {
                                    generateKeystreamWord.call(this);
                                }
                            },
                        }));

                        /**
                         * Shortcut functions to the cipher's object interface.
                         *
                         * @example
                         *
                         *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
                         *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
                         */
                        C.RC4Drop = StreamCipher._createHelper(RC4Drop);
                    })();

                    /** @preserve
                     * Counter block mode compatible with  Dr Brian Gladman fileenc.c
                     * derived from CryptoJS.mode.CTR
                     * Jan Hruby jhruby.web@gmail.com
                     */
                    CryptoJS.mode.CTRGladman = (function () {
                        var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

                        function incWord(word) {
                            if (((word >> 24) & 0xff) === 0xff) {
                                //overflow
                                var b1 = (word >> 16) & 0xff;
                                var b2 = (word >> 8) & 0xff;
                                var b3 = word & 0xff;

                                if (b1 === 0xff) {
                                    // overflow b1
                                    b1 = 0;
                                    if (b2 === 0xff) {
                                        b2 = 0;
                                        if (b3 === 0xff) {
                                            b3 = 0;
                                        } else {
                                            ++b3;
                                        }
                                    } else {
                                        ++b2;
                                    }
                                } else {
                                    ++b1;
                                }

                                word = 0;
                                word += b1 << 16;
                                word += b2 << 8;
                                word += b3;
                            } else {
                                word += 0x01 << 24;
                            }
                            return word;
                        }

                        function incCounter(counter) {
                            if ((counter[0] = incWord(counter[0])) === 0) {
                                // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
                                counter[1] = incWord(counter[1]);
                            }
                            return counter;
                        }

                        var Encryptor = (CTRGladman.Encryptor =
                            CTRGladman.extend({
                                processBlock: function (words, offset) {
                                    // Shortcuts
                                    var cipher = this._cipher;
                                    var blockSize = cipher.blockSize;
                                    var iv = this._iv;
                                    var counter = this._counter;

                                    // Generate keystream
                                    if (iv) {
                                        counter = this._counter = iv.slice(0);

                                        // Remove IV for subsequent blocks
                                        this._iv = undefined;
                                    }

                                    incCounter(counter);

                                    var keystream = counter.slice(0);
                                    cipher.encryptBlock(keystream, 0);

                                    // Encrypt
                                    for (var i = 0; i < blockSize; i++) {
                                        words[offset + i] ^= keystream[i];
                                    }
                                },
                            }));

                        CTRGladman.Decryptor = Encryptor;

                        return CTRGladman;
                    })();

                    (function () {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var StreamCipher = C_lib.StreamCipher;
                        var C_algo = C.algo;

                        // Reusable objects
                        var S = [];
                        var C_ = [];
                        var G = [];

                        /**
                         * Rabbit stream cipher algorithm
                         */
                        var Rabbit = (C_algo.Rabbit = StreamCipher.extend({
                            _doReset: function () {
                                // Shortcuts
                                var K = this._key.words;
                                var iv = this.cfg.iv;

                                // Swap endian
                                for (var i = 0; i < 4; i++) {
                                    K[i] =
                                        (((K[i] << 8) | (K[i] >>> 24)) &
                                            0x00ff00ff) |
                                        (((K[i] << 24) | (K[i] >>> 8)) &
                                            0xff00ff00);
                                }

                                // Generate initial state values
                                var X = (this._X = [
                                    K[0],
                                    (K[3] << 16) | (K[2] >>> 16),
                                    K[1],
                                    (K[0] << 16) | (K[3] >>> 16),
                                    K[2],
                                    (K[1] << 16) | (K[0] >>> 16),
                                    K[3],
                                    (K[2] << 16) | (K[1] >>> 16),
                                ]);

                                // Generate initial counter values
                                var C = (this._C = [
                                    (K[2] << 16) | (K[2] >>> 16),
                                    (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),
                                    (K[3] << 16) | (K[3] >>> 16),
                                    (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),
                                    (K[0] << 16) | (K[0] >>> 16),
                                    (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),
                                    (K[1] << 16) | (K[1] >>> 16),
                                    (K[3] & 0xffff0000) | (K[0] & 0x0000ffff),
                                ]);

                                // Carry bit
                                this._b = 0;

                                // Iterate the system four times
                                for (var i = 0; i < 4; i++) {
                                    nextState.call(this);
                                }

                                // Modify the counters
                                for (var i = 0; i < 8; i++) {
                                    C[i] ^= X[(i + 4) & 7];
                                }

                                // IV setup
                                if (iv) {
                                    // Shortcuts
                                    var IV = iv.words;
                                    var IV_0 = IV[0];
                                    var IV_1 = IV[1];

                                    // Generate four subvectors
                                    var i0 =
                                        (((IV_0 << 8) | (IV_0 >>> 24)) &
                                            0x00ff00ff) |
                                        (((IV_0 << 24) | (IV_0 >>> 8)) &
                                            0xff00ff00);
                                    var i2 =
                                        (((IV_1 << 8) | (IV_1 >>> 24)) &
                                            0x00ff00ff) |
                                        (((IV_1 << 24) | (IV_1 >>> 8)) &
                                            0xff00ff00);
                                    var i1 = (i0 >>> 16) | (i2 & 0xffff0000);
                                    var i3 = (i2 << 16) | (i0 & 0x0000ffff);

                                    // Modify counter values
                                    C[0] ^= i0;
                                    C[1] ^= i1;
                                    C[2] ^= i2;
                                    C[3] ^= i3;
                                    C[4] ^= i0;
                                    C[5] ^= i1;
                                    C[6] ^= i2;
                                    C[7] ^= i3;

                                    // Iterate the system four times
                                    for (var i = 0; i < 4; i++) {
                                        nextState.call(this);
                                    }
                                }
                            },

                            _doProcessBlock: function (M, offset) {
                                // Shortcut
                                var X = this._X;

                                // Iterate the system
                                nextState.call(this);

                                // Generate four keystream words
                                S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
                                S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
                                S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
                                S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

                                for (var i = 0; i < 4; i++) {
                                    // Swap endian
                                    S[i] =
                                        (((S[i] << 8) | (S[i] >>> 24)) &
                                            0x00ff00ff) |
                                        (((S[i] << 24) | (S[i] >>> 8)) &
                                            0xff00ff00);

                                    // Encrypt
                                    M[offset + i] ^= S[i];
                                }
                            },

                            blockSize: 128 / 32,

                            ivSize: 64 / 32,
                        }));

                        function nextState() {
                            // Shortcuts
                            var X = this._X;
                            var C = this._C;

                            // Save old counter values
                            for (var i = 0; i < 8; i++) {
                                C_[i] = C[i];
                            }

                            // Calculate new counter values
                            C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
                            C[1] =
                                (C[1] +
                                    0xd34d34d3 +
                                    (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0)) |
                                0;
                            C[2] =
                                (C[2] +
                                    0x34d34d34 +
                                    (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0)) |
                                0;
                            C[3] =
                                (C[3] +
                                    0x4d34d34d +
                                    (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0)) |
                                0;
                            C[4] =
                                (C[4] +
                                    0xd34d34d3 +
                                    (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0)) |
                                0;
                            C[5] =
                                (C[5] +
                                    0x34d34d34 +
                                    (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0)) |
                                0;
                            C[6] =
                                (C[6] +
                                    0x4d34d34d +
                                    (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0)) |
                                0;
                            C[7] =
                                (C[7] +
                                    0xd34d34d3 +
                                    (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0)) |
                                0;
                            this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;

                            // Calculate the g-values
                            for (var i = 0; i < 8; i++) {
                                var gx = X[i] + C[i];

                                // Construct high and low argument for squaring
                                var ga = gx & 0xffff;
                                var gb = gx >>> 16;

                                // Calculate high and low result of squaring
                                var gh =
                                    ((((ga * ga) >>> 17) + ga * gb) >>> 15) +
                                    gb * gb;
                                var gl =
                                    (((gx & 0xffff0000) * gx) | 0) +
                                    (((gx & 0x0000ffff) * gx) | 0);

                                // High XOR low
                                G[i] = gh ^ gl;
                            }

                            // Calculate new state values
                            X[0] =
                                (G[0] +
                                    ((G[7] << 16) | (G[7] >>> 16)) +
                                    ((G[6] << 16) | (G[6] >>> 16))) |
                                0;
                            X[1] =
                                (G[1] + ((G[0] << 8) | (G[0] >>> 24)) + G[7]) |
                                0;
                            X[2] =
                                (G[2] +
                                    ((G[1] << 16) | (G[1] >>> 16)) +
                                    ((G[0] << 16) | (G[0] >>> 16))) |
                                0;
                            X[3] =
                                (G[3] + ((G[2] << 8) | (G[2] >>> 24)) + G[1]) |
                                0;
                            X[4] =
                                (G[4] +
                                    ((G[3] << 16) | (G[3] >>> 16)) +
                                    ((G[2] << 16) | (G[2] >>> 16))) |
                                0;
                            X[5] =
                                (G[5] + ((G[4] << 8) | (G[4] >>> 24)) + G[3]) |
                                0;
                            X[6] =
                                (G[6] +
                                    ((G[5] << 16) | (G[5] >>> 16)) +
                                    ((G[4] << 16) | (G[4] >>> 16))) |
                                0;
                            X[7] =
                                (G[7] + ((G[6] << 8) | (G[6] >>> 24)) + G[5]) |
                                0;
                        }

                        /**
                         * Shortcut functions to the cipher's object interface.
                         *
                         * @example
                         *
                         *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
                         *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
                         */
                        C.Rabbit = StreamCipher._createHelper(Rabbit);
                    })();

                    /**
                     * Counter block mode.
                     */
                    CryptoJS.mode.CTR = (function () {
                        var CTR = CryptoJS.lib.BlockCipherMode.extend();

                        var Encryptor = (CTR.Encryptor = CTR.extend({
                            processBlock: function (words, offset) {
                                // Shortcuts
                                var cipher = this._cipher;
                                var blockSize = cipher.blockSize;
                                var iv = this._iv;
                                var counter = this._counter;

                                // Generate keystream
                                if (iv) {
                                    counter = this._counter = iv.slice(0);

                                    // Remove IV for subsequent blocks
                                    this._iv = undefined;
                                }
                                var keystream = counter.slice(0);
                                cipher.encryptBlock(keystream, 0);

                                // Increment counter
                                counter[blockSize - 1] =
                                    (counter[blockSize - 1] + 1) | 0;

                                // Encrypt
                                for (var i = 0; i < blockSize; i++) {
                                    words[offset + i] ^= keystream[i];
                                }
                            },
                        }));

                        CTR.Decryptor = Encryptor;

                        return CTR;
                    })();

                    (function () {
                        // Shortcuts
                        var C = CryptoJS;
                        var C_lib = C.lib;
                        var StreamCipher = C_lib.StreamCipher;
                        var C_algo = C.algo;

                        // Reusable objects
                        var S = [];
                        var C_ = [];
                        var G = [];

                        /**
                         * Rabbit stream cipher algorithm.
                         *
                         * This is a legacy version that neglected to convert the key to little-endian.
                         * This error doesn't affect the cipher's security,
                         * but it does affect its compatibility with other implementations.
                         */
                        var RabbitLegacy = (C_algo.RabbitLegacy =
                            StreamCipher.extend({
                                _doReset: function () {
                                    // Shortcuts
                                    var K = this._key.words;
                                    var iv = this.cfg.iv;

                                    // Generate initial state values
                                    var X = (this._X = [
                                        K[0],
                                        (K[3] << 16) | (K[2] >>> 16),
                                        K[1],
                                        (K[0] << 16) | (K[3] >>> 16),
                                        K[2],
                                        (K[1] << 16) | (K[0] >>> 16),
                                        K[3],
                                        (K[2] << 16) | (K[1] >>> 16),
                                    ]);

                                    // Generate initial counter values
                                    var C = (this._C = [
                                        (K[2] << 16) | (K[2] >>> 16),
                                        (K[0] & 0xffff0000) |
                                            (K[1] & 0x0000ffff),
                                        (K[3] << 16) | (K[3] >>> 16),
                                        (K[1] & 0xffff0000) |
                                            (K[2] & 0x0000ffff),
                                        (K[0] << 16) | (K[0] >>> 16),
                                        (K[2] & 0xffff0000) |
                                            (K[3] & 0x0000ffff),
                                        (K[1] << 16) | (K[1] >>> 16),
                                        (K[3] & 0xffff0000) |
                                            (K[0] & 0x0000ffff),
                                    ]);

                                    // Carry bit
                                    this._b = 0;

                                    // Iterate the system four times
                                    for (var i = 0; i < 4; i++) {
                                        nextState.call(this);
                                    }

                                    // Modify the counters
                                    for (var i = 0; i < 8; i++) {
                                        C[i] ^= X[(i + 4) & 7];
                                    }

                                    // IV setup
                                    if (iv) {
                                        // Shortcuts
                                        var IV = iv.words;
                                        var IV_0 = IV[0];
                                        var IV_1 = IV[1];

                                        // Generate four subvectors
                                        var i0 =
                                            (((IV_0 << 8) | (IV_0 >>> 24)) &
                                                0x00ff00ff) |
                                            (((IV_0 << 24) | (IV_0 >>> 8)) &
                                                0xff00ff00);
                                        var i2 =
                                            (((IV_1 << 8) | (IV_1 >>> 24)) &
                                                0x00ff00ff) |
                                            (((IV_1 << 24) | (IV_1 >>> 8)) &
                                                0xff00ff00);
                                        var i1 =
                                            (i0 >>> 16) | (i2 & 0xffff0000);
                                        var i3 = (i2 << 16) | (i0 & 0x0000ffff);

                                        // Modify counter values
                                        C[0] ^= i0;
                                        C[1] ^= i1;
                                        C[2] ^= i2;
                                        C[3] ^= i3;
                                        C[4] ^= i0;
                                        C[5] ^= i1;
                                        C[6] ^= i2;
                                        C[7] ^= i3;

                                        // Iterate the system four times
                                        for (var i = 0; i < 4; i++) {
                                            nextState.call(this);
                                        }
                                    }
                                },

                                _doProcessBlock: function (M, offset) {
                                    // Shortcut
                                    var X = this._X;

                                    // Iterate the system
                                    nextState.call(this);

                                    // Generate four keystream words
                                    S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);
                                    S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);
                                    S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);
                                    S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);

                                    for (var i = 0; i < 4; i++) {
                                        // Swap endian
                                        S[i] =
                                            (((S[i] << 8) | (S[i] >>> 24)) &
                                                0x00ff00ff) |
                                            (((S[i] << 24) | (S[i] >>> 8)) &
                                                0xff00ff00);

                                        // Encrypt
                                        M[offset + i] ^= S[i];
                                    }
                                },

                                blockSize: 128 / 32,

                                ivSize: 64 / 32,
                            }));

                        function nextState() {
                            // Shortcuts
                            var X = this._X;
                            var C = this._C;

                            // Save old counter values
                            for (var i = 0; i < 8; i++) {
                                C_[i] = C[i];
                            }

                            // Calculate new counter values
                            C[0] = (C[0] + 0x4d34d34d + this._b) | 0;
                            C[1] =
                                (C[1] +
                                    0xd34d34d3 +
                                    (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0)) |
                                0;
                            C[2] =
                                (C[2] +
                                    0x34d34d34 +
                                    (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0)) |
                                0;
                            C[3] =
                                (C[3] +
                                    0x4d34d34d +
                                    (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0)) |
                                0;
                            C[4] =
                                (C[4] +
                                    0xd34d34d3 +
                                    (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0)) |
                                0;
                            C[5] =
                                (C[5] +
                                    0x34d34d34 +
                                    (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0)) |
                                0;
                            C[6] =
                                (C[6] +
                                    0x4d34d34d +
                                    (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0)) |
                                0;
                            C[7] =
                                (C[7] +
                                    0xd34d34d3 +
                                    (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0)) |
                                0;
                            this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;

                            // Calculate the g-values
                            for (var i = 0; i < 8; i++) {
                                var gx = X[i] + C[i];

                                // Construct high and low argument for squaring
                                var ga = gx & 0xffff;
                                var gb = gx >>> 16;

                                // Calculate high and low result of squaring
                                var gh =
                                    ((((ga * ga) >>> 17) + ga * gb) >>> 15) +
                                    gb * gb;
                                var gl =
                                    (((gx & 0xffff0000) * gx) | 0) +
                                    (((gx & 0x0000ffff) * gx) | 0);

                                // High XOR low
                                G[i] = gh ^ gl;
                            }

                            // Calculate new state values
                            X[0] =
                                (G[0] +
                                    ((G[7] << 16) | (G[7] >>> 16)) +
                                    ((G[6] << 16) | (G[6] >>> 16))) |
                                0;
                            X[1] =
                                (G[1] + ((G[0] << 8) | (G[0] >>> 24)) + G[7]) |
                                0;
                            X[2] =
                                (G[2] +
                                    ((G[1] << 16) | (G[1] >>> 16)) +
                                    ((G[0] << 16) | (G[0] >>> 16))) |
                                0;
                            X[3] =
                                (G[3] + ((G[2] << 8) | (G[2] >>> 24)) + G[1]) |
                                0;
                            X[4] =
                                (G[4] +
                                    ((G[3] << 16) | (G[3] >>> 16)) +
                                    ((G[2] << 16) | (G[2] >>> 16))) |
                                0;
                            X[5] =
                                (G[5] + ((G[4] << 8) | (G[4] >>> 24)) + G[3]) |
                                0;
                            X[6] =
                                (G[6] +
                                    ((G[5] << 16) | (G[5] >>> 16)) +
                                    ((G[4] << 16) | (G[4] >>> 16))) |
                                0;
                            X[7] =
                                (G[7] + ((G[6] << 8) | (G[6] >>> 24)) + G[5]) |
                                0;
                        }

                        /**
                         * Shortcut functions to the cipher's object interface.
                         *
                         * @example
                         *
                         *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
                         *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
                         */
                        C.RabbitLegacy =
                            StreamCipher._createHelper(RabbitLegacy);
                    })();

                    /**
                     * Zero padding strategy.
                     */
                    CryptoJS.pad.ZeroPadding = {
                        pad: function (data, blockSize) {
                            // Shortcut
                            var blockSizeBytes = blockSize * 4;

                            // Pad
                            data.clamp();
                            data.sigBytes +=
                                blockSizeBytes -
                                (data.sigBytes % blockSizeBytes ||
                                    blockSizeBytes);
                        },

                        unpad: function (data) {
                            // Shortcut
                            var dataWords = data.words;

                            // Unpad
                            var i = data.sigBytes - 1;
                            while (
                                !(
                                    (dataWords[i >>> 2] >>>
                                        (24 - (i % 4) * 8)) &
                                    0xff
                                )
                            ) {
                                i--;
                            }
                            data.sigBytes = i + 1;
                        },
                    };

                    return CryptoJS;
                });
            },
            {},
        ],
        34: [
            function (require, module, exports) {
                "use strict";

                var elliptic = exports;

                // hello ladies ;)
                function inherits(ctor, superCtor) {
                    ctor.super_ = superCtor;
                    var TempCtor = function () {};
                    TempCtor.prototype = superCtor.prototype;
                    ctor.prototype = new TempCtor();
                    ctor.prototype.constructor = ctor;
                }

                elliptic.inherits = inherits;
                elliptic.version = "6.5.0";
                elliptic.utils = require("./elliptic/utils");
                elliptic.curve = require("./elliptic/curve");
                elliptic.curves = require("./elliptic/curves");

                // Protocols
                elliptic.ec = require("./elliptic/ec");
                elliptic.eddsa = require("./elliptic/eddsa");
            },
            {
                "./elliptic/curve": 37,
                "./elliptic/curves": 40,
                "./elliptic/ec": 41,
                "./elliptic/eddsa": 44,
                "./elliptic/utils": 48,
            },
        ],
        35: [
            function (require, module, exports) {
                "use strict";

                var BN = require("../../../../BN/bn");
                var elliptic = require("../../elliptic");
                var utils = elliptic.utils;
                var getNAF = utils.getNAF;
                var getJSF = utils.getJSF;
                var assert = utils.assert;

                function BaseCurve(type, conf) {
                    this.type = type;
                    this.p = new BN(conf.p, 16);

                    // Use Montgomery, when there is no fast reduction for the prime
                    this.red = conf.prime
                        ? BN.red(conf.prime)
                        : BN.mont(this.p);

                    // Useful for many curves
                    this.zero = new BN(0).toRed(this.red);
                    this.one = new BN(1).toRed(this.red);
                    this.two = new BN(2).toRed(this.red);

                    // Curve configuration, optional
                    this.n = conf.n && new BN(conf.n, 16);
                    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

                    // Temporary arrays
                    this._wnafT1 = new Array(4);
                    this._wnafT2 = new Array(4);
                    this._wnafT3 = new Array(4);
                    this._wnafT4 = new Array(4);

                    // Generalized Greg Maxwell's trick
                    var adjustCount = this.n && this.p.div(this.n);
                    if (!adjustCount || adjustCount.cmpn(100) > 0) {
                        this.redN = null;
                    } else {
                        this._maxwellTrick = true;
                        this.redN = this.n.toRed(this.red);
                    }
                }
                module.exports = BaseCurve;

                BaseCurve.prototype.point = function point() {
                    throw new Error("Not implemented");
                };

                BaseCurve.prototype.validate = function validate() {
                    throw new Error("Not implemented");
                };

                BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
                    assert(p.precomputed);
                    var doubles = p._getDoubles();

                    var naf = getNAF(k, 1);
                    var I =
                        (1 << (doubles.step + 1)) -
                        (doubles.step % 2 === 0 ? 2 : 1);
                    I /= 3;

                    // Translate into more windowed form
                    var repr = [];
                    for (var j = 0; j < naf.length; j += doubles.step) {
                        var nafW = 0;
                        for (var k = j + doubles.step - 1; k >= j; k--)
                            nafW = (nafW << 1) + naf[k];
                        repr.push(nafW);
                    }

                    var a = this.jpoint(null, null, null);
                    var b = this.jpoint(null, null, null);
                    for (var i = I; i > 0; i--) {
                        for (var j = 0; j < repr.length; j++) {
                            var nafW = repr[j];
                            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
                            else if (nafW === -i)
                                b = b.mixedAdd(doubles.points[j].neg());
                        }
                        a = a.add(b);
                    }
                    return a.toP();
                };

                BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
                    var w = 4;

                    // Precompute window
                    var nafPoints = p._getNAFPoints(w);
                    w = nafPoints.wnd;
                    var wnd = nafPoints.points;

                    // Get NAF form
                    var naf = getNAF(k, w);

                    // Add `this`*(N+1) for every w-NAF index
                    var acc = this.jpoint(null, null, null);
                    for (var i = naf.length - 1; i >= 0; i--) {
                        // Count zeroes
                        for (var k = 0; i >= 0 && naf[i] === 0; i--) k++;
                        if (i >= 0) k++;
                        acc = acc.dblp(k);

                        if (i < 0) break;
                        var z = naf[i];
                        assert(z !== 0);
                        if (p.type === "affine") {
                            // J +- P
                            if (z > 0) acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
                            else acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
                        } else {
                            // J +- J
                            if (z > 0) acc = acc.add(wnd[(z - 1) >> 1]);
                            else acc = acc.add(wnd[(-z - 1) >> 1].neg());
                        }
                    }
                    return p.type === "affine" ? acc.toP() : acc;
                };

                BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(
                    defW,
                    points,
                    coeffs,
                    len,
                    jacobianResult
                ) {
                    var wndWidth = this._wnafT1;
                    var wnd = this._wnafT2;
                    var naf = this._wnafT3;

                    // Fill all arrays
                    var max = 0;
                    for (var i = 0; i < len; i++) {
                        var p = points[i];
                        var nafPoints = p._getNAFPoints(defW);
                        wndWidth[i] = nafPoints.wnd;
                        wnd[i] = nafPoints.points;
                    }

                    // Comb small window NAFs
                    for (var i = len - 1; i >= 1; i -= 2) {
                        var a = i - 1;
                        var b = i;
                        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
                            naf[a] = getNAF(coeffs[a], wndWidth[a]);
                            naf[b] = getNAF(coeffs[b], wndWidth[b]);
                            max = Math.max(naf[a].length, max);
                            max = Math.max(naf[b].length, max);
                            continue;
                        }

                        var comb = [
                            points[a] /* 1 */,
                            null /* 3 */,
                            null /* 5 */,
                            points[b] /* 7 */,
                        ];

                        // Try to avoid Projective points, if possible
                        if (points[a].y.cmp(points[b].y) === 0) {
                            comb[1] = points[a].add(points[b]);
                            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                        } else if (
                            points[a].y.cmp(points[b].y.redNeg()) === 0
                        ) {
                            comb[1] = points[a].toJ().mixedAdd(points[b]);
                            comb[2] = points[a].add(points[b].neg());
                        } else {
                            comb[1] = points[a].toJ().mixedAdd(points[b]);
                            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                        }

                        var index = [
                            -3 /* -1 -1 */, -1 /* -1 0 */, -5 /* -1 1 */,
                            -7 /* 0 -1 */, 0 /* 0 0 */, 7 /* 0 1 */,
                            5 /* 1 -1 */, 1 /* 1 0 */, 3 /* 1 1 */,
                        ];

                        var jsf = getJSF(coeffs[a], coeffs[b]);
                        max = Math.max(jsf[0].length, max);
                        naf[a] = new Array(max);
                        naf[b] = new Array(max);
                        for (var j = 0; j < max; j++) {
                            var ja = jsf[0][j] | 0;
                            var jb = jsf[1][j] | 0;

                            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
                            naf[b][j] = 0;
                            wnd[a] = comb;
                        }
                    }

                    var acc = this.jpoint(null, null, null);
                    var tmp = this._wnafT4;
                    for (var i = max; i >= 0; i--) {
                        var k = 0;

                        while (i >= 0) {
                            var zero = true;
                            for (var j = 0; j < len; j++) {
                                tmp[j] = naf[j][i] | 0;
                                if (tmp[j] !== 0) zero = false;
                            }
                            if (!zero) break;
                            k++;
                            i--;
                        }
                        if (i >= 0) k++;
                        acc = acc.dblp(k);
                        if (i < 0) break;

                        for (var j = 0; j < len; j++) {
                            var z = tmp[j];
                            var p;
                            if (z === 0) continue;
                            else if (z > 0) p = wnd[j][(z - 1) >> 1];
                            else if (z < 0) p = wnd[j][(-z - 1) >> 1].neg();

                            if (p.type === "affine") acc = acc.mixedAdd(p);
                            else acc = acc.add(p);
                        }
                    }
                    // Zeroify references
                    for (var i = 0; i < len; i++) wnd[i] = null;

                    if (jacobianResult) return acc;
                    else return acc.toP();
                };

                function BasePoint(curve, type) {
                    this.curve = curve;
                    this.type = type;
                    this.precomputed = null;
                }
                BaseCurve.BasePoint = BasePoint;

                BasePoint.prototype.eq = function eq(/*other*/) {
                    throw new Error("Not implemented");
                };

                BasePoint.prototype.validate = function validate() {
                    return this.curve.validate(this);
                };

                BaseCurve.prototype.decodePoint = function decodePoint(
                    bytes,
                    enc
                ) {
                    bytes = utils.toArray(bytes, enc);

                    var len = this.p.byteLength();

                    // uncompressed, hybrid-odd, hybrid-even
                    if (
                        (bytes[0] === 0x04 ||
                            bytes[0] === 0x06 ||
                            bytes[0] === 0x07) &&
                        bytes.length - 1 === 2 * len
                    ) {
                        if (bytes[0] === 0x06)
                            assert(bytes[bytes.length - 1] % 2 === 0);
                        else if (bytes[0] === 0x07)
                            assert(bytes[bytes.length - 1] % 2 === 1);

                        var res = this.point(
                            bytes.slice(1, 1 + len),
                            bytes.slice(1 + len, 1 + 2 * len)
                        );

                        return res;
                    } else if (
                        (bytes[0] === 0x02 || bytes[0] === 0x03) &&
                        bytes.length - 1 === len
                    ) {
                        return this.pointFromX(
                            bytes.slice(1, 1 + len),
                            bytes[0] === 0x03
                        );
                    }
                    throw new Error("Unknown point format");
                };

                BasePoint.prototype.encodeCompressed =
                    function encodeCompressed(enc) {
                        return this.encode(enc, true);
                    };

                BasePoint.prototype._encode = function _encode(compact) {
                    var len = this.curve.p.byteLength();
                    var x = this.getX().toArray("be", len);

                    if (compact)
                        return [this.getY().isEven() ? 0x02 : 0x03].concat(x);

                    return [0x04].concat(x, this.getY().toArray("be", len));
                };

                BasePoint.prototype.encode = function encode(enc, compact) {
                    return utils.encode(this._encode(compact), enc);
                };

                BasePoint.prototype.precompute = function precompute(power) {
                    if (this.precomputed) return this;

                    var precomputed = {
                        doubles: null,
                        naf: null,
                        beta: null,
                    };
                    precomputed.naf = this._getNAFPoints(8);
                    precomputed.doubles = this._getDoubles(4, power);
                    precomputed.beta = this._getBeta();
                    this.precomputed = precomputed;

                    return this;
                };

                BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
                    if (!this.precomputed) return false;

                    var doubles = this.precomputed.doubles;
                    if (!doubles) return false;

                    return (
                        doubles.points.length >=
                        Math.ceil((k.bitLength() + 1) / doubles.step)
                    );
                };

                BasePoint.prototype._getDoubles = function _getDoubles(
                    step,
                    power
                ) {
                    if (this.precomputed && this.precomputed.doubles)
                        return this.precomputed.doubles;

                    var doubles = [this];
                    var acc = this;
                    for (var i = 0; i < power; i += step) {
                        for (var j = 0; j < step; j++) acc = acc.dbl();
                        doubles.push(acc);
                    }
                    return {
                        step: step,
                        points: doubles,
                    };
                };

                BasePoint.prototype._getNAFPoints = function _getNAFPoints(
                    wnd
                ) {
                    if (this.precomputed && this.precomputed.naf)
                        return this.precomputed.naf;

                    var res = [this];
                    var max = (1 << wnd) - 1;
                    var dbl = max === 1 ? null : this.dbl();
                    for (var i = 1; i < max; i++) res[i] = res[i - 1].add(dbl);
                    return {
                        wnd: wnd,
                        points: res,
                    };
                };

                BasePoint.prototype._getBeta = function _getBeta() {
                    return null;
                };

                BasePoint.prototype.dblp = function dblp(k) {
                    var r = this;
                    for (var i = 0; i < k; i++) r = r.dbl();
                    return r;
                };
            },
            { "../../../../BN/bn": 32, "../../elliptic": 34 },
        ],
        36: [
            function (require, module, exports) {
                "use strict";

                var curve = require("../curve");
                var elliptic = require("../../elliptic");
                var BN = require("../../../../BN/bn");
                var inherits = elliptic.inherits;
                var Base = curve.base;

                var assert = elliptic.utils.assert;

                function EdwardsCurve(conf) {
                    // NOTE: Important as we are creating point in Base.call()
                    this.twisted = (conf.a | 0) !== 1;
                    this.mOneA = this.twisted && (conf.a | 0) === -1;
                    this.extended = this.mOneA;

                    Base.call(this, "edwards", conf);

                    this.a = new BN(conf.a, 16).umod(this.red.m);
                    this.a = this.a.toRed(this.red);
                    this.c = new BN(conf.c, 16).toRed(this.red);
                    this.c2 = this.c.redSqr();
                    this.d = new BN(conf.d, 16).toRed(this.red);
                    this.dd = this.d.redAdd(this.d);

                    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
                    this.oneC = (conf.c | 0) === 1;
                }
                inherits(EdwardsCurve, Base);
                module.exports = EdwardsCurve;

                EdwardsCurve.prototype._mulA = function _mulA(num) {
                    if (this.mOneA) return num.redNeg();
                    else return this.a.redMul(num);
                };

                EdwardsCurve.prototype._mulC = function _mulC(num) {
                    if (this.oneC) return num;
                    else return this.c.redMul(num);
                };

                // Just for compatibility with Short curve
                EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
                    return this.point(x, y, z, t);
                };

                EdwardsCurve.prototype.pointFromX = function pointFromX(
                    x,
                    odd
                ) {
                    x = new BN(x, 16);
                    if (!x.red) x = x.toRed(this.red);

                    var x2 = x.redSqr();
                    var rhs = this.c2.redSub(this.a.redMul(x2));
                    var lhs = this.one.redSub(
                        this.c2.redMul(this.d).redMul(x2)
                    );

                    var y2 = rhs.redMul(lhs.redInvm());
                    var y = y2.redSqrt();
                    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
                        throw new Error("invalid point");

                    var isOdd = y.fromRed().isOdd();
                    if ((odd && !isOdd) || (!odd && isOdd)) y = y.redNeg();

                    return this.point(x, y);
                };

                EdwardsCurve.prototype.pointFromY = function pointFromY(
                    y,
                    odd
                ) {
                    y = new BN(y, 16);
                    if (!y.red) y = y.toRed(this.red);

                    // x^2 = (y^2 - 1) / (d y^2 + 1)
                    var y2 = y.redSqr();
                    var lhs = y2.redSub(this.one);
                    var rhs = y2.redMul(this.d).redAdd(this.one);
                    var x2 = lhs.redMul(rhs.redInvm());

                    if (x2.cmp(this.zero) === 0) {
                        if (odd) throw new Error("invalid point");
                        else return this.point(this.zero, y);
                    }

                    var x = x2.redSqrt();
                    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
                        throw new Error("invalid point");

                    if (x.isOdd() !== odd) x = x.redNeg();

                    return this.point(x, y);
                };

                EdwardsCurve.prototype.validate = function validate(point) {
                    if (point.isInfinity()) return true;

                    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
                    point.normalize();

                    var x2 = point.x.redSqr();
                    var y2 = point.y.redSqr();
                    var lhs = x2.redMul(this.a).redAdd(y2);
                    var rhs = this.c2.redMul(
                        this.one.redAdd(this.d.redMul(x2).redMul(y2))
                    );

                    return lhs.cmp(rhs) === 0;
                };

                function Point(curve, x, y, z, t) {
                    Base.BasePoint.call(this, curve, "projective");
                    if (x === null && y === null && z === null) {
                        this.x = this.curve.zero;
                        this.y = this.curve.one;
                        this.z = this.curve.one;
                        this.t = this.curve.zero;
                        this.zOne = true;
                    } else {
                        this.x = new BN(x, 16);
                        this.y = new BN(y, 16);
                        this.z = z ? new BN(z, 16) : this.curve.one;
                        this.t = t && new BN(t, 16);
                        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
                        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
                        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
                        if (this.t && !this.t.red)
                            this.t = this.t.toRed(this.curve.red);
                        this.zOne = this.z === this.curve.one;

                        // Use extended coordinates
                        if (this.curve.extended && !this.t) {
                            this.t = this.x.redMul(this.y);
                            if (!this.zOne)
                                this.t = this.t.redMul(this.z.redInvm());
                        }
                    }
                }
                inherits(Point, Base.BasePoint);

                EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(
                    obj
                ) {
                    return Point.fromJSON(this, obj);
                };

                EdwardsCurve.prototype.point = function point(x, y, z, t) {
                    return new Point(this, x, y, z, t);
                };

                Point.fromJSON = function fromJSON(curve, obj) {
                    return new Point(curve, obj[0], obj[1], obj[2]);
                };

                Point.prototype.inspect = function inspect() {
                    if (this.isInfinity()) return "<EC Point Infinity>";
                    return (
                        "<EC Point x: " +
                        this.x.fromRed().toString(16, 2) +
                        " y: " +
                        this.y.fromRed().toString(16, 2) +
                        " z: " +
                        this.z.fromRed().toString(16, 2) +
                        ">"
                    );
                };

                Point.prototype.isInfinity = function isInfinity() {
                    // XXX This code assumes that zero is always zero in red
                    return this.x.cmpn(0) === 0 && this.y.cmp(this.z) === 0;
                };

                Point.prototype._extDbl = function _extDbl() {
                    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
                    //     #doubling-dbl-2008-hwcd
                    // 4M + 4S

                    // A = X1^2
                    var a = this.x.redSqr();
                    // B = Y1^2
                    var b = this.y.redSqr();
                    // C = 2 * Z1^2
                    var c = this.z.redSqr();
                    c = c.redIAdd(c);
                    // D = a * A
                    var d = this.curve._mulA(a);
                    // E = (X1 + Y1)^2 - A - B
                    var e = this.x
                        .redAdd(this.y)
                        .redSqr()
                        .redISub(a)
                        .redISub(b);
                    // G = D + B
                    var g = d.redAdd(b);
                    // F = G - C
                    var f = g.redSub(c);
                    // H = D - B
                    var h = d.redSub(b);
                    // X3 = E * F
                    var nx = e.redMul(f);
                    // Y3 = G * H
                    var ny = g.redMul(h);
                    // T3 = E * H
                    var nt = e.redMul(h);
                    // Z3 = F * G
                    var nz = f.redMul(g);
                    return this.curve.point(nx, ny, nz, nt);
                };

                Point.prototype._projDbl = function _projDbl() {
                    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
                    //     #doubling-dbl-2008-bbjlp
                    //     #doubling-dbl-2007-bl
                    // and others
                    // Generally 3M + 4S or 2M + 4S

                    // B = (X1 + Y1)^2
                    var b = this.x.redAdd(this.y).redSqr();
                    // C = X1^2
                    var c = this.x.redSqr();
                    // D = Y1^2
                    var d = this.y.redSqr();

                    var nx;
                    var ny;
                    var nz;
                    if (this.curve.twisted) {
                        // E = a * C
                        var e = this.curve._mulA(c);
                        // F = E + D
                        var f = e.redAdd(d);
                        if (this.zOne) {
                            // X3 = (B - C - D) * (F - 2)
                            nx = b
                                .redSub(c)
                                .redSub(d)
                                .redMul(f.redSub(this.curve.two));
                            // Y3 = F * (E - D)
                            ny = f.redMul(e.redSub(d));
                            // Z3 = F^2 - 2 * F
                            nz = f.redSqr().redSub(f).redSub(f);
                        } else {
                            // H = Z1^2
                            var h = this.z.redSqr();
                            // J = F - 2 * H
                            var j = f.redSub(h).redISub(h);
                            // X3 = (B-C-D)*J
                            nx = b.redSub(c).redISub(d).redMul(j);
                            // Y3 = F * (E - D)
                            ny = f.redMul(e.redSub(d));
                            // Z3 = F * J
                            nz = f.redMul(j);
                        }
                    } else {
                        // E = C + D
                        var e = c.redAdd(d);
                        // H = (c * Z1)^2
                        var h = this.curve
                            ._mulC(this.c.redMul(this.z))
                            .redSqr();
                        // J = E - 2 * H
                        var j = e.redSub(h).redSub(h);
                        // X3 = c * (B - E) * J
                        nx = this.curve._mulC(b.redISub(e)).redMul(j);
                        // Y3 = c * E * (C - D)
                        ny = this.curve._mulC(e).redMul(c.redISub(d));
                        // Z3 = E * J
                        nz = e.redMul(j);
                    }
                    return this.curve.point(nx, ny, nz);
                };

                Point.prototype.dbl = function dbl() {
                    if (this.isInfinity()) return this;

                    // Double in extended coordinates
                    if (this.curve.extended) return this._extDbl();
                    else return this._projDbl();
                };

                Point.prototype._extAdd = function _extAdd(p) {
                    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
                    //     #addition-add-2008-hwcd-3
                    // 8M

                    // A = (Y1 - X1) * (Y2 - X2)
                    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
                    // B = (Y1 + X1) * (Y2 + X2)
                    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
                    // C = T1 * k * T2
                    var c = this.t.redMul(this.curve.dd).redMul(p.t);
                    // D = Z1 * 2 * Z2
                    var d = this.z.redMul(p.z.redAdd(p.z));
                    // E = B - A
                    var e = b.redSub(a);
                    // F = D - C
                    var f = d.redSub(c);
                    // G = D + C
                    var g = d.redAdd(c);
                    // H = B + A
                    var h = b.redAdd(a);
                    // X3 = E * F
                    var nx = e.redMul(f);
                    // Y3 = G * H
                    var ny = g.redMul(h);
                    // T3 = E * H
                    var nt = e.redMul(h);
                    // Z3 = F * G
                    var nz = f.redMul(g);
                    return this.curve.point(nx, ny, nz, nt);
                };

                Point.prototype._projAdd = function _projAdd(p) {
                    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
                    //     #addition-add-2008-bbjlp
                    //     #addition-add-2007-bl
                    // 10M + 1S

                    // A = Z1 * Z2
                    var a = this.z.redMul(p.z);
                    // B = A^2
                    var b = a.redSqr();
                    // C = X1 * X2
                    var c = this.x.redMul(p.x);
                    // D = Y1 * Y2
                    var d = this.y.redMul(p.y);
                    // E = d * C * D
                    var e = this.curve.d.redMul(c).redMul(d);
                    // F = B - E
                    var f = b.redSub(e);
                    // G = B + E
                    var g = b.redAdd(e);
                    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
                    var tmp = this.x
                        .redAdd(this.y)
                        .redMul(p.x.redAdd(p.y))
                        .redISub(c)
                        .redISub(d);
                    var nx = a.redMul(f).redMul(tmp);
                    var ny;
                    var nz;
                    if (this.curve.twisted) {
                        // Y3 = A * G * (D - a * C)
                        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
                        // Z3 = F * G
                        nz = f.redMul(g);
                    } else {
                        // Y3 = A * G * (D - C)
                        ny = a.redMul(g).redMul(d.redSub(c));
                        // Z3 = c * F * G
                        nz = this.curve._mulC(f).redMul(g);
                    }
                    return this.curve.point(nx, ny, nz);
                };

                Point.prototype.add = function add(p) {
                    if (this.isInfinity()) return p;
                    if (p.isInfinity()) return this;

                    if (this.curve.extended) return this._extAdd(p);
                    else return this._projAdd(p);
                };

                Point.prototype.mul = function mul(k) {
                    if (this._hasDoubles(k))
                        return this.curve._fixedNafMul(this, k);
                    else return this.curve._wnafMul(this, k);
                };

                Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
                    return this.curve._wnafMulAdd(
                        1,
                        [this, p],
                        [k1, k2],
                        2,
                        false
                    );
                };

                Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
                    return this.curve._wnafMulAdd(
                        1,
                        [this, p],
                        [k1, k2],
                        2,
                        true
                    );
                };

                Point.prototype.normalize = function normalize() {
                    if (this.zOne) return this;

                    // Normalize coordinates
                    var zi = this.z.redInvm();
                    this.x = this.x.redMul(zi);
                    this.y = this.y.redMul(zi);
                    if (this.t) this.t = this.t.redMul(zi);
                    this.z = this.curve.one;
                    this.zOne = true;
                    return this;
                };

                Point.prototype.neg = function neg() {
                    return this.curve.point(
                        this.x.redNeg(),
                        this.y,
                        this.z,
                        this.t && this.t.redNeg()
                    );
                };

                Point.prototype.getX = function getX() {
                    this.normalize();
                    return this.x.fromRed();
                };

                Point.prototype.getY = function getY() {
                    this.normalize();
                    return this.y.fromRed();
                };

                Point.prototype.eq = function eq(other) {
                    return (
                        this === other ||
                        (this.getX().cmp(other.getX()) === 0 &&
                            this.getY().cmp(other.getY()) === 0)
                    );
                };

                Point.prototype.eqXToP = function eqXToP(x) {
                    var rx = x.toRed(this.curve.red).redMul(this.z);
                    if (this.x.cmp(rx) === 0) return true;

                    var xc = x.clone();
                    var t = this.curve.redN.redMul(this.z);
                    for (;;) {
                        xc.iadd(this.curve.n);
                        if (xc.cmp(this.curve.p) >= 0) return false;

                        rx.redIAdd(t);
                        if (this.x.cmp(rx) === 0) return true;
                    }
                    return false;
                };

                // Compatibility with BaseCurve
                Point.prototype.toP = Point.prototype.normalize;
                Point.prototype.mixedAdd = Point.prototype.add;
            },
            { "../../../../BN/bn": 32, "../../elliptic": 34, "../curve": 37 },
        ],
        37: [
            function (require, module, exports) {
                "use strict";

                var curve = exports;

                curve.base = require("./base");
                curve.short = require("./short");
                curve.mont = require("./mont");
                curve.edwards = require("./edwards");
            },
            { "./base": 35, "./edwards": 36, "./mont": 38, "./short": 39 },
        ],
        38: [
            function (require, module, exports) {
                "use strict";

                var curve = require("../curve");
                var BN = require("../../../../BN/bn");
                var inherits = require("../../elliptic").inherits;
                var Base = curve.base;

                var elliptic = require("../../elliptic");
                var utils = elliptic.utils;

                function MontCurve(conf) {
                    Base.call(this, "mont", conf);

                    this.a = new BN(conf.a, 16).toRed(this.red);
                    this.b = new BN(conf.b, 16).toRed(this.red);
                    this.i4 = new BN(4).toRed(this.red).redInvm();
                    this.two = new BN(2).toRed(this.red);
                    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
                }
                inherits(MontCurve, Base);
                module.exports = MontCurve;

                MontCurve.prototype.validate = function validate(point) {
                    var x = point.normalize().x;
                    var x2 = x.redSqr();
                    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
                    var y = rhs.redSqrt();

                    return y.redSqr().cmp(rhs) === 0;
                };

                function Point(curve, x, z) {
                    Base.BasePoint.call(this, curve, "projective");
                    if (x === null && z === null) {
                        this.x = this.curve.one;
                        this.z = this.curve.zero;
                    } else {
                        this.x = new BN(x, 16);
                        this.z = new BN(z, 16);
                        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
                        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
                    }
                }
                inherits(Point, Base.BasePoint);

                MontCurve.prototype.decodePoint = function decodePoint(
                    bytes,
                    enc
                ) {
                    return this.point(utils.toArray(bytes, enc), 1);
                };

                MontCurve.prototype.point = function point(x, z) {
                    return new Point(this, x, z);
                };

                MontCurve.prototype.pointFromJSON = function pointFromJSON(
                    obj
                ) {
                    return Point.fromJSON(this, obj);
                };

                Point.prototype.precompute = function precompute() {
                    // No-op
                };

                Point.prototype._encode = function _encode() {
                    return this.getX().toArray("be", this.curve.p.byteLength());
                };

                Point.fromJSON = function fromJSON(curve, obj) {
                    return new Point(curve, obj[0], obj[1] || curve.one);
                };

                Point.prototype.inspect = function inspect() {
                    if (this.isInfinity()) return "<EC Point Infinity>";
                    return (
                        "<EC Point x: " +
                        this.x.fromRed().toString(16, 2) +
                        " z: " +
                        this.z.fromRed().toString(16, 2) +
                        ">"
                    );
                };

                Point.prototype.isInfinity = function isInfinity() {
                    // XXX This code assumes that zero is always zero in red
                    return this.z.cmpn(0) === 0;
                };

                Point.prototype.dbl = function dbl() {
                    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
                    // 2M + 2S + 4A

                    // A = X1 + Z1
                    var a = this.x.redAdd(this.z);
                    // AA = A^2
                    var aa = a.redSqr();
                    // B = X1 - Z1
                    var b = this.x.redSub(this.z);
                    // BB = B^2
                    var bb = b.redSqr();
                    // C = AA - BB
                    var c = aa.redSub(bb);
                    // X3 = AA * BB
                    var nx = aa.redMul(bb);
                    // Z3 = C * (BB + A24 * C)
                    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
                    return this.curve.point(nx, nz);
                };

                Point.prototype.add = function add() {
                    throw new Error("Not supported on Montgomery curve");
                };

                Point.prototype.diffAdd = function diffAdd(p, diff) {
                    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
                    // 4M + 2S + 6A

                    // A = X2 + Z2
                    var a = this.x.redAdd(this.z);
                    // B = X2 - Z2
                    var b = this.x.redSub(this.z);
                    // C = X3 + Z3
                    var c = p.x.redAdd(p.z);
                    // D = X3 - Z3
                    var d = p.x.redSub(p.z);
                    // DA = D * A
                    var da = d.redMul(a);
                    // CB = C * B
                    var cb = c.redMul(b);
                    // X5 = Z1 * (DA + CB)^2
                    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
                    // Z5 = X1 * (DA - CB)^2
                    var nz = diff.x.redMul(da.redISub(cb).redSqr());
                    return this.curve.point(nx, nz);
                };

                Point.prototype.mul = function mul(k) {
                    var t = k.clone();
                    var a = this; // (N / 2) * Q + Q
                    var b = this.curve.point(null, null); // (N / 2) * Q
                    var c = this; // Q

                    for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
                        bits.push(t.andln(1));

                    for (var i = bits.length - 1; i >= 0; i--) {
                        if (bits[i] === 0) {
                            // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
                            a = a.diffAdd(b, c);
                            // N * Q = 2 * ((N / 2) * Q + Q))
                            b = b.dbl();
                        } else {
                            // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
                            b = a.diffAdd(b, c);
                            // N * Q + Q = 2 * ((N / 2) * Q + Q)
                            a = a.dbl();
                        }
                    }
                    return b;
                };

                Point.prototype.mulAdd = function mulAdd() {
                    throw new Error("Not supported on Montgomery curve");
                };

                Point.prototype.jumlAdd = function jumlAdd() {
                    throw new Error("Not supported on Montgomery curve");
                };

                Point.prototype.eq = function eq(other) {
                    return this.getX().cmp(other.getX()) === 0;
                };

                Point.prototype.normalize = function normalize() {
                    this.x = this.x.redMul(this.z.redInvm());
                    this.z = this.curve.one;
                    return this;
                };

                Point.prototype.getX = function getX() {
                    // Normalize coordinates
                    this.normalize();

                    return this.x.fromRed();
                };
            },
            { "../../../../BN/bn": 32, "../../elliptic": 34, "../curve": 37 },
        ],
        39: [
            function (require, module, exports) {
                "use strict";

                var curve = require("../curve");
                var elliptic = require("../../elliptic");
                var BN = require("../../../../BN/bn");
                var inherits = elliptic.inherits;
                var Base = curve.base;

                var assert = elliptic.utils.assert;

                function ShortCurve(conf) {
                    Base.call(this, "short", conf);

                    this.a = new BN(conf.a, 16).toRed(this.red);
                    this.b = new BN(conf.b, 16).toRed(this.red);
                    this.tinv = this.two.redInvm();

                    this.zeroA = this.a.fromRed().cmpn(0) === 0;
                    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

                    // If the curve is endomorphic, precalculate beta and lambda
                    this.endo = this._getEndomorphism(conf);
                    this._endoWnafT1 = new Array(4);
                    this._endoWnafT2 = new Array(4);
                }
                inherits(ShortCurve, Base);
                module.exports = ShortCurve;

                ShortCurve.prototype._getEndomorphism =
                    function _getEndomorphism(conf) {
                        // No efficient endomorphism
                        if (
                            !this.zeroA ||
                            !this.g ||
                            !this.n ||
                            this.p.modn(3) !== 1
                        )
                            return;

                        // Compute beta and lambda, that lambda * P = (beta * Px; Py)
                        var beta;
                        var lambda;
                        if (conf.beta) {
                            beta = new BN(conf.beta, 16).toRed(this.red);
                        } else {
                            var betas = this._getEndoRoots(this.p);
                            // Choose the smallest beta
                            beta =
                                betas[0].cmp(betas[1]) < 0
                                    ? betas[0]
                                    : betas[1];
                            beta = beta.toRed(this.red);
                        }
                        if (conf.lambda) {
                            lambda = new BN(conf.lambda, 16);
                        } else {
                            // Choose the lambda that is matching selected beta
                            var lambdas = this._getEndoRoots(this.n);
                            if (
                                this.g
                                    .mul(lambdas[0])
                                    .x.cmp(this.g.x.redMul(beta)) === 0
                            ) {
                                lambda = lambdas[0];
                            } else {
                                lambda = lambdas[1];
                                assert(
                                    this.g
                                        .mul(lambda)
                                        .x.cmp(this.g.x.redMul(beta)) === 0
                                );
                            }
                        }

                        // Get basis vectors, used for balanced length-two representation
                        var basis;
                        if (conf.basis) {
                            basis = conf.basis.map(function (vec) {
                                return {
                                    a: new BN(vec.a, 16),
                                    b: new BN(vec.b, 16),
                                };
                            });
                        } else {
                            basis = this._getEndoBasis(lambda);
                        }

                        return {
                            beta: beta,
                            lambda: lambda,
                            basis: basis,
                        };
                    };

                ShortCurve.prototype._getEndoRoots = function _getEndoRoots(
                    num
                ) {
                    // Find roots of for x^2 + x + 1 in F
                    // Root = (-1 +- Sqrt(-3)) / 2
                    //
                    var red = num === this.p ? this.red : BN.mont(num);
                    var tinv = new BN(2).toRed(red).redInvm();
                    var ntinv = tinv.redNeg();

                    var s = new BN(3)
                        .toRed(red)
                        .redNeg()
                        .redSqrt()
                        .redMul(tinv);

                    var l1 = ntinv.redAdd(s).fromRed();
                    var l2 = ntinv.redSub(s).fromRed();
                    return [l1, l2];
                };

                ShortCurve.prototype._getEndoBasis = function _getEndoBasis(
                    lambda
                ) {
                    // aprxSqrt >= sqrt(this.n)
                    var aprxSqrt = this.n.ushrn(
                        Math.floor(this.n.bitLength() / 2)
                    );

                    // 3.74
                    // Run EGCD, until r(L + 1) < aprxSqrt
                    var u = lambda;
                    var v = this.n.clone();
                    var x1 = new BN(1);
                    var y1 = new BN(0);
                    var x2 = new BN(0);
                    var y2 = new BN(1);

                    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
                    var a0;
                    var b0;
                    // First vector
                    var a1;
                    var b1;
                    // Second vector
                    var a2;
                    var b2;

                    var prevR;
                    var i = 0;
                    var r;
                    var x;
                    while (u.cmpn(0) !== 0) {
                        var q = v.div(u);
                        r = v.sub(q.mul(u));
                        x = x2.sub(q.mul(x1));
                        var y = y2.sub(q.mul(y1));

                        if (!a1 && r.cmp(aprxSqrt) < 0) {
                            a0 = prevR.neg();
                            b0 = x1;
                            a1 = r.neg();
                            b1 = x;
                        } else if (a1 && ++i === 2) {
                            break;
                        }
                        prevR = r;

                        v = u;
                        u = r;
                        x2 = x1;
                        x1 = x;
                        y2 = y1;
                        y1 = y;
                    }
                    a2 = r.neg();
                    b2 = x;

                    var len1 = a1.sqr().add(b1.sqr());
                    var len2 = a2.sqr().add(b2.sqr());
                    if (len2.cmp(len1) >= 0) {
                        a2 = a0;
                        b2 = b0;
                    }

                    // Normalize signs
                    if (a1.negative) {
                        a1 = a1.neg();
                        b1 = b1.neg();
                    }
                    if (a2.negative) {
                        a2 = a2.neg();
                        b2 = b2.neg();
                    }

                    return [
                        { a: a1, b: b1 },
                        { a: a2, b: b2 },
                    ];
                };

                ShortCurve.prototype._endoSplit = function _endoSplit(k) {
                    var basis = this.endo.basis;
                    var v1 = basis[0];
                    var v2 = basis[1];

                    var c1 = v2.b.mul(k).divRound(this.n);
                    var c2 = v1.b.neg().mul(k).divRound(this.n);

                    var p1 = c1.mul(v1.a);
                    var p2 = c2.mul(v2.a);
                    var q1 = c1.mul(v1.b);
                    var q2 = c2.mul(v2.b);

                    // Calculate answer
                    var k1 = k.sub(p1).sub(p2);
                    var k2 = q1.add(q2).neg();
                    return { k1: k1, k2: k2 };
                };

                ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
                    x = new BN(x, 16);
                    if (!x.red) x = x.toRed(this.red);

                    var y2 = x
                        .redSqr()
                        .redMul(x)
                        .redIAdd(x.redMul(this.a))
                        .redIAdd(this.b);
                    var y = y2.redSqrt();
                    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
                        throw new Error("invalid point");

                    // XXX Is there any way to tell if the number is odd without converting it
                    // to non-red form?
                    var isOdd = y.fromRed().isOdd();
                    if ((odd && !isOdd) || (!odd && isOdd)) y = y.redNeg();

                    return this.point(x, y);
                };

                ShortCurve.prototype.validate = function validate(point) {
                    if (point.inf) return true;

                    var x = point.x;
                    var y = point.y;

                    var ax = this.a.redMul(x);
                    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
                    return y.redSqr().redISub(rhs).cmpn(0) === 0;
                };

                ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(
                    points,
                    coeffs,
                    jacobianResult
                ) {
                    var npoints = this._endoWnafT1;
                    var ncoeffs = this._endoWnafT2;
                    for (var i = 0; i < points.length; i++) {
                        var split = this._endoSplit(coeffs[i]);
                        var p = points[i];
                        var beta = p._getBeta();

                        if (split.k1.negative) {
                            split.k1.ineg();
                            p = p.neg(true);
                        }
                        if (split.k2.negative) {
                            split.k2.ineg();
                            beta = beta.neg(true);
                        }

                        npoints[i * 2] = p;
                        npoints[i * 2 + 1] = beta;
                        ncoeffs[i * 2] = split.k1;
                        ncoeffs[i * 2 + 1] = split.k2;
                    }
                    var res = this._wnafMulAdd(
                        1,
                        npoints,
                        ncoeffs,
                        i * 2,
                        jacobianResult
                    );

                    // Clean-up references to points and coefficients
                    for (var j = 0; j < i * 2; j++) {
                        npoints[j] = null;
                        ncoeffs[j] = null;
                    }
                    return res;
                };

                function Point(curve, x, y, isRed) {
                    Base.BasePoint.call(this, curve, "affine");
                    if (x === null && y === null) {
                        this.x = null;
                        this.y = null;
                        this.inf = true;
                    } else {
                        this.x = new BN(x, 16);
                        this.y = new BN(y, 16);
                        // Force redgomery representation when loading from JSON
                        if (isRed) {
                            this.x.forceRed(this.curve.red);
                            this.y.forceRed(this.curve.red);
                        }
                        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
                        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
                        this.inf = false;
                    }
                }
                inherits(Point, Base.BasePoint);

                ShortCurve.prototype.point = function point(x, y, isRed) {
                    return new Point(this, x, y, isRed);
                };

                ShortCurve.prototype.pointFromJSON = function pointFromJSON(
                    obj,
                    red
                ) {
                    return Point.fromJSON(this, obj, red);
                };

                Point.prototype._getBeta = function _getBeta() {
                    if (!this.curve.endo) return;

                    var pre = this.precomputed;
                    if (pre && pre.beta) return pre.beta;

                    var beta = this.curve.point(
                        this.x.redMul(this.curve.endo.beta),
                        this.y
                    );
                    if (pre) {
                        var curve = this.curve;
                        var endoMul = function (p) {
                            return curve.point(
                                p.x.redMul(curve.endo.beta),
                                p.y
                            );
                        };
                        pre.beta = beta;
                        beta.precomputed = {
                            beta: null,
                            naf: pre.naf && {
                                wnd: pre.naf.wnd,
                                points: pre.naf.points.map(endoMul),
                            },
                            doubles: pre.doubles && {
                                step: pre.doubles.step,
                                points: pre.doubles.points.map(endoMul),
                            },
                        };
                    }
                    return beta;
                };

                Point.prototype.toJSON = function toJSON() {
                    if (!this.precomputed) return [this.x, this.y];

                    return [
                        this.x,
                        this.y,
                        this.precomputed && {
                            doubles: this.precomputed.doubles && {
                                step: this.precomputed.doubles.step,
                                points: this.precomputed.doubles.points.slice(
                                    1
                                ),
                            },
                            naf: this.precomputed.naf && {
                                wnd: this.precomputed.naf.wnd,
                                points: this.precomputed.naf.points.slice(1),
                            },
                        },
                    ];
                };

                Point.fromJSON = function fromJSON(curve, obj, red) {
                    if (typeof obj === "string") obj = JSON.parse(obj);
                    var res = curve.point(obj[0], obj[1], red);
                    if (!obj[2]) return res;

                    function obj2point(obj) {
                        return curve.point(obj[0], obj[1], red);
                    }

                    var pre = obj[2];
                    res.precomputed = {
                        beta: null,
                        doubles: pre.doubles && {
                            step: pre.doubles.step,
                            points: [res].concat(
                                pre.doubles.points.map(obj2point)
                            ),
                        },
                        naf: pre.naf && {
                            wnd: pre.naf.wnd,
                            points: [res].concat(pre.naf.points.map(obj2point)),
                        },
                    };
                    return res;
                };

                Point.prototype.inspect = function inspect() {
                    if (this.isInfinity()) return "<EC Point Infinity>";
                    return (
                        "<EC Point x: " +
                        this.x.fromRed().toString(16, 2) +
                        " y: " +
                        this.y.fromRed().toString(16, 2) +
                        ">"
                    );
                };

                Point.prototype.isInfinity = function isInfinity() {
                    return this.inf;
                };

                Point.prototype.add = function add(p) {
                    // O + P = P
                    if (this.inf) return p;

                    // P + O = P
                    if (p.inf) return this;

                    // P + P = 2P
                    if (this.eq(p)) return this.dbl();

                    // P + (-P) = O
                    if (this.neg().eq(p)) return this.curve.point(null, null);

                    // P + Q = O
                    if (this.x.cmp(p.x) === 0)
                        return this.curve.point(null, null);

                    var c = this.y.redSub(p.y);
                    if (c.cmpn(0) !== 0)
                        c = c.redMul(this.x.redSub(p.x).redInvm());
                    var nx = c.redSqr().redISub(this.x).redISub(p.x);
                    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
                    return this.curve.point(nx, ny);
                };

                Point.prototype.dbl = function dbl() {
                    if (this.inf) return this;

                    // 2P = O
                    var ys1 = this.y.redAdd(this.y);
                    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);

                    var a = this.curve.a;

                    var x2 = this.x.redSqr();
                    var dyinv = ys1.redInvm();
                    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

                    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
                    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
                    return this.curve.point(nx, ny);
                };

                Point.prototype.getX = function getX() {
                    return this.x.fromRed();
                };

                Point.prototype.getY = function getY() {
                    return this.y.fromRed();
                };

                Point.prototype.mul = function mul(k) {
                    k = new BN(k, 16);

                    if (this._hasDoubles(k))
                        return this.curve._fixedNafMul(this, k);
                    else if (this.curve.endo)
                        return this.curve._endoWnafMulAdd([this], [k]);
                    else return this.curve._wnafMul(this, k);
                };

                Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
                    var points = [this, p2];
                    var coeffs = [k1, k2];
                    if (this.curve.endo)
                        return this.curve._endoWnafMulAdd(points, coeffs);
                    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
                };

                Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
                    var points = [this, p2];
                    var coeffs = [k1, k2];
                    if (this.curve.endo)
                        return this.curve._endoWnafMulAdd(points, coeffs, true);
                    else
                        return this.curve._wnafMulAdd(
                            1,
                            points,
                            coeffs,
                            2,
                            true
                        );
                };

                Point.prototype.eq = function eq(p) {
                    return (
                        this === p ||
                        (this.inf === p.inf &&
                            (this.inf ||
                                (this.x.cmp(p.x) === 0 &&
                                    this.y.cmp(p.y) === 0)))
                    );
                };

                Point.prototype.neg = function neg(_precompute) {
                    if (this.inf) return this;

                    var res = this.curve.point(this.x, this.y.redNeg());
                    if (_precompute && this.precomputed) {
                        var pre = this.precomputed;
                        var negate = function (p) {
                            return p.neg();
                        };
                        res.precomputed = {
                            naf: pre.naf && {
                                wnd: pre.naf.wnd,
                                points: pre.naf.points.map(negate),
                            },
                            doubles: pre.doubles && {
                                step: pre.doubles.step,
                                points: pre.doubles.points.map(negate),
                            },
                        };
                    }
                    return res;
                };

                Point.prototype.toJ = function toJ() {
                    if (this.inf) return this.curve.jpoint(null, null, null);

                    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
                    return res;
                };

                function JPoint(curve, x, y, z) {
                    Base.BasePoint.call(this, curve, "jacobian");
                    if (x === null && y === null && z === null) {
                        this.x = this.curve.one;
                        this.y = this.curve.one;
                        this.z = new BN(0);
                    } else {
                        this.x = new BN(x, 16);
                        this.y = new BN(y, 16);
                        this.z = new BN(z, 16);
                    }
                    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
                    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
                    if (!this.z.red) this.z = this.z.toRed(this.curve.red);

                    this.zOne = this.z === this.curve.one;
                }
                inherits(JPoint, Base.BasePoint);

                ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
                    return new JPoint(this, x, y, z);
                };

                JPoint.prototype.toP = function toP() {
                    if (this.isInfinity()) return this.curve.point(null, null);

                    var zinv = this.z.redInvm();
                    var zinv2 = zinv.redSqr();
                    var ax = this.x.redMul(zinv2);
                    var ay = this.y.redMul(zinv2).redMul(zinv);

                    return this.curve.point(ax, ay);
                };

                JPoint.prototype.neg = function neg() {
                    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
                };

                JPoint.prototype.add = function add(p) {
                    // O + P = P
                    if (this.isInfinity()) return p;

                    // P + O = P
                    if (p.isInfinity()) return this;

                    // 12M + 4S + 7A
                    var pz2 = p.z.redSqr();
                    var z2 = this.z.redSqr();
                    var u1 = this.x.redMul(pz2);
                    var u2 = p.x.redMul(z2);
                    var s1 = this.y.redMul(pz2.redMul(p.z));
                    var s2 = p.y.redMul(z2.redMul(this.z));

                    var h = u1.redSub(u2);
                    var r = s1.redSub(s2);
                    if (h.cmpn(0) === 0) {
                        if (r.cmpn(0) !== 0)
                            return this.curve.jpoint(null, null, null);
                        else return this.dbl();
                    }

                    var h2 = h.redSqr();
                    var h3 = h2.redMul(h);
                    var v = u1.redMul(h2);

                    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
                    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
                    var nz = this.z.redMul(p.z).redMul(h);

                    return this.curve.jpoint(nx, ny, nz);
                };

                JPoint.prototype.mixedAdd = function mixedAdd(p) {
                    // O + P = P
                    if (this.isInfinity()) return p.toJ();

                    // P + O = P
                    if (p.isInfinity()) return this;

                    // 8M + 3S + 7A
                    var z2 = this.z.redSqr();
                    var u1 = this.x;
                    var u2 = p.x.redMul(z2);
                    var s1 = this.y;
                    var s2 = p.y.redMul(z2).redMul(this.z);

                    var h = u1.redSub(u2);
                    var r = s1.redSub(s2);
                    if (h.cmpn(0) === 0) {
                        if (r.cmpn(0) !== 0)
                            return this.curve.jpoint(null, null, null);
                        else return this.dbl();
                    }

                    var h2 = h.redSqr();
                    var h3 = h2.redMul(h);
                    var v = u1.redMul(h2);

                    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
                    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
                    var nz = this.z.redMul(h);

                    return this.curve.jpoint(nx, ny, nz);
                };

                JPoint.prototype.dblp = function dblp(pow) {
                    if (pow === 0) return this;
                    if (this.isInfinity()) return this;
                    if (!pow) return this.dbl();

                    if (this.curve.zeroA || this.curve.threeA) {
                        var r = this;
                        for (var i = 0; i < pow; i++) r = r.dbl();
                        return r;
                    }

                    // 1M + 2S + 1A + N * (4S + 5M + 8A)
                    // N = 1 => 6M + 6S + 9A
                    var a = this.curve.a;
                    var tinv = this.curve.tinv;

                    var jx = this.x;
                    var jy = this.y;
                    var jz = this.z;
                    var jz4 = jz.redSqr().redSqr();

                    // Reuse results
                    var jyd = jy.redAdd(jy);
                    for (var i = 0; i < pow; i++) {
                        var jx2 = jx.redSqr();
                        var jyd2 = jyd.redSqr();
                        var jyd4 = jyd2.redSqr();
                        var c = jx2
                            .redAdd(jx2)
                            .redIAdd(jx2)
                            .redIAdd(a.redMul(jz4));

                        var t1 = jx.redMul(jyd2);
                        var nx = c.redSqr().redISub(t1.redAdd(t1));
                        var t2 = t1.redISub(nx);
                        var dny = c.redMul(t2);
                        dny = dny.redIAdd(dny).redISub(jyd4);
                        var nz = jyd.redMul(jz);
                        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);

                        jx = nx;
                        jz = nz;
                        jyd = dny;
                    }

                    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
                };

                JPoint.prototype.dbl = function dbl() {
                    if (this.isInfinity()) return this;

                    if (this.curve.zeroA) return this._zeroDbl();
                    else if (this.curve.threeA) return this._threeDbl();
                    else return this._dbl();
                };

                JPoint.prototype._zeroDbl = function _zeroDbl() {
                    var nx;
                    var ny;
                    var nz;
                    // Z = 1
                    if (this.zOne) {
                        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                        //     #doubling-mdbl-2007-bl
                        // 1M + 5S + 14A

                        // XX = X1^2
                        var xx = this.x.redSqr();
                        // YY = Y1^2
                        var yy = this.y.redSqr();
                        // YYYY = YY^2
                        var yyyy = yy.redSqr();
                        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
                        var s = this.x
                            .redAdd(yy)
                            .redSqr()
                            .redISub(xx)
                            .redISub(yyyy);
                        s = s.redIAdd(s);
                        // M = 3 * XX + a; a = 0
                        var m = xx.redAdd(xx).redIAdd(xx);
                        // T = M ^ 2 - 2*S
                        var t = m.redSqr().redISub(s).redISub(s);

                        // 8 * YYYY
                        var yyyy8 = yyyy.redIAdd(yyyy);
                        yyyy8 = yyyy8.redIAdd(yyyy8);
                        yyyy8 = yyyy8.redIAdd(yyyy8);

                        // X3 = T
                        nx = t;
                        // Y3 = M * (S - T) - 8 * YYYY
                        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
                        // Z3 = 2*Y1
                        nz = this.y.redAdd(this.y);
                    } else {
                        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                        //     #doubling-dbl-2009-l
                        // 2M + 5S + 13A

                        // A = X1^2
                        var a = this.x.redSqr();
                        // B = Y1^2
                        var b = this.y.redSqr();
                        // C = B^2
                        var c = b.redSqr();
                        // D = 2 * ((X1 + B)^2 - A - C)
                        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
                        d = d.redIAdd(d);
                        // E = 3 * A
                        var e = a.redAdd(a).redIAdd(a);
                        // F = E^2
                        var f = e.redSqr();

                        // 8 * C
                        var c8 = c.redIAdd(c);
                        c8 = c8.redIAdd(c8);
                        c8 = c8.redIAdd(c8);

                        // X3 = F - 2 * D
                        nx = f.redISub(d).redISub(d);
                        // Y3 = E * (D - X3) - 8 * C
                        ny = e.redMul(d.redISub(nx)).redISub(c8);
                        // Z3 = 2 * Y1 * Z1
                        nz = this.y.redMul(this.z);
                        nz = nz.redIAdd(nz);
                    }

                    return this.curve.jpoint(nx, ny, nz);
                };

                JPoint.prototype._threeDbl = function _threeDbl() {
                    var nx;
                    var ny;
                    var nz;
                    // Z = 1
                    if (this.zOne) {
                        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
                        //     #doubling-mdbl-2007-bl
                        // 1M + 5S + 15A

                        // XX = X1^2
                        var xx = this.x.redSqr();
                        // YY = Y1^2
                        var yy = this.y.redSqr();
                        // YYYY = YY^2
                        var yyyy = yy.redSqr();
                        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
                        var s = this.x
                            .redAdd(yy)
                            .redSqr()
                            .redISub(xx)
                            .redISub(yyyy);
                        s = s.redIAdd(s);
                        // M = 3 * XX + a
                        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
                        // T = M^2 - 2 * S
                        var t = m.redSqr().redISub(s).redISub(s);
                        // X3 = T
                        nx = t;
                        // Y3 = M * (S - T) - 8 * YYYY
                        var yyyy8 = yyyy.redIAdd(yyyy);
                        yyyy8 = yyyy8.redIAdd(yyyy8);
                        yyyy8 = yyyy8.redIAdd(yyyy8);
                        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
                        // Z3 = 2 * Y1
                        nz = this.y.redAdd(this.y);
                    } else {
                        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
                        // 3M + 5S

                        // delta = Z1^2
                        var delta = this.z.redSqr();
                        // gamma = Y1^2
                        var gamma = this.y.redSqr();
                        // beta = X1 * gamma
                        var beta = this.x.redMul(gamma);
                        // alpha = 3 * (X1 - delta) * (X1 + delta)
                        var alpha = this.x
                            .redSub(delta)
                            .redMul(this.x.redAdd(delta));
                        alpha = alpha.redAdd(alpha).redIAdd(alpha);
                        // X3 = alpha^2 - 8 * beta
                        var beta4 = beta.redIAdd(beta);
                        beta4 = beta4.redIAdd(beta4);
                        var beta8 = beta4.redAdd(beta4);
                        nx = alpha.redSqr().redISub(beta8);
                        // Z3 = (Y1 + Z1)^2 - gamma - delta
                        nz = this.y
                            .redAdd(this.z)
                            .redSqr()
                            .redISub(gamma)
                            .redISub(delta);
                        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
                        var ggamma8 = gamma.redSqr();
                        ggamma8 = ggamma8.redIAdd(ggamma8);
                        ggamma8 = ggamma8.redIAdd(ggamma8);
                        ggamma8 = ggamma8.redIAdd(ggamma8);
                        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
                    }

                    return this.curve.jpoint(nx, ny, nz);
                };

                JPoint.prototype._dbl = function _dbl() {
                    var a = this.curve.a;

                    // 4M + 6S + 10A
                    var jx = this.x;
                    var jy = this.y;
                    var jz = this.z;
                    var jz4 = jz.redSqr().redSqr();

                    var jx2 = jx.redSqr();
                    var jy2 = jy.redSqr();

                    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

                    var jxd4 = jx.redAdd(jx);
                    jxd4 = jxd4.redIAdd(jxd4);
                    var t1 = jxd4.redMul(jy2);
                    var nx = c.redSqr().redISub(t1.redAdd(t1));
                    var t2 = t1.redISub(nx);

                    var jyd8 = jy2.redSqr();
                    jyd8 = jyd8.redIAdd(jyd8);
                    jyd8 = jyd8.redIAdd(jyd8);
                    jyd8 = jyd8.redIAdd(jyd8);
                    var ny = c.redMul(t2).redISub(jyd8);
                    var nz = jy.redAdd(jy).redMul(jz);

                    return this.curve.jpoint(nx, ny, nz);
                };

                JPoint.prototype.trpl = function trpl() {
                    if (!this.curve.zeroA) return this.dbl().add(this);

                    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
                    // 5M + 10S + ...

                    // XX = X1^2
                    var xx = this.x.redSqr();
                    // YY = Y1^2
                    var yy = this.y.redSqr();
                    // ZZ = Z1^2
                    var zz = this.z.redSqr();
                    // YYYY = YY^2
                    var yyyy = yy.redSqr();
                    // M = 3 * XX + a * ZZ2; a = 0
                    var m = xx.redAdd(xx).redIAdd(xx);
                    // MM = M^2
                    var mm = m.redSqr();
                    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
                    var e = this.x
                        .redAdd(yy)
                        .redSqr()
                        .redISub(xx)
                        .redISub(yyyy);
                    e = e.redIAdd(e);
                    e = e.redAdd(e).redIAdd(e);
                    e = e.redISub(mm);
                    // EE = E^2
                    var ee = e.redSqr();
                    // T = 16*YYYY
                    var t = yyyy.redIAdd(yyyy);
                    t = t.redIAdd(t);
                    t = t.redIAdd(t);
                    t = t.redIAdd(t);
                    // U = (M + E)^2 - MM - EE - T
                    var u = m
                        .redIAdd(e)
                        .redSqr()
                        .redISub(mm)
                        .redISub(ee)
                        .redISub(t);
                    // X3 = 4 * (X1 * EE - 4 * YY * U)
                    var yyu4 = yy.redMul(u);
                    yyu4 = yyu4.redIAdd(yyu4);
                    yyu4 = yyu4.redIAdd(yyu4);
                    var nx = this.x.redMul(ee).redISub(yyu4);
                    nx = nx.redIAdd(nx);
                    nx = nx.redIAdd(nx);
                    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
                    var ny = this.y.redMul(
                        u.redMul(t.redISub(u)).redISub(e.redMul(ee))
                    );
                    ny = ny.redIAdd(ny);
                    ny = ny.redIAdd(ny);
                    ny = ny.redIAdd(ny);
                    // Z3 = (Z1 + E)^2 - ZZ - EE
                    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

                    return this.curve.jpoint(nx, ny, nz);
                };

                JPoint.prototype.mul = function mul(k, kbase) {
                    k = new BN(k, kbase);

                    return this.curve._wnafMul(this, k);
                };

                JPoint.prototype.eq = function eq(p) {
                    if (p.type === "affine") return this.eq(p.toJ());

                    if (this === p) return true;

                    // x1 * z2^2 == x2 * z1^2
                    var z2 = this.z.redSqr();
                    var pz2 = p.z.redSqr();
                    if (
                        this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0
                    )
                        return false;

                    // y1 * z2^3 == y2 * z1^3
                    var z3 = z2.redMul(this.z);
                    var pz3 = pz2.redMul(p.z);
                    return (
                        this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0
                    );
                };

                JPoint.prototype.eqXToP = function eqXToP(x) {
                    var zs = this.z.redSqr();
                    var rx = x.toRed(this.curve.red).redMul(zs);
                    if (this.x.cmp(rx) === 0) return true;

                    var xc = x.clone();
                    var t = this.curve.redN.redMul(zs);
                    for (;;) {
                        xc.iadd(this.curve.n);
                        if (xc.cmp(this.curve.p) >= 0) return false;

                        rx.redIAdd(t);
                        if (this.x.cmp(rx) === 0) return true;
                    }
                    return false;
                };

                JPoint.prototype.inspect = function inspect() {
                    if (this.isInfinity()) return "<EC JPoint Infinity>";
                    return (
                        "<EC JPoint x: " +
                        this.x.toString(16, 2) +
                        " y: " +
                        this.y.toString(16, 2) +
                        " z: " +
                        this.z.toString(16, 2) +
                        ">"
                    );
                };

                JPoint.prototype.isInfinity = function isInfinity() {
                    // XXX This code assumes that zero is always zero in red
                    return this.z.cmpn(0) === 0;
                };
            },
            { "../../../../BN/bn": 32, "../../elliptic": 34, "../curve": 37 },
        ],
        40: [
            function (require, module, exports) {
                "use strict";

                var curves = exports;

                var elliptic = require("../elliptic");

                var assert = elliptic.utils.assert;

                function PresetCurve(options) {
                    if (options.type === "short")
                        this.curve = new elliptic.curve.short(options);
                    else if (options.type === "edwards")
                        this.curve = new elliptic.curve.edwards(options);
                    else this.curve = new elliptic.curve.mont(options);
                    this.g = this.curve.g;
                    this.n = this.curve.n;
                    this.hash = options.hash;

                    assert(this.g.validate(), "Invalid curve");
                    assert(
                        this.g.mul(this.n).isInfinity(),
                        "Invalid curve, G*N != O"
                    );
                }
                curves.PresetCurve = PresetCurve;

                function defineCurve(name, options) {
                    Object.defineProperty(curves, name, {
                        configurable: true,
                        enumerable: true,
                        get: function () {
                            var curve = new PresetCurve(options);
                            Object.defineProperty(curves, name, {
                                configurable: true,
                                enumerable: true,
                                value: curve,
                            });
                            return curve;
                        },
                    });
                }

                defineCurve("p192", {
                    type: "short",
                    prime: "p192",
                    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
                    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
                    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
                    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
                    hash: "SHA256",
                    gRed: false,
                    g: [
                        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
                        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811",
                    ],
                });

                defineCurve("p224", {
                    type: "short",
                    prime: "p224",
                    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
                    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
                    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
                    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
                    hash: "SHA256",
                    gRed: false,
                    g: [
                        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
                        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34",
                    ],
                });

                defineCurve("p256", {
                    type: "short",
                    prime: null,
                    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
                    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
                    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
                    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
                    hash: "SHA256",
                    gRed: false,
                    g: [
                        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
                        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5",
                    ],
                });

                defineCurve("p384", {
                    type: "short",
                    prime: null,
                    p:
                        "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " +
                        "fffffffe ffffffff 00000000 00000000 ffffffff",
                    a:
                        "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " +
                        "fffffffe ffffffff 00000000 00000000 fffffffc",
                    b:
                        "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f " +
                        "5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
                    n:
                        "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 " +
                        "f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
                    hash: "SHA384",
                    gRed: false,
                    g: [
                        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 " +
                            "5502f25d bf55296c 3a545e38 72760ab7",
                        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 " +
                            "0a60b1ce 1d7e819d 7a431d7c 90ea0e5f",
                    ],
                });

                defineCurve("p521", {
                    type: "short",
                    prime: null,
                    p:
                        "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff " +
                        "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " +
                        "ffffffff ffffffff ffffffff ffffffff ffffffff",
                    a:
                        "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff " +
                        "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " +
                        "ffffffff ffffffff ffffffff ffffffff fffffffc",
                    b:
                        "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b " +
                        "99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd " +
                        "3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
                    n:
                        "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff " +
                        "ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 " +
                        "f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
                    hash: "SHA512",
                    gRed: false,
                    g: [
                        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 " +
                            "053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 " +
                            "a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
                        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 " +
                            "579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 " +
                            "3fad0761 353c7086 a272c240 88be9476 9fd16650",
                    ],
                });

                defineCurve("curve25519", {
                    type: "mont",
                    prime: "p25519",
                    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                    a: "76d06",
                    b: "1",
                    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                    hash: "SHA256",
                    gRed: false,
                    g: ["9"],
                });

                defineCurve("ed25519", {
                    type: "edwards",
                    prime: "p25519",
                    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                    a: "-1",
                    c: "1",
                    // -121665 * (121666^(-1)) (mod P)
                    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
                    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                    hash: "SHA256",
                    gRed: false,
                    g: [
                        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",

                        // 4/5
                        "6666666666666666666666666666666666666666666666666666666666666658",
                    ],
                });

                var pre;
                try {
                    pre = require("./precomputed/secp256k1");
                } catch (e) {
                    pre = undefined;
                }

                defineCurve("secp256k1", {
                    type: "short",
                    prime: "k256",
                    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
                    a: "0",
                    b: "7",
                    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
                    h: "1",
                    hash: "SHA256",

                    // Precomputed endomorphism
                    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
                    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
                    basis: [
                        {
                            a: "3086d221a7d46bcde86c90e49284eb15",
                            b: "-e4437ed6010e88286f547fa90abfe4c3",
                        },
                        {
                            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                            b: "3086d221a7d46bcde86c90e49284eb15",
                        },
                    ],

                    gRed: false,
                    g: [
                        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
                        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
                        pre,
                    ],
                });
            },
            { "../elliptic": 34, "./precomputed/secp256k1": 47 },
        ],
        41: [
            function (require, module, exports) {
                "use strict";

                var BN = require("../../../../BN/bn");
                var HmacDRBG = require("../../hmac-drbg/hmac-drbg");
                var elliptic = require("../../elliptic");
                var utils = elliptic.utils;
                var assert = utils.assert;

                var KeyPair = require("./key");
                var Signature = require("./signature");

                function EC(options) {
                    if (!(this instanceof EC)) return new EC(options);

                    // Shortcut `elliptic.ec(curve-name)`
                    if (typeof options === "string") {
                        assert(
                            elliptic.curves.hasOwnProperty(options),
                            "Unknown curve " + options
                        );

                        options = elliptic.curves[options];
                    }

                    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
                    if (options instanceof elliptic.curves.PresetCurve)
                        options = { curve: options };

                    this.curve = options.curve.curve;
                    this.n = this.curve.n;
                    this.nh = this.n.ushrn(1);
                    this.g = this.curve.g;

                    // Point on curve
                    this.g = options.curve.g;
                    this.g.precompute(options.curve.n.bitLength() + 1);

                    // Hash for function for DRBG
                    this.hash = options.hash || options.curve.hash;
                }
                module.exports = EC;

                EC.prototype.keyPair = function keyPair(options) {
                    return new KeyPair(this, options);
                };

                EC.prototype.keyFromPrivate = function keyFromPrivate(
                    priv,
                    enc
                ) {
                    return KeyPair.fromPrivate(this, priv, enc);
                };

                EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
                    return KeyPair.fromPublic(this, pub, enc);
                };

                EC.prototype.genKeyPair = function genKeyPair(options) {
                    if (!options) options = {};

                    // Instantiate Hmac_DRBG
                    var drbg = new HmacDRBG({
                        hash: this.hash,
                        pers: options.pers,
                        persEnc: options.persEnc || "utf8",
                        entropy: options.entropy || null, //elliptic.rand(this.hash.hmacStrength),
                        entropyEnc:
                            (options.entropy && options.entropyEnc) || "utf8",
                        nonce: this.n.toArray(),
                    });

                    var bytes = this.n.byteLength();
                    var ns2 = this.n.sub(new BN(2));
                    do {
                        var priv = new BN(drbg.generate(bytes));
                        if (priv.cmp(ns2) > 0) continue;

                        priv.iaddn(1);
                        return this.keyFromPrivate(priv);
                    } while (true);
                };

                EC.prototype._truncateToN = function truncateToN(
                    msg,
                    truncOnly
                ) {
                    var delta = msg.byteLength() * 8 - this.n.bitLength();
                    if (delta > 0) msg = msg.ushrn(delta);
                    if (!truncOnly && msg.cmp(this.n) >= 0)
                        return msg.sub(this.n);
                    else return msg;
                };

                EC.prototype.sign = function sign(msg, key, enc, options) {
                    if (typeof enc === "object") {
                        options = enc;
                        enc = null;
                    }
                    if (!options) options = {};

                    key = this.keyFromPrivate(key, enc);
                    msg = this._truncateToN(new BN(msg, 16));

                    // Zero-extend key to provide enough entropy
                    var bytes = this.n.byteLength();
                    var bkey = key.getPrivate().toArray("be", bytes);

                    // Zero-extend nonce to have the same byte size as N
                    var nonce = msg.toArray("be", bytes);

                    // Instantiate Hmac_DRBG
                    var drbg = new HmacDRBG({
                        hash: this.hash,
                        entropy: options["extraEntropy"]
                            ? bkey.concat(options["extraEntropy"])
                            : bkey,
                        nonce: nonce,
                        pers: options.pers,
                        persEnc: options.persEnc || "utf8",
                    });

                    // Number of bytes to generate
                    var ns1 = this.n.sub(new BN(1));

                    for (var iter = 0; true; iter++) {
                        var k = options.k
                            ? options.k(iter)
                            : new BN(drbg.generate(this.n.byteLength()));
                        k = this._truncateToN(k, true);
                        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;

                        var kp = this.g.mul(k);
                        if (kp.isInfinity()) continue;

                        var kpX = kp.getX();
                        var r = kpX.umod(this.n);
                        if (r.cmpn(0) === 0) continue;

                        var s = k
                            .invm(this.n)
                            .mul(r.mul(key.getPrivate()).iadd(msg));
                        s = s.umod(this.n);
                        if (s.cmpn(0) === 0) continue;

                        var recoveryParam =
                            (kp.getY().isOdd() ? 1 : 0) |
                            (kpX.cmp(r) !== 0 ? 2 : 0);

                        // Use complement of `s`, if it is > `n / 2`
                        if (options.canonical && s.cmp(this.nh) > 0) {
                            s = this.n.sub(s);
                            recoveryParam ^= 1;
                        }

                        return new Signature({
                            r: r,
                            s: s,
                            recoveryParam: recoveryParam,
                        });
                    }
                };

                EC.prototype.verify = function verify(
                    msg,
                    signature,
                    key,
                    enc
                ) {
                    msg = this._truncateToN(new BN(msg, 16));
                    key = this.keyFromPublic(key, enc);
                    signature = new Signature(signature, "hex");

                    // Perform primitive values validation
                    var r = signature.r;
                    var s = signature.s;
                    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
                    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;

                    // Validate signature
                    var sinv = s.invm(this.n);
                    var u1 = sinv.mul(msg).umod(this.n);
                    var u2 = sinv.mul(r).umod(this.n);

                    if (!this.curve._maxwellTrick) {
                        var p = this.g.mulAdd(u1, key.getPublic(), u2);
                        if (p.isInfinity()) return false;

                        return p.getX().umod(this.n).cmp(r) === 0;
                    }

                    // NOTE: Greg Maxwell's trick, inspired by:
                    // https://git.io/vad3K

                    var p = this.g.jmulAdd(u1, key.getPublic(), u2);
                    if (p.isInfinity()) return false;

                    // Compare `p.x` of Jacobian point with `r`,
                    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
                    // inverse of `p.z^2`
                    return p.eqXToP(r);
                };

                EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
                    assert(
                        (3 & j) === j,
                        "The recovery param is more than two bits"
                    );
                    signature = new Signature(signature, enc);

                    var n = this.n;
                    var e = new BN(msg);
                    var r = signature.r;
                    var s = signature.s;

                    // A set LSB signifies that the y-coordinate is odd
                    var isYOdd = j & 1;
                    var isSecondKey = j >> 1;
                    if (
                        r.cmp(this.curve.p.umod(this.curve.n)) >= 0 &&
                        isSecondKey
                    )
                        throw new Error("Unable to find sencond key candinate");

                    // 1.1. Let x = r + jn.
                    if (isSecondKey)
                        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
                    else r = this.curve.pointFromX(r, isYOdd);

                    var rInv = signature.r.invm(n);
                    var s1 = n.sub(e).mul(rInv).umod(n);
                    var s2 = s.mul(rInv).umod(n);

                    // 1.6.1 Compute Q = r^-1 (sR -  eG)
                    //               Q = r^-1 (sR + -eG)
                    return this.g.mulAdd(s1, r, s2);
                };

                EC.prototype.getKeyRecoveryParam = function (
                    e,
                    signature,
                    Q,
                    enc
                ) {
                    signature = new Signature(signature, enc);
                    if (signature.recoveryParam !== null)
                        return signature.recoveryParam;

                    for (var i = 0; i < 4; i++) {
                        var Qprime;
                        try {
                            Qprime = this.recoverPubKey(e, signature, i);
                        } catch (e) {
                            continue;
                        }

                        if (Qprime.eq(Q)) return i;
                    }
                    throw new Error("Unable to find valid recovery factor");
                };
            },
            {
                "../../../../BN/bn": 32,
                "../../elliptic": 34,
                "../../hmac-drbg/hmac-drbg": 49,
                "./key": 42,
                "./signature": 43,
            },
        ],
        42: [
            function (require, module, exports) {
                "use strict";

                var BN = require("../../../../BN/bn");
                var elliptic = require("../../elliptic");
                var utils = elliptic.utils;
                var assert = utils.assert;

                function KeyPair(ec, options) {
                    this.ec = ec;
                    this.priv = null;
                    this.pub = null;

                    // KeyPair(ec, { priv: ..., pub: ... })
                    if (options.priv)
                        this._importPrivate(options.priv, options.privEnc);
                    if (options.pub)
                        this._importPublic(options.pub, options.pubEnc);
                }
                module.exports = KeyPair;

                KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
                    if (pub instanceof KeyPair) return pub;

                    return new KeyPair(ec, {
                        pub: pub,
                        pubEnc: enc,
                    });
                };

                KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
                    if (priv instanceof KeyPair) return priv;

                    return new KeyPair(ec, {
                        priv: priv,
                        privEnc: enc,
                    });
                };

                KeyPair.prototype.validate = function validate() {
                    var pub = this.getPublic();

                    if (pub.isInfinity())
                        return { result: false, reason: "Invalid public key" };
                    if (!pub.validate())
                        return {
                            result: false,
                            reason: "Public key is not a point",
                        };
                    if (!pub.mul(this.ec.curve.n).isInfinity())
                        return { result: false, reason: "Public key * N != O" };

                    return { result: true, reason: null };
                };

                KeyPair.prototype.getPublic = function getPublic(compact, enc) {
                    // compact is optional argument
                    if (typeof compact === "string") {
                        enc = compact;
                        compact = null;
                    }

                    if (!this.pub) this.pub = this.ec.g.mul(this.priv);

                    if (!enc) return this.pub;

                    return this.pub.encode(enc, compact);
                };

                KeyPair.prototype.getPrivate = function getPrivate(enc) {
                    if (enc === "hex") return this.priv.toString(16, 2);
                    else return this.priv;
                };

                KeyPair.prototype._importPrivate = function _importPrivate(
                    key,
                    enc
                ) {
                    this.priv = new BN(key, enc || 16);

                    // Ensure that the priv won't be bigger than n, otherwise we may fail
                    // in fixed multiplication method
                    this.priv = this.priv.umod(this.ec.curve.n);
                };

                KeyPair.prototype._importPublic = function _importPublic(
                    key,
                    enc
                ) {
                    if (key.x || key.y) {
                        // Montgomery points only have an `x` coordinate.
                        // Weierstrass/Edwards points on the other hand have both `x` and
                        // `y` coordinates.
                        if (this.ec.curve.type === "mont") {
                            assert(key.x, "Need x coordinate");
                        } else if (
                            this.ec.curve.type === "short" ||
                            this.ec.curve.type === "edwards"
                        ) {
                            assert(
                                key.x && key.y,
                                "Need both x and y coordinate"
                            );
                        }
                        this.pub = this.ec.curve.point(key.x, key.y);
                        return;
                    }
                    this.pub = this.ec.curve.decodePoint(key, enc);
                };

                // ECDH
                KeyPair.prototype.derive = function derive(pub) {
                    return pub.mul(this.priv).getX();
                };

                // ECDSA
                KeyPair.prototype.sign = function sign(msg, enc, options) {
                    return this.ec.sign(msg, this, enc, options);
                };

                KeyPair.prototype.verify = function verify(msg, signature) {
                    return this.ec.verify(msg, signature, this);
                };

                KeyPair.prototype.inspect = function inspect() {
                    return (
                        "<Key priv: " +
                        (this.priv && this.priv.toString(16, 2)) +
                        " pub: " +
                        (this.pub && this.pub.inspect()) +
                        " >"
                    );
                };
            },
            { "../../../../BN/bn": 32, "../../elliptic": 34 },
        ],
        43: [
            function (require, module, exports) {
                "use strict";

                var BN = require("../../../../BN/bn");

                var elliptic = require("../../elliptic");
                var utils = elliptic.utils;
                var assert = utils.assert;

                function Signature(options, enc) {
                    if (options instanceof Signature) return options;

                    //if (this._importDER(options, enc))
                    //  return;

                    assert(options.r && options.s, "Signature without r or s");
                    this.r = new BN(options.r, 16);
                    this.s = new BN(options.s, 16);
                    if (options.recoveryParam === undefined)
                        this.recoveryParam = null;
                    else this.recoveryParam = options.recoveryParam;
                }
                module.exports = Signature;
            },
            { "../../../../BN/bn": 32, "../../elliptic": 34 },
        ],
        44: [
            function (require, module, exports) {
                "use strict";

                var curves = require("../curves");
                var utils = require("../utils");
                var assert = utils.assert;
                var parseBytes = utils.parseBytes;
                var KeyPair = require("./key");
                var Signature = require("./signature");
                const BN = require("../../../../BN/bn.js");
                const {
                    byteArrayToWordArray,
                } = require("../../../../../base/functions/encode");
                const CryptoJS = require("../../../../crypto-js/crypto-js");

                function EDDSA(curveName) {
                    assert(
                        curveName === "ed25519",
                        "only tested with ed25519 so far"
                    );

                    if (!(this instanceof EDDSA)) return new EDDSA(curveName);

                    var curve = curves[curveName].curve;
                    this.curve = curve;
                    this.g = curve.g;
                    this.g.precompute(curve.n.bitLength() + 1);

                    this.pointClass = curve.point().constructor;
                    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
                    //this.hash = hash.sha512;
                }

                module.exports = EDDSA;

                /**
                 * @param {Array|String} message - message bytes
                 * @param {Array|String|KeyPair} secret - secret bytes or a keypair
                 * @returns {Signature} - signature
                 */
                EDDSA.prototype.sign = function sign(message, secret) {
                    message = parseBytes(message);
                    var key = this.keyFromSecret(secret);
                    var r = this.hashInt(key.secret(), message);
                    var R = this.g.mul(r);
                    var Rencoded = this.encodePoint(R);
                    var s_ = this.hashInt(Rencoded, key.pubBytes(), message);
                    s_ = s_.mul(key.priv());
                    var S = r.add(s_).umod(this.curve.n);
                    return this.makeSignature({
                        R: R,
                        S: S,
                        Rencoded: Rencoded,
                    });
                };

                /**
                 * @param {Array|String} message - message bytes
                 * @param {Array|String|KeyPair} secret - secret bytes or a keypair
                 * @returns {Signature} - signature
                 */
                EDDSA.prototype.signModified = function sign(message, secret) {
                    message = parseBytes(message);
                    var key = this.keyFromSecret(secret);
                    // convert between curve25519 and ed25519 keys
                    const secretLE = new BN(key.secret(), 16, "le");
                    const pubKey = this.encodePoint(this.g.mul(secretLE));
                    const signBit = pubKey[31] & 0x80;
                    var r = this.hashInt(key.secret(), message);
                    var R = this.g.mul(r);
                    var Rencoded = this.encodePoint(R);
                    let s_ = this.hashInt(Rencoded, pubKey, message);
                    s_ = s_.mul(secretLE);
                    var S = r.add(s_).umod(this.curve.n);
                    var Sencoded = S.toArray("le", 32);
                    Sencoded[31] |= signBit;
                    return this.makeSignature({
                        R: R,
                        S: S,
                        Rencoded: Rencoded,
                        Sencoded: Sencoded,
                    });
                };

                /**
                 * @param {Array} message - message bytes
                 * @param {Array|String|Signature} sig - sig bytes
                 * @param {Array|String|Point|KeyPair} pub - public key
                 * @returns {Boolean} - true if public key matches sig of message
                 */
                EDDSA.prototype.verify = function verify(message, sig, pub) {
                    message = parseBytes(message);
                    sig = this.makeSignature(sig);
                    var key = this.keyFromPublic(pub);
                    var h = this.hashInt(
                        sig.Rencoded(),
                        key.pubBytes(),
                        message
                    );
                    var SG = this.g.mul(sig.S());
                    var RplusAh = sig.R().add(key.pub().mul(h));
                    return RplusAh.eq(SG);
                };

                EDDSA.prototype.hashInt = function hashInt() {
                    let toHash = Array.from(arguments).reduce((a, b) =>
                        a.concat(b)
                    );
                    toHash = byteArrayToWordArray(toHash);
                    const digest = CryptoJS["SHA512"](toHash).toString(
                        CryptoJS.enc.Hex
                    );
                    return utils.intFromLE(digest).umod(this.curve.n);
                };

                EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
                    return KeyPair.fromPublic(this, pub);
                };

                EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
                    return KeyPair.fromSecret(this, secret);
                };

                EDDSA.prototype.makeSignature = function makeSignature(sig) {
                    if (sig instanceof Signature) return sig;
                    return new Signature(this, sig);
                };

                /**
                 * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
                 *
                 * EDDSA defines methods for encoding and decoding points and integers. These are
                 * helper convenience methods, that pass along to utility functions implied
                 * parameters.
                 *
                 */
                EDDSA.prototype.encodePoint = function encodePoint(point) {
                    var enc = point.getY().toArray("le", this.encodingLength);
                    enc[this.encodingLength - 1] |= point.getX().isOdd()
                        ? 0x80
                        : 0;
                    return enc;
                };

                EDDSA.prototype.decodePoint = function decodePoint(bytes) {
                    bytes = utils.parseBytes(bytes);

                    var lastIx = bytes.length - 1;
                    var normed = bytes
                        .slice(0, lastIx)
                        .concat(bytes[lastIx] & ~0x80);
                    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

                    var y = utils.intFromLE(normed);
                    return this.curve.pointFromY(y, xIsOdd);
                };

                EDDSA.prototype.encodeInt = function encodeInt(num) {
                    return num.toArray("le", this.encodingLength);
                };

                EDDSA.prototype.decodeInt = function decodeInt(bytes) {
                    return utils.intFromLE(bytes);
                };

                EDDSA.prototype.isPoint = function isPoint(val) {
                    return val instanceof this.pointClass;
                };
            },
            {
                "../../../../../base/functions/encode": 9,
                "../../../../BN/bn.js": 32,
                "../../../../crypto-js/crypto-js": 33,
                "../curves": 40,
                "../utils": 48,
                "./key": 45,
                "./signature": 46,
            },
        ],
        45: [
            function (require, module, exports) {
                "use strict";

                var utils = require("../utils");
                var assert = utils.assert;
                var parseBytes = utils.parseBytes;
                var cachedProperty = utils.cachedProperty;

                /**
                 * @param {EDDSA} eddsa - instance
                 * @param {Object} params - public/private key parameters
                 *
                 * @param {Array<Byte>} [params.secret] - secret seed bytes
                 * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
                 * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
                 *
                 */
                function KeyPair(eddsa, params) {
                    this.eddsa = eddsa;
                    this._secret = parseBytes(params.secret);
                    if (eddsa.isPoint(params.pub)) this._pub = params.pub;
                    else this._pubBytes = parseBytes(params.pub);
                }

                KeyPair.fromPublic = function fromPublic(eddsa, pub) {
                    if (pub instanceof KeyPair) return pub;
                    return new KeyPair(eddsa, { pub: pub });
                };

                KeyPair.fromSecret = function fromSecret(eddsa, secret) {
                    if (secret instanceof KeyPair) return secret;
                    return new KeyPair(eddsa, { secret: secret });
                };

                KeyPair.prototype.secret = function secret() {
                    return this._secret;
                };

                cachedProperty(KeyPair, "pubBytes", function pubBytes() {
                    return this.eddsa.encodePoint(this.pub());
                });

                cachedProperty(KeyPair, "pub", function pub() {
                    if (this._pubBytes)
                        return this.eddsa.decodePoint(this._pubBytes);
                    return this.eddsa.g.mul(this.priv());
                });

                cachedProperty(KeyPair, "privBytes", function privBytes() {
                    var eddsa = this.eddsa;
                    var hash = this.hash();
                    var lastIx = eddsa.encodingLength - 1;

                    var a = hash.slice(0, eddsa.encodingLength);
                    a[0] &= 248;
                    a[lastIx] &= 127;
                    a[lastIx] |= 64;

                    return a;
                });

                cachedProperty(KeyPair, "priv", function priv() {
                    return this.eddsa.decodeInt(this.privBytes());
                });

                cachedProperty(KeyPair, "hash", function hash() {
                    return this.eddsa.hash().update(this.secret()).digest();
                });

                cachedProperty(
                    KeyPair,
                    "messagePrefix",
                    function messagePrefix() {
                        return this.hash().slice(this.eddsa.encodingLength);
                    }
                );

                KeyPair.prototype.sign = function sign(message) {
                    assert(this._secret, "KeyPair can only verify");
                    return this.eddsa.sign(message, this);
                };

                KeyPair.prototype.signModified = function sign(message) {
                    assert(this._secret, "KeyPair can only verify");
                    return this.eddsa.signModified(message, this);
                };

                KeyPair.prototype.verify = function verify(message, sig) {
                    return this.eddsa.verify(message, sig, this);
                };

                KeyPair.prototype.getSecret = function getSecret(enc) {
                    assert(this._secret, "KeyPair is public only");
                    return utils.encode(this.secret(), enc);
                };

                KeyPair.prototype.getPublic = function getPublic(enc) {
                    return utils.encode(this.pubBytes(), enc);
                };

                module.exports = KeyPair;
            },
            { "../utils": 48 },
        ],
        46: [
            function (require, module, exports) {
                "use strict";

                var BN = require("../../../../BN/bn");
                var utils = require("../utils");
                var assert = utils.assert;
                var cachedProperty = utils.cachedProperty;
                var parseBytes = utils.parseBytes;

                /**
                 * @param {EDDSA} eddsa - eddsa instance
                 * @param {Array<Bytes>|Object} sig -
                 * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
                 * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
                 * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
                 * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
                 */
                function Signature(eddsa, sig) {
                    this.eddsa = eddsa;

                    if (typeof sig !== "object") sig = parseBytes(sig);

                    if (Array.isArray(sig)) {
                        sig = {
                            R: sig.slice(0, eddsa.encodingLength),
                            S: sig.slice(eddsa.encodingLength),
                        };
                    }

                    assert(sig.R && sig.S, "Signature without R or S");

                    if (eddsa.isPoint(sig.R)) this._R = sig.R;
                    if (sig.S instanceof BN) this._S = sig.S;

                    this._Rencoded = Array.isArray(sig.R)
                        ? sig.R
                        : sig.Rencoded;
                    this._Sencoded = Array.isArray(sig.S)
                        ? sig.S
                        : sig.Sencoded;
                }

                cachedProperty(Signature, "S", function S() {
                    return this.eddsa.decodeInt(this.Sencoded());
                });

                cachedProperty(Signature, "R", function R() {
                    return this.eddsa.decodePoint(this.Rencoded());
                });

                cachedProperty(Signature, "Rencoded", function Rencoded() {
                    return this.eddsa.encodePoint(this.R());
                });

                cachedProperty(Signature, "Sencoded", function Sencoded() {
                    return this.eddsa.encodeInt(this.S());
                });

                Signature.prototype.toBytes = function toBytes() {
                    return this.Rencoded().concat(this.Sencoded());
                };

                Signature.prototype.toHex = function toHex() {
                    return utils.encode(this.toBytes(), "hex").toUpperCase();
                };

                module.exports = Signature;
            },
            { "../../../../BN/bn": 32, "../utils": 48 },
        ],
        47: [
            function (require, module, exports) {
                module.exports = {
                    doubles: {
                        step: 4,
                        points: [
                            [
                                "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
                                "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821",
                            ],
                            [
                                "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
                                "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf",
                            ],
                            [
                                "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
                                "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695",
                            ],
                            [
                                "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
                                "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9",
                            ],
                            [
                                "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
                                "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36",
                            ],
                            [
                                "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
                                "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f",
                            ],
                            [
                                "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
                                "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999",
                            ],
                            [
                                "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
                                "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09",
                            ],
                            [
                                "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
                                "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d",
                            ],
                            [
                                "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
                                "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088",
                            ],
                            [
                                "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
                                "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d",
                            ],
                            [
                                "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
                                "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8",
                            ],
                            [
                                "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
                                "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a",
                            ],
                            [
                                "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
                                "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453",
                            ],
                            [
                                "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
                                "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160",
                            ],
                            [
                                "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
                                "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0",
                            ],
                            [
                                "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
                                "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6",
                            ],
                            [
                                "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
                                "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589",
                            ],
                            [
                                "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
                                "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17",
                            ],
                            [
                                "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
                                "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda",
                            ],
                            [
                                "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
                                "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd",
                            ],
                            [
                                "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
                                "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2",
                            ],
                            [
                                "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
                                "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6",
                            ],
                            [
                                "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
                                "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f",
                            ],
                            [
                                "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
                                "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01",
                            ],
                            [
                                "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
                                "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3",
                            ],
                            [
                                "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
                                "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f",
                            ],
                            [
                                "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
                                "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7",
                            ],
                            [
                                "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
                                "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78",
                            ],
                            [
                                "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
                                "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1",
                            ],
                            [
                                "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
                                "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150",
                            ],
                            [
                                "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
                                "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82",
                            ],
                            [
                                "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
                                "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc",
                            ],
                            [
                                "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
                                "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b",
                            ],
                            [
                                "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
                                "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51",
                            ],
                            [
                                "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
                                "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45",
                            ],
                            [
                                "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
                                "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120",
                            ],
                            [
                                "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
                                "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84",
                            ],
                            [
                                "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
                                "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d",
                            ],
                            [
                                "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
                                "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d",
                            ],
                            [
                                "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
                                "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8",
                            ],
                            [
                                "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
                                "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8",
                            ],
                            [
                                "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
                                "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac",
                            ],
                            [
                                "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
                                "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f",
                            ],
                            [
                                "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
                                "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962",
                            ],
                            [
                                "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
                                "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907",
                            ],
                            [
                                "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
                                "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec",
                            ],
                            [
                                "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
                                "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d",
                            ],
                            [
                                "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
                                "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414",
                            ],
                            [
                                "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
                                "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd",
                            ],
                            [
                                "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
                                "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0",
                            ],
                            [
                                "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
                                "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811",
                            ],
                            [
                                "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
                                "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1",
                            ],
                            [
                                "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
                                "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c",
                            ],
                            [
                                "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
                                "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73",
                            ],
                            [
                                "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
                                "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd",
                            ],
                            [
                                "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
                                "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405",
                            ],
                            [
                                "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
                                "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589",
                            ],
                            [
                                "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
                                "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e",
                            ],
                            [
                                "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
                                "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27",
                            ],
                            [
                                "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
                                "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1",
                            ],
                            [
                                "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
                                "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482",
                            ],
                            [
                                "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
                                "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945",
                            ],
                            [
                                "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
                                "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573",
                            ],
                            [
                                "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
                                "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82",
                            ],
                        ],
                    },
                    naf: {
                        wnd: 7,
                        points: [
                            [
                                "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
                                "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672",
                            ],
                            [
                                "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
                                "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6",
                            ],
                            [
                                "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
                                "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da",
                            ],
                            [
                                "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
                                "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37",
                            ],
                            [
                                "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
                                "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b",
                            ],
                            [
                                "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
                                "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81",
                            ],
                            [
                                "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
                                "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58",
                            ],
                            [
                                "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
                                "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77",
                            ],
                            [
                                "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
                                "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a",
                            ],
                            [
                                "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
                                "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c",
                            ],
                            [
                                "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
                                "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67",
                            ],
                            [
                                "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
                                "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402",
                            ],
                            [
                                "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
                                "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55",
                            ],
                            [
                                "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
                                "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482",
                            ],
                            [
                                "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
                                "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82",
                            ],
                            [
                                "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
                                "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396",
                            ],
                            [
                                "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
                                "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49",
                            ],
                            [
                                "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
                                "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf",
                            ],
                            [
                                "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
                                "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a",
                            ],
                            [
                                "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
                                "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7",
                            ],
                            [
                                "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
                                "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933",
                            ],
                            [
                                "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
                                "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a",
                            ],
                            [
                                "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
                                "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6",
                            ],
                            [
                                "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
                                "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37",
                            ],
                            [
                                "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
                                "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e",
                            ],
                            [
                                "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
                                "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6",
                            ],
                            [
                                "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
                                "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476",
                            ],
                            [
                                "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
                                "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40",
                            ],
                            [
                                "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
                                "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61",
                            ],
                            [
                                "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
                                "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683",
                            ],
                            [
                                "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
                                "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5",
                            ],
                            [
                                "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
                                "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b",
                            ],
                            [
                                "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
                                "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417",
                            ],
                            [
                                "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
                                "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868",
                            ],
                            [
                                "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
                                "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a",
                            ],
                            [
                                "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
                                "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6",
                            ],
                            [
                                "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
                                "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996",
                            ],
                            [
                                "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
                                "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e",
                            ],
                            [
                                "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
                                "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d",
                            ],
                            [
                                "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
                                "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2",
                            ],
                            [
                                "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
                                "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e",
                            ],
                            [
                                "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
                                "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437",
                            ],
                            [
                                "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
                                "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311",
                            ],
                            [
                                "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
                                "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4",
                            ],
                            [
                                "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
                                "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575",
                            ],
                            [
                                "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
                                "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d",
                            ],
                            [
                                "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
                                "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d",
                            ],
                            [
                                "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
                                "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629",
                            ],
                            [
                                "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
                                "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06",
                            ],
                            [
                                "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
                                "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374",
                            ],
                            [
                                "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
                                "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee",
                            ],
                            [
                                "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
                                "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1",
                            ],
                            [
                                "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
                                "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b",
                            ],
                            [
                                "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
                                "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661",
                            ],
                            [
                                "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
                                "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6",
                            ],
                            [
                                "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
                                "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e",
                            ],
                            [
                                "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
                                "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d",
                            ],
                            [
                                "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
                                "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc",
                            ],
                            [
                                "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
                                "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4",
                            ],
                            [
                                "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
                                "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c",
                            ],
                            [
                                "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
                                "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b",
                            ],
                            [
                                "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
                                "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913",
                            ],
                            [
                                "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
                                "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154",
                            ],
                            [
                                "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
                                "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865",
                            ],
                            [
                                "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
                                "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc",
                            ],
                            [
                                "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
                                "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224",
                            ],
                            [
                                "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
                                "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e",
                            ],
                            [
                                "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
                                "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6",
                            ],
                            [
                                "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
                                "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511",
                            ],
                            [
                                "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
                                "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b",
                            ],
                            [
                                "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
                                "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2",
                            ],
                            [
                                "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
                                "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c",
                            ],
                            [
                                "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
                                "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3",
                            ],
                            [
                                "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
                                "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d",
                            ],
                            [
                                "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
                                "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700",
                            ],
                            [
                                "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
                                "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4",
                            ],
                            [
                                "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
                                "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196",
                            ],
                            [
                                "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
                                "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4",
                            ],
                            [
                                "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
                                "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257",
                            ],
                            [
                                "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
                                "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13",
                            ],
                            [
                                "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
                                "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096",
                            ],
                            [
                                "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
                                "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38",
                            ],
                            [
                                "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
                                "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f",
                            ],
                            [
                                "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
                                "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448",
                            ],
                            [
                                "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
                                "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a",
                            ],
                            [
                                "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
                                "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4",
                            ],
                            [
                                "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
                                "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437",
                            ],
                            [
                                "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
                                "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7",
                            ],
                            [
                                "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
                                "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d",
                            ],
                            [
                                "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
                                "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a",
                            ],
                            [
                                "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
                                "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54",
                            ],
                            [
                                "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
                                "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77",
                            ],
                            [
                                "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
                                "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517",
                            ],
                            [
                                "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
                                "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10",
                            ],
                            [
                                "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
                                "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125",
                            ],
                            [
                                "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
                                "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e",
                            ],
                            [
                                "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
                                "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1",
                            ],
                            [
                                "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
                                "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2",
                            ],
                            [
                                "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
                                "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423",
                            ],
                            [
                                "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
                                "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8",
                            ],
                            [
                                "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
                                "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758",
                            ],
                            [
                                "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
                                "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375",
                            ],
                            [
                                "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
                                "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d",
                            ],
                            [
                                "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
                                "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec",
                            ],
                            [
                                "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
                                "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0",
                            ],
                            [
                                "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
                                "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c",
                            ],
                            [
                                "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
                                "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4",
                            ],
                            [
                                "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
                                "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f",
                            ],
                            [
                                "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
                                "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649",
                            ],
                            [
                                "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
                                "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826",
                            ],
                            [
                                "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
                                "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5",
                            ],
                            [
                                "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
                                "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87",
                            ],
                            [
                                "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
                                "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b",
                            ],
                            [
                                "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
                                "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc",
                            ],
                            [
                                "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
                                "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c",
                            ],
                            [
                                "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
                                "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f",
                            ],
                            [
                                "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
                                "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a",
                            ],
                            [
                                "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
                                "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46",
                            ],
                            [
                                "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
                                "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f",
                            ],
                            [
                                "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
                                "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03",
                            ],
                            [
                                "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
                                "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08",
                            ],
                            [
                                "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
                                "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8",
                            ],
                            [
                                "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
                                "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373",
                            ],
                            [
                                "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
                                "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3",
                            ],
                            [
                                "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
                                "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8",
                            ],
                            [
                                "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
                                "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1",
                            ],
                            [
                                "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
                                "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9",
                            ],
                        ],
                    },
                };
            },
            {},
        ],
        48: [
            function (require, module, exports) {
                "use strict";

                var utils = exports;
                var BN = require("../../../BN/bn");

                utils.assert = function (condition, errorMessage) {
                    if (!condition) {
                        throw new Error(errorMessage);
                    }
                };

                // Represent num in a w-NAF form
                function getNAF(num, w) {
                    var naf = [];
                    var ws = 1 << (w + 1);
                    var k = num.clone();
                    while (k.cmpn(1) >= 0) {
                        var z;
                        if (k.isOdd()) {
                            var mod = k.andln(ws - 1);
                            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
                            else z = mod;
                            k.isubn(z);
                        } else {
                            z = 0;
                        }
                        naf.push(z);

                        // Optimization, shift by word if possible
                        var shift =
                            k.cmpn(0) !== 0 && k.andln(ws - 1) === 0
                                ? w + 1
                                : 1;
                        for (var i = 1; i < shift; i++) naf.push(0);
                        k.iushrn(shift);
                    }

                    return naf;
                }
                utils.getNAF = getNAF;

                // Represent k1, k2 in a Joint Sparse Form
                function getJSF(k1, k2) {
                    var jsf = [[], []];

                    k1 = k1.clone();
                    k2 = k2.clone();
                    var d1 = 0;
                    var d2 = 0;
                    while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
                        // First phase
                        var m14 = (k1.andln(3) + d1) & 3;
                        var m24 = (k2.andln(3) + d2) & 3;
                        if (m14 === 3) m14 = -1;
                        if (m24 === 3) m24 = -1;
                        var u1;
                        if ((m14 & 1) === 0) {
                            u1 = 0;
                        } else {
                            var m8 = (k1.andln(7) + d1) & 7;
                            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
                            else u1 = m14;
                        }
                        jsf[0].push(u1);

                        var u2;
                        if ((m24 & 1) === 0) {
                            u2 = 0;
                        } else {
                            var m8 = (k2.andln(7) + d2) & 7;
                            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
                            else u2 = m24;
                        }
                        jsf[1].push(u2);

                        // Second phase
                        if (2 * d1 === u1 + 1) d1 = 1 - d1;
                        if (2 * d2 === u2 + 1) d2 = 1 - d2;
                        k1.iushrn(1);
                        k2.iushrn(1);
                    }

                    return jsf;
                }
                utils.getJSF = getJSF;

                function cachedProperty(obj, name, computer) {
                    var key = "_" + name;
                    obj.prototype[name] = function cachedProperty() {
                        return this[key] !== undefined
                            ? this[key]
                            : (this[key] = computer.call(this));
                    };
                }
                utils.cachedProperty = cachedProperty;

                function parseBytes(bytes) {
                    return typeof bytes === "string"
                        ? utils.toArray(bytes, "hex")
                        : bytes;
                }
                utils.parseBytes = parseBytes;

                function intFromLE(bytes) {
                    return new BN(bytes, "hex", "le");
                }
                utils.intFromLE = intFromLE;

                // used to convert `CryptoJS` wordArrays into `crypto` hex buffers
                function wordToByteArray(word, length) {
                    var ba = [],
                        xFF = 0xff;
                    if (length > 0) ba.push(word >>> 24);
                    if (length > 1) ba.push((word >>> 16) & xFF);
                    if (length > 2) ba.push((word >>> 8) & xFF);
                    if (length > 3) ba.push(word & xFF);

                    return ba;
                }

                function wordArrayToBuffer(wordArray) {
                    let length = undefined;
                    if (
                        wordArray.hasOwnProperty("sigBytes") &&
                        wordArray.hasOwnProperty("words")
                    ) {
                        length = wordArray.sigBytes;
                        wordArray = wordArray.words;
                    } else {
                        throw Error("Argument not a wordArray");
                    }

                    const result = [];
                    let bytes = [];
                    let i = 0;
                    while (length > 0) {
                        bytes = wordToByteArray(
                            wordArray[i],
                            Math.min(4, length)
                        );
                        length -= bytes.length;
                        result.push(bytes);
                        i++;
                    }
                    return [].concat.apply([], result);
                }

                utils.wordArrayToBuffer = wordArrayToBuffer;

                // https://github.com/indutny/minimalistic-crypto-utils/blob/master/lib/utils.js
                // moved here to remove the dep

                function toArray(msg, enc) {
                    if (Array.isArray(msg)) return msg.slice();
                    if (!msg) return [];
                    var res = [];
                    if (typeof msg !== "string") {
                        for (var i = 0; i < msg.length; i++)
                            res[i] = msg[i] | 0;
                        return res;
                    }
                    if (enc === "hex") {
                        msg = msg.replace(/[^a-z0-9]+/gi, "");
                        if (msg.length % 2 !== 0) msg = "0" + msg;
                        for (var i = 0; i < msg.length; i += 2)
                            res.push(parseInt(msg[i] + msg[i + 1], 16));
                    } else {
                        for (var i = 0; i < msg.length; i++) {
                            var c = msg.charCodeAt(i);
                            var hi = c >> 8;
                            var lo = c & 0xff;
                            if (hi) res.push(hi, lo);
                            else res.push(lo);
                        }
                    }
                    return res;
                }
                utils.toArray = toArray;

                function zero2(word) {
                    if (word.length === 1) return "0" + word;
                    else return word;
                }
                utils.zero2 = zero2;

                function toHex(msg) {
                    var res = "";
                    for (var i = 0; i < msg.length; i++)
                        res += zero2(msg[i].toString(16));
                    return res;
                }
                utils.toHex = toHex;

                utils.encode = function encode(arr, enc) {
                    if (enc === "hex") return toHex(arr);
                    else return arr;
                };
            },
            { "../../../BN/bn": 32 },
        ],
        49: [
            function (require, module, exports) {
                "use strict";

                var CryptoJS = require("../../../crypto-js/crypto-js");
                var assert = require("../elliptic/utils").assert;
                var utils = require("../elliptic/utils");
                var {
                    byteArrayToWordArray,
                } = require("../../../../base/functions/encode");

                // some static stuff
                const ONE = CryptoJS.enc.Utf8.parse("\x01");
                const ZERO = CryptoJS.enc.Utf8.parse("\x00");

                function HmacDRBG(options) {
                    if (!(this instanceof HmacDRBG))
                        return new HmacDRBG(options);
                    this.hash = options.hash;
                    this.predResist = !!options.predResist;

                    this.outLen = this.hash.slice(3, 6); // only support SHAXXX hashes
                    this.minEntropy = options.minEntropy || 192;

                    this._reseed = null;
                    this.reseedInterval = null;
                    this.K = null;
                    this.V = null;

                    var entropy = options.entropy;
                    var nonce = options.nonce;
                    var pers = [];
                    assert(
                        entropy.length >= this.minEntropy / 8,
                        "Not enough entropy. Minimum is: " +
                            this.minEntropy +
                            " bits"
                    );
                    this._init(entropy, nonce, pers);
                }
                module.exports = HmacDRBG;

                HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
                    var seed = entropy.concat(nonce).concat(pers);

                    this.K = new CryptoJS.lib.WordArray.init();
                    this.V = new CryptoJS.lib.WordArray.init();
                    const magicNumber = (1 << 24) + (1 << 16) + (1 << 8) + 1;
                    this.V.words = Array(this.outLen / 32).fill(magicNumber);
                    this.V.sigBytes = 32;
                    this._update(seed);
                    this._reseed = 1;
                    this.reseedInterval = 0x1000000000000; // 2^48
                };

                HmacDRBG.prototype._hmac = function hmac() {
                    return new CryptoJS.lib.WordArray.init();
                };

                HmacDRBG.prototype._update = function update(seed) {
                    var kmac = this._hmac();
                    kmac.concat(this.V);
                    kmac.concat(ZERO);
                    if (seed) kmac.concat(byteArrayToWordArray(seed));
                    this.K = CryptoJS["Hmac" + this.hash](kmac, this.K);
                    this.V = CryptoJS["Hmac" + this.hash](this.V, this.K);
                    if (!seed) return;

                    kmac = this._hmac();
                    kmac.concat(this.V);
                    kmac.concat(ONE);
                    kmac.concat(byteArrayToWordArray(seed));
                    this.K = CryptoJS["Hmac" + this.hash](kmac, this.K);
                    this.V = CryptoJS["Hmac" + this.hash](this.V, this.K);
                };

                HmacDRBG.prototype.reseed = function reseed(
                    entropy,
                    entropyEnc,
                    add,
                    addEnc
                ) {
                    // Optional entropy enc
                    if (typeof entropyEnc !== "string") {
                        addEnc = add;
                        add = entropyEnc;
                        entropyEnc = null;
                    }

                    //entropy = utils.toArray(entropy, entropyEnc);
                    //add = utils.toArray(add, addEnc);

                    assert(
                        entropy.length >= this.minEntropy / 8,
                        "Not enough entropy. Minimum is: " +
                            this.minEntropy +
                            " bits"
                    );

                    this._update(entropy.concat(add || []));
                    this._reseed = 1;
                };

                HmacDRBG.prototype.generate = function generate(
                    len,
                    enc,
                    add,
                    addEnc
                ) {
                    if (this._reseed > this.reseedInterval)
                        throw new Error("Reseed is required");

                    // Optional encoding
                    if (typeof enc !== "string") {
                        addEnc = add;
                        add = enc;
                        enc = null;
                    }

                    // Optional additional data
                    if (add) {
                        add = CryptoJS.enc.Utf8.parse(add);
                        this._update(add);
                    }

                    var res = new CryptoJS.lib.WordArray.init();
                    while (res.sigBytes < len) {
                        this.V = CryptoJS["Hmac" + this.hash](this.V, this.K);
                        res.concat(this.V);
                    }
                    this._update(add);
                    this._reseed++;
                    return utils.wordArrayToBuffer(res);
                };
            },
            {
                "../../../../base/functions/encode": 9,
                "../../../crypto-js/crypto-js": 33,
                "../elliptic/utils": 48,
            },
        ],
        50: [
            function (require, module, exports) {
                "use strict";

                var fetch = require("../node-fetch/index");

                function wrapFetchForNode(fetch) {
                    // Support schemaless URIs on the server for parity with the browser.
                    // https://github.com/matthew-andrews/isomorphic-fetch/pull/10
                    const f = function (u, options) {
                        if (typeof u === "string" && u.slice(0, 2) === "//") {
                            return fetch("https:" + u, options);
                        }

                        return fetch(u, options);
                    };
                    // Igor Kroitor 2019 Dec 30
                    // expose http and https
                    // https://github.com/ccxt/ccxt/issues/6327
                    f.http = fetch.http;
                    f.https = fetch.https;
                    return f;
                }

                module.exports = function (context) {
                    // This modifies the global `node-fetch` object, which isn't great, since
                    // different callers to `fetch-ponyfill` which pass a different Promise
                    // implementation would each expect to have their implementation used. But,
                    // given the way `node-fetch` is implemented, this is the only way to make
                    // it work at all.
                    if (context && context.Promise) {
                        fetch.Promise = context.Promise;
                    }

                    return {
                        fetch: wrapFetchForNode(fetch),
                        Headers: fetch.Headers,
                        Request: fetch.Request,
                        Response: fetch.Response,
                    };
                };
            },
            { "../node-fetch/index": 51 },
        ],
        51: [
            function (require, module, exports) {
                (function (global, Buffer) {
                    (function () {
                        "use strict";

                        Object.defineProperty(exports, "__esModule", {
                            value: true,
                        });

                        // Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js
                        // (MIT licensed)

                        const BUFFER = Symbol("buffer");
                        const TYPE = Symbol("type");

                        class Blob {
                            constructor() {
                                this[TYPE] = "";

                                const blobParts = arguments[0];
                                const options = arguments[1];

                                const buffers = [];

                                if (blobParts) {
                                    const a = blobParts;
                                    const length = Number(a.length);
                                    for (let i = 0; i < length; i++) {
                                        const element = a[i];
                                        let buffer;
                                        if (element instanceof Buffer) {
                                            buffer = element;
                                        } else if (
                                            ArrayBuffer.isView(element)
                                        ) {
                                            buffer = Buffer.from(
                                                element.buffer,
                                                element.byteOffset,
                                                element.byteLength
                                            );
                                        } else if (
                                            element instanceof ArrayBuffer
                                        ) {
                                            buffer = Buffer.from(element);
                                        } else if (element instanceof Blob) {
                                            buffer = element[BUFFER];
                                        } else {
                                            buffer = Buffer.from(
                                                typeof element === "string"
                                                    ? element
                                                    : String(element)
                                            );
                                        }
                                        buffers.push(buffer);
                                    }
                                }

                                this[BUFFER] = Buffer.concat(buffers);

                                let type =
                                    options &&
                                    options.type !== undefined &&
                                    String(options.type).toLowerCase();
                                if (type && !/[^\u0020-\u007E]/.test(type)) {
                                    this[TYPE] = type;
                                }
                            }
                            get size() {
                                return this[BUFFER].length;
                            }
                            get type() {
                                return this[TYPE];
                            }
                            slice() {
                                const size = this.size;

                                const start = arguments[0];
                                const end = arguments[1];
                                let relativeStart, relativeEnd;
                                if (start === undefined) {
                                    relativeStart = 0;
                                } else if (start < 0) {
                                    relativeStart = Math.max(size + start, 0);
                                } else {
                                    relativeStart = Math.min(start, size);
                                }
                                if (end === undefined) {
                                    relativeEnd = size;
                                } else if (end < 0) {
                                    relativeEnd = Math.max(size + end, 0);
                                } else {
                                    relativeEnd = Math.min(end, size);
                                }
                                const span = Math.max(
                                    relativeEnd - relativeStart,
                                    0
                                );

                                const buffer = this[BUFFER];
                                const slicedBuffer = buffer.slice(
                                    relativeStart,
                                    relativeStart + span
                                );
                                const blob = new Blob([], {
                                    type: arguments[2],
                                });
                                blob[BUFFER] = slicedBuffer;
                                return blob;
                            }
                        }

                        Object.defineProperties(Blob.prototype, {
                            size: { enumerable: true },
                            type: { enumerable: true },
                            slice: { enumerable: true },
                        });

                        Object.defineProperty(
                            Blob.prototype,
                            Symbol.toStringTag,
                            {
                                value: "Blob",
                                writable: false,
                                enumerable: false,
                                configurable: true,
                            }
                        );

                        /**
                         * fetch-error.js
                         *
                         * FetchError interface for operational errors
                         */

                        /**
                         * Create FetchError instance
                         *
                         * @param   String      message      Error message for human
                         * @param   String      type         Error type for machine
                         * @param   String      systemError  For Node.js system error
                         * @return  FetchError
                         */
                        function FetchError(message, type, systemError) {
                            Error.call(this, message);

                            this.message = message;
                            this.type = type;

                            // when err.type is `system`, err.code contains system error code
                            if (systemError) {
                                this.code = this.errno = systemError.code;
                            }

                            // hide custom error implementation details from end-users
                            Error.captureStackTrace(this, this.constructor);
                        }

                        FetchError.prototype = Object.create(Error.prototype);
                        FetchError.prototype.constructor = FetchError;
                        FetchError.prototype.name = "FetchError";

                        /**
                         * body.js
                         *
                         * Body interface provides common methods for Request and Response
                         */

                        const Stream = require("stream");

                        var _require = require("stream");

                        const PassThrough = _require.PassThrough;

                        /*
    let convert;
    try {
        convert = require('encoding').convert;
    } catch (e) {}
    */

                        const INTERNALS = Symbol("Body internals");

                        /**
                         * Body mixin
                         *
                         * Ref: https://fetch.spec.whatwg.org/#body
                         *
                         * @param   Stream  body  Readable stream
                         * @param   Object  opts  Response options
                         * @return  Void
                         */
                        function Body(body) {
                            var _this = this;

                            var _ref =
                                    arguments.length > 1 &&
                                    arguments[1] !== undefined
                                        ? arguments[1]
                                        : {},
                                _ref$size = _ref.size;

                            let size = _ref$size === undefined ? 0 : _ref$size;
                            var _ref$timeout = _ref.timeout;
                            let timeout =
                                _ref$timeout === undefined ? 0 : _ref$timeout;

                            if (body == null) {
                                // body is undefined or null
                                body = null;
                            } else if (typeof body === "string") {
                                // body is string
                            } else if (isURLSearchParams(body)) {
                                // body is a URLSearchParams
                            } else if (body instanceof Blob) {
                                // body is blob
                            } else if (Buffer.isBuffer(body)) {
                                // body is buffer
                            } else if (
                                Object.prototype.toString.call(body) ===
                                "[object ArrayBuffer]"
                            ) {
                                // body is array buffer
                            } else if (body instanceof Stream) {
                                // body is stream
                            } else {
                                // none of the above
                                // coerce to string
                                body = String(body);
                            }
                            this[INTERNALS] = {
                                body,
                                disturbed: false,
                                error: null,
                            };
                            this.size = size;
                            this.timeout = timeout;

                            if (body instanceof Stream) {
                                body.on("error", function (err) {
                                    _this[INTERNALS].error = new FetchError(
                                        `Invalid response body while trying to fetch ${_this.url}: ${err.message}`,
                                        "system",
                                        err
                                    );
                                });
                            }
                        }

                        Body.prototype = {
                            get body() {
                                return this[INTERNALS].body;
                            },

                            get bodyUsed() {
                                return this[INTERNALS].disturbed;
                            },

                            /**
                             * Decode response as ArrayBuffer
                             *
                             * @return  Promise
                             */
                            arrayBuffer() {
                                return consumeBody
                                    .call(this)
                                    .then(function (buf) {
                                        return buf.buffer.slice(
                                            buf.byteOffset,
                                            buf.byteOffset + buf.byteLength
                                        );
                                    });
                            },

                            /**
                             * Return raw response as Blob
                             *
                             * @return Promise
                             */
                            blob() {
                                let ct =
                                    (this.headers &&
                                        this.headers.get("content-type")) ||
                                    "";
                                return consumeBody
                                    .call(this)
                                    .then(function (buf) {
                                        return Object.assign(
                                            // Prevent copying
                                            new Blob([], {
                                                type: ct.toLowerCase(),
                                            }),
                                            {
                                                [BUFFER]: buf,
                                            }
                                        );
                                    });
                            },

                            /**
                             * Decode response as json
                             *
                             * @return  Promise
                             */
                            json() {
                                var _this2 = this;

                                return consumeBody
                                    .call(this)
                                    .then(function (buffer) {
                                        try {
                                            return JSON.parse(
                                                buffer.toString()
                                            );
                                        } catch (err) {
                                            return Body.Promise.reject(
                                                new FetchError(
                                                    `invalid json response body at ${_this2.url} reason: ${err.message}`,
                                                    "invalid-json"
                                                )
                                            );
                                        }
                                    });
                            },

                            /**
                             * Decode response as text
                             *
                             * @return  Promise
                             */
                            text() {
                                return consumeBody
                                    .call(this)
                                    .then(function (buffer) {
                                        return buffer.toString();
                                    });
                            },

                            /**
                             * Decode response as buffer (non-spec api)
                             *
                             * @return  Promise
                             */
                            buffer() {
                                return consumeBody.call(this);
                            },

                            /**
                             * Decode response as text, while automatically detecting the encoding and
                             * trying to decode to UTF-8 (non-spec api)
                             *
                             * @return  Promise
                             */
                            textConverted() {
                                var _this3 = this;

                                return consumeBody
                                    .call(this)
                                    .then(function (buffer) {
                                        return convertBody(
                                            buffer,
                                            _this3.headers
                                        );
                                    });
                            },
                        };

                        // In browsers, all properties are enumerable.
                        Object.defineProperties(Body.prototype, {
                            body: { enumerable: true },
                            bodyUsed: { enumerable: true },
                            arrayBuffer: { enumerable: true },
                            blob: { enumerable: true },
                            json: { enumerable: true },
                            text: { enumerable: true },
                        });

                        Body.mixIn = function (proto) {
                            for (const name of Object.getOwnPropertyNames(
                                Body.prototype
                            )) {
                                // istanbul ignore else: future proof
                                if (!(name in proto)) {
                                    const desc =
                                        Object.getOwnPropertyDescriptor(
                                            Body.prototype,
                                            name
                                        );
                                    Object.defineProperty(proto, name, desc);
                                }
                            }
                        };

                        /**
                         * Consume and convert an entire Body to a Buffer.
                         *
                         * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
                         *
                         * @return  Promise
                         */
                        function consumeBody() {
                            var _this4 = this;

                            if (this[INTERNALS].disturbed) {
                                return Body.Promise.reject(
                                    new TypeError(
                                        `body used already for: ${this.url}`
                                    )
                                );
                            }

                            this[INTERNALS].disturbed = true;

                            if (this[INTERNALS].error) {
                                return Body.Promise.reject(
                                    this[INTERNALS].error
                                );
                            }

                            // body is null
                            if (this.body === null) {
                                return Body.Promise.resolve(Buffer.alloc(0));
                            }

                            // body is string
                            if (typeof this.body === "string") {
                                return Body.Promise.resolve(
                                    Buffer.from(this.body)
                                );
                            }

                            // body is blob
                            if (this.body instanceof Blob) {
                                return Body.Promise.resolve(this.body[BUFFER]);
                            }

                            // body is buffer
                            if (Buffer.isBuffer(this.body)) {
                                return Body.Promise.resolve(this.body);
                            }

                            // body is buffer
                            if (
                                Object.prototype.toString.call(this.body) ===
                                "[object ArrayBuffer]"
                            ) {
                                return Body.Promise.resolve(
                                    Buffer.from(this.body)
                                );
                            }

                            // istanbul ignore if: should never happen
                            if (!(this.body instanceof Stream)) {
                                return Body.Promise.resolve(Buffer.alloc(0));
                            }

                            // body is stream
                            // get ready to actually consume the body
                            let accum = [];
                            let accumBytes = 0;
                            let abort = false;

                            return new Body.Promise(function (resolve, reject) {
                                let resTimeout;

                                // allow timeout on slow response body
                                if (_this4.timeout) {
                                    resTimeout = setTimeout(function () {
                                        abort = true;
                                        reject(
                                            new FetchError(
                                                `Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`,
                                                "body-timeout"
                                            )
                                        );
                                    }, _this4.timeout);
                                }

                                // handle stream error, such as incorrect content-encoding
                                _this4.body.on("error", function (err) {
                                    reject(
                                        new FetchError(
                                            `Invalid response body while trying to fetch ${_this4.url}: ${err.message}`,
                                            "system",
                                            err
                                        )
                                    );
                                });

                                _this4.body.on("data", function (chunk) {
                                    if (abort || chunk === null) {
                                        return;
                                    }

                                    if (
                                        _this4.size &&
                                        accumBytes + chunk.length > _this4.size
                                    ) {
                                        abort = true;
                                        reject(
                                            new FetchError(
                                                `content size at ${_this4.url} over limit: ${_this4.size}`,
                                                "max-size"
                                            )
                                        );
                                        return;
                                    }

                                    accumBytes += chunk.length;
                                    accum.push(chunk);
                                });

                                _this4.body.on("end", function () {
                                    if (abort) {
                                        return;
                                    }

                                    clearTimeout(resTimeout);

                                    try {
                                        resolve(Buffer.concat(accum));
                                    } catch (err) {
                                        // handle streams that have accumulated too much data (issue #414)
                                        reject(
                                            new FetchError(
                                                `Could not create Buffer from response body for ${_this4.url}: ${err.message}`,
                                                "system",
                                                err
                                            )
                                        );
                                    }
                                });
                            });
                        }

                        /**
                         * Detect buffer encoding and convert to target encoding
                         * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
                         *
                         * @param   Buffer  buffer    Incoming buffer
                         * @param   String  encoding  Target encoding
                         * @return  String
                         */
                        function convertBody(buffer, headers) {
                            if (typeof convert !== "function") {
                                throw new Error(
                                    "The package `encoding` must be installed to use the textConverted() function"
                                );
                            }

                            const ct = headers.get("content-type");
                            let charset = "utf-8";
                            let res, str;

                            // header
                            if (ct) {
                                res = /charset=([^;]*)/i.exec(ct);
                            }

                            // no charset in content type, peek at response body for at most 1024 bytes
                            str = buffer.slice(0, 1024).toString();

                            // html5
                            if (!res && str) {
                                res = /<meta.+?charset=(['"])(.+?)\1/i.exec(
                                    str
                                );
                            }

                            // html4
                            if (!res && str) {
                                res =
                                    /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(
                                        str
                                    );

                                if (res) {
                                    res = /charset=(.*)/i.exec(res.pop());
                                }
                            }

                            // xml
                            if (!res && str) {
                                res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(
                                    str
                                );
                            }

                            // found charset
                            if (res) {
                                charset = res.pop();

                                // prevent decode issues when sites use incorrect encoding
                                // ref: https://hsivonen.fi/encoding-menu/
                                if (charset === "gb2312" || charset === "gbk") {
                                    charset = "gb18030";
                                }
                            }

                            // turn raw buffers into a single utf-8 buffer
                            return convert(buffer, "UTF-8", charset).toString();
                        }

                        /**
                         * Detect a URLSearchParams object
                         * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
                         *
                         * @param   Object  obj     Object to detect by type or brand
                         * @return  String
                         */
                        function isURLSearchParams(obj) {
                            // Duck-typing as a necessary condition.
                            if (
                                typeof obj !== "object" ||
                                typeof obj.append !== "function" ||
                                typeof obj.delete !== "function" ||
                                typeof obj.get !== "function" ||
                                typeof obj.getAll !== "function" ||
                                typeof obj.has !== "function" ||
                                typeof obj.set !== "function"
                            ) {
                                return false;
                            }

                            // Brand-checking and more duck-typing as optional condition.
                            return (
                                obj.constructor.name === "URLSearchParams" ||
                                Object.prototype.toString.call(obj) ===
                                    "[object URLSearchParams]" ||
                                typeof obj.sort === "function"
                            );
                        }

                        /**
                         * Clone body given Res/Req instance
                         *
                         * @param   Mixed  instance  Response or Request instance
                         * @return  Mixed
                         */
                        function clone(instance) {
                            let p1, p2;
                            let body = instance.body;

                            // don't allow cloning a used body
                            if (instance.bodyUsed) {
                                throw new Error(
                                    "cannot clone body after it is used"
                                );
                            }

                            // check that body is a stream and not form-data object
                            // note: we can't clone the form-data object without having it as a dependency
                            if (
                                body instanceof Stream &&
                                typeof body.getBoundary !== "function"
                            ) {
                                // tee instance body
                                p1 = new PassThrough();
                                p2 = new PassThrough();
                                body.pipe(p1);
                                body.pipe(p2);
                                // set instance body to teed body and return the other teed body
                                instance[INTERNALS].body = p1;
                                body = p2;
                            }

                            return body;
                        }

                        /**
                         * Performs the operation "extract a `Content-Type` value from |object|" as
                         * specified in the specification:
                         * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
                         *
                         * This function assumes that instance.body is present.
                         *
                         * @param   Mixed  instance  Response or Request instance
                         */
                        function extractContentType(instance) {
                            const body = instance.body;

                            // istanbul ignore if: Currently, because of a guard in Request, body
                            // can never be null. Included here for completeness.

                            if (body === null) {
                                // body is null
                                return null;
                            } else if (typeof body === "string") {
                                // body is string
                                return "text/plain;charset=UTF-8";
                            } else if (isURLSearchParams(body)) {
                                // body is a URLSearchParams
                                return "application/x-www-form-urlencoded;charset=UTF-8";
                            } else if (body instanceof Blob) {
                                // body is blob
                                return body.type || null;
                            } else if (Buffer.isBuffer(body)) {
                                // body is buffer
                                return null;
                            } else if (
                                Object.prototype.toString.call(body) ===
                                "[object ArrayBuffer]"
                            ) {
                                // body is array buffer
                                return null;
                            } else if (typeof body.getBoundary === "function") {
                                // detect form data input from form-data module
                                return `multipart/form-data;boundary=${body.getBoundary()}`;
                            } else {
                                // body is stream
                                // can't really do much about this
                                return null;
                            }
                        }

                        /**
                         * The Fetch Standard treats this as if "total bytes" is a property on the body.
                         * For us, we have to explicitly get it with a function.
                         *
                         * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
                         *
                         * @param   Body    instance   Instance of Body
                         * @return  Number?            Number of bytes, or null if not possible
                         */
                        function getTotalBytes(instance) {
                            const body = instance.body;

                            // istanbul ignore if: included for completion

                            if (body === null) {
                                // body is null
                                return 0;
                            } else if (typeof body === "string") {
                                // body is string
                                return Buffer.byteLength(body);
                            } else if (isURLSearchParams(body)) {
                                // body is URLSearchParams
                                return Buffer.byteLength(String(body));
                            } else if (body instanceof Blob) {
                                // body is blob
                                return body.size;
                            } else if (Buffer.isBuffer(body)) {
                                // body is buffer
                                return body.length;
                            } else if (
                                Object.prototype.toString.call(body) ===
                                "[object ArrayBuffer]"
                            ) {
                                // body is array buffer
                                return body.byteLength;
                            } else if (
                                body &&
                                typeof body.getLengthSync === "function"
                            ) {
                                // detect form data input from form-data module
                                if (
                                    (body._lengthRetrievers &&
                                        body._lengthRetrievers.length == 0) || // 1.x
                                    (body.hasKnownLength &&
                                        body.hasKnownLength())
                                ) {
                                    // 2.x
                                    return body.getLengthSync();
                                }
                                return null;
                            } else {
                                // body is stream
                                // can't really do much about this
                                return null;
                            }
                        }

                        /**
                         * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
                         *
                         * @param   Body    instance   Instance of Body
                         * @return  Void
                         */
                        function writeToStream(dest, instance) {
                            const body = instance.body;

                            if (body === null) {
                                // body is null
                                dest.end();
                            } else if (typeof body === "string") {
                                // body is string
                                dest.write(body);
                                dest.end();
                            } else if (isURLSearchParams(body)) {
                                // body is URLSearchParams
                                dest.write(Buffer.from(String(body)));
                                dest.end();
                            } else if (body instanceof Blob) {
                                // body is blob
                                dest.write(body[BUFFER]);
                                dest.end();
                            } else if (Buffer.isBuffer(body)) {
                                // body is buffer
                                dest.write(body);
                                dest.end();
                            } else if (
                                Object.prototype.toString.call(body) ===
                                "[object ArrayBuffer]"
                            ) {
                                // body is array buffer
                                dest.write(Buffer.from(body));
                                dest.end();
                            } else {
                                // body is stream
                                body.pipe(dest);
                            }
                        }

                        // expose Promise
                        Body.Promise = global.Promise;

                        /**
                         * headers.js
                         *
                         * Headers class offers convenient helpers
                         */

                        const invalidTokenRegex =
                            /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
                        const invalidHeaderCharRegex =
                            /[^\t\x20-\x7e\x80-\xff]/;

                        function validateName(name) {
                            name = `${name}`;
                            if (invalidTokenRegex.test(name)) {
                                throw new TypeError(
                                    `${name} is not a legal HTTP header name`
                                );
                            }
                        }

                        function validateValue(value) {
                            value = `${value}`;
                            if (invalidHeaderCharRegex.test(value)) {
                                throw new TypeError(
                                    `${value} is not a legal HTTP header value`
                                );
                            }
                        }

                        /**
                         * Find the key in the map object given a header name.
                         *
                         * Returns undefined if not found.
                         *
                         * @param   String  name  Header name
                         * @return  String|Undefined
                         */
                        function find(map, name) {
                            name = name.toLowerCase();
                            for (const key in map) {
                                if (key.toLowerCase() === name) {
                                    return key;
                                }
                            }
                            return undefined;
                        }

                        const MAP = Symbol("map");
                        class Headers {
                            /**
                             * Headers class
                             *
                             * @param   Object  headers  Response headers
                             * @return  Void
                             */
                            constructor() {
                                let init =
                                    arguments.length > 0 &&
                                    arguments[0] !== undefined
                                        ? arguments[0]
                                        : undefined;

                                this[MAP] = Object.create(null);

                                if (init instanceof Headers) {
                                    const rawHeaders = init.raw();
                                    const headerNames = Object.keys(rawHeaders);

                                    for (const headerName of headerNames) {
                                        for (const value of rawHeaders[
                                            headerName
                                        ]) {
                                            this.append(headerName, value);
                                        }
                                    }

                                    return;
                                }

                                // We don't worry about converting prop to ByteString here as append()
                                // will handle it.
                                if (init == null) {
                                    // no op
                                } else if (typeof init === "object") {
                                    const method = init[Symbol.iterator];
                                    if (method != null) {
                                        if (typeof method !== "function") {
                                            throw new TypeError(
                                                "Header pairs must be iterable"
                                            );
                                        }

                                        // sequence<sequence<ByteString>>
                                        // Note: per spec we have to first exhaust the lists then process them
                                        const pairs = [];
                                        for (const pair of init) {
                                            if (
                                                typeof pair !== "object" ||
                                                typeof pair[Symbol.iterator] !==
                                                    "function"
                                            ) {
                                                throw new TypeError(
                                                    "Each header pair must be iterable"
                                                );
                                            }
                                            pairs.push(Array.from(pair));
                                        }

                                        for (const pair of pairs) {
                                            if (pair.length !== 2) {
                                                throw new TypeError(
                                                    "Each header pair must be a name/value tuple"
                                                );
                                            }
                                            this.append(pair[0], pair[1]);
                                        }
                                    } else {
                                        // record<ByteString, ByteString>
                                        for (const key of Object.keys(init)) {
                                            const value = init[key];
                                            this.append(key, value);
                                        }
                                    }
                                } else {
                                    throw new TypeError(
                                        "Provided initializer must be an object"
                                    );
                                }
                            }

                            /**
                             * Return combined header value given name
                             *
                             * @param   String  name  Header name
                             * @return  Mixed
                             */
                            get(name) {
                                name = `${name}`;
                                validateName(name);
                                const key = find(this[MAP], name);
                                if (key === undefined) {
                                    return null;
                                }

                                return this[MAP][key].join(", ");
                            }

                            /**
                             * Iterate over all headers
                             *
                             * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
                             * @param   Boolean   thisArg   `this` context for callback function
                             * @return  Void
                             */
                            forEach(callback) {
                                let thisArg =
                                    arguments.length > 1 &&
                                    arguments[1] !== undefined
                                        ? arguments[1]
                                        : undefined;

                                let pairs = getHeaders(this);
                                let i = 0;
                                while (i < pairs.length) {
                                    var _pairs$i = pairs[i];
                                    const name = _pairs$i[0],
                                        value = _pairs$i[1];

                                    callback.call(thisArg, value, name, this);
                                    pairs = getHeaders(this);
                                    i++;
                                }
                            }

                            /**
                             * Overwrite header values given name
                             *
                             * @param   String  name   Header name
                             * @param   String  value  Header value
                             * @return  Void
                             */
                            set(name, value) {
                                name = `${name}`;
                                value = `${value}`;
                                validateName(name);
                                validateValue(value);
                                const key = find(this[MAP], name);
                                this[MAP][key !== undefined ? key : name] = [
                                    value,
                                ];
                            }

                            /**
                             * Append a value onto existing header
                             *
                             * @param   String  name   Header name
                             * @param   String  value  Header value
                             * @return  Void
                             */
                            append(name, value) {
                                name = `${name}`;
                                value = `${value}`;
                                validateName(name);
                                validateValue(value);
                                const key = find(this[MAP], name);
                                if (key !== undefined) {
                                    this[MAP][key].push(value);
                                } else {
                                    this[MAP][name] = [value];
                                }
                            }

                            /**
                             * Check for header name existence
                             *
                             * @param   String   name  Header name
                             * @return  Boolean
                             */
                            has(name) {
                                name = `${name}`;
                                validateName(name);
                                return find(this[MAP], name) !== undefined;
                            }

                            /**
                             * Delete all header values given name
                             *
                             * @param   String  name  Header name
                             * @return  Void
                             */
                            delete(name) {
                                name = `${name}`;
                                validateName(name);
                                const key = find(this[MAP], name);
                                if (key !== undefined) {
                                    delete this[MAP][key];
                                }
                            }

                            /**
                             * Return raw headers (non-spec api)
                             *
                             * @return  Object
                             */
                            raw() {
                                return this[MAP];
                            }

                            /**
                             * Get an iterator on keys.
                             *
                             * @return  Iterator
                             */
                            keys() {
                                return createHeadersIterator(this, "key");
                            }

                            /**
                             * Get an iterator on values.
                             *
                             * @return  Iterator
                             */
                            values() {
                                return createHeadersIterator(this, "value");
                            }

                            /**
                             * Get an iterator on entries.
                             *
                             * This is the default iterator of the Headers object.
                             *
                             * @return  Iterator
                             */
                            [Symbol.iterator]() {
                                return createHeadersIterator(this, "key+value");
                            }
                        }
                        Headers.prototype.entries =
                            Headers.prototype[Symbol.iterator];

                        Object.defineProperty(
                            Headers.prototype,
                            Symbol.toStringTag,
                            {
                                value: "Headers",
                                writable: false,
                                enumerable: false,
                                configurable: true,
                            }
                        );

                        Object.defineProperties(Headers.prototype, {
                            get: { enumerable: true },
                            forEach: { enumerable: true },
                            set: { enumerable: true },
                            append: { enumerable: true },
                            has: { enumerable: true },
                            delete: { enumerable: true },
                            keys: { enumerable: true },
                            values: { enumerable: true },
                            entries: { enumerable: true },
                        });

                        function getHeaders(headers) {
                            let kind =
                                arguments.length > 1 &&
                                arguments[1] !== undefined
                                    ? arguments[1]
                                    : "key+value";

                            const keys = Object.keys(headers[MAP]).sort();
                            return keys.map(
                                kind === "key"
                                    ? function (k) {
                                          return k.toLowerCase();
                                      }
                                    : kind === "value"
                                    ? function (k) {
                                          return headers[MAP][k].join(", ");
                                      }
                                    : function (k) {
                                          return [
                                              k.toLowerCase(),
                                              headers[MAP][k].join(", "),
                                          ];
                                      }
                            );
                        }

                        const INTERNAL = Symbol("internal");

                        function createHeadersIterator(target, kind) {
                            const iterator = Object.create(
                                HeadersIteratorPrototype
                            );
                            iterator[INTERNAL] = {
                                target,
                                kind,
                                index: 0,
                            };
                            return iterator;
                        }

                        const HeadersIteratorPrototype = Object.setPrototypeOf(
                            {
                                next() {
                                    // istanbul ignore if
                                    if (
                                        !this ||
                                        Object.getPrototypeOf(this) !==
                                            HeadersIteratorPrototype
                                    ) {
                                        throw new TypeError(
                                            "Value of `this` is not a HeadersIterator"
                                        );
                                    }

                                    var _INTERNAL = this[INTERNAL];
                                    const target = _INTERNAL.target,
                                        kind = _INTERNAL.kind,
                                        index = _INTERNAL.index;

                                    const values = getHeaders(target, kind);
                                    const len = values.length;
                                    if (index >= len) {
                                        return {
                                            value: undefined,
                                            done: true,
                                        };
                                    }

                                    this[INTERNAL].index = index + 1;

                                    return {
                                        value: values[index],
                                        done: false,
                                    };
                                },
                            },
                            Object.getPrototypeOf(
                                Object.getPrototypeOf([][Symbol.iterator]())
                            )
                        );

                        Object.defineProperty(
                            HeadersIteratorPrototype,
                            Symbol.toStringTag,
                            {
                                value: "HeadersIterator",
                                writable: false,
                                enumerable: false,
                                configurable: true,
                            }
                        );

                        /**
                         * Export the Headers object in a form that Node.js can consume.
                         *
                         * @param   Headers  headers
                         * @return  Object
                         */
                        function exportNodeCompatibleHeaders(headers) {
                            const obj = Object.assign(
                                { __proto__: null },
                                headers[MAP]
                            );

                            // http.request() only supports string as Host header. This hack makes
                            // specifying custom Host header possible.
                            const hostHeaderKey = find(headers[MAP], "Host");
                            if (hostHeaderKey !== undefined) {
                                obj[hostHeaderKey] = obj[hostHeaderKey][0];
                            }

                            return obj;
                        }

                        /**
                         * Create a Headers object from an object of headers, ignoring those that do
                         * not conform to HTTP grammar productions.
                         *
                         * @param   Object  obj  Object of headers
                         * @return  Headers
                         */
                        function createHeadersLenient(obj) {
                            const headers = new Headers();
                            for (const name of Object.keys(obj)) {
                                if (invalidTokenRegex.test(name)) {
                                    continue;
                                }
                                if (Array.isArray(obj[name])) {
                                    for (const val of obj[name]) {
                                        if (invalidHeaderCharRegex.test(val)) {
                                            continue;
                                        }
                                        if (headers[MAP][name] === undefined) {
                                            headers[MAP][name] = [val];
                                        } else {
                                            headers[MAP][name].push(val);
                                        }
                                    }
                                } else if (
                                    !invalidHeaderCharRegex.test(obj[name])
                                ) {
                                    headers[MAP][name] = [obj[name]];
                                }
                            }
                            return headers;
                        }

                        /**
                         * response.js
                         *
                         * Response class provides content decoding
                         */

                        var _require$1 = require("http");

                        const STATUS_CODES = _require$1.STATUS_CODES;

                        const INTERNALS$1 = Symbol("Response internals");

                        /**
                         * Response class
                         *
                         * @param   Stream  body  Readable stream
                         * @param   Object  opts  Response options
                         * @return  Void
                         */
                        class Response {
                            constructor() {
                                let body =
                                    arguments.length > 0 &&
                                    arguments[0] !== undefined
                                        ? arguments[0]
                                        : null;
                                let opts =
                                    arguments.length > 1 &&
                                    arguments[1] !== undefined
                                        ? arguments[1]
                                        : {};

                                Body.call(this, body, opts);

                                const status = opts.status || 200;

                                this[INTERNALS$1] = {
                                    url: opts.url,
                                    status,
                                    statusText:
                                        opts.statusText || STATUS_CODES[status],
                                    headers: new Headers(opts.headers),
                                };
                            }

                            get url() {
                                return this[INTERNALS$1].url;
                            }

                            get status() {
                                return this[INTERNALS$1].status;
                            }

                            /**
                             * Convenience property representing if the request ended normally
                             */
                            get ok() {
                                return (
                                    this[INTERNALS$1].status >= 200 &&
                                    this[INTERNALS$1].status < 300
                                );
                            }

                            get statusText() {
                                return this[INTERNALS$1].statusText;
                            }

                            get headers() {
                                return this[INTERNALS$1].headers;
                            }

                            /**
                             * Clone this response
                             *
                             * @return  Response
                             */
                            clone() {
                                return new Response(clone(this), {
                                    url: this.url,
                                    status: this.status,
                                    statusText: this.statusText,
                                    headers: this.headers,
                                    ok: this.ok,
                                });
                            }
                        }

                        Body.mixIn(Response.prototype);

                        Object.defineProperties(Response.prototype, {
                            url: { enumerable: true },
                            status: { enumerable: true },
                            ok: { enumerable: true },
                            statusText: { enumerable: true },
                            headers: { enumerable: true },
                            clone: { enumerable: true },
                        });

                        Object.defineProperty(
                            Response.prototype,
                            Symbol.toStringTag,
                            {
                                value: "Response",
                                writable: false,
                                enumerable: false,
                                configurable: true,
                            }
                        );

                        /**
                         * request.js
                         *
                         * Request class contains server only options
                         *
                         * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.
                         */

                        var _require$2 = require("url");

                        const format_url = _require$2.format;
                        const parse_url = _require$2.parse;

                        const INTERNALS$2 = Symbol("Request internals");

                        /**
                         * Check if a value is an instance of Request.
                         *
                         * @param   Mixed   input
                         * @return  Boolean
                         */
                        function isRequest(input) {
                            return (
                                typeof input === "object" &&
                                typeof input[INTERNALS$2] === "object"
                            );
                        }

                        /**
                         * Request class
                         *
                         * @param   Mixed   input  Url or Request instance
                         * @param   Object  init   Custom options
                         * @return  Void
                         */
                        class Request {
                            constructor(input) {
                                let init =
                                    arguments.length > 1 &&
                                    arguments[1] !== undefined
                                        ? arguments[1]
                                        : {};

                                let parsedURL;

                                // normalize input
                                if (!isRequest(input)) {
                                    if (input && input.href) {
                                        // in order to support Node.js' Url objects; though WHATWG's URL objects
                                        // will fall into this branch also (since their `toString()` will return
                                        // `href` property anyway)
                                        parsedURL = parse_url(input.href);
                                    } else {
                                        // coerce input to a string before attempting to parse
                                        parsedURL = parse_url(`${input}`);
                                    }
                                    input = {};
                                } else {
                                    parsedURL = parse_url(input.url);
                                }

                                let method =
                                    init.method || input.method || "GET";
                                method = method.toUpperCase();

                                if (
                                    (init.body != null ||
                                        (isRequest(input) &&
                                            input.body !== null)) &&
                                    (method === "GET" || method === "HEAD")
                                ) {
                                    throw new TypeError(
                                        "Request with GET/HEAD method cannot have body"
                                    );
                                }

                                let inputBody =
                                    init.body != null
                                        ? init.body
                                        : isRequest(input) &&
                                          input.body !== null
                                        ? clone(input)
                                        : null;

                                Body.call(this, inputBody, {
                                    timeout: init.timeout || input.timeout || 0,
                                    size: init.size || input.size || 0,
                                });

                                const headers = new Headers(
                                    init.headers || input.headers || {}
                                );

                                if (init.body != null) {
                                    const contentType =
                                        extractContentType(this);
                                    if (
                                        contentType !== null &&
                                        !headers.has("Content-Type")
                                    ) {
                                        headers.append(
                                            "Content-Type",
                                            contentType
                                        );
                                    }
                                }

                                this[INTERNALS$2] = {
                                    method,
                                    redirect:
                                        init.redirect ||
                                        input.redirect ||
                                        "follow",
                                    headers,
                                    parsedURL,
                                };

                                // node-fetch-only options
                                this.follow =
                                    init.follow !== undefined
                                        ? init.follow
                                        : input.follow !== undefined
                                        ? input.follow
                                        : 20;
                                this.compress =
                                    init.compress !== undefined
                                        ? init.compress
                                        : input.compress !== undefined
                                        ? input.compress
                                        : true;
                                this.counter =
                                    init.counter || input.counter || 0;
                                this.agent = init.agent || input.agent;
                            }

                            get method() {
                                return this[INTERNALS$2].method;
                            }

                            get url() {
                                return format_url(this[INTERNALS$2].parsedURL);
                            }

                            get headers() {
                                return this[INTERNALS$2].headers;
                            }

                            get redirect() {
                                return this[INTERNALS$2].redirect;
                            }

                            /**
                             * Clone this request
                             *
                             * @return  Request
                             */
                            clone() {
                                return new Request(this);
                            }
                        }

                        Body.mixIn(Request.prototype);

                        Object.defineProperty(
                            Request.prototype,
                            Symbol.toStringTag,
                            {
                                value: "Request",
                                writable: false,
                                enumerable: false,
                                configurable: true,
                            }
                        );

                        Object.defineProperties(Request.prototype, {
                            method: { enumerable: true },
                            url: { enumerable: true },
                            headers: { enumerable: true },
                            redirect: { enumerable: true },
                            clone: { enumerable: true },
                        });

                        /**
                         * Convert a Request to Node.js http request options.
                         *
                         * @param   Request  A Request instance
                         * @return  Object   The options object to be passed to http.request
                         */
                        function getNodeRequestOptions(request) {
                            const parsedURL = request[INTERNALS$2].parsedURL;
                            const headers = new Headers(
                                request[INTERNALS$2].headers
                            );

                            // fetch step 1.3
                            if (!headers.has("Accept")) {
                                headers.set("Accept", "*/*");
                            }

                            // Basic fetch
                            if (!parsedURL.protocol || !parsedURL.hostname) {
                                throw new TypeError(
                                    "Only absolute URLs are supported"
                                );
                            }

                            if (!/^https?:$/.test(parsedURL.protocol)) {
                                throw new TypeError(
                                    "Only HTTP(S) protocols are supported"
                                );
                            }

                            // HTTP-network-or-cache fetch steps 2.4-2.7
                            let contentLengthValue = null;
                            if (
                                request.body == null &&
                                /^(POST|PUT)$/i.test(request.method)
                            ) {
                                contentLengthValue = "0";
                            }
                            if (request.body != null) {
                                const totalBytes = getTotalBytes(request);
                                if (typeof totalBytes === "number") {
                                    contentLengthValue = String(totalBytes);
                                }
                            }
                            if (contentLengthValue) {
                                headers.set(
                                    "Content-Length",
                                    contentLengthValue
                                );
                            }

                            // HTTP-network-or-cache fetch step 2.11
                            if (!headers.has("User-Agent")) {
                                headers.set(
                                    "User-Agent",
                                    "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"
                                );
                            }

                            // HTTP-network-or-cache fetch step 2.15
                            if (request.compress) {
                                headers.set("Accept-Encoding", "gzip,deflate");
                            }
                            if (!headers.has("Connection") && !request.agent) {
                                headers.set("Connection", "close");
                            }

                            // HTTP-network fetch step 4.2
                            // chunked encoding is handled by Node.js

                            return Object.assign({}, parsedURL, {
                                method: request.method,
                                headers: exportNodeCompatibleHeaders(headers),
                                agent: request.agent,
                            });
                        }

                        /**
                         * index.js
                         *
                         * a request API compatible with window.fetch
                         *
                         * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.
                         */

                        const http = require("http");
                        const https = require("https");

                        var _require$3 = require("stream");

                        const PassThrough$1 = _require$3.PassThrough;

                        var _require2 = require("url");

                        const resolve_url = _require2.resolve;

                        const zlib = require("zlib");

                        /**
                         * Fetch function
                         *
                         * @param   Mixed    url   Absolute url or Request instance
                         * @param   Object   opts  Fetch options
                         * @return  Promise
                         */
                        function fetch(url, opts) {
                            // allow custom promise
                            if (!fetch.Promise) {
                                throw new Error(
                                    "native promise missing, set fetch.Promise to your favorite alternative"
                                );
                            }

                            Body.Promise = fetch.Promise;

                            // wrap http.request into fetch
                            return new fetch.Promise(function (
                                resolve,
                                reject
                            ) {
                                // build request object
                                const request = new Request(url, opts);
                                const options = getNodeRequestOptions(request);

                                const send = (
                                    options.protocol === "https:" ? https : http
                                ).request;

                                // send request
                                const req = send(options);
                                let reqTimeout;

                                function finalize() {
                                    req.abort();
                                    clearTimeout(reqTimeout);
                                }

                                if (request.timeout) {
                                    req.once("socket", function (socket) {
                                        reqTimeout = setTimeout(function () {
                                            reject(
                                                new FetchError(
                                                    `network timeout at: ${request.url}`,
                                                    "request-timeout"
                                                )
                                            );
                                            finalize();
                                        }, request.timeout);
                                    });
                                }

                                req.on("error", function (err) {
                                    reject(
                                        new FetchError(
                                            `request to ${request.url} failed, reason: ${err.message}`,
                                            "system",
                                            err
                                        )
                                    );
                                    finalize();
                                });

                                req.on("response", function (res) {
                                    clearTimeout(reqTimeout);

                                    const headers = createHeadersLenient(
                                        res.headers
                                    );

                                    // HTTP fetch step 5
                                    if (fetch.isRedirect(res.statusCode)) {
                                        // HTTP fetch step 5.2
                                        const location =
                                            headers.get("Location");

                                        // HTTP fetch step 5.3
                                        const locationURL =
                                            location === null
                                                ? null
                                                : resolve_url(
                                                      request.url,
                                                      location
                                                  );

                                        // HTTP fetch step 5.5
                                        switch (request.redirect) {
                                            case "error":
                                                reject(
                                                    new FetchError(
                                                        `redirect mode is set to error: ${request.url}`,
                                                        "no-redirect"
                                                    )
                                                );
                                                finalize();
                                                return;
                                            case "manual":
                                                // node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
                                                if (locationURL !== null) {
                                                    headers.set(
                                                        "Location",
                                                        locationURL
                                                    );
                                                }
                                                break;
                                            case "follow":
                                                // HTTP-redirect fetch step 2
                                                if (locationURL === null) {
                                                    break;
                                                }

                                                // HTTP-redirect fetch step 5
                                                if (
                                                    request.counter >=
                                                    request.follow
                                                ) {
                                                    reject(
                                                        new FetchError(
                                                            `maximum redirect reached at: ${request.url}`,
                                                            "max-redirect"
                                                        )
                                                    );
                                                    finalize();
                                                    return;
                                                }

                                                // HTTP-redirect fetch step 6 (counter increment)
                                                // Create a new Request object.
                                                const requestOpts = {
                                                    headers: new Headers(
                                                        request.headers
                                                    ),
                                                    follow: request.follow,
                                                    counter:
                                                        request.counter + 1,
                                                    agent: request.agent,
                                                    compress: request.compress,
                                                    method: request.method,
                                                    body: request.body,
                                                };

                                                // HTTP-redirect fetch step 9
                                                if (
                                                    res.statusCode !== 303 &&
                                                    request.body &&
                                                    getTotalBytes(request) ===
                                                        null
                                                ) {
                                                    reject(
                                                        new FetchError(
                                                            "Cannot follow redirect with body being a readable stream",
                                                            "unsupported-redirect"
                                                        )
                                                    );
                                                    finalize();
                                                    return;
                                                }

                                                // HTTP-redirect fetch step 11
                                                if (
                                                    res.statusCode === 303 ||
                                                    ((res.statusCode === 301 ||
                                                        res.statusCode ===
                                                            302) &&
                                                        request.method ===
                                                            "POST")
                                                ) {
                                                    requestOpts.method = "GET";
                                                    requestOpts.body =
                                                        undefined;
                                                    requestOpts.headers.delete(
                                                        "content-length"
                                                    );
                                                }

                                                // HTTP-redirect fetch step 15
                                                resolve(
                                                    fetch(
                                                        new Request(
                                                            locationURL,
                                                            requestOpts
                                                        )
                                                    )
                                                );
                                                finalize();
                                                return;
                                        }
                                    }

                                    // prepare response
                                    let body = res.pipe(new PassThrough$1());
                                    const response_options = {
                                        url: request.url,
                                        status: res.statusCode,
                                        statusText: res.statusMessage,
                                        headers: headers,
                                        size: request.size,
                                        timeout: request.timeout,
                                    };

                                    // HTTP-network fetch step 12.1.1.3
                                    const codings =
                                        headers.get("Content-Encoding");

                                    // HTTP-network fetch step 12.1.1.4: handle content codings

                                    // in following scenarios we ignore compression support
                                    // 1. compression support is disabled
                                    // 2. HEAD request
                                    // 3. no Content-Encoding header
                                    // 4. no content response (204)
                                    // 5. content not modified response (304)
                                    if (
                                        !request.compress ||
                                        request.method === "HEAD" ||
                                        codings === null ||
                                        res.statusCode === 204 ||
                                        res.statusCode === 304
                                    ) {
                                        resolve(
                                            new Response(body, response_options)
                                        );
                                        return;
                                    }

                                    // For Node v6+
                                    // Be less strict when decoding compressed responses, since sometimes
                                    // servers send slightly invalid responses that are still accepted
                                    // by common browsers.
                                    // Always using Z_SYNC_FLUSH is what cURL does.
                                    const zlibOptions = {
                                        flush: zlib.Z_SYNC_FLUSH,
                                        finishFlush: zlib.Z_SYNC_FLUSH,
                                    };

                                    // for gzip
                                    if (
                                        codings == "gzip" ||
                                        codings == "x-gzip"
                                    ) {
                                        body = body.pipe(
                                            zlib.createGunzip(zlibOptions)
                                        );
                                        resolve(
                                            new Response(body, response_options)
                                        );
                                        return;
                                    }

                                    // for deflate
                                    if (
                                        codings == "deflate" ||
                                        codings == "x-deflate"
                                    ) {
                                        // handle the infamous raw deflate response from old servers
                                        // a hack for old IIS and Apache servers
                                        const raw = res.pipe(
                                            new PassThrough$1()
                                        );
                                        raw.once("data", function (chunk) {
                                            // see http://stackoverflow.com/questions/37519828
                                            if ((chunk[0] & 0x0f) === 0x08) {
                                                body = body.pipe(
                                                    zlib.createInflate()
                                                );
                                            } else {
                                                body = body.pipe(
                                                    zlib.createInflateRaw()
                                                );
                                            }
                                            resolve(
                                                new Response(
                                                    body,
                                                    response_options
                                                )
                                            );
                                        });
                                        return;
                                    }

                                    // otherwise, use response as-is
                                    resolve(
                                        new Response(body, response_options)
                                    );
                                });

                                writeToStream(req, request);
                            });
                        }

                        /**
                         * Redirect code matching
                         *
                         * @param   Number   code  Status code
                         * @return  Boolean
                         */
                        fetch.isRedirect = function (code) {
                            return (
                                code === 301 ||
                                code === 302 ||
                                code === 303 ||
                                code === 307 ||
                                code === 308
                            );
                        };

                        // Needed for TypeScript.
                        fetch.default = fetch;

                        // expose Promise
                        fetch.Promise = global.Promise;

                        // Igor Kroitor 2019 Dec 30
                        // expose http and https
                        // https://github.com/ccxt/ccxt/issues/6327
                        fetch.http = http;
                        fetch.https = https;

                        module.exports = exports = fetch;
                        exports.Headers = Headers;
                        exports.Request = Request;
                        exports.Response = Response;
                        exports.FetchError = FetchError;
                    }.call(this));
                }.call(
                    this,
                    typeof global !== "undefined"
                        ? global
                        : typeof self !== "undefined"
                        ? self
                        : typeof window !== "undefined"
                        ? window
                        : {},
                    require("buffer").Buffer
                ));
            },
            {
                buffer: 80,
                http: 123,
                https: 85,
                stream: 122,
                url: 129,
                zlib: 79,
            },
        ],
        52: [
            function (require, module, exports) {
                (function (Buffer) {
                    (function () {
                        /*!
                         * RSA library for Node.js
                         *
                         * Author: rzcoder
                         * License MIT
                         */

                        var rsa = require("./libs/rsa.js");
                        var _ = require("./utils")._;
                        var schemes = require("./schemes/schemes.js");
                        var formats = require("./formats/formats.js");

                        module.exports = (function () {
                            var SUPPORTED_HASH_ALGORITHMS = {
                                browser: [
                                    "md5",
                                    "ripemd160",
                                    "sha1",
                                    "sha256",
                                    "sha512",
                                ],
                            };

                            var DEFAULT_ENCRYPTION_SCHEME = "pkcs1";
                            var DEFAULT_SIGNING_SCHEME = "pkcs1";

                            var EXPORT_FORMAT_ALIASES = {
                                private: "pkcs1-private-pem",
                                "private-der": "pkcs1-private-der",
                                public: "pkcs8-public-pem",
                                "public-der": "pkcs8-public-der",
                            };

                            /**
                             * @param key {string|buffer|object} Key in PEM format, or data for generate key {b: bits, e: exponent}
                             * @constructor
                             */
                            function NodeRSA(key, format, options) {
                                if (!(this instanceof NodeRSA)) {
                                    return new NodeRSA(key, format, options);
                                }

                                if (_.isObject(format)) {
                                    options = format;
                                    format = undefined;
                                }

                                this.$options = {
                                    signingScheme: DEFAULT_SIGNING_SCHEME,
                                    signingSchemeOptions: {
                                        hash: "sha256",
                                        saltLength: null,
                                    },
                                    encryptionScheme: DEFAULT_ENCRYPTION_SCHEME,
                                    encryptionSchemeOptions: {
                                        hash: "sha1",
                                        label: null,
                                    },
                                    environment: "browser",
                                    rsaUtils: this,
                                };
                                this.keyPair = new rsa.Key();
                                this.$cache = {};

                                if (Buffer.isBuffer(key) || _.isString(key)) {
                                    this.importKey(key, format);
                                } else if (_.isObject(key)) {
                                    this.generateKeyPair(key.b, key.e);
                                }

                                this.setOptions(options);
                            }

                            /**
                             * Set and validate options for key instance
                             * @param options
                             */
                            NodeRSA.prototype.setOptions = function (options) {
                                options = options || {};
                                if (options.environment) {
                                    this.$options.environment =
                                        options.environment;
                                }

                                if (options.signingScheme) {
                                    if (_.isString(options.signingScheme)) {
                                        var signingScheme =
                                            options.signingScheme
                                                .toLowerCase()
                                                .split("-");
                                        if (signingScheme.length == 1) {
                                            if (
                                                SUPPORTED_HASH_ALGORITHMS.node.indexOf(
                                                    signingScheme[0]
                                                ) > -1
                                            ) {
                                                this.$options.signingSchemeOptions =
                                                    {
                                                        hash: signingScheme[0],
                                                    };
                                                this.$options.signingScheme =
                                                    DEFAULT_SIGNING_SCHEME;
                                            } else {
                                                this.$options.signingScheme =
                                                    signingScheme[0];
                                                this.$options.signingSchemeOptions =
                                                    {
                                                        hash: null,
                                                    };
                                            }
                                        } else {
                                            this.$options.signingSchemeOptions =
                                                {
                                                    hash: signingScheme[1],
                                                };
                                            this.$options.signingScheme =
                                                signingScheme[0];
                                        }
                                    } else if (
                                        _.isObject(options.signingScheme)
                                    ) {
                                        this.$options.signingScheme =
                                            options.signingScheme.scheme ||
                                            DEFAULT_SIGNING_SCHEME;
                                        this.$options.signingSchemeOptions =
                                            _.omit(
                                                options.signingScheme,
                                                "scheme"
                                            );
                                    }

                                    if (
                                        !schemes.isSignature(
                                            this.$options.signingScheme
                                        )
                                    ) {
                                        throw Error(
                                            "Unsupported signing scheme"
                                        );
                                    }

                                    if (
                                        this.$options.signingSchemeOptions
                                            .hash &&
                                        SUPPORTED_HASH_ALGORITHMS[
                                            this.$options.environment
                                        ].indexOf(
                                            this.$options.signingSchemeOptions
                                                .hash
                                        ) === -1
                                    ) {
                                        throw Error(
                                            "Unsupported hashing algorithm for " +
                                                this.$options.environment +
                                                " environment"
                                        );
                                    }
                                }

                                if (options.encryptionScheme) {
                                    if (_.isString(options.encryptionScheme)) {
                                        this.$options.encryptionScheme =
                                            options.encryptionScheme.toLowerCase();
                                        this.$options.encryptionSchemeOptions =
                                            {};
                                    } else if (
                                        _.isObject(options.encryptionScheme)
                                    ) {
                                        this.$options.encryptionScheme =
                                            options.encryptionScheme.scheme ||
                                            DEFAULT_ENCRYPTION_SCHEME;
                                        this.$options.encryptionSchemeOptions =
                                            _.omit(
                                                options.encryptionScheme,
                                                "scheme"
                                            );
                                    }

                                    if (
                                        !schemes.isEncryption(
                                            this.$options.encryptionScheme
                                        )
                                    ) {
                                        throw Error(
                                            "Unsupported encryption scheme"
                                        );
                                    }

                                    if (
                                        this.$options.encryptionSchemeOptions
                                            .hash &&
                                        SUPPORTED_HASH_ALGORITHMS[
                                            this.$options.environment
                                        ].indexOf(
                                            this.$options
                                                .encryptionSchemeOptions.hash
                                        ) === -1
                                    ) {
                                        throw Error(
                                            "Unsupported hashing algorithm for " +
                                                this.$options.environment +
                                                " environment"
                                        );
                                    }
                                }

                                this.keyPair.setOptions(this.$options);
                            };

                            /**
                             * Importing key
                             * @param keyData {string|buffer|Object}
                             * @param format {string}
                             */
                            NodeRSA.prototype.importKey = function (
                                keyData,
                                format
                            ) {
                                if (!keyData) {
                                    throw Error("Empty key given");
                                }

                                if (format) {
                                    format =
                                        EXPORT_FORMAT_ALIASES[format] || format;
                                }

                                if (
                                    !formats.detectAndImport(
                                        this.keyPair,
                                        keyData,
                                        format
                                    ) &&
                                    format === undefined
                                ) {
                                    throw Error("Key format must be specified");
                                }

                                this.$cache = {};

                                return this;
                            };

                            /**
                             * Check if key pair contains private key
                             */
                            NodeRSA.prototype.isPrivate = function () {
                                return this.keyPair.isPrivate();
                            };

                            /**
                             * Check if key pair contains public key
                             * @param [strict] {boolean} - public key only, return false if have private exponent
                             */
                            NodeRSA.prototype.isPublic = function (strict) {
                                return this.keyPair.isPublic(strict);
                            };

                            /**
                             * Check if key pair doesn't contains any data
                             */
                            NodeRSA.prototype.isEmpty = function (strict) {
                                return !(
                                    this.keyPair.n ||
                                    this.keyPair.e ||
                                    this.keyPair.d
                                );
                            };

                            /**
                             *  Signing data
                             *
                             * @param buffer {string|number|object|array|Buffer} - data for signing. Object and array will convert to JSON string.
                             * @param encoding {string} - optional. Encoding for output result, may be 'buffer', 'binary', 'hex' or 'base64'. Default 'buffer'.
                             * @param source_encoding {string} - optional. Encoding for given string. Default utf8.
                             * @returns {string|Buffer}
                             */
                            NodeRSA.prototype.sign = function (
                                buffer,
                                encoding,
                                source_encoding
                            ) {
                                if (!this.isPrivate()) {
                                    throw Error("This is not private key");
                                }

                                var res = this.keyPair.sign(
                                    this.$getDataForEncrypt(
                                        buffer,
                                        source_encoding
                                    )
                                );

                                if (encoding && encoding != "buffer") {
                                    res = res.toString(encoding);
                                }

                                return res;
                            };

                            /**
                             * Preparing given data for encrypting/signing. Just make new/return Buffer object.
                             *
                             * @param buffer {string|number|object|array|Buffer} - data for encrypting. Object and array will convert to JSON string.
                             * @param encoding {string} - optional. Encoding for given string. Default utf8.
                             * @returns {Buffer}
                             */
                            NodeRSA.prototype.$getDataForEncrypt = function (
                                buffer,
                                encoding
                            ) {
                                if (_.isString(buffer) || _.isNumber(buffer)) {
                                    return Buffer.from(
                                        "" + buffer,
                                        encoding || "utf8"
                                    );
                                } else if (Buffer.isBuffer(buffer)) {
                                    return buffer;
                                } else if (_.isObject(buffer)) {
                                    return Buffer.from(JSON.stringify(buffer));
                                } else {
                                    throw Error("Unexpected data type");
                                }
                            };

                            return NodeRSA;
                        })();
                    }.call(this));
                }.call(this, require("buffer").Buffer));
            },
            {
                "./formats/formats.js": 59,
                "./libs/rsa.js": 63,
                "./schemes/schemes.js": 65,
                "./utils": 66,
                buffer: 80,
            },
        ],
        53: [
            function (require, module, exports) {
                // Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

                module.exports = {
                    newInvalidAsn1Error: function (msg) {
                        var e = new Error();
                        e.name = "InvalidAsn1Error";
                        e.message = msg || "";
                        return e;
                    },
                };
            },
            {},
        ],
        54: [
            function (require, module, exports) {
                // Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

                var errors = require("./errors");
                var types = require("./types");

                var Reader = require("./reader");

                // --- Exports

                module.exports = {
                    Reader: Reader,
                };

                for (var t in types) {
                    if (types.hasOwnProperty(t)) module.exports[t] = types[t];
                }
                for (var e in errors) {
                    if (errors.hasOwnProperty(e)) module.exports[e] = errors[e];
                }
            },
            { "./errors": 53, "./reader": 55, "./types": 56 },
        ],
        55: [
            function (require, module, exports) {
                (function (Buffer) {
                    (function () {
                        // Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

                        var assert = require("assert");
                        // var Buffer = require('safer-buffer').Buffer;

                        var ASN1 = require("./types");
                        var errors = require("./errors");

                        // --- Globals

                        var newInvalidAsn1Error = errors.newInvalidAsn1Error;

                        // --- API

                        function Reader(data) {
                            if (!data || !Buffer.isBuffer(data))
                                throw new TypeError(
                                    "data must be a node Buffer"
                                );

                            this._buf = data;
                            this._size = data.length;

                            // These hold the "current" state
                            this._len = 0;
                            this._offset = 0;
                        }

                        Object.defineProperty(Reader.prototype, "length", {
                            enumerable: true,
                            get: function () {
                                return this._len;
                            },
                        });

                        Object.defineProperty(Reader.prototype, "offset", {
                            enumerable: true,
                            get: function () {
                                return this._offset;
                            },
                        });

                        Object.defineProperty(Reader.prototype, "remain", {
                            get: function () {
                                return this._size - this._offset;
                            },
                        });

                        Object.defineProperty(Reader.prototype, "buffer", {
                            get: function () {
                                return this._buf.slice(this._offset);
                            },
                        });

                        /**
                         * Reads a single byte and advances offset; you can pass in `true` to make this
                         * a "peek" operation (i.e., get the byte, but don't advance the offset).
                         *
                         * @param {Boolean} peek true means don't move offset.
                         * @return {Number} the next byte, null if not enough data.
                         */
                        Reader.prototype.readByte = function (peek) {
                            if (this._size - this._offset < 1) return null;

                            var b = this._buf[this._offset] & 0xff;

                            if (!peek) this._offset += 1;

                            return b;
                        };

                        Reader.prototype.peek = function () {
                            return this.readByte(true);
                        };

                        /**
                         * Reads a (potentially) variable length off the BER buffer.  This call is
                         * not really meant to be called directly, as callers have to manipulate
                         * the internal buffer afterwards.
                         *
                         * As a result of this call, you can call `Reader.length`, until the
                         * next thing called that does a readLength.
                         *
                         * @return {Number} the amount of offset to advance the buffer.
                         * @throws {InvalidAsn1Error} on bad ASN.1
                         */
                        Reader.prototype.readLength = function (offset) {
                            if (offset === undefined) offset = this._offset;

                            if (offset >= this._size) return null;

                            var lenB = this._buf[offset++] & 0xff;
                            if (lenB === null) return null;

                            if ((lenB & 0x80) === 0x80) {
                                lenB &= 0x7f;

                                if (lenB === 0)
                                    throw newInvalidAsn1Error(
                                        "Indefinite length not supported"
                                    );

                                if (lenB > 4)
                                    throw newInvalidAsn1Error(
                                        "encoding too long"
                                    );

                                if (this._size - offset < lenB) return null;

                                this._len = 0;
                                for (var i = 0; i < lenB; i++)
                                    this._len =
                                        (this._len << 8) +
                                        (this._buf[offset++] & 0xff);
                            } else {
                                // Wasn't a variable length
                                this._len = lenB;
                            }

                            return offset;
                        };

                        /**
                         * Parses the next sequence in this BER buffer.
                         *
                         * To get the length of the sequence, call `Reader.length`.
                         *
                         * @return {Number} the sequence's tag.
                         */
                        Reader.prototype.readSequence = function (tag) {
                            var seq = this.peek();
                            if (seq === null) return null;
                            if (tag !== undefined && tag !== seq)
                                throw newInvalidAsn1Error(
                                    "Expected 0x" +
                                        tag.toString(16) +
                                        ": got 0x" +
                                        seq.toString(16)
                                );

                            var o = this.readLength(this._offset + 1); // stored in `length`
                            if (o === null) return null;

                            this._offset = o;
                            return seq;
                        };

                        Reader.prototype.readInt = function () {
                            return this._readTag(ASN1.Integer);
                        };

                        Reader.prototype.readBoolean = function () {
                            return this._readTag(ASN1.Boolean) === 0
                                ? false
                                : true;
                        };

                        Reader.prototype.readEnumeration = function () {
                            return this._readTag(ASN1.Enumeration);
                        };

                        Reader.prototype.readString = function (tag, retbuf) {
                            if (!tag) tag = ASN1.OctetString;

                            var b = this.peek();
                            if (b === null) return null;

                            if (b !== tag)
                                throw newInvalidAsn1Error(
                                    "Expected 0x" +
                                        tag.toString(16) +
                                        ": got 0x" +
                                        b.toString(16)
                                );

                            var o = this.readLength(this._offset + 1); // stored in `length`

                            if (o === null) return null;

                            if (this.length > this._size - o) return null;

                            this._offset = o;

                            if (this.length === 0)
                                return retbuf ? Buffer.alloc(0) : "";

                            var str = this._buf.slice(
                                this._offset,
                                this._offset + this.length
                            );
                            this._offset += this.length;

                            return retbuf ? str : str.toString("utf8");
                        };

                        Reader.prototype.readOID = function (tag) {
                            if (!tag) tag = ASN1.OID;

                            var b = this.readString(tag, true);
                            if (b === null) return null;

                            var values = [];
                            var value = 0;

                            for (var i = 0; i < b.length; i++) {
                                var byte = b[i] & 0xff;

                                value <<= 7;
                                value += byte & 0x7f;
                                if ((byte & 0x80) === 0) {
                                    values.push(value);
                                    value = 0;
                                }
                            }

                            value = values.shift();
                            values.unshift(value % 40);
                            values.unshift((value / 40) >> 0);

                            return values.join(".");
                        };

                        Reader.prototype._readTag = function (tag) {
                            assert.ok(tag !== undefined);

                            var b = this.peek();

                            if (b === null) return null;

                            if (b !== tag)
                                throw newInvalidAsn1Error(
                                    "Expected 0x" +
                                        tag.toString(16) +
                                        ": got 0x" +
                                        b.toString(16)
                                );

                            var o = this.readLength(this._offset + 1); // stored in `length`
                            if (o === null) return null;

                            if (this.length > 4)
                                throw newInvalidAsn1Error(
                                    "Integer too long: " + this.length
                                );

                            if (this.length > this._size - o) return null;
                            this._offset = o;

                            var fb = this._buf[this._offset];
                            var value = 0;

                            for (var i = 0; i < this.length; i++) {
                                value <<= 8;
                                value |= this._buf[this._offset++] & 0xff;
                            }

                            if ((fb & 0x80) === 0x80 && i !== 4)
                                value -= 1 << (i * 8);

                            return value >> 0;
                        };

                        // --- Exported API

                        module.exports = Reader;
                    }.call(this));
                }.call(this, require("buffer").Buffer));
            },
            { "./errors": 53, "./types": 56, assert: 72, buffer: 80 },
        ],
        56: [
            function (require, module, exports) {
                // Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

                module.exports = {
                    EOC: 0,
                    Boolean: 1,
                    Integer: 2,
                    BitString: 3,
                    OctetString: 4,
                    Null: 5,
                    OID: 6,
                    ObjectDescriptor: 7,
                    External: 8,
                    Real: 9, // float
                    Enumeration: 10,
                    PDV: 11,
                    Utf8String: 12,
                    RelativeOID: 13,
                    Sequence: 16,
                    Set: 17,
                    NumericString: 18,
                    PrintableString: 19,
                    T61String: 20,
                    VideotexString: 21,
                    IA5String: 22,
                    UTCTime: 23,
                    GeneralizedTime: 24,
                    GraphicString: 25,
                    VisibleString: 26,
                    GeneralString: 28,
                    UniversalString: 29,
                    CharacterString: 30,
                    BMPString: 31,
                    Constructor: 32,
                    Context: 128,
                };
            },
            {},
        ],
        57: [
            function (require, module, exports) {
                // Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.

                // If you have no idea what ASN.1 or BER is, see this:
                // ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc

                var Ber = require("./ber/index");

                // --- Exported API

                module.exports = {
                    Ber: Ber,

                    BerReader: Ber.Reader,
                };
            },
            { "./ber/index": 54 },
        ],
        58: [
            function (require, module, exports) {
                var _ = require("../utils")._;
                var utils = require("../utils");

                module.exports = {
                    privateExport: function (key, options) {
                        return {
                            n: key.n.toBuffer(),
                            e: key.e,
                            d: key.d.toBuffer(),
                            p: key.p.toBuffer(),
                            q: key.q.toBuffer(),
                            dmp1: key.dmp1.toBuffer(),
                            dmq1: key.dmq1.toBuffer(),
                            coeff: key.coeff.toBuffer(),
                        };
                    },

                    privateImport: function (key, data, options) {
                        if (
                            data.n &&
                            data.e &&
                            data.d &&
                            data.p &&
                            data.q &&
                            data.dmp1 &&
                            data.dmq1 &&
                            data.coeff
                        ) {
                            key.setPrivate(
                                data.n,
                                data.e,
                                data.d,
                                data.p,
                                data.q,
                                data.dmp1,
                                data.dmq1,
                                data.coeff
                            );
                        } else {
                            throw Error("Invalid key data");
                        }
                    },

                    publicExport: function (key, options) {
                        return {
                            n: key.n.toBuffer(),
                            e: key.e,
                        };
                    },

                    publicImport: function (key, data, options) {
                        if (data.n && data.e) {
                            key.setPublic(data.n, data.e);
                        } else {
                            throw Error("Invalid key data");
                        }
                    },

                    /**
                     * Trying autodetect and import key
                     * @param key
                     * @param data
                     */
                    autoImport: function (key, data) {
                        if (data.n && data.e) {
                            if (
                                data.d &&
                                data.p &&
                                data.q &&
                                data.dmp1 &&
                                data.dmq1 &&
                                data.coeff
                            ) {
                                module.exports.privateImport(key, data);
                                return true;
                            } else {
                                module.exports.publicImport(key, data);
                                return true;
                            }
                        }

                        return false;
                    },
                };
            },
            { "../utils": 66 },
        ],
        59: [
            function (require, module, exports) {
                var _ = require("../utils")._;

                module.exports = {
                    pkcs1: require("./pkcs1"),
                    pkcs8: require("./pkcs8"),
                    components: require("./components"),

                    detectAndImport: function (key, data, format) {
                        if (format === undefined) {
                            for (var scheme in module.exports) {
                                if (
                                    typeof module.exports[scheme].autoImport ===
                                        "function" &&
                                    module.exports[scheme].autoImport(key, data)
                                ) {
                                    return true;
                                }
                            }
                        } else if (format) {
                            var fmt = formatParse(format);

                            if (module.exports[fmt.scheme]) {
                                if (fmt.keyType === "private") {
                                    module.exports[fmt.scheme].privateImport(
                                        key,
                                        data,
                                        fmt.keyOpt
                                    );
                                } else {
                                    module.exports[fmt.scheme].publicImport(
                                        key,
                                        data,
                                        fmt.keyOpt
                                    );
                                }
                            } else {
                                throw Error("Unsupported key format");
                            }
                        }

                        return false;
                    },
                };
            },
            {
                "../utils": 66,
                "./components": 58,
                "./pkcs1": 60,
                "./pkcs8": 61,
            },
        ],
        60: [
            function (require, module, exports) {
                (function (Buffer) {
                    (function () {
                        var ber = require("../asn1/index").Ber;
                        var _ = require("../utils")._;
                        var utils = require("../utils");

                        const PRIVATE_OPENING_BOUNDARY =
                            "-----BEGIN RSA PRIVATE KEY-----";
                        const PRIVATE_CLOSING_BOUNDARY =
                            "-----END RSA PRIVATE KEY-----";

                        const PUBLIC_OPENING_BOUNDARY =
                            "-----BEGIN RSA PUBLIC KEY-----";
                        const PUBLIC_CLOSING_BOUNDARY =
                            "-----END RSA PUBLIC KEY-----";

                        module.exports = {
                            privateExport: function (key, options) {
                                options = options || {};

                                var n = key.n.toBuffer();
                                var d = key.d.toBuffer();
                                var p = key.p.toBuffer();
                                var q = key.q.toBuffer();
                                var dmp1 = key.dmp1.toBuffer();
                                var dmq1 = key.dmq1.toBuffer();
                                var coeff = key.coeff.toBuffer();

                                var length =
                                    n.length +
                                    d.length +
                                    p.length +
                                    q.length +
                                    dmp1.length +
                                    dmq1.length +
                                    coeff.length +
                                    512; // magic
                                var writer = new ber.Writer({ size: length });

                                writer.startSequence();
                                writer.writeInt(0);
                                writer.writeBuffer(n, 2);
                                writer.writeInt(key.e);
                                writer.writeBuffer(d, 2);
                                writer.writeBuffer(p, 2);
                                writer.writeBuffer(q, 2);
                                writer.writeBuffer(dmp1, 2);
                                writer.writeBuffer(dmq1, 2);
                                writer.writeBuffer(coeff, 2);
                                writer.endSequence();

                                if (options.type === "der") {
                                    return writer.buffer;
                                } else {
                                    return (
                                        PRIVATE_OPENING_BOUNDARY +
                                        "\n" +
                                        utils.linebrk(
                                            writer.buffer.toString("base64"),
                                            64
                                        ) +
                                        "\n" +
                                        PRIVATE_CLOSING_BOUNDARY
                                    );
                                }
                            },

                            privateImport: function (key, data, options) {
                                options = options || {};
                                var buffer;

                                if (options.type !== "der") {
                                    if (Buffer.isBuffer(data)) {
                                        data = data.toString("utf8");
                                    }

                                    if (_.isString(data)) {
                                        var pem = utils
                                            .trimSurroundingText(
                                                data,
                                                PRIVATE_OPENING_BOUNDARY,
                                                PRIVATE_CLOSING_BOUNDARY
                                            )
                                            .replace(/\s+|\n\r|\n|\r$/gm, "");
                                        buffer = Buffer.from(pem, "base64");
                                    } else {
                                        throw Error("Unsupported key format");
                                    }
                                } else if (Buffer.isBuffer(data)) {
                                    buffer = data;
                                } else {
                                    throw Error("Unsupported key format");
                                }

                                var reader = new ber.Reader(buffer);
                                reader.readSequence();
                                reader.readString(2, true); // just zero
                                key.setPrivate(
                                    reader.readString(2, true), // modulus
                                    reader.readString(2, true), // publicExponent
                                    reader.readString(2, true), // privateExponent
                                    reader.readString(2, true), // prime1
                                    reader.readString(2, true), // prime2
                                    reader.readString(2, true), // exponent1 -- d mod (p1)
                                    reader.readString(2, true), // exponent2 -- d mod (q-1)
                                    reader.readString(2, true) // coefficient -- (inverse of q) mod p
                                );
                            },

                            publicExport: function (key, options) {
                                options = options || {};

                                var n = key.n.toBuffer();
                                var length = n.length + 512; // magic

                                var bodyWriter = new ber.Writer({
                                    size: length,
                                });
                                bodyWriter.startSequence();
                                bodyWriter.writeBuffer(n, 2);
                                bodyWriter.writeInt(key.e);
                                bodyWriter.endSequence();

                                if (options.type === "der") {
                                    return bodyWriter.buffer;
                                } else {
                                    return (
                                        PUBLIC_OPENING_BOUNDARY +
                                        "\n" +
                                        utils.linebrk(
                                            bodyWriter.buffer.toString(
                                                "base64"
                                            ),
                                            64
                                        ) +
                                        "\n" +
                                        PUBLIC_CLOSING_BOUNDARY
                                    );
                                }
                            },

                            publicImport: function (key, data, options) {
                                options = options || {};
                                var buffer;

                                if (options.type !== "der") {
                                    if (Buffer.isBuffer(data)) {
                                        data = data.toString("utf8");
                                    }

                                    if (_.isString(data)) {
                                        var pem = utils
                                            .trimSurroundingText(
                                                data,
                                                PUBLIC_OPENING_BOUNDARY,
                                                PUBLIC_CLOSING_BOUNDARY
                                            )
                                            .replace(/\s+|\n\r|\n|\r$/gm, "");
                                        buffer = Buffer.from(pem, "base64");
                                    }
                                } else if (Buffer.isBuffer(data)) {
                                    buffer = data;
                                } else {
                                    throw Error("Unsupported key format");
                                }

                                var body = new ber.Reader(buffer);
                                body.readSequence();
                                key.setPublic(
                                    body.readString(0x02, true), // modulus
                                    body.readString(0x02, true) // publicExponent
                                );
                            },

                            /**
                             * Trying autodetect and import key
                             * @param key
                             * @param data
                             */
                            autoImport: function (key, data) {
                                // [\S\s]* matches zero or more of any character
                                if (
                                    /^[\S\s]*-----BEGIN RSA PRIVATE KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END RSA PRIVATE KEY-----[\S\s]*$/g.test(
                                        data
                                    )
                                ) {
                                    module.exports.privateImport(key, data);
                                    return true;
                                }

                                if (
                                    /^[\S\s]*-----BEGIN RSA PUBLIC KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END RSA PUBLIC KEY-----[\S\s]*$/g.test(
                                        data
                                    )
                                ) {
                                    module.exports.publicImport(key, data);
                                    return true;
                                }

                                return false;
                            },
                        };
                    }.call(this));
                }.call(this, require("buffer").Buffer));
            },
            { "../asn1/index": 57, "../utils": 66, buffer: 80 },
        ],
        61: [
            function (require, module, exports) {
                (function (Buffer) {
                    (function () {
                        var ber = require("../asn1/index").Ber;
                        var _ = require("../utils")._;
                        var PUBLIC_RSA_OID = "1.2.840.113549.1.1.1";
                        var utils = require("../utils");

                        const PRIVATE_OPENING_BOUNDARY =
                            "-----BEGIN PRIVATE KEY-----";
                        const PRIVATE_CLOSING_BOUNDARY =
                            "-----END PRIVATE KEY-----";

                        const PUBLIC_OPENING_BOUNDARY =
                            "-----BEGIN PUBLIC KEY-----";
                        const PUBLIC_CLOSING_BOUNDARY =
                            "-----END PUBLIC KEY-----";

                        module.exports = {
                            privateExport: function (key, options) {
                                options = options || {};

                                var n = key.n.toBuffer();
                                var d = key.d.toBuffer();
                                var p = key.p.toBuffer();
                                var q = key.q.toBuffer();
                                var dmp1 = key.dmp1.toBuffer();
                                var dmq1 = key.dmq1.toBuffer();
                                var coeff = key.coeff.toBuffer();

                                var length =
                                    n.length +
                                    d.length +
                                    p.length +
                                    q.length +
                                    dmp1.length +
                                    dmq1.length +
                                    coeff.length +
                                    512; // magic
                                var bodyWriter = new ber.Writer({
                                    size: length,
                                });

                                bodyWriter.startSequence();
                                bodyWriter.writeInt(0);
                                bodyWriter.writeBuffer(n, 2);
                                bodyWriter.writeInt(key.e);
                                bodyWriter.writeBuffer(d, 2);
                                bodyWriter.writeBuffer(p, 2);
                                bodyWriter.writeBuffer(q, 2);
                                bodyWriter.writeBuffer(dmp1, 2);
                                bodyWriter.writeBuffer(dmq1, 2);
                                bodyWriter.writeBuffer(coeff, 2);
                                bodyWriter.endSequence();

                                var writer = new ber.Writer({ size: length });
                                writer.startSequence();
                                writer.writeInt(0);
                                writer.startSequence();
                                writer.writeOID(PUBLIC_RSA_OID);
                                writer.writeNull();
                                writer.endSequence();
                                writer.writeBuffer(bodyWriter.buffer, 4);
                                writer.endSequence();

                                if (options.type === "der") {
                                    return writer.buffer;
                                } else {
                                    return (
                                        PRIVATE_OPENING_BOUNDARY +
                                        "\n" +
                                        utils.linebrk(
                                            writer.buffer.toString("base64"),
                                            64
                                        ) +
                                        "\n" +
                                        PRIVATE_CLOSING_BOUNDARY
                                    );
                                }
                            },

                            privateImport: function (key, data, options) {
                                options = options || {};
                                var buffer;

                                if (options.type !== "der") {
                                    if (Buffer.isBuffer(data)) {
                                        data = data.toString("utf8");
                                    }

                                    if (_.isString(data)) {
                                        var pem = utils
                                            .trimSurroundingText(
                                                data,
                                                PRIVATE_OPENING_BOUNDARY,
                                                PRIVATE_CLOSING_BOUNDARY
                                            )
                                            .replace(
                                                "-----END PRIVATE KEY-----",
                                                ""
                                            )
                                            .replace(/\s+|\n\r|\n|\r$/gm, "");
                                        buffer = Buffer.from(pem, "base64");
                                    } else {
                                        throw Error("Unsupported key format");
                                    }
                                } else if (Buffer.isBuffer(data)) {
                                    buffer = data;
                                } else {
                                    throw Error("Unsupported key format");
                                }

                                var reader = new ber.Reader(buffer);
                                reader.readSequence();
                                reader.readInt(0);
                                var header = new ber.Reader(
                                    reader.readString(0x30, true)
                                );

                                if (
                                    header.readOID(0x06, true) !==
                                    PUBLIC_RSA_OID
                                ) {
                                    throw Error("Invalid Public key format");
                                }

                                var body = new ber.Reader(
                                    reader.readString(0x04, true)
                                );
                                body.readSequence();
                                body.readString(2, true); // just zero
                                key.setPrivate(
                                    body.readString(2, true), // modulus
                                    body.readString(2, true), // publicExponent
                                    body.readString(2, true), // privateExponent
                                    body.readString(2, true), // prime1
                                    body.readString(2, true), // prime2
                                    body.readString(2, true), // exponent1 -- d mod (p1)
                                    body.readString(2, true), // exponent2 -- d mod (q-1)
                                    body.readString(2, true) // coefficient -- (inverse of q) mod p
                                );
                            },

                            publicExport: function (key, options) {
                                options = options || {};

                                var n = key.n.toBuffer();
                                var length = n.length + 512; // magic

                                var bodyWriter = new ber.Writer({
                                    size: length,
                                });
                                bodyWriter.writeByte(0);
                                bodyWriter.startSequence();
                                bodyWriter.writeBuffer(n, 2);
                                bodyWriter.writeInt(key.e);
                                bodyWriter.endSequence();

                                var writer = new ber.Writer({ size: length });
                                writer.startSequence();
                                writer.startSequence();
                                writer.writeOID(PUBLIC_RSA_OID);
                                writer.writeNull();
                                writer.endSequence();
                                writer.writeBuffer(bodyWriter.buffer, 3);
                                writer.endSequence();

                                if (options.type === "der") {
                                    return writer.buffer;
                                } else {
                                    return (
                                        PUBLIC_OPENING_BOUNDARY +
                                        "\n" +
                                        utils.linebrk(
                                            writer.buffer.toString("base64"),
                                            64
                                        ) +
                                        "\n" +
                                        PUBLIC_CLOSING_BOUNDARY
                                    );
                                }
                            },

                            publicImport: function (key, data, options) {
                                options = options || {};
                                var buffer;

                                if (options.type !== "der") {
                                    if (Buffer.isBuffer(data)) {
                                        data = data.toString("utf8");
                                    }

                                    if (_.isString(data)) {
                                        var pem = utils
                                            .trimSurroundingText(
                                                data,
                                                PUBLIC_OPENING_BOUNDARY,
                                                PUBLIC_CLOSING_BOUNDARY
                                            )
                                            .replace(/\s+|\n\r|\n|\r$/gm, "");
                                        buffer = Buffer.from(pem, "base64");
                                    }
                                } else if (Buffer.isBuffer(data)) {
                                    buffer = data;
                                } else {
                                    throw Error("Unsupported key format");
                                }

                                var reader = new ber.Reader(buffer);
                                reader.readSequence();
                                var header = new ber.Reader(
                                    reader.readString(0x30, true)
                                );

                                if (
                                    header.readOID(0x06, true) !==
                                    PUBLIC_RSA_OID
                                ) {
                                    throw Error("Invalid Public key format");
                                }

                                var body = new ber.Reader(
                                    reader.readString(0x03, true)
                                );
                                body.readByte();
                                body.readSequence();
                                key.setPublic(
                                    body.readString(0x02, true), // modulus
                                    body.readString(0x02, true) // publicExponent
                                );
                            },

                            /**
                             * Trying autodetect and import key
                             * @param key
                             * @param data
                             */
                            autoImport: function (key, data) {
                                if (
                                    /^[\S\s]*-----BEGIN PRIVATE KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END PRIVATE KEY-----[\S\s]*$/g.test(
                                        data
                                    )
                                ) {
                                    module.exports.privateImport(key, data);
                                    return true;
                                }

                                if (
                                    /^[\S\s]*-----BEGIN PUBLIC KEY-----\s*(?=(([A-Za-z0-9+/=]+\s*)+))\1-----END PUBLIC KEY-----[\S\s]*$/g.test(
                                        data
                                    )
                                ) {
                                    module.exports.publicImport(key, data);
                                    return true;
                                }

                                return false;
                            },
                        };
                    }.call(this));
                }.call(this, require("buffer").Buffer));
            },
            { "../asn1/index": 57, "../utils": 66, buffer: 80 },
        ],
        62: [
            function (require, module, exports) {
                (function (Buffer) {
                    (function () {
                        /*
                         * Basic JavaScript BN library - subset useful for RSA encryption.
                         *
                         * Copyright (c) 2003-2005  Tom Wu
                         * ~BSD license~
                         *
                         * Added Node.js Buffers support
                         * 2014 rzcoder
                         *
                         * Deleted some stuff to save bytes
                         * frosty00
                         */

                        var _ = require("../utils")._;

                        // Bits per digit
                        var dbits;

                        // (public) Constructor
                        function BigInteger(a, b) {
                            if (a != null) {
                                if ("number" == typeof a) {
                                    this.fromNumber(a, b);
                                } else if (Buffer.isBuffer(a)) {
                                    this.fromBuffer(a);
                                } else if (b == null && "string" != typeof a) {
                                    this.fromByteArray(a);
                                } else {
                                    this.fromString(a, b);
                                }
                            }
                        }

                        // return new, unset BigInteger
                        function nbi() {
                            return new BigInteger(null);
                        }

                        // am: Compute w_j += (x*this_i), propagate carries,
                        // c is initial carry, returns final carry.
                        // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
                        // We need to select the fastest one that works in this environment.

                        // Alternately, set max digit bits to 28 since some
                        // browsers slow down when dealing with 32-bit numbers.
                        function am3(i, x, w, j, c, n) {
                            var xl = x & 0x3fff,
                                xh = x >> 14;
                            while (--n >= 0) {
                                var l = this[i] & 0x3fff;
                                var h = this[i++] >> 14;
                                var m = xh * l + h * xl;
                                l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
                                c = (l >> 28) + (m >> 14) + xh * h;
                                w[j++] = l & 0xfffffff;
                            }
                            return c;
                        }

                        // We need to select the fastest one that works in this environment.
                        //if (j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
                        //	BigInteger.prototype.am = am2;
                        //	dbits = 30;
                        //} else if (j_lm && (navigator.appName != "Netscape")) {
                        //	BigInteger.prototype.am = am1;
                        //	dbits = 26;
                        //} else { // Mozilla/Netscape seems to prefer am3
                        //	BigInteger.prototype.am = am3;
                        //	dbits = 28;
                        //}

                        // For node.js, we pick am3 with max dbits to 28.
                        BigInteger.prototype.am = am3;
                        dbits = 28;

                        BigInteger.prototype.DB = dbits;
                        BigInteger.prototype.DM = (1 << dbits) - 1;
                        BigInteger.prototype.DV = 1 << dbits;

                        var BI_FP = 52;
                        BigInteger.prototype.FV = Math.pow(2, BI_FP);
                        BigInteger.prototype.F1 = BI_FP - dbits;
                        BigInteger.prototype.F2 = 2 * dbits - BI_FP;

                        // Digit conversions
                        var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
                        var BI_RC = new Array();
                        var rr, vv;
                        rr = "0".charCodeAt(0);
                        for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
                        rr = "a".charCodeAt(0);
                        for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
                        rr = "A".charCodeAt(0);
                        for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

                        function int2char(n) {
                            return BI_RM.charAt(n);
                        }
                        function intAt(s, i) {
                            var c = BI_RC[s.charCodeAt(i)];
                            return c == null ? -1 : c;
                        }

                        // (protected) copy this to r
                        function bnpCopyTo(r) {
                            for (var i = this.t - 1; i >= 0; --i)
                                r[i] = this[i];
                            r.t = this.t;
                            r.s = this.s;
                        }

                        // (protected) set from integer value x, -DV <= x < DV
                        function bnpFromInt(x) {
                            this.t = 1;
                            this.s = x < 0 ? -1 : 0;
                            if (x > 0) this[0] = x;
                            else if (x < -1) this[0] = x + DV;
                            else this.t = 0;
                        }

                        // return bigint initialized to value
                        function nbv(i) {
                            var r = nbi();
                            r.fromInt(i);
                            return r;
                        }

                        // (protected) set from string and radix
                        function bnpFromString(data, radix, unsigned) {
                            var k;
                            switch (radix) {
                                case 2:
                                    k = 1;
                                    break;
                                case 4:
                                    k = 2;
                                    break;
                                case 8:
                                    k = 3;
                                    break;
                                case 16:
                                    k = 4;
                                    break;
                                case 32:
                                    k = 5;
                                    break;
                                case 256:
                                    k = 8;
                                    break;
                                default:
                                    this.fromRadix(data, radix);
                                    return;
                            }

                            this.t = 0;
                            this.s = 0;

                            var i = data.length;
                            var mi = false;
                            var sh = 0;

                            while (--i >= 0) {
                                var x =
                                    k == 8 ? data[i] & 0xff : intAt(data, i);
                                if (x < 0) {
                                    if (data.charAt(i) == "-") mi = true;
                                    continue;
                                }
                                mi = false;
                                if (sh === 0) this[this.t++] = x;
                                else if (sh + k > this.DB) {
                                    this[this.t - 1] |=
                                        (x & ((1 << (this.DB - sh)) - 1)) << sh;
                                    this[this.t++] = x >> (this.DB - sh);
                                } else this[this.t - 1] |= x << sh;
                                sh += k;
                                if (sh >= this.DB) sh -= this.DB;
                            }
                            if (!unsigned && k == 8 && (data[0] & 0x80) != 0) {
                                this.s = -1;
                                if (sh > 0)
                                    this[this.t - 1] |=
                                        ((1 << (this.DB - sh)) - 1) << sh;
                            }
                            this.clamp();
                            if (mi) BigInteger.ZERO.subTo(this, this);
                        }

                        function bnpFromByteArray(a, unsigned) {
                            this.fromString(a, 256, unsigned);
                        }

                        function bnpFromBuffer(a) {
                            this.fromString(a, 256, true);
                        }

                        // (protected) clamp off excess high words
                        function bnpClamp() {
                            var c = this.s & this.DM;
                            while (this.t > 0 && this[this.t - 1] == c)
                                --this.t;
                        }

                        // (public) return string representation in given radix
                        function bnToString(b) {
                            if (this.s < 0)
                                return "-" + this.negate().toString(b);
                            var k;
                            if (b == 16) k = 4;
                            else if (b == 8) k = 3;
                            else if (b == 2) k = 1;
                            else if (b == 32) k = 5;
                            else if (b == 4) k = 2;
                            else return this.toRadix(b);
                            var km = (1 << k) - 1,
                                d,
                                m = false,
                                r = "",
                                i = this.t;
                            var p = this.DB - ((i * this.DB) % k);
                            if (i-- > 0) {
                                if (p < this.DB && (d = this[i] >> p) > 0) {
                                    m = true;
                                    r = int2char(d);
                                }
                                while (i >= 0) {
                                    if (p < k) {
                                        d =
                                            (this[i] & ((1 << p) - 1)) <<
                                            (k - p);
                                        d |= this[--i] >> (p += this.DB - k);
                                    } else {
                                        d = (this[i] >> (p -= k)) & km;
                                        if (p <= 0) {
                                            p += this.DB;
                                            --i;
                                        }
                                    }
                                    if (d > 0) m = true;
                                    if (m) r += int2char(d);
                                }
                            }
                            return m ? r : "0";
                        }

                        // (public) -this
                        function bnNegate() {
                            var r = nbi();
                            BigInteger.ZERO.subTo(this, r);
                            return r;
                        }

                        // (public) |this|
                        function bnAbs() {
                            return this.s < 0 ? this.negate() : this;
                        }

                        // (public) return + if this > a, - if this < a, 0 if equal
                        function bnCompareTo(a) {
                            var r = this.s - a.s;
                            if (r != 0) return r;
                            var i = this.t;
                            r = i - a.t;
                            if (r != 0) return this.s < 0 ? -r : r;
                            while (--i >= 0)
                                if ((r = this[i] - a[i]) != 0) return r;
                            return 0;
                        }

                        // returns bit length of the integer x
                        function nbits(x) {
                            var r = 1,
                                t;
                            if ((t = x >>> 16) != 0) {
                                x = t;
                                r += 16;
                            }
                            if ((t = x >> 8) != 0) {
                                x = t;
                                r += 8;
                            }
                            if ((t = x >> 4) != 0) {
                                x = t;
                                r += 4;
                            }
                            if ((t = x >> 2) != 0) {
                                x = t;
                                r += 2;
                            }
                            if ((t = x >> 1) != 0) {
                                x = t;
                                r += 1;
                            }
                            return r;
                        }

                        // (public) return the number of bits in "this"
                        function bnBitLength() {
                            if (this.t <= 0) return 0;
                            return (
                                this.DB * (this.t - 1) +
                                nbits(this[this.t - 1] ^ (this.s & this.DM))
                            );
                        }

                        // (protected) r = this << n*DB
                        function bnpDLShiftTo(n, r) {
                            var i;
                            for (i = this.t - 1; i >= 0; --i)
                                r[i + n] = this[i];
                            for (i = n - 1; i >= 0; --i) r[i] = 0;
                            r.t = this.t + n;
                            r.s = this.s;
                        }

                        // (protected) r = this >> n*DB
                        function bnpDRShiftTo(n, r) {
                            for (var i = n; i < this.t; ++i) r[i - n] = this[i];
                            r.t = Math.max(this.t - n, 0);
                            r.s = this.s;
                        }

                        // (protected) r = this << n
                        function bnpLShiftTo(n, r) {
                            var bs = n % this.DB;
                            var cbs = this.DB - bs;
                            var bm = (1 << cbs) - 1;
                            var ds = Math.floor(n / this.DB),
                                c = (this.s << bs) & this.DM,
                                i;
                            for (i = this.t - 1; i >= 0; --i) {
                                r[i + ds + 1] = (this[i] >> cbs) | c;
                                c = (this[i] & bm) << bs;
                            }
                            for (i = ds - 1; i >= 0; --i) r[i] = 0;
                            r[ds] = c;
                            r.t = this.t + ds + 1;
                            r.s = this.s;
                            r.clamp();
                        }

                        // (protected) r = this >> n
                        function bnpRShiftTo(n, r) {
                            r.s = this.s;
                            var ds = Math.floor(n / this.DB);
                            if (ds >= this.t) {
                                r.t = 0;
                                return;
                            }
                            var bs = n % this.DB;
                            var cbs = this.DB - bs;
                            var bm = (1 << bs) - 1;
                            r[0] = this[ds] >> bs;
                            for (var i = ds + 1; i < this.t; ++i) {
                                r[i - ds - 1] |= (this[i] & bm) << cbs;
                                r[i - ds] = this[i] >> bs;
                            }
                            if (bs > 0)
                                r[this.t - ds - 1] |= (this.s & bm) << cbs;
                            r.t = this.t - ds;
                            r.clamp();
                        }

                        // (protected) r = this - a
                        function bnpSubTo(a, r) {
                            var i = 0,
                                c = 0,
                                m = Math.min(a.t, this.t);
                            while (i < m) {
                                c += this[i] - a[i];
                                r[i++] = c & this.DM;
                                c >>= this.DB;
                            }
                            if (a.t < this.t) {
                                c -= a.s;
                                while (i < this.t) {
                                    c += this[i];
                                    r[i++] = c & this.DM;
                                    c >>= this.DB;
                                }
                                c += this.s;
                            } else {
                                c += this.s;
                                while (i < a.t) {
                                    c -= a[i];
                                    r[i++] = c & this.DM;
                                    c >>= this.DB;
                                }
                                c -= a.s;
                            }
                            r.s = c < 0 ? -1 : 0;
                            if (c < -1) r[i++] = this.DV + c;
                            else if (c > 0) r[i++] = c;
                            r.t = i;
                            r.clamp();
                        }

                        // (protected) r = this * a, r != this,a (HAC 14.12)
                        // "this" should be the larger one if appropriate.
                        function bnpMultiplyTo(a, r) {
                            var x = this.abs(),
                                y = a.abs();
                            var i = x.t;
                            r.t = i + y.t;
                            while (--i >= 0) r[i] = 0;
                            for (i = 0; i < y.t; ++i)
                                r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
                            r.s = 0;
                            r.clamp();
                            if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
                        }

                        // (protected) r = this^2, r != this (HAC 14.16)
                        function bnpSquareTo(r) {
                            var x = this.abs();
                            var i = (r.t = 2 * x.t);
                            while (--i >= 0) r[i] = 0;
                            for (i = 0; i < x.t - 1; ++i) {
                                var c = x.am(i, x[i], r, 2 * i, 0, 1);
                                if (
                                    (r[i + x.t] += x.am(
                                        i + 1,
                                        2 * x[i],
                                        r,
                                        2 * i + 1,
                                        c,
                                        x.t - i - 1
                                    )) >= x.DV
                                ) {
                                    r[i + x.t] -= x.DV;
                                    r[i + x.t + 1] = 1;
                                }
                            }
                            if (r.t > 0)
                                r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
                            r.s = 0;
                            r.clamp();
                        }

                        // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
                        // r != q, this != m.  q or r may be null.
                        function bnpDivRemTo(m, q, r) {
                            var pm = m.abs();
                            if (pm.t <= 0) return;
                            var pt = this.abs();
                            if (pt.t < pm.t) {
                                if (q != null) q.fromInt(0);
                                if (r != null) this.copyTo(r);
                                return;
                            }
                            if (r == null) r = nbi();
                            var y = nbi(),
                                ts = this.s,
                                ms = m.s;
                            var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus
                            if (nsh > 0) {
                                pm.lShiftTo(nsh, y);
                                pt.lShiftTo(nsh, r);
                            } else {
                                pm.copyTo(y);
                                pt.copyTo(r);
                            }
                            var ys = y.t;
                            var y0 = y[ys - 1];
                            if (y0 === 0) return;
                            var yt =
                                y0 * (1 << this.F1) +
                                (ys > 1 ? y[ys - 2] >> this.F2 : 0);
                            var d1 = this.FV / yt,
                                d2 = (1 << this.F1) / yt,
                                e = 1 << this.F2;
                            var i = r.t,
                                j = i - ys,
                                t = q == null ? nbi() : q;
                            y.dlShiftTo(j, t);
                            if (r.compareTo(t) >= 0) {
                                r[r.t++] = 1;
                                r.subTo(t, r);
                            }
                            BigInteger.ONE.dlShiftTo(ys, t);
                            t.subTo(y, y); // "negative" y so we can replace sub with am later
                            while (y.t < ys) y[y.t++] = 0;
                            while (--j >= 0) {
                                // Estimate quotient digit
                                var qd =
                                    r[--i] == y0
                                        ? this.DM
                                        : Math.floor(
                                              r[i] * d1 + (r[i - 1] + e) * d2
                                          );
                                if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
                                    // Try it out
                                    y.dlShiftTo(j, t);
                                    r.subTo(t, r);
                                    while (r[i] < --qd) r.subTo(t, r);
                                }
                            }
                            if (q != null) {
                                r.drShiftTo(ys, q);
                                if (ts != ms) BigInteger.ZERO.subTo(q, q);
                            }
                            r.t = ys;
                            r.clamp();
                            if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder
                            if (ts < 0) BigInteger.ZERO.subTo(r, r);
                        }

                        // (public) this mod a
                        function bnMod(a) {
                            var r = nbi();
                            this.abs().divRemTo(a, null, r);
                            if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
                                a.subTo(r, r);
                            return r;
                        }

                        // Modular reduction using "classic" algorithm
                        function Classic(m) {
                            this.m = m;
                        }
                        function cConvert(x) {
                            if (x.s < 0 || x.compareTo(this.m) >= 0)
                                return x.mod(this.m);
                            else return x;
                        }
                        function cRevert(x) {
                            return x;
                        }
                        function cReduce(x) {
                            x.divRemTo(this.m, null, x);
                        }
                        function cMulTo(x, y, r) {
                            x.multiplyTo(y, r);
                            this.reduce(r);
                        }
                        function cSqrTo(x, r) {
                            x.squareTo(r);
                            this.reduce(r);
                        }

                        Classic.prototype.convert = cConvert;
                        Classic.prototype.revert = cRevert;
                        Classic.prototype.reduce = cReduce;
                        Classic.prototype.mulTo = cMulTo;
                        Classic.prototype.sqrTo = cSqrTo;

                        // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
                        // justification:
                        //         xy == 1 (mod m)
                        //         xy =  1+km
                        //   xy(2-xy) = (1+km)(1-km)
                        // x[y(2-xy)] = 1-k^2m^2
                        // x[y(2-xy)] == 1 (mod m^2)
                        // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
                        // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
                        // JS multiply "overflows" differently from C/C++, so care is needed here.
                        function bnpInvDigit() {
                            if (this.t < 1) return 0;
                            var x = this[0];
                            if ((x & 1) === 0) return 0;
                            var y = x & 3; // y == 1/x mod 2^2
                            y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4
                            y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8
                            y =
                                (y * (2 - (((x & 0xffff) * y) & 0xffff))) &
                                0xffff; // y == 1/x mod 2^16
                            // last step - calculate inverse mod DV directly;
                            // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
                            y = (y * (2 - ((x * y) % this.DV))) % this.DV; // y == 1/x mod 2^dbits
                            // we really want the negative inverse, and -DV < y < DV
                            return y > 0 ? this.DV - y : -y;
                        }

                        // Montgomery reduction
                        function Montgomery(m) {
                            this.m = m;
                            this.mp = m.invDigit();
                            this.mpl = this.mp & 0x7fff;
                            this.mph = this.mp >> 15;
                            this.um = (1 << (m.DB - 15)) - 1;
                            this.mt2 = 2 * m.t;
                        }

                        // xR mod m
                        function montConvert(x) {
                            var r = nbi();
                            x.abs().dlShiftTo(this.m.t, r);
                            r.divRemTo(this.m, null, r);
                            if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
                                this.m.subTo(r, r);
                            return r;
                        }

                        // x/R mod m
                        function montRevert(x) {
                            var r = nbi();
                            x.copyTo(r);
                            this.reduce(r);
                            return r;
                        }

                        // x = x/R mod m (HAC 14.32)
                        function montReduce(x) {
                            while (x.t <= this.mt2)
                                // pad x so am has enough room later
                                x[x.t++] = 0;
                            for (var i = 0; i < this.m.t; ++i) {
                                // faster way of calculating u0 = x[i]*mp mod DV
                                var j = x[i] & 0x7fff;
                                var u0 =
                                    (j * this.mpl +
                                        (((j * this.mph +
                                            (x[i] >> 15) * this.mpl) &
                                            this.um) <<
                                            15)) &
                                    x.DM;
                                // use am to combine the multiply-shift-add into one call
                                j = i + this.m.t;
                                x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
                                // propagate carry
                                while (x[j] >= x.DV) {
                                    x[j] -= x.DV;
                                    x[++j]++;
                                }
                            }
                            x.clamp();
                            x.drShiftTo(this.m.t, x);
                            if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
                        }

                        // r = "x^2/R mod m"; x != r
                        function montSqrTo(x, r) {
                            x.squareTo(r);
                            this.reduce(r);
                        }

                        // r = "xy/R mod m"; x,y != r
                        function montMulTo(x, y, r) {
                            x.multiplyTo(y, r);
                            this.reduce(r);
                        }

                        Montgomery.prototype.convert = montConvert;
                        Montgomery.prototype.revert = montRevert;
                        Montgomery.prototype.reduce = montReduce;
                        Montgomery.prototype.mulTo = montMulTo;
                        Montgomery.prototype.sqrTo = montSqrTo;

                        // (protected) true iff this is even
                        function bnpIsEven() {
                            return (this.t > 0 ? this[0] & 1 : this.s) === 0;
                        }

                        // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
                        function bnpExp(e, z) {
                            if (e > 0xffffffff || e < 1) return BigInteger.ONE;
                            var r = nbi(),
                                r2 = nbi(),
                                g = z.convert(this),
                                i = nbits(e) - 1;
                            g.copyTo(r);
                            while (--i >= 0) {
                                z.sqrTo(r, r2);
                                if ((e & (1 << i)) > 0) z.mulTo(r2, g, r);
                                else {
                                    var t = r;
                                    r = r2;
                                    r2 = t;
                                }
                            }
                            return z.revert(r);
                        }

                        // Copyright (c) 2005-2009  Tom Wu
                        // All Rights Reserved.
                        // See "LICENSE" for details.

                        // Extended JavaScript BN functions, required for RSA private ops.

                        // Version 1.1: new BigInteger("0", 10) returns "proper" zero
                        // Version 1.2: square() API, isProbablePrime fix

                        //(public)
                        function bnClone() {
                            var r = nbi();
                            this.copyTo(r);
                            return r;
                        }

                        //(public) return value as integer
                        function bnIntValue() {
                            if (this.s < 0) {
                                if (this.t == 1) return this[0] - this.DV;
                                else if (this.t === 0) return -1;
                            } else if (this.t == 1) return this[0];
                            else if (this.t === 0) return 0;
                            // assumes 16 < DB < 32
                            return (
                                ((this[1] & ((1 << (32 - this.DB)) - 1)) <<
                                    this.DB) |
                                this[0]
                            );
                        }

                        //(protected) return x s.t. r^x < DV
                        function bnpChunkSize(r) {
                            return Math.floor(
                                (Math.LN2 * this.DB) / Math.log(r)
                            );
                        }

                        //(public) 0 if this === 0, 1 if this > 0
                        function bnSigNum() {
                            if (this.s < 0) return -1;
                            else if (
                                this.t <= 0 ||
                                (this.t == 1 && this[0] <= 0)
                            )
                                return 0;
                            else return 1;
                        }

                        //(protected) convert to radix string
                        function bnpToRadix(b) {
                            if (b == null) b = 10;
                            if (this.signum() === 0 || b < 2 || b > 36)
                                return "0";
                            var cs = this.chunkSize(b);
                            var a = Math.pow(b, cs);
                            var d = nbv(a),
                                y = nbi(),
                                z = nbi(),
                                r = "";
                            this.divRemTo(d, y, z);
                            while (y.signum() > 0) {
                                r =
                                    (a + z.intValue()).toString(b).substr(1) +
                                    r;
                                y.divRemTo(d, y, z);
                            }
                            return z.intValue().toString(b) + r;
                        }

                        //(protected) convert from radix string
                        function bnpFromRadix(s, b) {
                            this.fromInt(0);
                            if (b == null) b = 10;
                            var cs = this.chunkSize(b);
                            var d = Math.pow(b, cs),
                                mi = false,
                                j = 0,
                                w = 0;
                            for (var i = 0; i < s.length; ++i) {
                                var x = intAt(s, i);
                                if (x < 0) {
                                    if (
                                        s.charAt(i) == "-" &&
                                        this.signum() === 0
                                    )
                                        mi = true;
                                    continue;
                                }
                                w = b * w + x;
                                if (++j >= cs) {
                                    this.dMultiply(d);
                                    this.dAddOffset(w, 0);
                                    j = 0;
                                    w = 0;
                                }
                            }
                            if (j > 0) {
                                this.dMultiply(Math.pow(b, j));
                                this.dAddOffset(w, 0);
                            }
                            if (mi) BigInteger.ZERO.subTo(this, this);
                        }

                        //(public) convert to bigendian byte array
                        function bnToByteArray() {
                            var i = this.t,
                                r = new Array();
                            r[0] = this.s;
                            var p = this.DB - ((i * this.DB) % 8),
                                d,
                                k = 0;
                            if (i-- > 0) {
                                if (
                                    p < this.DB &&
                                    (d = this[i] >> p) !=
                                        (this.s & this.DM) >> p
                                )
                                    r[k++] = d | (this.s << (this.DB - p));
                                while (i >= 0) {
                                    if (p < 8) {
                                        d =
                                            (this[i] & ((1 << p) - 1)) <<
                                            (8 - p);
                                        d |= this[--i] >> (p += this.DB - 8);
                                    } else {
                                        d = (this[i] >> (p -= 8)) & 0xff;
                                        if (p <= 0) {
                                            p += this.DB;
                                            --i;
                                        }
                                    }
                                    if ((d & 0x80) != 0) d |= -256;
                                    if (
                                        k === 0 &&
                                        (this.s & 0x80) != (d & 0x80)
                                    )
                                        ++k;
                                    if (k > 0 || d != this.s) r[k++] = d;
                                }
                            }
                            return r;
                        }

                        /**
                         * return Buffer object
                         * @param trim {boolean} slice buffer if first element == 0
                         * @returns {Buffer}
                         */
                        function bnToBuffer(trimOrSize) {
                            var res = Buffer.from(this.toByteArray());
                            if (trimOrSize === true && res[0] === 0) {
                                res = res.slice(1);
                            } else if (_.isNumber(trimOrSize)) {
                                if (res.length > trimOrSize) {
                                    for (
                                        var i = 0;
                                        i < res.length - trimOrSize;
                                        i++
                                    ) {
                                        if (res[i] !== 0) {
                                            return null;
                                        }
                                    }
                                    return res.slice(res.length - trimOrSize);
                                } else if (res.length < trimOrSize) {
                                    var padded = Buffer.alloc(trimOrSize);
                                    padded.fill(0, 0, trimOrSize - res.length);
                                    res.copy(padded, trimOrSize - res.length);
                                    return padded;
                                }
                            }
                            return res;
                        }

                        function bnEquals(a) {
                            return this.compareTo(a) == 0;
                        }
                        function bnMin(a) {
                            return this.compareTo(a) < 0 ? this : a;
                        }
                        function bnMax(a) {
                            return this.compareTo(a) > 0 ? this : a;
                        }

                        //(protected) r = this op a (bitwise)
                        function bnpBitwiseTo(a, op, r) {
                            var i,
                                f,
                                m = Math.min(a.t, this.t);
                            for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);
                            if (a.t < this.t) {
                                f = a.s & this.DM;
                                for (i = m; i < this.t; ++i)
                                    r[i] = op(this[i], f);
                                r.t = this.t;
                            } else {
                                f = this.s & this.DM;
                                for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);
                                r.t = a.t;
                            }
                            r.s = op(this.s, a.s);
                            r.clamp();
                        }

                        //(public) this & a
                        function op_and(x, y) {
                            return x & y;
                        }
                        function bnAnd(a) {
                            var r = nbi();
                            this.bitwiseTo(a, op_and, r);
                            return r;
                        }

                        //(public) this | a
                        function op_or(x, y) {
                            return x | y;
                        }
                        function bnOr(a) {
                            var r = nbi();
                            this.bitwiseTo(a, op_or, r);
                            return r;
                        }

                        //(public) this ^ a
                        function op_xor(x, y) {
                            return x ^ y;
                        }
                        function bnXor(a) {
                            var r = nbi();
                            this.bitwiseTo(a, op_xor, r);
                            return r;
                        }

                        //(public) this & ~a
                        function op_andnot(x, y) {
                            return x & ~y;
                        }

                        //(public) ~this
                        function bnNot() {
                            var r = nbi();
                            for (var i = 0; i < this.t; ++i)
                                r[i] = this.DM & ~this[i];
                            r.t = this.t;
                            r.s = ~this.s;
                            return r;
                        }

                        //return index of lowest 1-bit in x, x < 2^31
                        function lbit(x) {
                            if (x === 0) return -1;
                            var r = 0;
                            if ((x & 0xffff) === 0) {
                                x >>= 16;
                                r += 16;
                            }
                            if ((x & 0xff) === 0) {
                                x >>= 8;
                                r += 8;
                            }
                            if ((x & 0xf) === 0) {
                                x >>= 4;
                                r += 4;
                            }
                            if ((x & 3) === 0) {
                                x >>= 2;
                                r += 2;
                            }
                            if ((x & 1) === 0) ++r;
                            return r;
                        }

                        //(public) returns index of lowest 1-bit (or -1 if none)
                        function bnGetLowestSetBit() {
                            for (var i = 0; i < this.t; ++i)
                                if (this[i] != 0)
                                    return i * this.DB + lbit(this[i]);
                            if (this.s < 0) return this.t * this.DB;
                            return -1;
                        }

                        //return number of 1 bits in x
                        function cbit(x) {
                            var r = 0;
                            while (x != 0) {
                                x &= x - 1;
                                ++r;
                            }
                            return r;
                        }

                        //(protected) r = this + a
                        function bnpAddTo(a, r) {
                            var i = 0,
                                c = 0,
                                m = Math.min(a.t, this.t);
                            while (i < m) {
                                c += this[i] + a[i];
                                r[i++] = c & this.DM;
                                c >>= this.DB;
                            }
                            if (a.t < this.t) {
                                c += a.s;
                                while (i < this.t) {
                                    c += this[i];
                                    r[i++] = c & this.DM;
                                    c >>= this.DB;
                                }
                                c += this.s;
                            } else {
                                c += this.s;
                                while (i < a.t) {
                                    c += a[i];
                                    r[i++] = c & this.DM;
                                    c >>= this.DB;
                                }
                                c += a.s;
                            }
                            r.s = c < 0 ? -1 : 0;
                            if (c > 0) r[i++] = c;
                            else if (c < -1) r[i++] = this.DV + c;
                            r.t = i;
                            r.clamp();
                        }

                        //(public) this + a
                        function bnAdd(a) {
                            var r = nbi();
                            this.addTo(a, r);
                            return r;
                        }

                        //(public) this - a
                        function bnSubtract(a) {
                            var r = nbi();
                            this.subTo(a, r);
                            return r;
                        }

                        //(public) this * a
                        function bnMultiply(a) {
                            var r = nbi();
                            this.multiplyTo(a, r);
                            return r;
                        }

                        // (public) this^2
                        function bnSquare() {
                            var r = nbi();
                            this.squareTo(r);
                            return r;
                        }

                        //(public) this / a
                        function bnDivide(a) {
                            var r = nbi();
                            this.divRemTo(a, r, null);
                            return r;
                        }

                        //(public) this % a
                        function bnRemainder(a) {
                            var r = nbi();
                            this.divRemTo(a, null, r);
                            return r;
                        }

                        //(protected) this *= n, this >= 0, 1 < n < DV
                        function bnpDMultiply(n) {
                            this[this.t] = this.am(
                                0,
                                n - 1,
                                this,
                                0,
                                0,
                                this.t
                            );
                            ++this.t;
                            this.clamp();
                        }

                        //(protected) this += n << w words, this >= 0
                        function bnpDAddOffset(n, w) {
                            if (n === 0) return;
                            while (this.t <= w) this[this.t++] = 0;
                            this[w] += n;
                            while (this[w] >= this.DV) {
                                this[w] -= this.DV;
                                if (++w >= this.t) this[this.t++] = 0;
                                ++this[w];
                            }
                        }

                        //A "null" reducer
                        function NullExp() {}
                        function nNop(x) {
                            return x;
                        }
                        function nMulTo(x, y, r) {
                            x.multiplyTo(y, r);
                        }
                        function nSqrTo(x, r) {
                            x.squareTo(r);
                        }

                        NullExp.prototype.convert = nNop;
                        NullExp.prototype.revert = nNop;
                        NullExp.prototype.mulTo = nMulTo;
                        NullExp.prototype.sqrTo = nSqrTo;

                        //(public) this^e
                        function bnPow(e) {
                            return this.exp(e, new NullExp());
                        }

                        //(protected) r = lower n words of "this * a", a.t <= n
                        //"this" should be the larger one if appropriate.
                        function bnpMultiplyLowerTo(a, n, r) {
                            var i = Math.min(this.t + a.t, n);
                            r.s = 0; // assumes a,this >= 0
                            r.t = i;
                            while (i > 0) r[--i] = 0;
                            var j;
                            for (j = r.t - this.t; i < j; ++i)
                                r[i + this.t] = this.am(
                                    0,
                                    a[i],
                                    r,
                                    i,
                                    0,
                                    this.t
                                );
                            for (j = Math.min(a.t, n); i < j; ++i)
                                this.am(0, a[i], r, i, 0, n - i);
                            r.clamp();
                        }

                        //(protected) r = "this * a" without lower n words, n > 0
                        //"this" should be the larger one if appropriate.
                        function bnpMultiplyUpperTo(a, n, r) {
                            --n;
                            var i = (r.t = this.t + a.t - n);
                            r.s = 0; // assumes a,this >= 0
                            while (--i >= 0) r[i] = 0;
                            for (i = Math.max(n - this.t, 0); i < a.t; ++i)
                                r[this.t + i - n] = this.am(
                                    n - i,
                                    a[i],
                                    r,
                                    0,
                                    0,
                                    this.t + i - n
                                );
                            r.clamp();
                            r.drShiftTo(1, r);
                        }

                        //Barrett modular reduction
                        function Barrett(m) {
                            // setup Barrett
                            this.r2 = nbi();
                            this.q3 = nbi();
                            BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
                            this.mu = this.r2.divide(m);
                            this.m = m;
                        }

                        function barrettConvert(x) {
                            if (x.s < 0 || x.t > 2 * this.m.t)
                                return x.mod(this.m);
                            else if (x.compareTo(this.m) < 0) return x;
                            else {
                                var r = nbi();
                                x.copyTo(r);
                                this.reduce(r);
                                return r;
                            }
                        }

                        function barrettRevert(x) {
                            return x;
                        }

                        //x = x mod m (HAC 14.42)
                        function barrettReduce(x) {
                            x.drShiftTo(this.m.t - 1, this.r2);
                            if (x.t > this.m.t + 1) {
                                x.t = this.m.t + 1;
                                x.clamp();
                            }
                            this.mu.multiplyUpperTo(
                                this.r2,
                                this.m.t + 1,
                                this.q3
                            );
                            this.m.multiplyLowerTo(
                                this.q3,
                                this.m.t + 1,
                                this.r2
                            );
                            while (x.compareTo(this.r2) < 0)
                                x.dAddOffset(1, this.m.t + 1);
                            x.subTo(this.r2, x);
                            while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
                        }

                        //r = x^2 mod m; x != r
                        function barrettSqrTo(x, r) {
                            x.squareTo(r);
                            this.reduce(r);
                        }

                        //r = x*y mod m; x,y != r
                        function barrettMulTo(x, y, r) {
                            x.multiplyTo(y, r);
                            this.reduce(r);
                        }

                        Barrett.prototype.convert = barrettConvert;
                        Barrett.prototype.revert = barrettRevert;
                        Barrett.prototype.reduce = barrettReduce;
                        Barrett.prototype.mulTo = barrettMulTo;
                        Barrett.prototype.sqrTo = barrettSqrTo;

                        //(public) this^e % m (HAC 14.85)
                        function bnModPow(e, m) {
                            var i = e.bitLength(),
                                k,
                                r = nbv(1),
                                z;
                            if (i <= 0) return r;
                            else if (i < 18) k = 1;
                            else if (i < 48) k = 3;
                            else if (i < 144) k = 4;
                            else if (i < 768) k = 5;
                            else k = 6;
                            if (i < 8) z = new Classic(m);
                            else if (m.isEven()) z = new Barrett(m);
                            else z = new Montgomery(m);

                            // precomputation
                            var g = new Array(),
                                n = 3,
                                k1 = k - 1,
                                km = (1 << k) - 1;
                            g[1] = z.convert(this);
                            if (k > 1) {
                                var g2 = nbi();
                                z.sqrTo(g[1], g2);
                                while (n <= km) {
                                    g[n] = nbi();
                                    z.mulTo(g2, g[n - 2], g[n]);
                                    n += 2;
                                }
                            }

                            var j = e.t - 1,
                                w,
                                is1 = true,
                                r2 = nbi(),
                                t;
                            i = nbits(e[j]) - 1;
                            while (j >= 0) {
                                if (i >= k1) w = (e[j] >> (i - k1)) & km;
                                else {
                                    w =
                                        (e[j] & ((1 << (i + 1)) - 1)) <<
                                        (k1 - i);
                                    if (j > 0)
                                        w |= e[j - 1] >> (this.DB + i - k1);
                                }

                                n = k;
                                while ((w & 1) === 0) {
                                    w >>= 1;
                                    --n;
                                }
                                if ((i -= n) < 0) {
                                    i += this.DB;
                                    --j;
                                }
                                if (is1) {
                                    // ret == 1, don't bother squaring or multiplying it
                                    g[w].copyTo(r);
                                    is1 = false;
                                } else {
                                    while (n > 1) {
                                        z.sqrTo(r, r2);
                                        z.sqrTo(r2, r);
                                        n -= 2;
                                    }
                                    if (n > 0) z.sqrTo(r, r2);
                                    else {
                                        t = r;
                                        r = r2;
                                        r2 = t;
                                    }
                                    z.mulTo(r2, g[w], r);
                                }

                                while (j >= 0 && (e[j] & (1 << i)) === 0) {
                                    z.sqrTo(r, r2);
                                    t = r;
                                    r = r2;
                                    r2 = t;
                                    if (--i < 0) {
                                        i = this.DB - 1;
                                        --j;
                                    }
                                }
                            }
                            return z.revert(r);
                        }

                        //(public) gcd(this,a) (HAC 14.54)
                        function bnGCD(a) {
                            var x = this.s < 0 ? this.negate() : this.clone();
                            var y = a.s < 0 ? a.negate() : a.clone();
                            if (x.compareTo(y) < 0) {
                                var t = x;
                                x = y;
                                y = t;
                            }
                            var i = x.getLowestSetBit(),
                                g = y.getLowestSetBit();
                            if (g < 0) return x;
                            if (i < g) g = i;
                            if (g > 0) {
                                x.rShiftTo(g, x);
                                y.rShiftTo(g, y);
                            }
                            while (x.signum() > 0) {
                                if ((i = x.getLowestSetBit()) > 0)
                                    x.rShiftTo(i, x);
                                if ((i = y.getLowestSetBit()) > 0)
                                    y.rShiftTo(i, y);
                                if (x.compareTo(y) >= 0) {
                                    x.subTo(y, x);
                                    x.rShiftTo(1, x);
                                } else {
                                    y.subTo(x, y);
                                    y.rShiftTo(1, y);
                                }
                            }
                            if (g > 0) y.lShiftTo(g, y);
                            return y;
                        }

                        // protected
                        BigInteger.prototype.copyTo = bnpCopyTo;
                        BigInteger.prototype.fromInt = bnpFromInt;
                        BigInteger.prototype.fromString = bnpFromString;
                        BigInteger.prototype.fromByteArray = bnpFromByteArray;
                        BigInteger.prototype.fromBuffer = bnpFromBuffer;
                        BigInteger.prototype.clamp = bnpClamp;
                        BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
                        BigInteger.prototype.drShiftTo = bnpDRShiftTo;
                        BigInteger.prototype.lShiftTo = bnpLShiftTo;
                        BigInteger.prototype.rShiftTo = bnpRShiftTo;
                        BigInteger.prototype.subTo = bnpSubTo;
                        BigInteger.prototype.multiplyTo = bnpMultiplyTo;
                        BigInteger.prototype.squareTo = bnpSquareTo;
                        BigInteger.prototype.divRemTo = bnpDivRemTo;
                        BigInteger.prototype.invDigit = bnpInvDigit;
                        BigInteger.prototype.isEven = bnpIsEven;
                        BigInteger.prototype.exp = bnpExp;

                        BigInteger.prototype.chunkSize = bnpChunkSize;
                        BigInteger.prototype.toRadix = bnpToRadix;
                        BigInteger.prototype.fromRadix = bnpFromRadix;
                        BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
                        BigInteger.prototype.addTo = bnpAddTo;
                        BigInteger.prototype.dMultiply = bnpDMultiply;
                        BigInteger.prototype.dAddOffset = bnpDAddOffset;
                        BigInteger.prototype.multiplyLowerTo =
                            bnpMultiplyLowerTo;
                        BigInteger.prototype.multiplyUpperTo =
                            bnpMultiplyUpperTo;

                        // public
                        BigInteger.prototype.toString = bnToString;
                        BigInteger.prototype.negate = bnNegate;
                        BigInteger.prototype.abs = bnAbs;
                        BigInteger.prototype.compareTo = bnCompareTo;
                        BigInteger.prototype.bitLength = bnBitLength;
                        BigInteger.prototype.mod = bnMod;

                        BigInteger.prototype.clone = bnClone;
                        BigInteger.prototype.intValue = bnIntValue;
                        BigInteger.prototype.signum = bnSigNum;
                        BigInteger.prototype.toByteArray = bnToByteArray;
                        BigInteger.prototype.toBuffer = bnToBuffer;
                        BigInteger.prototype.equals = bnEquals;
                        BigInteger.prototype.min = bnMin;
                        BigInteger.prototype.max = bnMax;
                        BigInteger.prototype.and = bnAnd;
                        BigInteger.prototype.or = bnOr;
                        BigInteger.prototype.xor = bnXor;
                        BigInteger.prototype.not = bnNot;
                        BigInteger.prototype.getLowestSetBit =
                            bnGetLowestSetBit;
                        BigInteger.prototype.add = bnAdd;
                        BigInteger.prototype.subtract = bnSubtract;
                        BigInteger.prototype.multiply = bnMultiply;
                        BigInteger.prototype.divide = bnDivide;
                        BigInteger.prototype.remainder = bnRemainder;
                        BigInteger.prototype.modPow = bnModPow;
                        BigInteger.prototype.pow = bnPow;
                        BigInteger.prototype.gcd = bnGCD;
                        BigInteger.int2char = int2char;

                        // "constants"
                        BigInteger.ZERO = nbv(0);
                        BigInteger.ONE = nbv(1);

                        // JSBN-specific extension
                        BigInteger.prototype.square = bnSquare;

                        //BigInteger interfaces not implemented in jsbn:

                        //BigInteger(int signum, byte[] magnitude)
                        //double doubleValue()
                        //float floatValue()
                        //int hashCode()
                        //long longValue()
                        //static BigInteger valueOf(long val)

                        module.exports = BigInteger;
                    }.call(this));
                }.call(this, require("buffer").Buffer));
            },
            { "../utils": 66, buffer: 80 },
        ],
        63: [
            function (require, module, exports) {
                /*
                 * RSA Encryption / Decryption with PKCS1 v2 Padding.
                 *
                 * ~MIT License~
                 * Contributors:
                 * Tom Wu, rzcoder, frosty00
                 */

                var _ = require("../utils")._;
                var BigInteger = require("./jsbn.js");
                var utils = require("../utils.js");
                var schemes = require("../schemes/schemes.js");

                //exports.BigInteger = BigInteger;
                module.exports.Key = (function () {
                    /**
                     * RSA key constructor
                     *
                     * n - modulus
                     * e - publicExponent
                     * d - privateExponent
                     * p - prime1
                     * q - prime2
                     * dmp1 - exponent1 -- d mod (p1)
                     * dmq1 - exponent2 -- d mod (q-1)
                     * coeff - coefficient -- (inverse of q) mod p
                     */
                    function RSAKey() {
                        this.n = null;
                        this.e = 0;
                        this.d = null;
                        this.p = null;
                        this.q = null;
                        this.dmp1 = null;
                        this.dmq1 = null;
                        this.coeff = null;
                    }

                    RSAKey.prototype.setOptions = function (options) {
                        var signingSchemeProvider =
                            schemes[options.signingScheme];
                        var encryptionSchemeProvider =
                            schemes[options.encryptionScheme];

                        if (
                            signingSchemeProvider === encryptionSchemeProvider
                        ) {
                            this.signingScheme = this.encryptionScheme =
                                encryptionSchemeProvider.makeScheme(
                                    this,
                                    options
                                );
                        } else {
                            this.encryptionScheme =
                                encryptionSchemeProvider.makeScheme(
                                    this,
                                    options
                                );
                            this.signingScheme =
                                signingSchemeProvider.makeScheme(this, options);
                        }
                    };
                    /**
                     * Set the private key fields N, e, d and CRT params from buffers
                     *
                     * @param N
                     * @param E
                     * @param D
                     * @param P
                     * @param Q
                     * @param DP
                     * @param DQ
                     * @param C
                     */
                    RSAKey.prototype.setPrivate = function (
                        N,
                        E,
                        D,
                        P,
                        Q,
                        DP,
                        DQ,
                        C
                    ) {
                        if (
                            N &&
                            E &&
                            D &&
                            N.length > 0 &&
                            (_.isNumber(E) || E.length > 0) &&
                            D.length > 0
                        ) {
                            this.n = new BigInteger(N);
                            this.e = _.isNumber(E)
                                ? E
                                : utils.get32IntFromBuffer(E, 0);
                            this.d = new BigInteger(D);

                            if (P && Q && DP && DQ && C) {
                                this.p = new BigInteger(P);
                                this.q = new BigInteger(Q);
                                this.dmp1 = new BigInteger(DP);
                                this.dmq1 = new BigInteger(DQ);
                                this.coeff = new BigInteger(C);
                            } else {
                                // TODO: re-calculate any missing CRT params
                            }
                            this.$$recalculateCache();
                        } else {
                            throw Error("Invalid RSA private key");
                        }
                    };

                    /**
                     * private
                     * Perform raw private operation on "x": return x^d (mod n)
                     *
                     * @param x
                     * @returns {*}
                     */
                    RSAKey.prototype.$doPrivate = function (x) {
                        if (this.p || this.q) {
                            return x.modPow(this.d, this.n);
                        }

                        // TODO: re-calculate any missing CRT params
                        var xp = x.mod(this.p).modPow(this.dmp1, this.p);
                        var xq = x.mod(this.q).modPow(this.dmq1, this.q);

                        while (xp.compareTo(xq) < 0) {
                            xp = xp.add(this.p);
                        }
                        return xp
                            .subtract(xq)
                            .multiply(this.coeff)
                            .mod(this.p)
                            .multiply(this.q)
                            .add(xq);
                    };

                    RSAKey.prototype.sign = function (buffer) {
                        return this.signingScheme.sign.apply(
                            this.signingScheme,
                            arguments
                        );
                    };

                    /**
                     * Check if key pair contains private key
                     */
                    RSAKey.prototype.isPrivate = function () {
                        return (this.n && this.e && this.d) || false;
                    };

                    Object.defineProperty(RSAKey.prototype, "keySize", {
                        get: function () {
                            return this.cache.keyBitLength;
                        },
                    });

                    Object.defineProperty(
                        RSAKey.prototype,
                        "encryptedDataLength",
                        {
                            get: function () {
                                return this.cache.keyByteLength;
                            },
                        }
                    );

                    Object.defineProperty(
                        RSAKey.prototype,
                        "maxMessageLength",
                        {
                            get: function () {
                                return this.encryptionScheme.maxMessageLength();
                            },
                        }
                    );

                    /**
                     * Caching key data
                     */
                    RSAKey.prototype.$$recalculateCache = function () {
                        this.cache = this.cache || {};
                        // Bit & byte length
                        this.cache.keyBitLength = this.n.bitLength();
                        this.cache.keyByteLength =
                            (this.cache.keyBitLength + 6) >> 3;
                    };

                    return RSAKey;
                })();
            },
            {
                "../schemes/schemes.js": 65,
                "../utils": 66,
                "../utils.js": 66,
                "./jsbn.js": 62,
            },
        ],
        64: [
            function (require, module, exports) {
                (function (Buffer) {
                    (function () {
                        /**
                         * PKCS1 padding and signature scheme
                         */

                        var BigInteger = require("../libs/jsbn");
                        var CryptoJS = require("../../crypto-js/crypto-js");
                        var constants = { RSA_NO_PADDING: 3 };
                        require("constants");
                        var SIGN_INFO_HEAD = {
                            md2: Buffer.from(
                                "3020300c06082a864886f70d020205000410",
                                "hex"
                            ),
                            md5: Buffer.from(
                                "3020300c06082a864886f70d020505000410",
                                "hex"
                            ),
                            sha1: Buffer.from(
                                "3021300906052b0e03021a05000414",
                                "hex"
                            ),
                            sha224: Buffer.from(
                                "302d300d06096086480165030402040500041c",
                                "hex"
                            ),
                            sha256: Buffer.from(
                                "3031300d060960864801650304020105000420",
                                "hex"
                            ),
                            sha384: Buffer.from(
                                "3041300d060960864801650304020205000430",
                                "hex"
                            ),
                            sha512: Buffer.from(
                                "3051300d060960864801650304020305000440",
                                "hex"
                            ),
                            ripemd160: Buffer.from(
                                "3021300906052b2403020105000414",
                                "hex"
                            ),
                            rmd160: Buffer.from(
                                "3021300906052b2403020105000414",
                                "hex"
                            ),
                        };

                        var SIGN_ALG_TO_HASH_ALIASES = {
                            ripemd160: "rmd160",
                        };

                        var DEFAULT_HASH_FUNCTION = "sha256";

                        module.exports = {
                            isEncryption: true,
                            isSignature: true,
                        };

                        module.exports.makeScheme = function (key, options) {
                            function Scheme(key, options) {
                                this.key = key;
                                this.options = options;
                            }

                            Scheme.prototype.maxMessageLength = function () {
                                if (
                                    this.options.encryptionSchemeOptions &&
                                    this.options.encryptionSchemeOptions
                                        .padding == constants.RSA_NO_PADDING
                                ) {
                                    return this.key.encryptedDataLength;
                                }
                                return this.key.encryptedDataLength - 11;
                            };

                            /**
                             * Unpad input Buffer and, if valid, return the Buffer object
                             * alg: PKCS#1 (type 2, random)
                             * @param buffer
                             * @returns {Buffer}
                             */
                            Scheme.prototype.encUnPad = function (
                                buffer,
                                options
                            ) {
                                options = options || {};
                                var i = 0;

                                if (
                                    this.options.encryptionSchemeOptions &&
                                    this.options.encryptionSchemeOptions
                                        .padding == constants.RSA_NO_PADDING
                                ) {
                                    //RSA_NO_PADDING treated like JAVA left pad with zero character
                                    var unPad;
                                    if (
                                        typeof buffer.lastIndexOf == "function"
                                    ) {
                                        //patch for old node version
                                        unPad = buffer.slice(
                                            buffer.lastIndexOf("\0") + 1,
                                            buffer.length
                                        );
                                    } else {
                                        unPad = buffer.slice(
                                            String.prototype.lastIndexOf.call(
                                                buffer,
                                                "\0"
                                            ) + 1,
                                            buffer.length
                                        );
                                    }
                                    return unPad;
                                }

                                if (buffer.length < 4) {
                                    return null;
                                }

                                /* Type 1: zeros padding for private key decrypt */
                                if (options.type === 1) {
                                    if (buffer[0] !== 0 && buffer[1] !== 1) {
                                        return null;
                                    }
                                    i = 3;
                                    while (buffer[i] !== 0) {
                                        if (
                                            buffer[i] != 0xff ||
                                            ++i >= buffer.length
                                        ) {
                                            return null;
                                        }
                                    }
                                } else {
                                    /* random padding for public key decrypt */
                                    if (buffer[0] !== 0 && buffer[1] !== 2) {
                                        return null;
                                    }
                                    i = 3;
                                    while (buffer[i] !== 0) {
                                        if (++i >= buffer.length) {
                                            return null;
                                        }
                                    }
                                }
                                return buffer.slice(i + 1, buffer.length);
                            };

                            Scheme.prototype.sign = function (buffer) {
                                var hashAlgorithm =
                                    this.options.signingSchemeOptions.hash ||
                                    DEFAULT_HASH_FUNCTION;
                                if (this.options.environment === "browser") {
                                    hashAlgorithm =
                                        SIGN_ALG_TO_HASH_ALIASES[
                                            hashAlgorithm
                                        ] || hashAlgorithm;
                                    var hasher = CryptoJS[
                                        hashAlgorithm.toUpperCase()
                                    ](buffer.toString());
                                    var asBuffer = wordArrayToBuffer(hasher);
                                    var paddedHash = this.pkcs1pad(
                                        asBuffer,
                                        hashAlgorithm
                                    );
                                    var res = this.key
                                        .$doPrivate(new BigInteger(paddedHash))
                                        .toBuffer(this.key.encryptedDataLength);
                                    return res;
                                } else {
                                    throw new Error(
                                        "CCXT only supports browser mode :P"
                                    );
                                }
                            };

                            /**
                             * PKCS#1 pad input buffer to max data length
                             * @param hashBuf
                             * @param hashAlgorithm
                             * @returns {*}
                             */
                            Scheme.prototype.pkcs1pad = function (
                                hashBuf,
                                hashAlgorithm
                            ) {
                                var digest = SIGN_INFO_HEAD[hashAlgorithm];
                                if (!digest) {
                                    throw Error("Unsupported hash algorithm");
                                }

                                var data = Buffer.concat([digest, hashBuf]);

                                if (
                                    data.length + 10 >
                                    this.key.encryptedDataLength
                                ) {
                                    throw Error(
                                        "Key is too short for signing algorithm (" +
                                            hashAlgorithm +
                                            ")"
                                    );
                                }

                                var filled = Buffer.alloc(
                                    this.key.encryptedDataLength -
                                        data.length -
                                        1
                                );
                                filled.fill(0xff, 0, filled.length - 1);
                                filled[0] = 1;
                                filled[filled.length - 1] = 0;

                                var res = Buffer.concat([filled, data]);

                                return res;
                            };

                            return new Scheme(key, options);
                        };

                        // used to convert `CryptoJS` wordArrays into `crypto` hex buffers
                        function wordToByteArray(word, length) {
                            var ba = [],
                                xFF = 0xff;
                            if (length > 0) ba.push(word >>> 24);
                            if (length > 1) ba.push((word >>> 16) & xFF);
                            if (length > 2) ba.push((word >>> 8) & xFF);
                            if (length > 3) ba.push(word & xFF);

                            return ba;
                        }

                        function wordArrayToBuffer(wordArray) {
                            let length = undefined;
                            if (
                                wordArray.hasOwnProperty("sigBytes") &&
                                wordArray.hasOwnProperty("words")
                            ) {
                                length = wordArray.sigBytes;
                                wordArray = wordArray.words;
                            } else {
                                throw Error("Argument not a wordArray");
                            }

                            const result = [];
                            let bytes = [];
                            let i = 0;
                            while (length > 0) {
                                bytes = wordToByteArray(
                                    wordArray[i],
                                    Math.min(4, length)
                                );
                                length -= bytes.length;
                                result.push(bytes);
                                i++;
                            }
                            return new Buffer.from(
                                [].concat.apply([], result),
                                "hex"
                            );
                        }
                    }.call(this));
                }.call(this, require("buffer").Buffer));
            },
            {
                "../../crypto-js/crypto-js": 33,
                "../libs/jsbn": 62,
                buffer: 80,
                constants: 82,
            },
        ],
        65: [
            function (require, module, exports) {
                module.exports = {
                    pkcs1: require("./pkcs1"),

                    /**
                     * Check if scheme has padding methods
                     * @param scheme {string}
                     * @returns {Boolean}
                     */
                    isEncryption: function (scheme) {
                        return (
                            module.exports[scheme] &&
                            module.exports[scheme].isEncryption
                        );
                    },

                    /**
                     * Check if scheme has sign/verify methods
                     * @param scheme {string}
                     * @returns {Boolean}
                     */
                    isSignature: function (scheme) {
                        return (
                            module.exports[scheme] &&
                            module.exports[scheme].isSignature
                        );
                    },
                };
            },
            { "./pkcs1": 64 },
        ],
        66: [
            function (require, module, exports) {
                /*
                 * Utils functions
                 *
                 */

                /**
                 * Break string str each maxLen symbols
                 * @param str
                 * @param maxLen
                 * @returns {string}
                 */
                module.exports.linebrk = function (str, maxLen) {
                    var res = "";
                    var i = 0;
                    while (i + maxLen < str.length) {
                        res += str.substring(i, i + maxLen) + "\n";
                        i += maxLen;
                    }
                    return res + str.substring(i, str.length);
                };

                /**
                 * Trying get a 32-bit unsigned integer from the partial buffer
                 * @param buffer
                 * @param offset
                 * @returns {Number}
                 */
                module.exports.get32IntFromBuffer = function (buffer, offset) {
                    offset = offset || 0;
                    var size = 0;
                    if ((size = buffer.length - offset) > 0) {
                        if (size >= 4) {
                            return buffer.readUInt32BE(offset);
                        } else {
                            var res = 0;
                            for (
                                var i = offset + size, d = 0;
                                i > offset;
                                i--, d += 2
                            ) {
                                res += buffer[i - 1] * Math.pow(16, d);
                            }
                            return res;
                        }
                    } else {
                        return NaN;
                    }
                };

                module.exports._ = {
                    isObject: function (value) {
                        var type = typeof value;
                        return (
                            !!value && (type == "object" || type == "function")
                        );
                    },

                    isString: function (value) {
                        return (
                            typeof value == "string" || value instanceof String
                        );
                    },

                    isNumber: function (value) {
                        return (
                            typeof value == "number" ||
                            (!isNaN(parseFloat(value)) && isFinite(value))
                        );
                    },

                    /**
                     * Returns copy of `obj` without `removeProp` field.
                     * @param obj
                     * @param removeProp
                     * @returns Object
                     */
                    omit: function (obj, removeProp) {
                        var newObj = {};
                        for (var prop in obj) {
                            if (
                                !obj.hasOwnProperty(prop) ||
                                prop === removeProp
                            ) {
                                continue;
                            }
                            newObj[prop] = obj[prop];
                        }

                        return newObj;
                    },
                };

                /**
                 * Strips everything around the opening and closing lines, including the lines
                 * themselves.
                 */
                module.exports.trimSurroundingText = function (
                    data,
                    opening,
                    closing
                ) {
                    var trimStartIndex = 0;
                    var trimEndIndex = data.length;

                    var openingBoundaryIndex = data.indexOf(opening);
                    if (openingBoundaryIndex >= 0) {
                        trimStartIndex = openingBoundaryIndex + opening.length;
                    }

                    var closingBoundaryIndex = data.indexOf(
                        closing,
                        openingBoundaryIndex
                    );
                    if (closingBoundaryIndex >= 0) {
                        trimEndIndex = closingBoundaryIndex;
                    }

                    return data.substring(trimStartIndex, trimEndIndex);
                };
            },
            {},
        ],
        67: [
            function (require, module, exports) {
                "use strict";

                var replace = String.prototype.replace;
                var percentTwenties = /%20/g;

                module.exports = {
                    default: "RFC3986",
                    formatters: {
                        RFC1738: function (value) {
                            return replace.call(value, percentTwenties, "+");
                        },
                        RFC3986: function (value) {
                            return value;
                        },
                    },
                    RFC1738: "RFC1738",
                    RFC3986: "RFC3986",
                };
            },
            {},
        ],
        68: [
            function (require, module, exports) {
                "use strict";

                var stringify = require("./stringify");
                var parse = require("./parse");
                var formats = require("./formats");

                module.exports = {
                    formats: formats,
                    parse: parse,
                    stringify: stringify,
                };
            },
            { "./formats": 67, "./parse": 69, "./stringify": 70 },
        ],
        69: [
            function (require, module, exports) {
                "use strict";

                var utils = require("./utils");

                var has = Object.prototype.hasOwnProperty;

                var defaults = {
                    allowDots: false,
                    allowPrototypes: false,
                    arrayLimit: 20,
                    charset: "utf-8",
                    charsetSentinel: false,
                    comma: false,
                    decoder: utils.decode,
                    delimiter: "&",
                    depth: 5,
                    ignoreQueryPrefix: false,
                    interpretNumericEntities: false,
                    parameterLimit: 1000,
                    parseArrays: true,
                    plainObjects: false,
                    strictNullHandling: false,
                };

                var interpretNumericEntities = function (str) {
                    return str.replace(/&#(\d+);/g, function ($0, numberStr) {
                        return String.fromCharCode(parseInt(numberStr, 10));
                    });
                };

                // This is what browsers will submit when the ✓ character occurs in an
                // application/x-www-form-urlencoded body and the encoding of the page containing
                // the form is iso-8859-1, or when the submitted form has an accept-charset
                // attribute of iso-8859-1. Presumably also with other charsets that do not contain
                // the ✓ character, such as us-ascii.
                var isoSentinel = "utf8=%26%2310003%3B"; // encodeURIComponent('&#10003;')

                // These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
                var charsetSentinel = "utf8=%E2%9C%93"; // encodeURIComponent('✓')

                var parseValues = function parseQueryStringValues(
                    str,
                    options
                ) {
                    var obj = {};
                    var cleanStr = options.ignoreQueryPrefix
                        ? str.replace(/^\?/, "")
                        : str;
                    var limit =
                        options.parameterLimit === Infinity
                            ? undefined
                            : options.parameterLimit;
                    var parts = cleanStr.split(options.delimiter, limit);
                    var skipIndex = -1; // Keep track of where the utf8 sentinel was found
                    var i;

                    var charset = options.charset;
                    if (options.charsetSentinel) {
                        for (i = 0; i < parts.length; ++i) {
                            if (parts[i].indexOf("utf8=") === 0) {
                                if (parts[i] === charsetSentinel) {
                                    charset = "utf-8";
                                } else if (parts[i] === isoSentinel) {
                                    charset = "iso-8859-1";
                                }
                                skipIndex = i;
                                i = parts.length; // The eslint settings do not allow break;
                            }
                        }
                    }

                    for (i = 0; i < parts.length; ++i) {
                        if (i === skipIndex) {
                            continue;
                        }
                        var part = parts[i];

                        var bracketEqualsPos = part.indexOf("]=");
                        var pos =
                            bracketEqualsPos === -1
                                ? part.indexOf("=")
                                : bracketEqualsPos + 1;

                        var key, val;
                        if (pos === -1) {
                            key = options.decoder(
                                part,
                                defaults.decoder,
                                charset
                            );
                            val = options.strictNullHandling ? null : "";
                        } else {
                            key = options.decoder(
                                part.slice(0, pos),
                                defaults.decoder,
                                charset
                            );
                            val = options.decoder(
                                part.slice(pos + 1),
                                defaults.decoder,
                                charset
                            );
                        }

                        if (
                            val &&
                            options.interpretNumericEntities &&
                            charset === "iso-8859-1"
                        ) {
                            val = interpretNumericEntities(val);
                        }

                        if (val && options.comma && val.indexOf(",") > -1) {
                            val = val.split(",");
                        }

                        if (has.call(obj, key)) {
                            obj[key] = utils.combine(obj[key], val);
                        } else {
                            obj[key] = val;
                        }
                    }

                    return obj;
                };

                var parseObject = function (chain, val, options) {
                    var leaf = val;

                    for (var i = chain.length - 1; i >= 0; --i) {
                        var obj;
                        var root = chain[i];

                        if (root === "[]" && options.parseArrays) {
                            obj = [].concat(leaf);
                        } else {
                            obj = options.plainObjects
                                ? Object.create(null)
                                : {};
                            var cleanRoot =
                                root.charAt(0) === "[" &&
                                root.charAt(root.length - 1) === "]"
                                    ? root.slice(1, -1)
                                    : root;
                            var index = parseInt(cleanRoot, 10);
                            if (!options.parseArrays && cleanRoot === "") {
                                obj = { 0: leaf };
                            } else if (
                                !isNaN(index) &&
                                root !== cleanRoot &&
                                String(index) === cleanRoot &&
                                index >= 0 &&
                                options.parseArrays &&
                                index <= options.arrayLimit
                            ) {
                                obj = [];
                                obj[index] = leaf;
                            } else {
                                obj[cleanRoot] = leaf;
                            }
                        }

                        leaf = obj;
                    }

                    return leaf;
                };

                var parseKeys = function parseQueryStringKeys(
                    givenKey,
                    val,
                    options
                ) {
                    if (!givenKey) {
                        return;
                    }

                    // Transform dot notation to bracket notation
                    var key = options.allowDots
                        ? givenKey.replace(/\.([^.[]+)/g, "[$1]")
                        : givenKey;

                    // The regex chunks

                    var brackets = /(\[[^[\]]*])/;
                    var child = /(\[[^[\]]*])/g;

                    // Get the parent

                    var segment = brackets.exec(key);
                    var parent = segment ? key.slice(0, segment.index) : key;

                    // Stash the parent if it exists

                    var keys = [];
                    if (parent) {
                        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
                        if (
                            !options.plainObjects &&
                            has.call(Object.prototype, parent)
                        ) {
                            if (!options.allowPrototypes) {
                                return;
                            }
                        }

                        keys.push(parent);
                    }

                    // Loop through children appending to the array until we hit depth

                    var i = 0;
                    while (
                        (segment = child.exec(key)) !== null &&
                        i < options.depth
                    ) {
                        i += 1;
                        if (
                            !options.plainObjects &&
                            has.call(Object.prototype, segment[1].slice(1, -1))
                        ) {
                            if (!options.allowPrototypes) {
                                return;
                            }
                        }
                        keys.push(segment[1]);
                    }

                    // If there's a remainder, just add whatever is left

                    if (segment) {
                        keys.push("[" + key.slice(segment.index) + "]");
                    }

                    return parseObject(keys, val, options);
                };

                var normalizeParseOptions = function normalizeParseOptions(
                    opts
                ) {
                    if (!opts) {
                        return defaults;
                    }

                    if (
                        opts.decoder !== null &&
                        opts.decoder !== undefined &&
                        typeof opts.decoder !== "function"
                    ) {
                        throw new TypeError("Decoder has to be a function.");
                    }

                    if (
                        typeof opts.charset !== "undefined" &&
                        opts.charset !== "utf-8" &&
                        opts.charset !== "iso-8859-1"
                    ) {
                        throw new Error(
                            "The charset option must be either utf-8, iso-8859-1, or undefined"
                        );
                    }
                    var charset =
                        typeof opts.charset === "undefined"
                            ? defaults.charset
                            : opts.charset;

                    return {
                        allowDots:
                            typeof opts.allowDots === "undefined"
                                ? defaults.allowDots
                                : !!opts.allowDots,
                        allowPrototypes:
                            typeof opts.allowPrototypes === "boolean"
                                ? opts.allowPrototypes
                                : defaults.allowPrototypes,
                        arrayLimit:
                            typeof opts.arrayLimit === "number"
                                ? opts.arrayLimit
                                : defaults.arrayLimit,
                        charset: charset,
                        charsetSentinel:
                            typeof opts.charsetSentinel === "boolean"
                                ? opts.charsetSentinel
                                : defaults.charsetSentinel,
                        comma:
                            typeof opts.comma === "boolean"
                                ? opts.comma
                                : defaults.comma,
                        decoder:
                            typeof opts.decoder === "function"
                                ? opts.decoder
                                : defaults.decoder,
                        delimiter:
                            typeof opts.delimiter === "string" ||
                            utils.isRegExp(opts.delimiter)
                                ? opts.delimiter
                                : defaults.delimiter,
                        depth:
                            typeof opts.depth === "number"
                                ? opts.depth
                                : defaults.depth,
                        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
                        interpretNumericEntities:
                            typeof opts.interpretNumericEntities === "boolean"
                                ? opts.interpretNumericEntities
                                : defaults.interpretNumericEntities,
                        parameterLimit:
                            typeof opts.parameterLimit === "number"
                                ? opts.parameterLimit
                                : defaults.parameterLimit,
                        parseArrays: opts.parseArrays !== false,
                        plainObjects:
                            typeof opts.plainObjects === "boolean"
                                ? opts.plainObjects
                                : defaults.plainObjects,
                        strictNullHandling:
                            typeof opts.strictNullHandling === "boolean"
                                ? opts.strictNullHandling
                                : defaults.strictNullHandling,
                    };
                };

                module.exports = function (str, opts) {
                    var options = normalizeParseOptions(opts);

                    if (
                        str === "" ||
                        str === null ||
                        typeof str === "undefined"
                    ) {
                        return options.plainObjects ? Object.create(null) : {};
                    }

                    var tempObj =
                        typeof str === "string"
                            ? parseValues(str, options)
                            : str;
                    var obj = options.plainObjects ? Object.create(null) : {};

                    // Iterate over the keys and setup the new object

                    var keys = Object.keys(tempObj);
                    for (var i = 0; i < keys.length; ++i) {
                        var key = keys[i];
                        var newObj = parseKeys(key, tempObj[key], options);
                        obj = utils.merge(obj, newObj, options);
                    }

                    return utils.compact(obj);
                };
            },
            { "./utils": 71 },
        ],
        70: [
            function (require, module, exports) {
                "use strict";

                var utils = require("./utils");
                var formats = require("./formats");
                var has = Object.prototype.hasOwnProperty;

                var arrayPrefixGenerators = {
                    brackets: function brackets(prefix) {
                        // eslint-disable-line func-name-matching
                        return prefix + "[]";
                    },
                    comma: "comma",
                    indices: function indices(prefix, key) {
                        // eslint-disable-line func-name-matching
                        return prefix + "[" + key + "]";
                    },
                    repeat: function repeat(prefix) {
                        // eslint-disable-line func-name-matching
                        return prefix;
                    },
                };

                var isArray = Array.isArray;
                var push = Array.prototype.push;
                var pushToArray = function (arr, valueOrArray) {
                    push.apply(
                        arr,
                        isArray(valueOrArray) ? valueOrArray : [valueOrArray]
                    );
                };

                var toISO = Date.prototype.toISOString;

                var defaults = {
                    addQueryPrefix: false,
                    allowDots: false,
                    charset: "utf-8",
                    charsetSentinel: false,
                    delimiter: "&",
                    encode: true,
                    encoder: utils.encode,
                    encodeValuesOnly: false,
                    formatter: formats.formatters[formats["default"]],
                    // deprecated
                    indices: false,
                    serializeDate: function serializeDate(date) {
                        // eslint-disable-line func-name-matching
                        return toISO.call(date);
                    },
                    skipNulls: false,
                    strictNullHandling: false,
                };

                var stringify = function stringify( // eslint-disable-line func-name-matching
                    object,
                    prefix,
                    generateArrayPrefix,
                    strictNullHandling,
                    skipNulls,
                    encoder,
                    filter,
                    sort,
                    allowDots,
                    serializeDate,
                    formatter,
                    encodeValuesOnly,
                    charset
                ) {
                    var obj = object;
                    if (typeof filter === "function") {
                        obj = filter(prefix, obj);
                    } else if (obj instanceof Date) {
                        obj = serializeDate(obj);
                    } else if (
                        generateArrayPrefix === "comma" &&
                        isArray(obj)
                    ) {
                        obj = obj.join(",");
                    }

                    if (obj === null) {
                        if (strictNullHandling) {
                            return encoder && !encodeValuesOnly
                                ? encoder(prefix, defaults.encoder, charset)
                                : prefix;
                        }

                        obj = "";
                    }

                    if (
                        typeof obj === "string" ||
                        typeof obj === "number" ||
                        typeof obj === "boolean" ||
                        utils.isBuffer(obj)
                    ) {
                        if (encoder) {
                            var keyValue = encodeValuesOnly
                                ? prefix
                                : encoder(prefix, defaults.encoder, charset);
                            return [
                                formatter(keyValue) +
                                    "=" +
                                    formatter(
                                        encoder(obj, defaults.encoder, charset)
                                    ),
                            ];
                        }
                        return [
                            formatter(prefix) + "=" + formatter(String(obj)),
                        ];
                    }

                    var values = [];

                    if (typeof obj === "undefined") {
                        return values;
                    }

                    var objKeys;
                    if (isArray(filter)) {
                        objKeys = filter;
                    } else {
                        var keys = Object.keys(obj);
                        objKeys = sort ? keys.sort(sort) : keys;
                    }

                    for (var i = 0; i < objKeys.length; ++i) {
                        var key = objKeys[i];

                        if (skipNulls && obj[key] === null) {
                            continue;
                        }

                        if (isArray(obj)) {
                            pushToArray(
                                values,
                                stringify(
                                    obj[key],
                                    typeof generateArrayPrefix === "function"
                                        ? generateArrayPrefix(prefix, key)
                                        : prefix,
                                    generateArrayPrefix,
                                    strictNullHandling,
                                    skipNulls,
                                    encoder,
                                    filter,
                                    sort,
                                    allowDots,
                                    serializeDate,
                                    formatter,
                                    encodeValuesOnly,
                                    charset
                                )
                            );
                        } else {
                            pushToArray(
                                values,
                                stringify(
                                    obj[key],
                                    prefix +
                                        (allowDots
                                            ? "." + key
                                            : "[" + key + "]"),
                                    generateArrayPrefix,
                                    strictNullHandling,
                                    skipNulls,
                                    encoder,
                                    filter,
                                    sort,
                                    allowDots,
                                    serializeDate,
                                    formatter,
                                    encodeValuesOnly,
                                    charset
                                )
                            );
                        }
                    }

                    return values;
                };

                var normalizeStringifyOptions =
                    function normalizeStringifyOptions(opts) {
                        if (!opts) {
                            return defaults;
                        }

                        if (
                            opts.encoder !== null &&
                            opts.encoder !== undefined &&
                            typeof opts.encoder !== "function"
                        ) {
                            throw new TypeError(
                                "Encoder has to be a function."
                            );
                        }

                        var charset = opts.charset || defaults.charset;
                        if (
                            typeof opts.charset !== "undefined" &&
                            opts.charset !== "utf-8" &&
                            opts.charset !== "iso-8859-1"
                        ) {
                            throw new TypeError(
                                "The charset option must be either utf-8, iso-8859-1, or undefined"
                            );
                        }

                        var format = formats["default"];
                        if (typeof opts.format !== "undefined") {
                            if (!has.call(formats.formatters, opts.format)) {
                                throw new TypeError(
                                    "Unknown format option provided."
                                );
                            }
                            format = opts.format;
                        }
                        var formatter = formats.formatters[format];

                        var filter = defaults.filter;
                        if (
                            typeof opts.filter === "function" ||
                            isArray(opts.filter)
                        ) {
                            filter = opts.filter;
                        }

                        return {
                            addQueryPrefix:
                                typeof opts.addQueryPrefix === "boolean"
                                    ? opts.addQueryPrefix
                                    : defaults.addQueryPrefix,
                            allowDots:
                                typeof opts.allowDots === "undefined"
                                    ? defaults.allowDots
                                    : !!opts.allowDots,
                            charset: charset,
                            charsetSentinel:
                                typeof opts.charsetSentinel === "boolean"
                                    ? opts.charsetSentinel
                                    : defaults.charsetSentinel,
                            delimiter:
                                typeof opts.delimiter === "undefined"
                                    ? defaults.delimiter
                                    : opts.delimiter,
                            encode:
                                typeof opts.encode === "boolean"
                                    ? opts.encode
                                    : defaults.encode,
                            encoder:
                                typeof opts.encoder === "function"
                                    ? opts.encoder
                                    : defaults.encoder,
                            encodeValuesOnly:
                                typeof opts.encodeValuesOnly === "boolean"
                                    ? opts.encodeValuesOnly
                                    : defaults.encodeValuesOnly,
                            filter: filter,
                            formatter: formatter,
                            serializeDate:
                                typeof opts.serializeDate === "function"
                                    ? opts.serializeDate
                                    : defaults.serializeDate,
                            skipNulls:
                                typeof opts.skipNulls === "boolean"
                                    ? opts.skipNulls
                                    : defaults.skipNulls,
                            sort:
                                typeof opts.sort === "function"
                                    ? opts.sort
                                    : null,
                            strictNullHandling:
                                typeof opts.strictNullHandling === "boolean"
                                    ? opts.strictNullHandling
                                    : defaults.strictNullHandling,
                        };
                    };

                module.exports = function (object, opts) {
                    var obj = object;
                    var options = normalizeStringifyOptions(opts);

                    var objKeys;
                    var filter;

                    if (typeof options.filter === "function") {
                        filter = options.filter;
                        obj = filter("", obj);
                    } else if (isArray(options.filter)) {
                        filter = options.filter;
                        objKeys = filter;
                    }

                    var keys = [];

                    if (typeof obj !== "object" || obj === null) {
                        return "";
                    }

                    var arrayFormat;
                    if (opts && opts.arrayFormat in arrayPrefixGenerators) {
                        arrayFormat = opts.arrayFormat;
                    } else if (opts && "indices" in opts) {
                        arrayFormat = opts.indices ? "indices" : "repeat";
                    } else {
                        arrayFormat = "indices";
                    }

                    var generateArrayPrefix =
                        arrayPrefixGenerators[arrayFormat];

                    if (!objKeys) {
                        objKeys = Object.keys(obj);
                    }

                    if (options.sort) {
                        objKeys.sort(options.sort);
                    }

                    for (var i = 0; i < objKeys.length; ++i) {
                        var key = objKeys[i];

                        if (options.skipNulls && obj[key] === null) {
                            continue;
                        }
                        pushToArray(
                            keys,
                            stringify(
                                obj[key],
                                key,
                                generateArrayPrefix,
                                options.strictNullHandling,
                                options.skipNulls,
                                options.encode ? options.encoder : null,
                                options.filter,
                                options.sort,
                                options.allowDots,
                                options.serializeDate,
                                options.formatter,
                                options.encodeValuesOnly,
                                options.charset
                            )
                        );
                    }

                    var joined = keys.join(options.delimiter);
                    var prefix = options.addQueryPrefix === true ? "?" : "";

                    if (options.charsetSentinel) {
                        if (options.charset === "iso-8859-1") {
                            // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
                            prefix += "utf8=%26%2310003%3B&";
                        } else {
                            // encodeURIComponent('✓')
                            prefix += "utf8=%E2%9C%93&";
                        }
                    }

                    return joined.length > 0 ? prefix + joined : "";
                };
            },
            { "./formats": 67, "./utils": 71 },
        ],
        71: [
            function (require, module, exports) {
                "use strict";

                var has = Object.prototype.hasOwnProperty;
                var isArray = Array.isArray;

                var hexTable = (function () {
                    var array = [];
                    for (var i = 0; i < 256; ++i) {
                        array.push(
                            "%" +
                                (
                                    (i < 16 ? "0" : "") + i.toString(16)
                                ).toUpperCase()
                        );
                    }

                    return array;
                })();

                var compactQueue = function compactQueue(queue) {
                    while (queue.length > 1) {
                        var item = queue.pop();
                        var obj = item.obj[item.prop];

                        if (isArray(obj)) {
                            var compacted = [];

                            for (var j = 0; j < obj.length; ++j) {
                                if (typeof obj[j] !== "undefined") {
                                    compacted.push(obj[j]);
                                }
                            }

                            item.obj[item.prop] = compacted;
                        }
                    }
                };

                var arrayToObject = function arrayToObject(source, options) {
                    var obj =
                        options && options.plainObjects
                            ? Object.create(null)
                            : {};
                    for (var i = 0; i < source.length; ++i) {
                        if (typeof source[i] !== "undefined") {
                            obj[i] = source[i];
                        }
                    }

                    return obj;
                };

                var merge = function merge(target, source, options) {
                    if (!source) {
                        return target;
                    }

                    if (typeof source !== "object") {
                        if (isArray(target)) {
                            target.push(source);
                        } else if (target && typeof target === "object") {
                            if (
                                (options &&
                                    (options.plainObjects ||
                                        options.allowPrototypes)) ||
                                !has.call(Object.prototype, source)
                            ) {
                                target[source] = true;
                            }
                        } else {
                            return [target, source];
                        }

                        return target;
                    }

                    if (!target || typeof target !== "object") {
                        return [target].concat(source);
                    }

                    var mergeTarget = target;
                    if (isArray(target) && !isArray(source)) {
                        mergeTarget = arrayToObject(target, options);
                    }

                    if (isArray(target) && isArray(source)) {
                        source.forEach(function (item, i) {
                            if (has.call(target, i)) {
                                var targetItem = target[i];
                                if (
                                    targetItem &&
                                    typeof targetItem === "object" &&
                                    item &&
                                    typeof item === "object"
                                ) {
                                    target[i] = merge(
                                        targetItem,
                                        item,
                                        options
                                    );
                                } else {
                                    target.push(item);
                                }
                            } else {
                                target[i] = item;
                            }
                        });
                        return target;
                    }

                    return Object.keys(source).reduce(function (acc, key) {
                        var value = source[key];

                        if (has.call(acc, key)) {
                            acc[key] = merge(acc[key], value, options);
                        } else {
                            acc[key] = value;
                        }
                        return acc;
                    }, mergeTarget);
                };

                var assign = function assignSingleSource(target, source) {
                    return Object.keys(source).reduce(function (acc, key) {
                        acc[key] = source[key];
                        return acc;
                    }, target);
                };

                var decode = function (str, decoder, charset) {
                    var strWithoutPlus = str.replace(/\+/g, " ");
                    if (charset === "iso-8859-1") {
                        // unescape never throws, no try...catch needed:
                        return strWithoutPlus.replace(
                            /%[0-9a-f]{2}/gi,
                            unescape
                        );
                    }
                    // utf-8
                    try {
                        return decodeURIComponent(strWithoutPlus);
                    } catch (e) {
                        return strWithoutPlus;
                    }
                };

                var encode = function encode(str, defaultEncoder, charset) {
                    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
                    // It has been adapted here for stricter adherence to RFC 3986
                    if (str.length === 0) {
                        return str;
                    }

                    var string = typeof str === "string" ? str : String(str);

                    if (charset === "iso-8859-1") {
                        return escape(string).replace(
                            /%u[0-9a-f]{4}/gi,
                            function ($0) {
                                return (
                                    "%26%23" + parseInt($0.slice(2), 16) + "%3B"
                                );
                            }
                        );
                    }

                    var out = "";
                    for (var i = 0; i < string.length; ++i) {
                        var c = string.charCodeAt(i);

                        if (
                            c === 0x2d || // -
                            c === 0x2e || // .
                            c === 0x5f || // _
                            c === 0x7e || // ~
                            (c >= 0x30 && c <= 0x39) || // 0-9
                            (c >= 0x41 && c <= 0x5a) || // a-z
                            (c >= 0x61 && c <= 0x7a) // A-Z
                        ) {
                            out += string.charAt(i);
                            continue;
                        }

                        if (c < 0x80) {
                            out = out + hexTable[c];
                            continue;
                        }

                        if (c < 0x800) {
                            out =
                                out +
                                (hexTable[0xc0 | (c >> 6)] +
                                    hexTable[0x80 | (c & 0x3f)]);
                            continue;
                        }

                        if (c < 0xd800 || c >= 0xe000) {
                            out =
                                out +
                                (hexTable[0xe0 | (c >> 12)] +
                                    hexTable[0x80 | ((c >> 6) & 0x3f)] +
                                    hexTable[0x80 | (c & 0x3f)]);
                            continue;
                        }

                        i += 1;
                        c =
                            0x10000 +
                            (((c & 0x3ff) << 10) |
                                (string.charCodeAt(i) & 0x3ff));
                        out +=
                            hexTable[0xf0 | (c >> 18)] +
                            hexTable[0x80 | ((c >> 12) & 0x3f)] +
                            hexTable[0x80 | ((c >> 6) & 0x3f)] +
                            hexTable[0x80 | (c & 0x3f)];
                    }

                    return out;
                };

                var compact = function compact(value) {
                    var queue = [{ obj: { o: value }, prop: "o" }];
                    var refs = [];

                    for (var i = 0; i < queue.length; ++i) {
                        var item = queue[i];
                        var obj = item.obj[item.prop];

                        var keys = Object.keys(obj);
                        for (var j = 0; j < keys.length; ++j) {
                            var key = keys[j];
                            var val = obj[key];
                            if (
                                typeof val === "object" &&
                                val !== null &&
                                refs.indexOf(val) === -1
                            ) {
                                queue.push({ obj: obj, prop: key });
                                refs.push(val);
                            }
                        }
                    }

                    compactQueue(queue);

                    return value;
                };

                var isRegExp = function isRegExp(obj) {
                    return (
                        Object.prototype.toString.call(obj) ===
                        "[object RegExp]"
                    );
                };

                var isBuffer = function isBuffer(obj) {
                    if (!obj || typeof obj !== "object") {
                        return false;
                    }

                    return !!(
                        obj.constructor &&
                        obj.constructor.isBuffer &&
                        obj.constructor.isBuffer(obj)
                    );
                };

                var combine = function combine(a, b) {
                    return [].concat(a, b);
                };

                module.exports = {
                    arrayToObject: arrayToObject,
                    assign: assign,
                    combine: combine,
                    compact: compact,
                    decode: decode,
                    encode: encode,
                    isBuffer: isBuffer,
                    isRegExp: isRegExp,
                    merge: merge,
                };
            },
            {},
        ],
        72: [
            function (require, module, exports) {
                (function (global) {
                    (function () {
                        "use strict";

                        var objectAssign = require("object-assign");

                        // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
                        // original notice:

                        /*!
                         * The buffer module from node.js, for the browser.
                         *
                         * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
                         * @license  MIT
                         */
                        function compare(a, b) {
                            if (a === b) {
                                return 0;
                            }

                            var x = a.length;
                            var y = b.length;

                            for (
                                var i = 0, len = Math.min(x, y);
                                i < len;
                                ++i
                            ) {
                                if (a[i] !== b[i]) {
                                    x = a[i];
                                    y = b[i];
                                    break;
                                }
                            }

                            if (x < y) {
                                return -1;
                            }
                            if (y < x) {
                                return 1;
                            }
                            return 0;
                        }
                        function isBuffer(b) {
                            if (
                                global.Buffer &&
                                typeof global.Buffer.isBuffer === "function"
                            ) {
                                return global.Buffer.isBuffer(b);
                            }
                            return !!(b != null && b._isBuffer);
                        }

                        // based on node assert, original notice:
                        // NB: The URL to the CommonJS spec is kept just for tradition.
                        //     node-assert has evolved a lot since then, both in API and behavior.

                        // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
                        //
                        // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
                        //
                        // Originally from narwhal.js (http://narwhaljs.org)
                        // Copyright (c) 2009 Thomas Robinson <280north.com>
                        //
                        // Permission is hereby granted, free of charge, to any person obtaining a copy
                        // of this software and associated documentation files (the 'Software'), to
                        // deal in the Software without restriction, including without limitation the
                        // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
                        // sell copies of the Software, and to permit persons to whom the Software is
                        // furnished to do so, subject to the following conditions:
                        //
                        // The above copyright notice and this permission notice shall be included in
                        // all copies or substantial portions of the Software.
                        //
                        // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                        // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                        // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                        // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
                        // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
                        // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

                        var util = require("util/");
                        var hasOwn = Object.prototype.hasOwnProperty;
                        var pSlice = Array.prototype.slice;
                        var functionsHaveNames = (function () {
                            return function foo() {}.name === "foo";
                        })();
                        function pToString(obj) {
                            return Object.prototype.toString.call(obj);
                        }
                        function isView(arrbuf) {
                            if (isBuffer(arrbuf)) {
                                return false;
                            }
                            if (typeof global.ArrayBuffer !== "function") {
                                return false;
                            }
                            if (typeof ArrayBuffer.isView === "function") {
                                return ArrayBuffer.isView(arrbuf);
                            }
                            if (!arrbuf) {
                                return false;
                            }
                            if (arrbuf instanceof DataView) {
                                return true;
                            }
                            if (
                                arrbuf.buffer &&
                                arrbuf.buffer instanceof ArrayBuffer
                            ) {
                                return true;
                            }
                            return false;
                        }
                        // 1. The assert module provides functions that throw
                        // AssertionError's when particular conditions are not met. The
                        // assert module must conform to the following interface.

                        var assert = (module.exports = ok);

                        // 2. The AssertionError is defined in assert.
                        // new assert.AssertionError({ message: message,
                        //                             actual: actual,
                        //                             expected: expected })

                        var regex = /\s*function\s+([^\(\s]*)\s*/;
                        // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
                        function getName(func) {
                            if (!util.isFunction(func)) {
                                return;
                            }
                            if (functionsHaveNames) {
                                return func.name;
                            }
                            var str = func.toString();
                            var match = str.match(regex);
                            return match && match[1];
                        }
                        assert.AssertionError = function AssertionError(
                            options
                        ) {
                            this.name = "AssertionError";
                            this.actual = options.actual;
                            this.expected = options.expected;
                            this.operator = options.operator;
                            if (options.message) {
                                this.message = options.message;
                                this.generatedMessage = false;
                            } else {
                                this.message = getMessage(this);
                                this.generatedMessage = true;
                            }
                            var stackStartFunction =
                                options.stackStartFunction || fail;
                            if (Error.captureStackTrace) {
                                Error.captureStackTrace(
                                    this,
                                    stackStartFunction
                                );
                            } else {
                                // non v8 browsers so we can have a stacktrace
                                var err = new Error();
                                if (err.stack) {
                                    var out = err.stack;

                                    // try to strip useless frames
                                    var fn_name = getName(stackStartFunction);
                                    var idx = out.indexOf("\n" + fn_name);
                                    if (idx >= 0) {
                                        // once we have located the function frame
                                        // we need to strip out everything before it (and its line)
                                        var next_line = out.indexOf(
                                            "\n",
                                            idx + 1
                                        );
                                        out = out.substring(next_line + 1);
                                    }

                                    this.stack = out;
                                }
                            }
                        };

                        // assert.AssertionError instanceof Error
                        util.inherits(assert.AssertionError, Error);

                        function truncate(s, n) {
                            if (typeof s === "string") {
                                return s.length < n ? s : s.slice(0, n);
                            } else {
                                return s;
                            }
                        }
                        function inspect(something) {
                            if (
                                functionsHaveNames ||
                                !util.isFunction(something)
                            ) {
                                return util.inspect(something);
                            }
                            var rawname = getName(something);
                            var name = rawname ? ": " + rawname : "";
                            return "[Function" + name + "]";
                        }
                        function getMessage(self) {
                            return (
                                truncate(inspect(self.actual), 128) +
                                " " +
                                self.operator +
                                " " +
                                truncate(inspect(self.expected), 128)
                            );
                        }

                        // At present only the three keys mentioned above are used and
                        // understood by the spec. Implementations or sub modules can pass
                        // other keys to the AssertionError's constructor - they will be
                        // ignored.

                        // 3. All of the following functions must throw an AssertionError
                        // when a corresponding condition is not met, with a message that
                        // may be undefined if not provided.  All assertion methods provide
                        // both the actual and expected values to the assertion error for
                        // display purposes.

                        function fail(
                            actual,
                            expected,
                            message,
                            operator,
                            stackStartFunction
                        ) {
                            throw new assert.AssertionError({
                                message: message,
                                actual: actual,
                                expected: expected,
                                operator: operator,
                                stackStartFunction: stackStartFunction,
                            });
                        }

                        // EXTENSION! allows for well behaved errors defined elsewhere.
                        assert.fail = fail;

                        // 4. Pure assertion tests whether a value is truthy, as determined
                        // by !!guard.
                        // assert.ok(guard, message_opt);
                        // This statement is equivalent to assert.equal(true, !!guard,
                        // message_opt);. To test strictly for the value true, use
                        // assert.strictEqual(true, guard, message_opt);.

                        function ok(value, message) {
                            if (!value)
                                fail(value, true, message, "==", assert.ok);
                        }
                        assert.ok = ok;

                        // 5. The equality assertion tests shallow, coercive equality with
                        // ==.
                        // assert.equal(actual, expected, message_opt);

                        assert.equal = function equal(
                            actual,
                            expected,
                            message
                        ) {
                            if (actual != expected)
                                fail(
                                    actual,
                                    expected,
                                    message,
                                    "==",
                                    assert.equal
                                );
                        };

                        // 6. The non-equality assertion tests for whether two objects are not equal
                        // with != assert.notEqual(actual, expected, message_opt);

                        assert.notEqual = function notEqual(
                            actual,
                            expected,
                            message
                        ) {
                            if (actual == expected) {
                                fail(
                                    actual,
                                    expected,
                                    message,
                                    "!=",
                                    assert.notEqual
                                );
                            }
                        };

                        // 7. The equivalence assertion tests a deep equality relation.
                        // assert.deepEqual(actual, expected, message_opt);

                        assert.deepEqual = function deepEqual(
                            actual,
                            expected,
                            message
                        ) {
                            if (!_deepEqual(actual, expected, false)) {
                                fail(
                                    actual,
                                    expected,
                                    message,
                                    "deepEqual",
                                    assert.deepEqual
                                );
                            }
                        };

                        assert.deepStrictEqual = function deepStrictEqual(
                            actual,
                            expected,
                            message
                        ) {
                            if (!_deepEqual(actual, expected, true)) {
                                fail(
                                    actual,
                                    expected,
                                    message,
                                    "deepStrictEqual",
                                    assert.deepStrictEqual
                                );
                            }
                        };

                        function _deepEqual(actual, expected, strict, memos) {
                            // 7.1. All identical values are equivalent, as determined by ===.
                            if (actual === expected) {
                                return true;
                            } else if (isBuffer(actual) && isBuffer(expected)) {
                                return compare(actual, expected) === 0;

                                // 7.2. If the expected value is a Date object, the actual value is
                                // equivalent if it is also a Date object that refers to the same time.
                            } else if (
                                util.isDate(actual) &&
                                util.isDate(expected)
                            ) {
                                return actual.getTime() === expected.getTime();

                                // 7.3 If the expected value is a RegExp object, the actual value is
                                // equivalent if it is also a RegExp object with the same source and
                                // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
                            } else if (
                                util.isRegExp(actual) &&
                                util.isRegExp(expected)
                            ) {
                                return (
                                    actual.source === expected.source &&
                                    actual.global === expected.global &&
                                    actual.multiline === expected.multiline &&
                                    actual.lastIndex === expected.lastIndex &&
                                    actual.ignoreCase === expected.ignoreCase
                                );

                                // 7.4. Other pairs that do not both pass typeof value == 'object',
                                // equivalence is determined by ==.
                            } else if (
                                (actual === null ||
                                    typeof actual !== "object") &&
                                (expected === null ||
                                    typeof expected !== "object")
                            ) {
                                return strict
                                    ? actual === expected
                                    : actual == expected;

                                // If both values are instances of typed arrays, wrap their underlying
                                // ArrayBuffers in a Buffer each to increase performance
                                // This optimization requires the arrays to have the same type as checked by
                                // Object.prototype.toString (aka pToString). Never perform binary
                                // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
                                // bit patterns are not identical.
                            } else if (
                                isView(actual) &&
                                isView(expected) &&
                                pToString(actual) === pToString(expected) &&
                                !(
                                    actual instanceof Float32Array ||
                                    actual instanceof Float64Array
                                )
                            ) {
                                return (
                                    compare(
                                        new Uint8Array(actual.buffer),
                                        new Uint8Array(expected.buffer)
                                    ) === 0
                                );

                                // 7.5 For all other Object pairs, including Array objects, equivalence is
                                // determined by having the same number of owned properties (as verified
                                // with Object.prototype.hasOwnProperty.call), the same set of keys
                                // (although not necessarily the same order), equivalent values for every
                                // corresponding key, and an identical 'prototype' property. Note: this
                                // accounts for both named and indexed properties on Arrays.
                            } else if (
                                isBuffer(actual) !== isBuffer(expected)
                            ) {
                                return false;
                            } else {
                                memos = memos || { actual: [], expected: [] };

                                var actualIndex = memos.actual.indexOf(actual);
                                if (actualIndex !== -1) {
                                    if (
                                        actualIndex ===
                                        memos.expected.indexOf(expected)
                                    ) {
                                        return true;
                                    }
                                }

                                memos.actual.push(actual);
                                memos.expected.push(expected);

                                return objEquiv(
                                    actual,
                                    expected,
                                    strict,
                                    memos
                                );
                            }
                        }

                        function isArguments(object) {
                            return (
                                Object.prototype.toString.call(object) ==
                                "[object Arguments]"
                            );
                        }

                        function objEquiv(a, b, strict, actualVisitedObjects) {
                            if (
                                a === null ||
                                a === undefined ||
                                b === null ||
                                b === undefined
                            )
                                return false;
                            // if one is a primitive, the other must be same
                            if (util.isPrimitive(a) || util.isPrimitive(b))
                                return a === b;
                            if (
                                strict &&
                                Object.getPrototypeOf(a) !==
                                    Object.getPrototypeOf(b)
                            )
                                return false;
                            var aIsArgs = isArguments(a);
                            var bIsArgs = isArguments(b);
                            if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
                                return false;
                            if (aIsArgs) {
                                a = pSlice.call(a);
                                b = pSlice.call(b);
                                return _deepEqual(a, b, strict);
                            }
                            var ka = objectKeys(a);
                            var kb = objectKeys(b);
                            var key, i;
                            // having the same number of owned properties (keys incorporates
                            // hasOwnProperty)
                            if (ka.length !== kb.length) return false;
                            //the same set of keys (although not necessarily the same order),
                            ka.sort();
                            kb.sort();
                            //~~~cheap key test
                            for (i = ka.length - 1; i >= 0; i--) {
                                if (ka[i] !== kb[i]) return false;
                            }
                            //equivalent values for every corresponding key, and
                            //~~~possibly expensive deep test
                            for (i = ka.length - 1; i >= 0; i--) {
                                key = ka[i];
                                if (
                                    !_deepEqual(
                                        a[key],
                                        b[key],
                                        strict,
                                        actualVisitedObjects
                                    )
                                )
                                    return false;
                            }
                            return true;
                        }

                        // 8. The non-equivalence assertion tests for any deep inequality.
                        // assert.notDeepEqual(actual, expected, message_opt);

                        assert.notDeepEqual = function notDeepEqual(
                            actual,
                            expected,
                            message
                        ) {
                            if (_deepEqual(actual, expected, false)) {
                                fail(
                                    actual,
                                    expected,
                                    message,
                                    "notDeepEqual",
                                    assert.notDeepEqual
                                );
                            }
                        };

                        assert.notDeepStrictEqual = notDeepStrictEqual;
                        function notDeepStrictEqual(actual, expected, message) {
                            if (_deepEqual(actual, expected, true)) {
                                fail(
                                    actual,
                                    expected,
                                    message,
                                    "notDeepStrictEqual",
                                    notDeepStrictEqual
                                );
                            }
                        }

                        // 9. The strict equality assertion tests strict equality, as determined by ===.
                        // assert.strictEqual(actual, expected, message_opt);

                        assert.strictEqual = function strictEqual(
                            actual,
                            expected,
                            message
                        ) {
                            if (actual !== expected) {
                                fail(
                                    actual,
                                    expected,
                                    message,
                                    "===",
                                    assert.strictEqual
                                );
                            }
                        };

                        // 10. The strict non-equality assertion tests for strict inequality, as
                        // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

                        assert.notStrictEqual = function notStrictEqual(
                            actual,
                            expected,
                            message
                        ) {
                            if (actual === expected) {
                                fail(
                                    actual,
                                    expected,
                                    message,
                                    "!==",
                                    assert.notStrictEqual
                                );
                            }
                        };

                        function expectedException(actual, expected) {
                            if (!actual || !expected) {
                                return false;
                            }

                            if (
                                Object.prototype.toString.call(expected) ==
                                "[object RegExp]"
                            ) {
                                return expected.test(actual);
                            }

                            try {
                                if (actual instanceof expected) {
                                    return true;
                                }
                            } catch (e) {
                                // Ignore.  The instanceof check doesn't work for arrow functions.
                            }

                            if (Error.isPrototypeOf(expected)) {
                                return false;
                            }

                            return expected.call({}, actual) === true;
                        }

                        function _tryBlock(block) {
                            var error;
                            try {
                                block();
                            } catch (e) {
                                error = e;
                            }
                            return error;
                        }

                        function _throws(
                            shouldThrow,
                            block,
                            expected,
                            message
                        ) {
                            var actual;

                            if (typeof block !== "function") {
                                throw new TypeError(
                                    '"block" argument must be a function'
                                );
                            }

                            if (typeof expected === "string") {
                                message = expected;
                                expected = null;
                            }

                            actual = _tryBlock(block);

                            message =
                                (expected && expected.name
                                    ? " (" + expected.name + ")."
                                    : ".") + (message ? " " + message : ".");

                            if (shouldThrow && !actual) {
                                fail(
                                    actual,
                                    expected,
                                    "Missing expected exception" + message
                                );
                            }

                            var userProvidedMessage =
                                typeof message === "string";
                            var isUnwantedException =
                                !shouldThrow && util.isError(actual);
                            var isUnexpectedException =
                                !shouldThrow && actual && !expected;

                            if (
                                (isUnwantedException &&
                                    userProvidedMessage &&
                                    expectedException(actual, expected)) ||
                                isUnexpectedException
                            ) {
                                fail(
                                    actual,
                                    expected,
                                    "Got unwanted exception" + message
                                );
                            }

                            if (
                                (shouldThrow &&
                                    actual &&
                                    expected &&
                                    !expectedException(actual, expected)) ||
                                (!shouldThrow && actual)
                            ) {
                                throw actual;
                            }
                        }

                        // 11. Expected to throw an error:
                        // assert.throws(block, Error_opt, message_opt);

                        assert.throws = function (
                            block,
                            /*optional*/ error,
                            /*optional*/ message
                        ) {
                            _throws(true, block, error, message);
                        };

                        // EXTENSION! This is annoying to write outside this module.
                        assert.doesNotThrow = function (
                            block,
                            /*optional*/ error,
                            /*optional*/ message
                        ) {
                            _throws(false, block, error, message);
                        };

                        assert.ifError = function (err) {
                            if (err) throw err;
                        };

                        // Expose a strict only variant of assert
                        function strict(value, message) {
                            if (!value)
                                fail(value, true, message, "==", strict);
                        }
                        assert.strict = objectAssign(strict, assert, {
                            equal: assert.strictEqual,
                            deepEqual: assert.deepStrictEqual,
                            notEqual: assert.notStrictEqual,
                            notDeepEqual: assert.notDeepStrictEqual,
                        });
                        assert.strict.strict = assert.strict;

                        var objectKeys =
                            Object.keys ||
                            function (obj) {
                                var keys = [];
                                for (var key in obj) {
                                    if (hasOwn.call(obj, key)) keys.push(key);
                                }
                                return keys;
                            };
                    }.call(this));
                }.call(
                    this,
                    typeof global !== "undefined"
                        ? global
                        : typeof self !== "undefined"
                        ? self
                        : typeof window !== "undefined"
                        ? window
                        : {}
                ));
            },
            { "object-assign": 89, "util/": 75 },
        ],
        73: [
            function (require, module, exports) {
                if (typeof Object.create === "function") {
                    // implementation from standard node.js 'util' module
                    module.exports = function inherits(ctor, superCtor) {
                        ctor.super_ = superCtor;
                        ctor.prototype = Object.create(superCtor.prototype, {
                            constructor: {
                                value: ctor,
                                enumerable: false,
                                writable: true,
                                configurable: true,
                            },
                        });
                    };
                } else {
                    // old school shim for old browsers
                    module.exports = function inherits(ctor, superCtor) {
                        ctor.super_ = superCtor;
                        var TempCtor = function () {};
                        TempCtor.prototype = superCtor.prototype;
                        ctor.prototype = new TempCtor();
                        ctor.prototype.constructor = ctor;
                    };
                }
            },
            {},
        ],
        74: [
            function (require, module, exports) {
                module.exports = function isBuffer(arg) {
                    return (
                        arg &&
                        typeof arg === "object" &&
                        typeof arg.copy === "function" &&
                        typeof arg.fill === "function" &&
                        typeof arg.readUInt8 === "function"
                    );
                };
            },
            {},
        ],
        75: [
            function (require, module, exports) {
                (function (process, global) {
                    (function () {
                        // Copyright Joyent, Inc. and other Node contributors.
                        //
                        // Permission is hereby granted, free of charge, to any person obtaining a
                        // copy of this software and associated documentation files (the
                        // "Software"), to deal in the Software without restriction, including
                        // without limitation the rights to use, copy, modify, merge, publish,
                        // distribute, sublicense, and/or sell copies of the Software, and to permit
                        // persons to whom the Software is furnished to do so, subject to the
                        // following conditions:
                        //
                        // The above copyright notice and this permission notice shall be included
                        // in all copies or substantial portions of the Software.
                        //
                        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                        // USE OR OTHER DEALINGS IN THE SOFTWARE.

                        var formatRegExp = /%[sdj%]/g;
                        exports.format = function (f) {
                            if (!isString(f)) {
                                var objects = [];
                                for (var i = 0; i < arguments.length; i++) {
                                    objects.push(inspect(arguments[i]));
                                }
                                return objects.join(" ");
                            }

                            var i = 1;
                            var args = arguments;
                            var len = args.length;
                            var str = String(f).replace(
                                formatRegExp,
                                function (x) {
                                    if (x === "%%") return "%";
                                    if (i >= len) return x;
                                    switch (x) {
                                        case "%s":
                                            return String(args[i++]);
                                        case "%d":
                                            return Number(args[i++]);
                                        case "%j":
                                            try {
                                                return JSON.stringify(
                                                    args[i++]
                                                );
                                            } catch (_) {
                                                return "[Circular]";
                                            }
                                        default:
                                            return x;
                                    }
                                }
                            );
                            for (var x = args[i]; i < len; x = args[++i]) {
                                if (isNull(x) || !isObject(x)) {
                                    str += " " + x;
                                } else {
                                    str += " " + inspect(x);
                                }
                            }
                            return str;
                        };

                        // Mark that a method should not be used.
                        // Returns a modified function which warns once by default.
                        // If --no-deprecation is set, then it is a no-op.
                        exports.deprecate = function (fn, msg) {
                            // Allow for deprecating things in the process of starting up.
                            if (isUndefined(global.process)) {
                                return function () {
                                    return exports
                                        .deprecate(fn, msg)
                                        .apply(this, arguments);
                                };
                            }

                            if (process.noDeprecation === true) {
                                return fn;
                            }

                            var warned = false;
                            function deprecated() {
                                if (!warned) {
                                    if (process.throwDeprecation) {
                                        throw new Error(msg);
                                    } else if (process.traceDeprecation) {
                                        console.trace(msg);
                                    } else {
                                        console.error(msg);
                                    }
                                    warned = true;
                                }
                                return fn.apply(this, arguments);
                            }

                            return deprecated;
                        };

                        var debugs = {};
                        var debugEnviron;
                        exports.debuglog = function (set) {
                            if (isUndefined(debugEnviron))
                                debugEnviron = process.env.NODE_DEBUG || "";
                            set = set.toUpperCase();
                            if (!debugs[set]) {
                                if (
                                    new RegExp("\\b" + set + "\\b", "i").test(
                                        debugEnviron
                                    )
                                ) {
                                    var pid = process.pid;
                                    debugs[set] = function () {
                                        var msg = exports.format.apply(
                                            exports,
                                            arguments
                                        );
                                        console.error(
                                            "%s %d: %s",
                                            set,
                                            pid,
                                            msg
                                        );
                                    };
                                } else {
                                    debugs[set] = function () {};
                                }
                            }
                            return debugs[set];
                        };

                        /**
                         * Echos the value of a value. Trys to print the value out
                         * in the best way possible given the different types.
                         *
                         * @param {Object} obj The object to print out.
                         * @param {Object} opts Optional options object that alters the output.
                         */
                        /* legacy: obj, showHidden, depth, colors*/
                        function inspect(obj, opts) {
                            // default options
                            var ctx = {
                                seen: [],
                                stylize: stylizeNoColor,
                            };
                            // legacy...
                            if (arguments.length >= 3) ctx.depth = arguments[2];
                            if (arguments.length >= 4)
                                ctx.colors = arguments[3];
                            if (isBoolean(opts)) {
                                // legacy...
                                ctx.showHidden = opts;
                            } else if (opts) {
                                // got an "options" object
                                exports._extend(ctx, opts);
                            }
                            // set default options
                            if (isUndefined(ctx.showHidden))
                                ctx.showHidden = false;
                            if (isUndefined(ctx.depth)) ctx.depth = 2;
                            if (isUndefined(ctx.colors)) ctx.colors = false;
                            if (isUndefined(ctx.customInspect))
                                ctx.customInspect = true;
                            if (ctx.colors) ctx.stylize = stylizeWithColor;
                            return formatValue(ctx, obj, ctx.depth);
                        }
                        exports.inspect = inspect;

                        // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
                        inspect.colors = {
                            bold: [1, 22],
                            italic: [3, 23],
                            underline: [4, 24],
                            inverse: [7, 27],
                            white: [37, 39],
                            grey: [90, 39],
                            black: [30, 39],
                            blue: [34, 39],
                            cyan: [36, 39],
                            green: [32, 39],
                            magenta: [35, 39],
                            red: [31, 39],
                            yellow: [33, 39],
                        };

                        // Don't use 'blue' not visible on cmd.exe
                        inspect.styles = {
                            special: "cyan",
                            number: "yellow",
                            boolean: "yellow",
                            undefined: "grey",
                            null: "bold",
                            string: "green",
                            date: "magenta",
                            // "name": intentionally not styling
                            regexp: "red",
                        };

                        function stylizeWithColor(str, styleType) {
                            var style = inspect.styles[styleType];

                            if (style) {
                                return (
                                    "\u001b[" +
                                    inspect.colors[style][0] +
                                    "m" +
                                    str +
                                    "\u001b[" +
                                    inspect.colors[style][1] +
                                    "m"
                                );
                            } else {
                                return str;
                            }
                        }

                        function stylizeNoColor(str, styleType) {
                            return str;
                        }

                        function arrayToHash(array) {
                            var hash = {};

                            array.forEach(function (val, idx) {
                                hash[val] = true;
                            });

                            return hash;
                        }

                        function formatValue(ctx, value, recurseTimes) {
                            // Provide a hook for user-specified inspect functions.
                            // Check that value is an object with an inspect function on it
                            if (
                                ctx.customInspect &&
                                value &&
                                isFunction(value.inspect) &&
                                // Filter out the util module, it's inspect function is special
                                value.inspect !== exports.inspect &&
                                // Also filter out any prototype objects using the circular check.
                                !(
                                    value.constructor &&
                                    value.constructor.prototype === value
                                )
                            ) {
                                var ret = value.inspect(recurseTimes, ctx);
                                if (!isString(ret)) {
                                    ret = formatValue(ctx, ret, recurseTimes);
                                }
                                return ret;
                            }

                            // Primitive types cannot have properties
                            var primitive = formatPrimitive(ctx, value);
                            if (primitive) {
                                return primitive;
                            }

                            // Look up the keys of the object.
                            var keys = Object.keys(value);
                            var visibleKeys = arrayToHash(keys);

                            if (ctx.showHidden) {
                                keys = Object.getOwnPropertyNames(value);
                            }

                            // IE doesn't make error fields non-enumerable
                            // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
                            if (
                                isError(value) &&
                                (keys.indexOf("message") >= 0 ||
                                    keys.indexOf("description") >= 0)
                            ) {
                                return formatError(value);
                            }

                            // Some type of object without properties can be shortcutted.
                            if (keys.length === 0) {
                                if (isFunction(value)) {
                                    var name = value.name
                                        ? ": " + value.name
                                        : "";
                                    return ctx.stylize(
                                        "[Function" + name + "]",
                                        "special"
                                    );
                                }
                                if (isRegExp(value)) {
                                    return ctx.stylize(
                                        RegExp.prototype.toString.call(value),
                                        "regexp"
                                    );
                                }
                                if (isDate(value)) {
                                    return ctx.stylize(
                                        Date.prototype.toString.call(value),
                                        "date"
                                    );
                                }
                                if (isError(value)) {
                                    return formatError(value);
                                }
                            }

                            var base = "",
                                array = false,
                                braces = ["{", "}"];

                            // Make Array say that they are Array
                            if (isArray(value)) {
                                array = true;
                                braces = ["[", "]"];
                            }

                            // Make functions say that they are functions
                            if (isFunction(value)) {
                                var n = value.name ? ": " + value.name : "";
                                base = " [Function" + n + "]";
                            }

                            // Make RegExps say that they are RegExps
                            if (isRegExp(value)) {
                                base =
                                    " " + RegExp.prototype.toString.call(value);
                            }

                            // Make dates with properties first say the date
                            if (isDate(value)) {
                                base =
                                    " " +
                                    Date.prototype.toUTCString.call(value);
                            }

                            // Make error with message first say the error
                            if (isError(value)) {
                                base = " " + formatError(value);
                            }

                            if (
                                keys.length === 0 &&
                                (!array || value.length == 0)
                            ) {
                                return braces[0] + base + braces[1];
                            }

                            if (recurseTimes < 0) {
                                if (isRegExp(value)) {
                                    return ctx.stylize(
                                        RegExp.prototype.toString.call(value),
                                        "regexp"
                                    );
                                } else {
                                    return ctx.stylize("[Object]", "special");
                                }
                            }

                            ctx.seen.push(value);

                            var output;
                            if (array) {
                                output = formatArray(
                                    ctx,
                                    value,
                                    recurseTimes,
                                    visibleKeys,
                                    keys
                                );
                            } else {
                                output = keys.map(function (key) {
                                    return formatProperty(
                                        ctx,
                                        value,
                                        recurseTimes,
                                        visibleKeys,
                                        key,
                                        array
                                    );
                                });
                            }

                            ctx.seen.pop();

                            return reduceToSingleString(output, base, braces);
                        }

                        function formatPrimitive(ctx, value) {
                            if (isUndefined(value))
                                return ctx.stylize("undefined", "undefined");
                            if (isString(value)) {
                                var simple =
                                    "'" +
                                    JSON.stringify(value)
                                        .replace(/^"|"$/g, "")
                                        .replace(/'/g, "\\'")
                                        .replace(/\\"/g, '"') +
                                    "'";
                                return ctx.stylize(simple, "string");
                            }
                            if (isNumber(value))
                                return ctx.stylize("" + value, "number");
                            if (isBoolean(value))
                                return ctx.stylize("" + value, "boolean");
                            // For some reason typeof null is "object", so special case here.
                            if (isNull(value))
                                return ctx.stylize("null", "null");
                        }

                        function formatError(value) {
                            return (
                                "[" + Error.prototype.toString.call(value) + "]"
                            );
                        }

                        function formatArray(
                            ctx,
                            value,
                            recurseTimes,
                            visibleKeys,
                            keys
                        ) {
                            var output = [];
                            for (var i = 0, l = value.length; i < l; ++i) {
                                if (hasOwnProperty(value, String(i))) {
                                    output.push(
                                        formatProperty(
                                            ctx,
                                            value,
                                            recurseTimes,
                                            visibleKeys,
                                            String(i),
                                            true
                                        )
                                    );
                                } else {
                                    output.push("");
                                }
                            }
                            keys.forEach(function (key) {
                                if (!key.match(/^\d+$/)) {
                                    output.push(
                                        formatProperty(
                                            ctx,
                                            value,
                                            recurseTimes,
                                            visibleKeys,
                                            key,
                                            true
                                        )
                                    );
                                }
                            });
                            return output;
                        }

                        function formatProperty(
                            ctx,
                            value,
                            recurseTimes,
                            visibleKeys,
                            key,
                            array
                        ) {
                            var name, str, desc;
                            desc = Object.getOwnPropertyDescriptor(
                                value,
                                key
                            ) || { value: value[key] };
                            if (desc.get) {
                                if (desc.set) {
                                    str = ctx.stylize(
                                        "[Getter/Setter]",
                                        "special"
                                    );
                                } else {
                                    str = ctx.stylize("[Getter]", "special");
                                }
                            } else {
                                if (desc.set) {
                                    str = ctx.stylize("[Setter]", "special");
                                }
                            }
                            if (!hasOwnProperty(visibleKeys, key)) {
                                name = "[" + key + "]";
                            }
                            if (!str) {
                                if (ctx.seen.indexOf(desc.value) < 0) {
                                    if (isNull(recurseTimes)) {
                                        str = formatValue(
                                            ctx,
                                            desc.value,
                                            null
                                        );
                                    } else {
                                        str = formatValue(
                                            ctx,
                                            desc.value,
                                            recurseTimes - 1
                                        );
                                    }
                                    if (str.indexOf("\n") > -1) {
                                        if (array) {
                                            str = str
                                                .split("\n")
                                                .map(function (line) {
                                                    return "  " + line;
                                                })
                                                .join("\n")
                                                .substr(2);
                                        } else {
                                            str =
                                                "\n" +
                                                str
                                                    .split("\n")
                                                    .map(function (line) {
                                                        return "   " + line;
                                                    })
                                                    .join("\n");
                                        }
                                    }
                                } else {
                                    str = ctx.stylize("[Circular]", "special");
                                }
                            }
                            if (isUndefined(name)) {
                                if (array && key.match(/^\d+$/)) {
                                    return str;
                                }
                                name = JSON.stringify("" + key);
                                if (
                                    name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)
                                ) {
                                    name = name.substr(1, name.length - 2);
                                    name = ctx.stylize(name, "name");
                                } else {
                                    name = name
                                        .replace(/'/g, "\\'")
                                        .replace(/\\"/g, '"')
                                        .replace(/(^"|"$)/g, "'");
                                    name = ctx.stylize(name, "string");
                                }
                            }

                            return name + ": " + str;
                        }

                        function reduceToSingleString(output, base, braces) {
                            var numLinesEst = 0;
                            var length = output.reduce(function (prev, cur) {
                                numLinesEst++;
                                if (cur.indexOf("\n") >= 0) numLinesEst++;
                                return (
                                    prev +
                                    cur.replace(/\u001b\[\d\d?m/g, "").length +
                                    1
                                );
                            }, 0);

                            if (length > 60) {
                                return (
                                    braces[0] +
                                    (base === "" ? "" : base + "\n ") +
                                    " " +
                                    output.join(",\n  ") +
                                    " " +
                                    braces[1]
                                );
                            }

                            return (
                                braces[0] +
                                base +
                                " " +
                                output.join(", ") +
                                " " +
                                braces[1]
                            );
                        }

                        // NOTE: These type checking functions intentionally don't use `instanceof`
                        // because it is fragile and can be easily faked with `Object.create()`.
                        function isArray(ar) {
                            return Array.isArray(ar);
                        }
                        exports.isArray = isArray;

                        function isBoolean(arg) {
                            return typeof arg === "boolean";
                        }
                        exports.isBoolean = isBoolean;

                        function isNull(arg) {
                            return arg === null;
                        }
                        exports.isNull = isNull;

                        function isNullOrUndefined(arg) {
                            return arg == null;
                        }
                        exports.isNullOrUndefined = isNullOrUndefined;

                        function isNumber(arg) {
                            return typeof arg === "number";
                        }
                        exports.isNumber = isNumber;

                        function isString(arg) {
                            return typeof arg === "string";
                        }
                        exports.isString = isString;

                        function isSymbol(arg) {
                            return typeof arg === "symbol";
                        }
                        exports.isSymbol = isSymbol;

                        function isUndefined(arg) {
                            return arg === void 0;
                        }
                        exports.isUndefined = isUndefined;

                        function isRegExp(re) {
                            return (
                                isObject(re) &&
                                objectToString(re) === "[object RegExp]"
                            );
                        }
                        exports.isRegExp = isRegExp;

                        function isObject(arg) {
                            return typeof arg === "object" && arg !== null;
                        }
                        exports.isObject = isObject;

                        function isDate(d) {
                            return (
                                isObject(d) &&
                                objectToString(d) === "[object Date]"
                            );
                        }
                        exports.isDate = isDate;

                        function isError(e) {
                            return (
                                isObject(e) &&
                                (objectToString(e) === "[object Error]" ||
                                    e instanceof Error)
                            );
                        }
                        exports.isError = isError;

                        function isFunction(arg) {
                            return typeof arg === "function";
                        }
                        exports.isFunction = isFunction;

                        function isPrimitive(arg) {
                            return (
                                arg === null ||
                                typeof arg === "boolean" ||
                                typeof arg === "number" ||
                                typeof arg === "string" ||
                                typeof arg === "symbol" || // ES6 symbol
                                typeof arg === "undefined"
                            );
                        }
                        exports.isPrimitive = isPrimitive;

                        exports.isBuffer = require("./support/isBuffer");

                        function objectToString(o) {
                            return Object.prototype.toString.call(o);
                        }

                        function pad(n) {
                            return n < 10
                                ? "0" + n.toString(10)
                                : n.toString(10);
                        }

                        var months = [
                            "Jan",
                            "Feb",
                            "Mar",
                            "Apr",
                            "May",
                            "Jun",
                            "Jul",
                            "Aug",
                            "Sep",
                            "Oct",
                            "Nov",
                            "Dec",
                        ];

                        // 26 Feb 16:19:34
                        function timestamp() {
                            var d = new Date();
                            var time = [
                                pad(d.getHours()),
                                pad(d.getMinutes()),
                                pad(d.getSeconds()),
                            ].join(":");
                            return [
                                d.getDate(),
                                months[d.getMonth()],
                                time,
                            ].join(" ");
                        }

                        // log is just a thin wrapper to console.log that prepends a timestamp
                        exports.log = function () {
                            console.log(
                                "%s - %s",
                                timestamp(),
                                exports.format.apply(exports, arguments)
                            );
                        };

                        /**
                         * Inherit the prototype methods from one constructor into another.
                         *
                         * The Function.prototype.inherits from lang.js rewritten as a standalone
                         * function (not on Function.prototype). NOTE: If this file is to be loaded
                         * during bootstrapping this function needs to be rewritten using some native
                         * functions as prototype setup using normal JavaScript does not work as
                         * expected during bootstrapping (see mirror.js in r114903).
                         *
                         * @param {function} ctor Constructor function which needs to inherit the
                         *     prototype.
                         * @param {function} superCtor Constructor function to inherit prototype from.
                         */
                        exports.inherits = require("inherits");

                        exports._extend = function (origin, add) {
                            // Don't do anything if add isn't an object
                            if (!add || !isObject(add)) return origin;

                            var keys = Object.keys(add);
                            var i = keys.length;
                            while (i--) {
                                origin[keys[i]] = add[keys[i]];
                            }
                            return origin;
                        };

                        function hasOwnProperty(obj, prop) {
                            return Object.prototype.hasOwnProperty.call(
                                obj,
                                prop
                            );
                        }
                    }.call(this));
                }.call(
                    this,
                    require("_process"),
                    typeof global !== "undefined"
                        ? global
                        : typeof self !== "undefined"
                        ? self
                        : typeof window !== "undefined"
                        ? window
                        : {}
                ));
            },
            { "./support/isBuffer": 74, _process: 102, inherits: 73 },
        ],
        76: [
            function (require, module, exports) {
                "use strict";

                exports.byteLength = byteLength;
                exports.toByteArray = toByteArray;
                exports.fromByteArray = fromByteArray;

                var lookup = [];
                var revLookup = [];
                var Arr =
                    typeof Uint8Array !== "undefined" ? Uint8Array : Array;

                var code =
                    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                for (var i = 0, len = code.length; i < len; ++i) {
                    lookup[i] = code[i];
                    revLookup[code.charCodeAt(i)] = i;
                }

                // Support decoding URL-safe base64 strings, as Node.js does.
                // See: https://en.wikipedia.org/wiki/Base64#URL_applications
                revLookup["-".charCodeAt(0)] = 62;
                revLookup["_".charCodeAt(0)] = 63;

                function getLens(b64) {
                    var len = b64.length;

                    if (len % 4 > 0) {
                        throw new Error(
                            "Invalid string. Length must be a multiple of 4"
                        );
                    }

                    // Trim off extra bytes after placeholder bytes are found
                    // See: https://github.com/beatgammit/base64-js/issues/42
                    var validLen = b64.indexOf("=");
                    if (validLen === -1) validLen = len;

                    var placeHoldersLen =
                        validLen === len ? 0 : 4 - (validLen % 4);

                    return [validLen, placeHoldersLen];
                }

                // base64 is 4/3 + up to two characters of the original data
                function byteLength(b64) {
                    var lens = getLens(b64);
                    var validLen = lens[0];
                    var placeHoldersLen = lens[1];
                    return (
                        ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen
                    );
                }

                function _byteLength(b64, validLen, placeHoldersLen) {
                    return (
                        ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen
                    );
                }

                function toByteArray(b64) {
                    var tmp;
                    var lens = getLens(b64);
                    var validLen = lens[0];
                    var placeHoldersLen = lens[1];

                    var arr = new Arr(
                        _byteLength(b64, validLen, placeHoldersLen)
                    );

                    var curByte = 0;

                    // if there are placeholders, only get up to the last complete 4 chars
                    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

                    var i;
                    for (i = 0; i < len; i += 4) {
                        tmp =
                            (revLookup[b64.charCodeAt(i)] << 18) |
                            (revLookup[b64.charCodeAt(i + 1)] << 12) |
                            (revLookup[b64.charCodeAt(i + 2)] << 6) |
                            revLookup[b64.charCodeAt(i + 3)];
                        arr[curByte++] = (tmp >> 16) & 0xff;
                        arr[curByte++] = (tmp >> 8) & 0xff;
                        arr[curByte++] = tmp & 0xff;
                    }

                    if (placeHoldersLen === 2) {
                        tmp =
                            (revLookup[b64.charCodeAt(i)] << 2) |
                            (revLookup[b64.charCodeAt(i + 1)] >> 4);
                        arr[curByte++] = tmp & 0xff;
                    }

                    if (placeHoldersLen === 1) {
                        tmp =
                            (revLookup[b64.charCodeAt(i)] << 10) |
                            (revLookup[b64.charCodeAt(i + 1)] << 4) |
                            (revLookup[b64.charCodeAt(i + 2)] >> 2);
                        arr[curByte++] = (tmp >> 8) & 0xff;
                        arr[curByte++] = tmp & 0xff;
                    }

                    return arr;
                }

                function tripletToBase64(num) {
                    return (
                        lookup[(num >> 18) & 0x3f] +
                        lookup[(num >> 12) & 0x3f] +
                        lookup[(num >> 6) & 0x3f] +
                        lookup[num & 0x3f]
                    );
                }

                function encodeChunk(uint8, start, end) {
                    var tmp;
                    var output = [];
                    for (var i = start; i < end; i += 3) {
                        tmp =
                            ((uint8[i] << 16) & 0xff0000) +
                            ((uint8[i + 1] << 8) & 0xff00) +
                            (uint8[i + 2] & 0xff);
                        output.push(tripletToBase64(tmp));
                    }
                    return output.join("");
                }

                function fromByteArray(uint8) {
                    var tmp;
                    var len = uint8.length;
                    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
                    var parts = [];
                    var maxChunkLength = 16383; // must be multiple of 3

                    // go through the array every three bytes, we'll deal with trailing stuff later
                    for (
                        var i = 0, len2 = len - extraBytes;
                        i < len2;
                        i += maxChunkLength
                    ) {
                        parts.push(
                            encodeChunk(
                                uint8,
                                i,
                                i + maxChunkLength > len2
                                    ? len2
                                    : i + maxChunkLength
                            )
                        );
                    }

                    // pad the end with zeros, but make sure to not forget the extra bytes
                    if (extraBytes === 1) {
                        tmp = uint8[len - 1];
                        parts.push(
                            lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + "=="
                        );
                    } else if (extraBytes === 2) {
                        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
                        parts.push(
                            lookup[tmp >> 10] +
                                lookup[(tmp >> 4) & 0x3f] +
                                lookup[(tmp << 2) & 0x3f] +
                                "="
                        );
                    }

                    return parts.join("");
                }
            },
            {},
        ],
        77: [function (require, module, exports) {}, {}],
        78: [
            function (require, module, exports) {
                (function (process, Buffer) {
                    (function () {
                        "use strict";
                        /* eslint camelcase: "off" */

                        var assert = require("assert");

                        var Zstream = require("pako/lib/zlib/zstream");
                        var zlib_deflate = require("pako/lib/zlib/deflate.js");
                        var zlib_inflate = require("pako/lib/zlib/inflate.js");
                        var constants = require("pako/lib/zlib/constants");

                        for (var key in constants) {
                            exports[key] = constants[key];
                        }

                        // zlib modes
                        exports.NONE = 0;
                        exports.DEFLATE = 1;
                        exports.INFLATE = 2;
                        exports.GZIP = 3;
                        exports.GUNZIP = 4;
                        exports.DEFLATERAW = 5;
                        exports.INFLATERAW = 6;
                        exports.UNZIP = 7;

                        var GZIP_HEADER_ID1 = 0x1f;
                        var GZIP_HEADER_ID2 = 0x8b;

                        /**
                         * Emulate Node's zlib C++ layer for use by the JS layer in index.js
                         */
                        function Zlib(mode) {
                            if (
                                typeof mode !== "number" ||
                                mode < exports.DEFLATE ||
                                mode > exports.UNZIP
                            ) {
                                throw new TypeError("Bad argument");
                            }

                            this.dictionary = null;
                            this.err = 0;
                            this.flush = 0;
                            this.init_done = false;
                            this.level = 0;
                            this.memLevel = 0;
                            this.mode = mode;
                            this.strategy = 0;
                            this.windowBits = 0;
                            this.write_in_progress = false;
                            this.pending_close = false;
                            this.gzip_id_bytes_read = 0;
                        }

                        Zlib.prototype.close = function () {
                            if (this.write_in_progress) {
                                this.pending_close = true;
                                return;
                            }

                            this.pending_close = false;

                            assert(this.init_done, "close before init");
                            assert(this.mode <= exports.UNZIP);

                            if (
                                this.mode === exports.DEFLATE ||
                                this.mode === exports.GZIP ||
                                this.mode === exports.DEFLATERAW
                            ) {
                                zlib_deflate.deflateEnd(this.strm);
                            } else if (
                                this.mode === exports.INFLATE ||
                                this.mode === exports.GUNZIP ||
                                this.mode === exports.INFLATERAW ||
                                this.mode === exports.UNZIP
                            ) {
                                zlib_inflate.inflateEnd(this.strm);
                            }

                            this.mode = exports.NONE;

                            this.dictionary = null;
                        };

                        Zlib.prototype.write = function (
                            flush,
                            input,
                            in_off,
                            in_len,
                            out,
                            out_off,
                            out_len
                        ) {
                            return this._write(
                                true,
                                flush,
                                input,
                                in_off,
                                in_len,
                                out,
                                out_off,
                                out_len
                            );
                        };

                        Zlib.prototype.writeSync = function (
                            flush,
                            input,
                            in_off,
                            in_len,
                            out,
                            out_off,
                            out_len
                        ) {
                            return this._write(
                                false,
                                flush,
                                input,
                                in_off,
                                in_len,
                                out,
                                out_off,
                                out_len
                            );
                        };

                        Zlib.prototype._write = function (
                            async,
                            flush,
                            input,
                            in_off,
                            in_len,
                            out,
                            out_off,
                            out_len
                        ) {
                            assert.equal(arguments.length, 8);

                            assert(this.init_done, "write before init");
                            assert(
                                this.mode !== exports.NONE,
                                "already finalized"
                            );
                            assert.equal(
                                false,
                                this.write_in_progress,
                                "write already in progress"
                            );
                            assert.equal(
                                false,
                                this.pending_close,
                                "close is pending"
                            );

                            this.write_in_progress = true;

                            assert.equal(
                                false,
                                flush === undefined,
                                "must provide flush value"
                            );

                            this.write_in_progress = true;

                            if (
                                flush !== exports.Z_NO_FLUSH &&
                                flush !== exports.Z_PARTIAL_FLUSH &&
                                flush !== exports.Z_SYNC_FLUSH &&
                                flush !== exports.Z_FULL_FLUSH &&
                                flush !== exports.Z_FINISH &&
                                flush !== exports.Z_BLOCK
                            ) {
                                throw new Error("Invalid flush value");
                            }

                            if (input == null) {
                                input = Buffer.alloc(0);
                                in_len = 0;
                                in_off = 0;
                            }

                            this.strm.avail_in = in_len;
                            this.strm.input = input;
                            this.strm.next_in = in_off;
                            this.strm.avail_out = out_len;
                            this.strm.output = out;
                            this.strm.next_out = out_off;
                            this.flush = flush;

                            if (!async) {
                                // sync version
                                this._process();

                                if (this._checkError()) {
                                    return this._afterSync();
                                }
                                return;
                            }

                            // async version
                            var self = this;
                            process.nextTick(function () {
                                self._process();
                                self._after();
                            });

                            return this;
                        };

                        Zlib.prototype._afterSync = function () {
                            var avail_out = this.strm.avail_out;
                            var avail_in = this.strm.avail_in;

                            this.write_in_progress = false;

                            return [avail_in, avail_out];
                        };

                        Zlib.prototype._process = function () {
                            var next_expected_header_byte = null;

                            // If the avail_out is left at 0, then it means that it ran out
                            // of room.  If there was avail_out left over, then it means
                            // that all of the input was consumed.
                            switch (this.mode) {
                                case exports.DEFLATE:
                                case exports.GZIP:
                                case exports.DEFLATERAW:
                                    this.err = zlib_deflate.deflate(
                                        this.strm,
                                        this.flush
                                    );
                                    break;
                                case exports.UNZIP:
                                    if (this.strm.avail_in > 0) {
                                        next_expected_header_byte =
                                            this.strm.next_in;
                                    }

                                    switch (this.gzip_id_bytes_read) {
                                        case 0:
                                            if (
                                                next_expected_header_byte ===
                                                null
                                            ) {
                                                break;
                                            }

                                            if (
                                                this.strm.input[
                                                    next_expected_header_byte
                                                ] === GZIP_HEADER_ID1
                                            ) {
                                                this.gzip_id_bytes_read = 1;
                                                next_expected_header_byte++;

                                                if (this.strm.avail_in === 1) {
                                                    // The only available byte was already read.
                                                    break;
                                                }
                                            } else {
                                                this.mode = exports.INFLATE;
                                                break;
                                            }

                                        // fallthrough
                                        case 1:
                                            if (
                                                next_expected_header_byte ===
                                                null
                                            ) {
                                                break;
                                            }

                                            if (
                                                this.strm.input[
                                                    next_expected_header_byte
                                                ] === GZIP_HEADER_ID2
                                            ) {
                                                this.gzip_id_bytes_read = 2;
                                                this.mode = exports.GUNZIP;
                                            } else {
                                                // There is no actual difference between INFLATE and INFLATERAW
                                                // (after initialization).
                                                this.mode = exports.INFLATE;
                                            }

                                            break;
                                        default:
                                            throw new Error(
                                                "invalid number of gzip magic number bytes read"
                                            );
                                    }

                                // fallthrough
                                case exports.INFLATE:
                                case exports.GUNZIP:
                                case exports.INFLATERAW:
                                    this.err = zlib_inflate.inflate(
                                        this.strm,
                                        this.flush

                                        // If data was encoded with dictionary
                                    );
                                    if (
                                        this.err === exports.Z_NEED_DICT &&
                                        this.dictionary
                                    ) {
                                        // Load it
                                        this.err =
                                            zlib_inflate.inflateSetDictionary(
                                                this.strm,
                                                this.dictionary
                                            );
                                        if (this.err === exports.Z_OK) {
                                            // And try to decode again
                                            this.err = zlib_inflate.inflate(
                                                this.strm,
                                                this.flush
                                            );
                                        } else if (
                                            this.err === exports.Z_DATA_ERROR
                                        ) {
                                            // Both inflateSetDictionary() and inflate() return Z_DATA_ERROR.
                                            // Make it possible for After() to tell a bad dictionary from bad
                                            // input.
                                            this.err = exports.Z_NEED_DICT;
                                        }
                                    }
                                    while (
                                        this.strm.avail_in > 0 &&
                                        this.mode === exports.GUNZIP &&
                                        this.err === exports.Z_STREAM_END &&
                                        this.strm.next_in[0] !== 0x00
                                    ) {
                                        // Bytes remain in input buffer. Perhaps this is another compressed
                                        // member in the same archive, or just trailing garbage.
                                        // Trailing zero bytes are okay, though, since they are frequently
                                        // used for padding.

                                        this.reset();
                                        this.err = zlib_inflate.inflate(
                                            this.strm,
                                            this.flush
                                        );
                                    }
                                    break;
                                default:
                                    throw new Error(
                                        "Unknown mode " + this.mode
                                    );
                            }
                        };

                        Zlib.prototype._checkError = function () {
                            // Acceptable error states depend on the type of zlib stream.
                            switch (this.err) {
                                case exports.Z_OK:
                                case exports.Z_BUF_ERROR:
                                    if (
                                        this.strm.avail_out !== 0 &&
                                        this.flush === exports.Z_FINISH
                                    ) {
                                        this._error("unexpected end of file");
                                        return false;
                                    }
                                    break;
                                case exports.Z_STREAM_END:
                                    // normal statuses, not fatal
                                    break;
                                case exports.Z_NEED_DICT:
                                    if (this.dictionary == null) {
                                        this._error("Missing dictionary");
                                    } else {
                                        this._error("Bad dictionary");
                                    }
                                    return false;
                                default:
                                    // something else.
                                    this._error("Zlib error");
                                    return false;
                            }

                            return true;
                        };

                        Zlib.prototype._after = function () {
                            if (!this._checkError()) {
                                return;
                            }

                            var avail_out = this.strm.avail_out;
                            var avail_in = this.strm.avail_in;

                            this.write_in_progress = false;

                            // call the write() cb
                            this.callback(avail_in, avail_out);

                            if (this.pending_close) {
                                this.close();
                            }
                        };

                        Zlib.prototype._error = function (message) {
                            if (this.strm.msg) {
                                message = this.strm.msg;
                            }
                            this.onerror(
                                message,
                                this.err

                                // no hope of rescue.
                            );
                            this.write_in_progress = false;
                            if (this.pending_close) {
                                this.close();
                            }
                        };

                        Zlib.prototype.init = function (
                            windowBits,
                            level,
                            memLevel,
                            strategy,
                            dictionary
                        ) {
                            assert(
                                arguments.length === 4 ||
                                    arguments.length === 5,
                                "init(windowBits, level, memLevel, strategy, [dictionary])"
                            );

                            assert(
                                windowBits >= 8 && windowBits <= 15,
                                "invalid windowBits"
                            );
                            assert(
                                level >= -1 && level <= 9,
                                "invalid compression level"
                            );

                            assert(
                                memLevel >= 1 && memLevel <= 9,
                                "invalid memlevel"
                            );

                            assert(
                                strategy === exports.Z_FILTERED ||
                                    strategy === exports.Z_HUFFMAN_ONLY ||
                                    strategy === exports.Z_RLE ||
                                    strategy === exports.Z_FIXED ||
                                    strategy === exports.Z_DEFAULT_STRATEGY,
                                "invalid strategy"
                            );

                            this._init(
                                level,
                                windowBits,
                                memLevel,
                                strategy,
                                dictionary
                            );
                            this._setDictionary();
                        };

                        Zlib.prototype.params = function () {
                            throw new Error("deflateParams Not supported");
                        };

                        Zlib.prototype.reset = function () {
                            this._reset();
                            this._setDictionary();
                        };

                        Zlib.prototype._init = function (
                            level,
                            windowBits,
                            memLevel,
                            strategy,
                            dictionary
                        ) {
                            this.level = level;
                            this.windowBits = windowBits;
                            this.memLevel = memLevel;
                            this.strategy = strategy;

                            this.flush = exports.Z_NO_FLUSH;

                            this.err = exports.Z_OK;

                            if (
                                this.mode === exports.GZIP ||
                                this.mode === exports.GUNZIP
                            ) {
                                this.windowBits += 16;
                            }

                            if (this.mode === exports.UNZIP) {
                                this.windowBits += 32;
                            }

                            if (
                                this.mode === exports.DEFLATERAW ||
                                this.mode === exports.INFLATERAW
                            ) {
                                this.windowBits = -1 * this.windowBits;
                            }

                            this.strm = new Zstream();

                            switch (this.mode) {
                                case exports.DEFLATE:
                                case exports.GZIP:
                                case exports.DEFLATERAW:
                                    this.err = zlib_deflate.deflateInit2(
                                        this.strm,
                                        this.level,
                                        exports.Z_DEFLATED,
                                        this.windowBits,
                                        this.memLevel,
                                        this.strategy
                                    );
                                    break;
                                case exports.INFLATE:
                                case exports.GUNZIP:
                                case exports.INFLATERAW:
                                case exports.UNZIP:
                                    this.err = zlib_inflate.inflateInit2(
                                        this.strm,
                                        this.windowBits
                                    );
                                    break;
                                default:
                                    throw new Error(
                                        "Unknown mode " + this.mode
                                    );
                            }

                            if (this.err !== exports.Z_OK) {
                                this._error("Init error");
                            }

                            this.dictionary = dictionary;

                            this.write_in_progress = false;
                            this.init_done = true;
                        };

                        Zlib.prototype._setDictionary = function () {
                            if (this.dictionary == null) {
                                return;
                            }

                            this.err = exports.Z_OK;

                            switch (this.mode) {
                                case exports.DEFLATE:
                                case exports.DEFLATERAW:
                                    this.err =
                                        zlib_deflate.deflateSetDictionary(
                                            this.strm,
                                            this.dictionary
                                        );
                                    break;
                                default:
                                    break;
                            }

                            if (this.err !== exports.Z_OK) {
                                this._error("Failed to set dictionary");
                            }
                        };

                        Zlib.prototype._reset = function () {
                            this.err = exports.Z_OK;

                            switch (this.mode) {
                                case exports.DEFLATE:
                                case exports.DEFLATERAW:
                                case exports.GZIP:
                                    this.err = zlib_deflate.deflateReset(
                                        this.strm
                                    );
                                    break;
                                case exports.INFLATE:
                                case exports.INFLATERAW:
                                case exports.GUNZIP:
                                    this.err = zlib_inflate.inflateReset(
                                        this.strm
                                    );
                                    break;
                                default:
                                    break;
                            }

                            if (this.err !== exports.Z_OK) {
                                this._error("Failed to reset stream");
                            }
                        };

                        exports.Zlib = Zlib;
                    }.call(this));
                }.call(this, require("_process"), require("buffer").Buffer));
            },
            {
                _process: 102,
                assert: 72,
                buffer: 80,
                "pako/lib/zlib/constants": 92,
                "pako/lib/zlib/deflate.js": 94,
                "pako/lib/zlib/inflate.js": 96,
                "pako/lib/zlib/zstream": 100,
            },
        ],
        79: [
            function (require, module, exports) {
                (function (process) {
                    (function () {
                        "use strict";

                        var Buffer = require("buffer").Buffer;
                        var Transform = require("stream").Transform;
                        var binding = require("./binding");
                        var util = require("util");
                        var assert = require("assert").ok;
                        var kMaxLength = require("buffer").kMaxLength;
                        var kRangeErrorMessage =
                            "Cannot create final Buffer. It would be larger " +
                            "than 0x" +
                            kMaxLength.toString(16) +
                            " bytes";

                        // zlib doesn't provide these, so kludge them in following the same
                        // const naming scheme zlib uses.
                        binding.Z_MIN_WINDOWBITS = 8;
                        binding.Z_MAX_WINDOWBITS = 15;
                        binding.Z_DEFAULT_WINDOWBITS = 15;

                        // fewer than 64 bytes per chunk is stupid.
                        // technically it could work with as few as 8, but even 64 bytes
                        // is absurdly low.  Usually a MB or more is best.
                        binding.Z_MIN_CHUNK = 64;
                        binding.Z_MAX_CHUNK = Infinity;
                        binding.Z_DEFAULT_CHUNK = 16 * 1024;

                        binding.Z_MIN_MEMLEVEL = 1;
                        binding.Z_MAX_MEMLEVEL = 9;
                        binding.Z_DEFAULT_MEMLEVEL = 8;

                        binding.Z_MIN_LEVEL = -1;
                        binding.Z_MAX_LEVEL = 9;
                        binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

                        // expose all the zlib constants
                        var bkeys = Object.keys(binding);
                        for (var bk = 0; bk < bkeys.length; bk++) {
                            var bkey = bkeys[bk];
                            if (bkey.match(/^Z/)) {
                                Object.defineProperty(exports, bkey, {
                                    enumerable: true,
                                    value: binding[bkey],
                                    writable: false,
                                });
                            }
                        }

                        // translation table for return codes.
                        var codes = {
                            Z_OK: binding.Z_OK,
                            Z_STREAM_END: binding.Z_STREAM_END,
                            Z_NEED_DICT: binding.Z_NEED_DICT,
                            Z_ERRNO: binding.Z_ERRNO,
                            Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
                            Z_DATA_ERROR: binding.Z_DATA_ERROR,
                            Z_MEM_ERROR: binding.Z_MEM_ERROR,
                            Z_BUF_ERROR: binding.Z_BUF_ERROR,
                            Z_VERSION_ERROR: binding.Z_VERSION_ERROR,
                        };

                        var ckeys = Object.keys(codes);
                        for (var ck = 0; ck < ckeys.length; ck++) {
                            var ckey = ckeys[ck];
                            codes[codes[ckey]] = ckey;
                        }

                        Object.defineProperty(exports, "codes", {
                            enumerable: true,
                            value: Object.freeze(codes),
                            writable: false,
                        });

                        exports.Deflate = Deflate;
                        exports.Inflate = Inflate;
                        exports.Gzip = Gzip;
                        exports.Gunzip = Gunzip;
                        exports.DeflateRaw = DeflateRaw;
                        exports.InflateRaw = InflateRaw;
                        exports.Unzip = Unzip;

                        exports.createDeflate = function (o) {
                            return new Deflate(o);
                        };

                        exports.createInflate = function (o) {
                            return new Inflate(o);
                        };

                        exports.createDeflateRaw = function (o) {
                            return new DeflateRaw(o);
                        };

                        exports.createInflateRaw = function (o) {
                            return new InflateRaw(o);
                        };

                        exports.createGzip = function (o) {
                            return new Gzip(o);
                        };

                        exports.createGunzip = function (o) {
                            return new Gunzip(o);
                        };

                        exports.createUnzip = function (o) {
                            return new Unzip(o);
                        };

                        // Convenience methods.
                        // compress/decompress a string or buffer in one step.
                        exports.deflate = function (buffer, opts, callback) {
                            if (typeof opts === "function") {
                                callback = opts;
                                opts = {};
                            }
                            return zlibBuffer(
                                new Deflate(opts),
                                buffer,
                                callback
                            );
                        };

                        exports.deflateSync = function (buffer, opts) {
                            return zlibBufferSync(new Deflate(opts), buffer);
                        };

                        exports.gzip = function (buffer, opts, callback) {
                            if (typeof opts === "function") {
                                callback = opts;
                                opts = {};
                            }
                            return zlibBuffer(new Gzip(opts), buffer, callback);
                        };

                        exports.gzipSync = function (buffer, opts) {
                            return zlibBufferSync(new Gzip(opts), buffer);
                        };

                        exports.deflateRaw = function (buffer, opts, callback) {
                            if (typeof opts === "function") {
                                callback = opts;
                                opts = {};
                            }
                            return zlibBuffer(
                                new DeflateRaw(opts),
                                buffer,
                                callback
                            );
                        };

                        exports.deflateRawSync = function (buffer, opts) {
                            return zlibBufferSync(new DeflateRaw(opts), buffer);
                        };

                        exports.unzip = function (buffer, opts, callback) {
                            if (typeof opts === "function") {
                                callback = opts;
                                opts = {};
                            }
                            return zlibBuffer(
                                new Unzip(opts),
                                buffer,
                                callback
                            );
                        };

                        exports.unzipSync = function (buffer, opts) {
                            return zlibBufferSync(new Unzip(opts), buffer);
                        };

                        exports.inflate = function (buffer, opts, callback) {
                            if (typeof opts === "function") {
                                callback = opts;
                                opts = {};
                            }
                            return zlibBuffer(
                                new Inflate(opts),
                                buffer,
                                callback
                            );
                        };

                        exports.inflateSync = function (buffer, opts) {
                            return zlibBufferSync(new Inflate(opts), buffer);
                        };

                        exports.gunzip = function (buffer, opts, callback) {
                            if (typeof opts === "function") {
                                callback = opts;
                                opts = {};
                            }
                            return zlibBuffer(
                                new Gunzip(opts),
                                buffer,
                                callback
                            );
                        };

                        exports.gunzipSync = function (buffer, opts) {
                            return zlibBufferSync(new Gunzip(opts), buffer);
                        };

                        exports.inflateRaw = function (buffer, opts, callback) {
                            if (typeof opts === "function") {
                                callback = opts;
                                opts = {};
                            }
                            return zlibBuffer(
                                new InflateRaw(opts),
                                buffer,
                                callback
                            );
                        };

                        exports.inflateRawSync = function (buffer, opts) {
                            return zlibBufferSync(new InflateRaw(opts), buffer);
                        };

                        function zlibBuffer(engine, buffer, callback) {
                            var buffers = [];
                            var nread = 0;

                            engine.on("error", onError);
                            engine.on("end", onEnd);

                            engine.end(buffer);
                            flow();

                            function flow() {
                                var chunk;
                                while (null !== (chunk = engine.read())) {
                                    buffers.push(chunk);
                                    nread += chunk.length;
                                }
                                engine.once("readable", flow);
                            }

                            function onError(err) {
                                engine.removeListener("end", onEnd);
                                engine.removeListener("readable", flow);
                                callback(err);
                            }

                            function onEnd() {
                                var buf;
                                var err = null;

                                if (nread >= kMaxLength) {
                                    err = new RangeError(kRangeErrorMessage);
                                } else {
                                    buf = Buffer.concat(buffers, nread);
                                }

                                buffers = [];
                                engine.close();
                                callback(err, buf);
                            }
                        }

                        function zlibBufferSync(engine, buffer) {
                            if (typeof buffer === "string")
                                buffer = Buffer.from(buffer);

                            if (!Buffer.isBuffer(buffer))
                                throw new TypeError("Not a string or buffer");

                            var flushFlag = engine._finishFlushFlag;

                            return engine._processChunk(buffer, flushFlag);
                        }

                        // generic zlib
                        // minimal 2-byte header
                        function Deflate(opts) {
                            if (!(this instanceof Deflate))
                                return new Deflate(opts);
                            Zlib.call(this, opts, binding.DEFLATE);
                        }

                        function Inflate(opts) {
                            if (!(this instanceof Inflate))
                                return new Inflate(opts);
                            Zlib.call(this, opts, binding.INFLATE);
                        }

                        // gzip - bigger header, same deflate compression
                        function Gzip(opts) {
                            if (!(this instanceof Gzip)) return new Gzip(opts);
                            Zlib.call(this, opts, binding.GZIP);
                        }

                        function Gunzip(opts) {
                            if (!(this instanceof Gunzip))
                                return new Gunzip(opts);
                            Zlib.call(this, opts, binding.GUNZIP);
                        }

                        // raw - no header
                        function DeflateRaw(opts) {
                            if (!(this instanceof DeflateRaw))
                                return new DeflateRaw(opts);
                            Zlib.call(this, opts, binding.DEFLATERAW);
                        }

                        function InflateRaw(opts) {
                            if (!(this instanceof InflateRaw))
                                return new InflateRaw(opts);
                            Zlib.call(this, opts, binding.INFLATERAW);
                        }

                        // auto-detect header.
                        function Unzip(opts) {
                            if (!(this instanceof Unzip))
                                return new Unzip(opts);
                            Zlib.call(this, opts, binding.UNZIP);
                        }

                        function isValidFlushFlag(flag) {
                            return (
                                flag === binding.Z_NO_FLUSH ||
                                flag === binding.Z_PARTIAL_FLUSH ||
                                flag === binding.Z_SYNC_FLUSH ||
                                flag === binding.Z_FULL_FLUSH ||
                                flag === binding.Z_FINISH ||
                                flag === binding.Z_BLOCK
                            );
                        }

                        // the Zlib class they all inherit from
                        // This thing manages the queue of requests, and returns
                        // true or false if there is anything in the queue when
                        // you call the .write() method.

                        function Zlib(opts, mode) {
                            var _this = this;

                            this._opts = opts = opts || {};
                            this._chunkSize =
                                opts.chunkSize || exports.Z_DEFAULT_CHUNK;

                            Transform.call(this, opts);

                            if (opts.flush && !isValidFlushFlag(opts.flush)) {
                                throw new Error(
                                    "Invalid flush flag: " + opts.flush
                                );
                            }
                            if (
                                opts.finishFlush &&
                                !isValidFlushFlag(opts.finishFlush)
                            ) {
                                throw new Error(
                                    "Invalid flush flag: " + opts.finishFlush
                                );
                            }

                            this._flushFlag = opts.flush || binding.Z_NO_FLUSH;
                            this._finishFlushFlag =
                                typeof opts.finishFlush !== "undefined"
                                    ? opts.finishFlush
                                    : binding.Z_FINISH;

                            if (opts.chunkSize) {
                                if (
                                    opts.chunkSize < exports.Z_MIN_CHUNK ||
                                    opts.chunkSize > exports.Z_MAX_CHUNK
                                ) {
                                    throw new Error(
                                        "Invalid chunk size: " + opts.chunkSize
                                    );
                                }
                            }

                            if (opts.windowBits) {
                                if (
                                    opts.windowBits <
                                        exports.Z_MIN_WINDOWBITS ||
                                    opts.windowBits > exports.Z_MAX_WINDOWBITS
                                ) {
                                    throw new Error(
                                        "Invalid windowBits: " + opts.windowBits
                                    );
                                }
                            }

                            if (opts.level) {
                                if (
                                    opts.level < exports.Z_MIN_LEVEL ||
                                    opts.level > exports.Z_MAX_LEVEL
                                ) {
                                    throw new Error(
                                        "Invalid compression level: " +
                                            opts.level
                                    );
                                }
                            }

                            if (opts.memLevel) {
                                if (
                                    opts.memLevel < exports.Z_MIN_MEMLEVEL ||
                                    opts.memLevel > exports.Z_MAX_MEMLEVEL
                                ) {
                                    throw new Error(
                                        "Invalid memLevel: " + opts.memLevel
                                    );
                                }
                            }

                            if (opts.strategy) {
                                if (
                                    opts.strategy != exports.Z_FILTERED &&
                                    opts.strategy != exports.Z_HUFFMAN_ONLY &&
                                    opts.strategy != exports.Z_RLE &&
                                    opts.strategy != exports.Z_FIXED &&
                                    opts.strategy != exports.Z_DEFAULT_STRATEGY
                                ) {
                                    throw new Error(
                                        "Invalid strategy: " + opts.strategy
                                    );
                                }
                            }

                            if (opts.dictionary) {
                                if (!Buffer.isBuffer(opts.dictionary)) {
                                    throw new Error(
                                        "Invalid dictionary: it should be a Buffer instance"
                                    );
                                }
                            }

                            this._handle = new binding.Zlib(mode);

                            var self = this;
                            this._hadError = false;
                            this._handle.onerror = function (message, errno) {
                                // there is no way to cleanly recover.
                                // continuing only obscures problems.
                                _close(self);
                                self._hadError = true;

                                var error = new Error(message);
                                error.errno = errno;
                                error.code = exports.codes[errno];
                                self.emit("error", error);
                            };

                            var level = exports.Z_DEFAULT_COMPRESSION;
                            if (typeof opts.level === "number")
                                level = opts.level;

                            var strategy = exports.Z_DEFAULT_STRATEGY;
                            if (typeof opts.strategy === "number")
                                strategy = opts.strategy;

                            this._handle.init(
                                opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,
                                level,
                                opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,
                                strategy,
                                opts.dictionary
                            );

                            this._buffer = Buffer.allocUnsafe(this._chunkSize);
                            this._offset = 0;
                            this._level = level;
                            this._strategy = strategy;

                            this.once("end", this.close);

                            Object.defineProperty(this, "_closed", {
                                get: function () {
                                    return !_this._handle;
                                },
                                configurable: true,
                                enumerable: true,
                            });
                        }

                        util.inherits(Zlib, Transform);

                        Zlib.prototype.params = function (
                            level,
                            strategy,
                            callback
                        ) {
                            if (
                                level < exports.Z_MIN_LEVEL ||
                                level > exports.Z_MAX_LEVEL
                            ) {
                                throw new RangeError(
                                    "Invalid compression level: " + level
                                );
                            }
                            if (
                                strategy != exports.Z_FILTERED &&
                                strategy != exports.Z_HUFFMAN_ONLY &&
                                strategy != exports.Z_RLE &&
                                strategy != exports.Z_FIXED &&
                                strategy != exports.Z_DEFAULT_STRATEGY
                            ) {
                                throw new TypeError(
                                    "Invalid strategy: " + strategy
                                );
                            }

                            if (
                                this._level !== level ||
                                this._strategy !== strategy
                            ) {
                                var self = this;
                                this.flush(binding.Z_SYNC_FLUSH, function () {
                                    assert(self._handle, "zlib binding closed");
                                    self._handle.params(level, strategy);
                                    if (!self._hadError) {
                                        self._level = level;
                                        self._strategy = strategy;
                                        if (callback) callback();
                                    }
                                });
                            } else {
                                process.nextTick(callback);
                            }
                        };

                        Zlib.prototype.reset = function () {
                            assert(this._handle, "zlib binding closed");
                            return this._handle.reset();
                        };

                        // This is the _flush function called by the transform class,
                        // internally, when the last chunk has been written.
                        Zlib.prototype._flush = function (callback) {
                            this._transform(Buffer.alloc(0), "", callback);
                        };

                        Zlib.prototype.flush = function (kind, callback) {
                            var _this2 = this;

                            var ws = this._writableState;

                            if (
                                typeof kind === "function" ||
                                (kind === undefined && !callback)
                            ) {
                                callback = kind;
                                kind = binding.Z_FULL_FLUSH;
                            }

                            if (ws.ended) {
                                if (callback) process.nextTick(callback);
                            } else if (ws.ending) {
                                if (callback) this.once("end", callback);
                            } else if (ws.needDrain) {
                                if (callback) {
                                    this.once("drain", function () {
                                        return _this2.flush(kind, callback);
                                    });
                                }
                            } else {
                                this._flushFlag = kind;
                                this.write(Buffer.alloc(0), "", callback);
                            }
                        };

                        Zlib.prototype.close = function (callback) {
                            _close(this, callback);
                            process.nextTick(emitCloseNT, this);
                        };

                        function _close(engine, callback) {
                            if (callback) process.nextTick(callback);

                            // Caller may invoke .close after a zlib error (which will null _handle).
                            if (!engine._handle) return;

                            engine._handle.close();
                            engine._handle = null;
                        }

                        function emitCloseNT(self) {
                            self.emit("close");
                        }

                        Zlib.prototype._transform = function (
                            chunk,
                            encoding,
                            cb
                        ) {
                            var flushFlag;
                            var ws = this._writableState;
                            var ending = ws.ending || ws.ended;
                            var last =
                                ending &&
                                (!chunk || ws.length === chunk.length);

                            if (chunk !== null && !Buffer.isBuffer(chunk))
                                return cb(new Error("invalid input"));

                            if (!this._handle)
                                return cb(new Error("zlib binding closed"));

                            // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag
                            // (or whatever flag was provided using opts.finishFlush).
                            // If it's explicitly flushing at some other time, then we use
                            // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
                            // goodness.
                            if (last) flushFlag = this._finishFlushFlag;
                            else {
                                flushFlag = this._flushFlag;
                                // once we've flushed the last of the queue, stop flushing and
                                // go back to the normal behavior.
                                if (chunk.length >= ws.length) {
                                    this._flushFlag =
                                        this._opts.flush || binding.Z_NO_FLUSH;
                                }
                            }

                            this._processChunk(chunk, flushFlag, cb);
                        };

                        Zlib.prototype._processChunk = function (
                            chunk,
                            flushFlag,
                            cb
                        ) {
                            var availInBefore = chunk && chunk.length;
                            var availOutBefore = this._chunkSize - this._offset;
                            var inOff = 0;

                            var self = this;

                            var async = typeof cb === "function";

                            if (!async) {
                                var buffers = [];
                                var nread = 0;

                                var error;
                                this.on("error", function (er) {
                                    error = er;
                                });

                                assert(this._handle, "zlib binding closed");
                                do {
                                    var res = this._handle.writeSync(
                                        flushFlag,
                                        chunk, // in
                                        inOff, // in_off
                                        availInBefore, // in_len
                                        this._buffer, // out
                                        this._offset, //out_off
                                        availOutBefore
                                    ); // out_len
                                } while (
                                    !this._hadError &&
                                    callback(res[0], res[1])
                                );

                                if (this._hadError) {
                                    throw error;
                                }

                                if (nread >= kMaxLength) {
                                    _close(this);
                                    throw new RangeError(kRangeErrorMessage);
                                }

                                var buf = Buffer.concat(buffers, nread);
                                _close(this);

                                return buf;
                            }

                            assert(this._handle, "zlib binding closed");
                            var req = this._handle.write(
                                flushFlag,
                                chunk, // in
                                inOff, // in_off
                                availInBefore, // in_len
                                this._buffer, // out
                                this._offset, //out_off
                                availOutBefore
                            ); // out_len

                            req.buffer = chunk;
                            req.callback = callback;

                            function callback(availInAfter, availOutAfter) {
                                // When the callback is used in an async write, the callback's
                                // context is the `req` object that was created. The req object
                                // is === this._handle, and that's why it's important to null
                                // out the values after they are done being used. `this._handle`
                                // can stay in memory longer than the callback and buffer are needed.
                                if (this) {
                                    this.buffer = null;
                                    this.callback = null;
                                }

                                if (self._hadError) return;

                                var have = availOutBefore - availOutAfter;
                                assert(have >= 0, "have should not go down");

                                if (have > 0) {
                                    var out = self._buffer.slice(
                                        self._offset,
                                        self._offset + have
                                    );
                                    self._offset += have;
                                    // serve some output to the consumer.
                                    if (async) {
                                        self.push(out);
                                    } else {
                                        buffers.push(out);
                                        nread += out.length;
                                    }
                                }

                                // exhausted the output buffer, or used all the input create a new one.
                                if (
                                    availOutAfter === 0 ||
                                    self._offset >= self._chunkSize
                                ) {
                                    availOutBefore = self._chunkSize;
                                    self._offset = 0;
                                    self._buffer = Buffer.allocUnsafe(
                                        self._chunkSize
                                    );
                                }

                                if (availOutAfter === 0) {
                                    // Not actually done.  Need to reprocess.
                                    // Also, update the availInBefore to the availInAfter value,
                                    // so that if we have to hit it a third (fourth, etc.) time,
                                    // it'll have the correct byte counts.
                                    inOff += availInBefore - availInAfter;
                                    availInBefore = availInAfter;

                                    if (!async) return true;

                                    var newReq = self._handle.write(
                                        flushFlag,
                                        chunk,
                                        inOff,
                                        availInBefore,
                                        self._buffer,
                                        self._offset,
                                        self._chunkSize
                                    );
                                    newReq.callback = callback; // this same function
                                    newReq.buffer = chunk;
                                    return;
                                }

                                if (!async) return false;

                                // finished with the chunk.
                                cb();
                            }
                        };

                        util.inherits(Deflate, Zlib);
                        util.inherits(Inflate, Zlib);
                        util.inherits(Gzip, Zlib);
                        util.inherits(Gunzip, Zlib);
                        util.inherits(DeflateRaw, Zlib);
                        util.inherits(InflateRaw, Zlib);
                        util.inherits(Unzip, Zlib);
                    }.call(this));
                }.call(this, require("_process")));
            },
            {
                "./binding": 78,
                _process: 102,
                assert: 72,
                buffer: 80,
                stream: 122,
                util: 134,
            },
        ],
        80: [
            function (require, module, exports) {
                (function (Buffer) {
                    (function () {
                        /*!
                         * The buffer module from node.js, for the browser.
                         *
                         * @author   Feross Aboukhadijeh <https://feross.org>
                         * @license  MIT
                         */
                        /* eslint-disable no-proto */

                        "use strict";

                        var base64 = require("base64-js");
                        var ieee754 = require("ieee754");
                        var customInspectSymbol =
                            typeof Symbol === "function" &&
                            typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
                                ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
                                : null;

                        exports.Buffer = Buffer;
                        exports.SlowBuffer = SlowBuffer;
                        exports.INSPECT_MAX_BYTES = 50;

                        var K_MAX_LENGTH = 0x7fffffff;
                        exports.kMaxLength = K_MAX_LENGTH;

                        /**
                         * If `Buffer.TYPED_ARRAY_SUPPORT`:
                         *   === true    Use Uint8Array implementation (fastest)
                         *   === false   Print warning and recommend using `buffer` v4.x which has an Object
                         *               implementation (most compatible, even IE6)
                         *
                         * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
                         * Opera 11.6+, iOS 4.2+.
                         *
                         * We report that the browser does not support typed arrays if the are not subclassable
                         * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
                         * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
                         * for __proto__ and has a buggy typed array implementation.
                         */
                        Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

                        if (
                            !Buffer.TYPED_ARRAY_SUPPORT &&
                            typeof console !== "undefined" &&
                            typeof console.error === "function"
                        ) {
                            console.error(
                                "This browser lacks typed array (Uint8Array) support which is required by " +
                                    "`buffer` v5.x. Use `buffer` v4.x if you require old browser support."
                            );
                        }

                        function typedArraySupport() {
                            // Can typed array instances can be augmented?
                            try {
                                var arr = new Uint8Array(1);
                                var proto = {
                                    foo: function () {
                                        return 42;
                                    },
                                };
                                Object.setPrototypeOf(
                                    proto,
                                    Uint8Array.prototype
                                );
                                Object.setPrototypeOf(arr, proto);
                                return arr.foo() === 42;
                            } catch (e) {
                                return false;
                            }
                        }

                        Object.defineProperty(Buffer.prototype, "parent", {
                            enumerable: true,
                            get: function () {
                                if (!Buffer.isBuffer(this)) return undefined;
                                return this.buffer;
                            },
                        });

                        Object.defineProperty(Buffer.prototype, "offset", {
                            enumerable: true,
                            get: function () {
                                if (!Buffer.isBuffer(this)) return undefined;
                                return this.byteOffset;
                            },
                        });

                        function createBuffer(length) {
                            if (length > K_MAX_LENGTH) {
                                throw new RangeError(
                                    'The value "' +
                                        length +
                                        '" is invalid for option "size"'
                                );
                            }
                            // Return an augmented `Uint8Array` instance
                            var buf = new Uint8Array(length);
                            Object.setPrototypeOf(buf, Buffer.prototype);
                            return buf;
                        }

                        /**
                         * The Buffer constructor returns instances of `Uint8Array` that have their
                         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
                         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
                         * and the `Uint8Array` methods. Square bracket notation works as expected -- it
                         * returns a single octet.
                         *
                         * The `Uint8Array` prototype remains unmodified.
                         */

                        function Buffer(arg, encodingOrOffset, length) {
                            // Common case.
                            if (typeof arg === "number") {
                                if (typeof encodingOrOffset === "string") {
                                    throw new TypeError(
                                        'The "string" argument must be of type string. Received type number'
                                    );
                                }
                                return allocUnsafe(arg);
                            }
                            return from(arg, encodingOrOffset, length);
                        }

                        Buffer.poolSize = 8192; // not used by this implementation

                        function from(value, encodingOrOffset, length) {
                            if (typeof value === "string") {
                                return fromString(value, encodingOrOffset);
                            }

                            if (ArrayBuffer.isView(value)) {
                                return fromArrayView(value);
                            }

                            if (value == null) {
                                throw new TypeError(
                                    "The first argument must be one of type string, Buffer, ArrayBuffer, Array, " +
                                        "or Array-like Object. Received type " +
                                        typeof value
                                );
                            }

                            if (
                                isInstance(value, ArrayBuffer) ||
                                (value && isInstance(value.buffer, ArrayBuffer))
                            ) {
                                return fromArrayBuffer(
                                    value,
                                    encodingOrOffset,
                                    length
                                );
                            }

                            if (
                                typeof SharedArrayBuffer !== "undefined" &&
                                (isInstance(value, SharedArrayBuffer) ||
                                    (value &&
                                        isInstance(
                                            value.buffer,
                                            SharedArrayBuffer
                                        )))
                            ) {
                                return fromArrayBuffer(
                                    value,
                                    encodingOrOffset,
                                    length
                                );
                            }

                            if (typeof value === "number") {
                                throw new TypeError(
                                    'The "value" argument must not be of type number. Received type number'
                                );
                            }

                            var valueOf = value.valueOf && value.valueOf();
                            if (valueOf != null && valueOf !== value) {
                                return Buffer.from(
                                    valueOf,
                                    encodingOrOffset,
                                    length
                                );
                            }

                            var b = fromObject(value);
                            if (b) return b;

                            if (
                                typeof Symbol !== "undefined" &&
                                Symbol.toPrimitive != null &&
                                typeof value[Symbol.toPrimitive] === "function"
                            ) {
                                return Buffer.from(
                                    value[Symbol.toPrimitive]("string"),
                                    encodingOrOffset,
                                    length
                                );
                            }

                            throw new TypeError(
                                "The first argument must be one of type string, Buffer, ArrayBuffer, Array, " +
                                    "or Array-like Object. Received type " +
                                    typeof value
                            );
                        }

                        /**
                         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
                         * if value is a number.
                         * Buffer.from(str[, encoding])
                         * Buffer.from(array)
                         * Buffer.from(buffer)
                         * Buffer.from(arrayBuffer[, byteOffset[, length]])
                         **/
                        Buffer.from = function (
                            value,
                            encodingOrOffset,
                            length
                        ) {
                            return from(value, encodingOrOffset, length);
                        };

                        // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
                        // https://github.com/feross/buffer/pull/148
                        Object.setPrototypeOf(
                            Buffer.prototype,
                            Uint8Array.prototype
                        );
                        Object.setPrototypeOf(Buffer, Uint8Array);

                        function assertSize(size) {
                            if (typeof size !== "number") {
                                throw new TypeError(
                                    '"size" argument must be of type number'
                                );
                            } else if (size < 0) {
                                throw new RangeError(
                                    'The value "' +
                                        size +
                                        '" is invalid for option "size"'
                                );
                            }
                        }

                        function alloc(size, fill, encoding) {
                            assertSize(size);
                            if (size <= 0) {
                                return createBuffer(size);
                            }
                            if (fill !== undefined) {
                                // Only pay attention to encoding if it's a string. This
                                // prevents accidentally sending in a number that would
                                // be interpreted as a start offset.
                                return typeof encoding === "string"
                                    ? createBuffer(size).fill(fill, encoding)
                                    : createBuffer(size).fill(fill);
                            }
                            return createBuffer(size);
                        }

                        /**
                         * Creates a new filled Buffer instance.
                         * alloc(size[, fill[, encoding]])
                         **/
                        Buffer.alloc = function (size, fill, encoding) {
                            return alloc(size, fill, encoding);
                        };

                        function allocUnsafe(size) {
                            assertSize(size);
                            return createBuffer(
                                size < 0 ? 0 : checked(size) | 0
                            );
                        }

                        /**
                         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
                         * */
                        Buffer.allocUnsafe = function (size) {
                            return allocUnsafe(size);
                        };
                        /**
                         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
                         */
                        Buffer.allocUnsafeSlow = function (size) {
                            return allocUnsafe(size);
                        };

                        function fromString(string, encoding) {
                            if (
                                typeof encoding !== "string" ||
                                encoding === ""
                            ) {
                                encoding = "utf8";
                            }

                            if (!Buffer.isEncoding(encoding)) {
                                throw new TypeError(
                                    "Unknown encoding: " + encoding
                                );
                            }

                            var length = byteLength(string, encoding) | 0;
                            var buf = createBuffer(length);

                            var actual = buf.write(string, encoding);

                            if (actual !== length) {
                                // Writing a hex string, for example, that contains invalid characters will
                                // cause everything after the first invalid character to be ignored. (e.g.
                                // 'abxxcd' will be treated as 'ab')
                                buf = buf.slice(0, actual);
                            }

                            return buf;
                        }

                        function fromArrayLike(array) {
                            var length =
                                array.length < 0
                                    ? 0
                                    : checked(array.length) | 0;
                            var buf = createBuffer(length);
                            for (var i = 0; i < length; i += 1) {
                                buf[i] = array[i] & 255;
                            }
                            return buf;
                        }

                        function fromArrayView(arrayView) {
                            if (isInstance(arrayView, Uint8Array)) {
                                var copy = new Uint8Array(arrayView);
                                return fromArrayBuffer(
                                    copy.buffer,
                                    copy.byteOffset,
                                    copy.byteLength
                                );
                            }
                            return fromArrayLike(arrayView);
                        }

                        function fromArrayBuffer(array, byteOffset, length) {
                            if (
                                byteOffset < 0 ||
                                array.byteLength < byteOffset
                            ) {
                                throw new RangeError(
                                    '"offset" is outside of buffer bounds'
                                );
                            }

                            if (array.byteLength < byteOffset + (length || 0)) {
                                throw new RangeError(
                                    '"length" is outside of buffer bounds'
                                );
                            }

                            var buf;
                            if (
                                byteOffset === undefined &&
                                length === undefined
                            ) {
                                buf = new Uint8Array(array);
                            } else if (length === undefined) {
                                buf = new Uint8Array(array, byteOffset);
                            } else {
                                buf = new Uint8Array(array, byteOffset, length);
                            }

                            // Return an augmented `Uint8Array` instance
                            Object.setPrototypeOf(buf, Buffer.prototype);

                            return buf;
                        }

                        function fromObject(obj) {
                            if (Buffer.isBuffer(obj)) {
                                var len = checked(obj.length) | 0;
                                var buf = createBuffer(len);

                                if (buf.length === 0) {
                                    return buf;
                                }

                                obj.copy(buf, 0, 0, len);
                                return buf;
                            }

                            if (obj.length !== undefined) {
                                if (
                                    typeof obj.length !== "number" ||
                                    numberIsNaN(obj.length)
                                ) {
                                    return createBuffer(0);
                                }
                                return fromArrayLike(obj);
                            }

                            if (
                                obj.type === "Buffer" &&
                                Array.isArray(obj.data)
                            ) {
                                return fromArrayLike(obj.data);
                            }
                        }

                        function checked(length) {
                            // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
                            // length is NaN (which is otherwise coerced to zero.)
                            if (length >= K_MAX_LENGTH) {
                                throw new RangeError(
                                    "Attempt to allocate Buffer larger than maximum " +
                                        "size: 0x" +
                                        K_MAX_LENGTH.toString(16) +
                                        " bytes"
                                );
                            }
                            return length | 0;
                        }

                        function SlowBuffer(length) {
                            if (+length != length) {
                                // eslint-disable-line eqeqeq
                                length = 0;
                            }
                            return Buffer.alloc(+length);
                        }

                        Buffer.isBuffer = function isBuffer(b) {
                            return (
                                b != null &&
                                b._isBuffer === true &&
                                b !== Buffer.prototype
                            ); // so Buffer.isBuffer(Buffer.prototype) will be false
                        };

                        Buffer.compare = function compare(a, b) {
                            if (isInstance(a, Uint8Array))
                                a = Buffer.from(a, a.offset, a.byteLength);
                            if (isInstance(b, Uint8Array))
                                b = Buffer.from(b, b.offset, b.byteLength);
                            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                                throw new TypeError(
                                    'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
                                );
                            }

                            if (a === b) return 0;

                            var x = a.length;
                            var y = b.length;

                            for (
                                var i = 0, len = Math.min(x, y);
                                i < len;
                                ++i
                            ) {
                                if (a[i] !== b[i]) {
                                    x = a[i];
                                    y = b[i];
                                    break;
                                }
                            }

                            if (x < y) return -1;
                            if (y < x) return 1;
                            return 0;
                        };

                        Buffer.isEncoding = function isEncoding(encoding) {
                            switch (String(encoding).toLowerCase()) {
                                case "hex":
                                case "utf8":
                                case "utf-8":
                                case "ascii":
                                case "latin1":
                                case "binary":
                                case "base64":
                                case "ucs2":
                                case "ucs-2":
                                case "utf16le":
                                case "utf-16le":
                                    return true;
                                default:
                                    return false;
                            }
                        };

                        Buffer.concat = function concat(list, length) {
                            if (!Array.isArray(list)) {
                                throw new TypeError(
                                    '"list" argument must be an Array of Buffers'
                                );
                            }

                            if (list.length === 0) {
                                return Buffer.alloc(0);
                            }

                            var i;
                            if (length === undefined) {
                                length = 0;
                                for (i = 0; i < list.length; ++i) {
                                    length += list[i].length;
                                }
                            }

                            var buffer = Buffer.allocUnsafe(length);
                            var pos = 0;
                            for (i = 0; i < list.length; ++i) {
                                var buf = list[i];
                                if (isInstance(buf, Uint8Array)) {
                                    if (pos + buf.length > buffer.length) {
                                        Buffer.from(buf).copy(buffer, pos);
                                    } else {
                                        Uint8Array.prototype.set.call(
                                            buffer,
                                            buf,
                                            pos
                                        );
                                    }
                                } else if (!Buffer.isBuffer(buf)) {
                                    throw new TypeError(
                                        '"list" argument must be an Array of Buffers'
                                    );
                                } else {
                                    buf.copy(buffer, pos);
                                }
                                pos += buf.length;
                            }
                            return buffer;
                        };

                        function byteLength(string, encoding) {
                            if (Buffer.isBuffer(string)) {
                                return string.length;
                            }
                            if (
                                ArrayBuffer.isView(string) ||
                                isInstance(string, ArrayBuffer)
                            ) {
                                return string.byteLength;
                            }
                            if (typeof string !== "string") {
                                throw new TypeError(
                                    'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
                                        "Received type " +
                                        typeof string
                                );
                            }

                            var len = string.length;
                            var mustMatch =
                                arguments.length > 2 && arguments[2] === true;
                            if (!mustMatch && len === 0) return 0;

                            // Use a for loop to avoid recursion
                            var loweredCase = false;
                            for (;;) {
                                switch (encoding) {
                                    case "ascii":
                                    case "latin1":
                                    case "binary":
                                        return len;
                                    case "utf8":
                                    case "utf-8":
                                        return utf8ToBytes(string).length;
                                    case "ucs2":
                                    case "ucs-2":
                                    case "utf16le":
                                    case "utf-16le":
                                        return len * 2;
                                    case "hex":
                                        return len >>> 1;
                                    case "base64":
                                        return base64ToBytes(string).length;
                                    default:
                                        if (loweredCase) {
                                            return mustMatch
                                                ? -1
                                                : utf8ToBytes(string).length; // assume utf8
                                        }
                                        encoding = (
                                            "" + encoding
                                        ).toLowerCase();
                                        loweredCase = true;
                                }
                            }
                        }
                        Buffer.byteLength = byteLength;

                        function slowToString(encoding, start, end) {
                            var loweredCase = false;

                            // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
                            // property of a typed array.

                            // This behaves neither like String nor Uint8Array in that we set start/end
                            // to their upper/lower bounds if the value passed is out of range.
                            // undefined is handled specially as per ECMA-262 6th Edition,
                            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
                            if (start === undefined || start < 0) {
                                start = 0;
                            }
                            // Return early if start > this.length. Done here to prevent potential uint32
                            // coercion fail below.
                            if (start > this.length) {
                                return "";
                            }

                            if (end === undefined || end > this.length) {
                                end = this.length;
                            }

                            if (end <= 0) {
                                return "";
                            }

                            // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
                            end >>>= 0;
                            start >>>= 0;

                            if (end <= start) {
                                return "";
                            }

                            if (!encoding) encoding = "utf8";

                            while (true) {
                                switch (encoding) {
                                    case "hex":
                                        return hexSlice(this, start, end);

                                    case "utf8":
                                    case "utf-8":
                                        return utf8Slice(this, start, end);

                                    case "ascii":
                                        return asciiSlice(this, start, end);

                                    case "latin1":
                                    case "binary":
                                        return latin1Slice(this, start, end);

                                    case "base64":
                                        return base64Slice(this, start, end);

                                    case "ucs2":
                                    case "ucs-2":
                                    case "utf16le":
                                    case "utf-16le":
                                        return utf16leSlice(this, start, end);

                                    default:
                                        if (loweredCase)
                                            throw new TypeError(
                                                "Unknown encoding: " + encoding
                                            );
                                        encoding = (
                                            encoding + ""
                                        ).toLowerCase();
                                        loweredCase = true;
                                }
                            }
                        }

                        // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
                        // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
                        // reliably in a browserify context because there could be multiple different
                        // copies of the 'buffer' package in use. This method works even for Buffer
                        // instances that were created from another copy of the `buffer` package.
                        // See: https://github.com/feross/buffer/issues/154
                        Buffer.prototype._isBuffer = true;

                        function swap(b, n, m) {
                            var i = b[n];
                            b[n] = b[m];
                            b[m] = i;
                        }

                        Buffer.prototype.swap16 = function swap16() {
                            var len = this.length;
                            if (len % 2 !== 0) {
                                throw new RangeError(
                                    "Buffer size must be a multiple of 16-bits"
                                );
                            }
                            for (var i = 0; i < len; i += 2) {
                                swap(this, i, i + 1);
                            }
                            return this;
                        };

                        Buffer.prototype.swap32 = function swap32() {
                            var len = this.length;
                            if (len % 4 !== 0) {
                                throw new RangeError(
                                    "Buffer size must be a multiple of 32-bits"
                                );
                            }
                            for (var i = 0; i < len; i += 4) {
                                swap(this, i, i + 3);
                                swap(this, i + 1, i + 2);
                            }
                            return this;
                        };

                        Buffer.prototype.swap64 = function swap64() {
                            var len = this.length;
                            if (len % 8 !== 0) {
                                throw new RangeError(
                                    "Buffer size must be a multiple of 64-bits"
                                );
                            }
                            for (var i = 0; i < len; i += 8) {
                                swap(this, i, i + 7);
                                swap(this, i + 1, i + 6);
                                swap(this, i + 2, i + 5);
                                swap(this, i + 3, i + 4);
                            }
                            return this;
                        };

                        Buffer.prototype.toString = function toString() {
                            var length = this.length;
                            if (length === 0) return "";
                            if (arguments.length === 0)
                                return utf8Slice(this, 0, length);
                            return slowToString.apply(this, arguments);
                        };

                        Buffer.prototype.toLocaleString =
                            Buffer.prototype.toString;

                        Buffer.prototype.equals = function equals(b) {
                            if (!Buffer.isBuffer(b))
                                throw new TypeError(
                                    "Argument must be a Buffer"
                                );
                            if (this === b) return true;
                            return Buffer.compare(this, b) === 0;
                        };

                        Buffer.prototype.inspect = function inspect() {
                            var str = "";
                            var max = exports.INSPECT_MAX_BYTES;
                            str = this.toString("hex", 0, max)
                                .replace(/(.{2})/g, "$1 ")
                                .trim();
                            if (this.length > max) str += " ... ";
                            return "<Buffer " + str + ">";
                        };
                        if (customInspectSymbol) {
                            Buffer.prototype[customInspectSymbol] =
                                Buffer.prototype.inspect;
                        }

                        Buffer.prototype.compare = function compare(
                            target,
                            start,
                            end,
                            thisStart,
                            thisEnd
                        ) {
                            if (isInstance(target, Uint8Array)) {
                                target = Buffer.from(
                                    target,
                                    target.offset,
                                    target.byteLength
                                );
                            }
                            if (!Buffer.isBuffer(target)) {
                                throw new TypeError(
                                    'The "target" argument must be one of type Buffer or Uint8Array. ' +
                                        "Received type " +
                                        typeof target
                                );
                            }

                            if (start === undefined) {
                                start = 0;
                            }
                            if (end === undefined) {
                                end = target ? target.length : 0;
                            }
                            if (thisStart === undefined) {
                                thisStart = 0;
                            }
                            if (thisEnd === undefined) {
                                thisEnd = this.length;
                            }

                            if (
                                start < 0 ||
                                end > target.length ||
                                thisStart < 0 ||
                                thisEnd > this.length
                            ) {
                                throw new RangeError("out of range index");
                            }

                            if (thisStart >= thisEnd && start >= end) {
                                return 0;
                            }
                            if (thisStart >= thisEnd) {
                                return -1;
                            }
                            if (start >= end) {
                                return 1;
                            }

                            start >>>= 0;
                            end >>>= 0;
                            thisStart >>>= 0;
                            thisEnd >>>= 0;

                            if (this === target) return 0;

                            var x = thisEnd - thisStart;
                            var y = end - start;
                            var len = Math.min(x, y);

                            var thisCopy = this.slice(thisStart, thisEnd);
                            var targetCopy = target.slice(start, end);

                            for (var i = 0; i < len; ++i) {
                                if (thisCopy[i] !== targetCopy[i]) {
                                    x = thisCopy[i];
                                    y = targetCopy[i];
                                    break;
                                }
                            }

                            if (x < y) return -1;
                            if (y < x) return 1;
                            return 0;
                        };

                        // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
                        // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
                        //
                        // Arguments:
                        // - buffer - a Buffer to search
                        // - val - a string, Buffer, or number
                        // - byteOffset - an index into `buffer`; will be clamped to an int32
                        // - encoding - an optional encoding, relevant is val is a string
                        // - dir - true for indexOf, false for lastIndexOf
                        function bidirectionalIndexOf(
                            buffer,
                            val,
                            byteOffset,
                            encoding,
                            dir
                        ) {
                            // Empty buffer means no match
                            if (buffer.length === 0) return -1;

                            // Normalize byteOffset
                            if (typeof byteOffset === "string") {
                                encoding = byteOffset;
                                byteOffset = 0;
                            } else if (byteOffset > 0x7fffffff) {
                                byteOffset = 0x7fffffff;
                            } else if (byteOffset < -0x80000000) {
                                byteOffset = -0x80000000;
                            }
                            byteOffset = +byteOffset; // Coerce to Number.
                            if (numberIsNaN(byteOffset)) {
                                // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                                byteOffset = dir ? 0 : buffer.length - 1;
                            }

                            // Normalize byteOffset: negative offsets start from the end of the buffer
                            if (byteOffset < 0)
                                byteOffset = buffer.length + byteOffset;
                            if (byteOffset >= buffer.length) {
                                if (dir) return -1;
                                else byteOffset = buffer.length - 1;
                            } else if (byteOffset < 0) {
                                if (dir) byteOffset = 0;
                                else return -1;
                            }

                            // Normalize val
                            if (typeof val === "string") {
                                val = Buffer.from(val, encoding);
                            }

                            // Finally, search either indexOf (if dir is true) or lastIndexOf
                            if (Buffer.isBuffer(val)) {
                                // Special case: looking for empty string/buffer always fails
                                if (val.length === 0) {
                                    return -1;
                                }
                                return arrayIndexOf(
                                    buffer,
                                    val,
                                    byteOffset,
                                    encoding,
                                    dir
                                );
                            } else if (typeof val === "number") {
                                val = val & 0xff; // Search for a byte value [0-255]
                                if (
                                    typeof Uint8Array.prototype.indexOf ===
                                    "function"
                                ) {
                                    if (dir) {
                                        return Uint8Array.prototype.indexOf.call(
                                            buffer,
                                            val,
                                            byteOffset
                                        );
                                    } else {
                                        return Uint8Array.prototype.lastIndexOf.call(
                                            buffer,
                                            val,
                                            byteOffset
                                        );
                                    }
                                }
                                return arrayIndexOf(
                                    buffer,
                                    [val],
                                    byteOffset,
                                    encoding,
                                    dir
                                );
                            }

                            throw new TypeError(
                                "val must be string, number or Buffer"
                            );
                        }

                        function arrayIndexOf(
                            arr,
                            val,
                            byteOffset,
                            encoding,
                            dir
                        ) {
                            var indexSize = 1;
                            var arrLength = arr.length;
                            var valLength = val.length;

                            if (encoding !== undefined) {
                                encoding = String(encoding).toLowerCase();
                                if (
                                    encoding === "ucs2" ||
                                    encoding === "ucs-2" ||
                                    encoding === "utf16le" ||
                                    encoding === "utf-16le"
                                ) {
                                    if (arr.length < 2 || val.length < 2) {
                                        return -1;
                                    }
                                    indexSize = 2;
                                    arrLength /= 2;
                                    valLength /= 2;
                                    byteOffset /= 2;
                                }
                            }

                            function read(buf, i) {
                                if (indexSize === 1) {
                                    return buf[i];
                                } else {
                                    return buf.readUInt16BE(i * indexSize);
                                }
                            }

                            var i;
                            if (dir) {
                                var foundIndex = -1;
                                for (i = byteOffset; i < arrLength; i++) {
                                    if (
                                        read(arr, i) ===
                                        read(
                                            val,
                                            foundIndex === -1
                                                ? 0
                                                : i - foundIndex
                                        )
                                    ) {
                                        if (foundIndex === -1) foundIndex = i;
                                        if (i - foundIndex + 1 === valLength)
                                            return foundIndex * indexSize;
                                    } else {
                                        if (foundIndex !== -1)
                                            i -= i - foundIndex;
                                        foundIndex = -1;
                                    }
                                }
                            } else {
                                if (byteOffset + valLength > arrLength)
                                    byteOffset = arrLength - valLength;
                                for (i = byteOffset; i >= 0; i--) {
                                    var found = true;
                                    for (var j = 0; j < valLength; j++) {
                                        if (read(arr, i + j) !== read(val, j)) {
                                            found = false;
                                            break;
                                        }
                                    }
                                    if (found) return i;
                                }
                            }

                            return -1;
                        }

                        Buffer.prototype.includes = function includes(
                            val,
                            byteOffset,
                            encoding
                        ) {
                            return (
                                this.indexOf(val, byteOffset, encoding) !== -1
                            );
                        };

                        Buffer.prototype.indexOf = function indexOf(
                            val,
                            byteOffset,
                            encoding
                        ) {
                            return bidirectionalIndexOf(
                                this,
                                val,
                                byteOffset,
                                encoding,
                                true
                            );
                        };

                        Buffer.prototype.lastIndexOf = function lastIndexOf(
                            val,
                            byteOffset,
                            encoding
                        ) {
                            return bidirectionalIndexOf(
                                this,
                                val,
                                byteOffset,
                                encoding,
                                false
                            );
                        };

                        function hexWrite(buf, string, offset, length) {
                            offset = Number(offset) || 0;
                            var remaining = buf.length - offset;
                            if (!length) {
                                length = remaining;
                            } else {
                                length = Number(length);
                                if (length > remaining) {
                                    length = remaining;
                                }
                            }

                            var strLen = string.length;

                            if (length > strLen / 2) {
                                length = strLen / 2;
                            }
                            for (var i = 0; i < length; ++i) {
                                var parsed = parseInt(
                                    string.substr(i * 2, 2),
                                    16
                                );
                                if (numberIsNaN(parsed)) return i;
                                buf[offset + i] = parsed;
                            }
                            return i;
                        }

                        function utf8Write(buf, string, offset, length) {
                            return blitBuffer(
                                utf8ToBytes(string, buf.length - offset),
                                buf,
                                offset,
                                length
                            );
                        }

                        function asciiWrite(buf, string, offset, length) {
                            return blitBuffer(
                                asciiToBytes(string),
                                buf,
                                offset,
                                length
                            );
                        }

                        function base64Write(buf, string, offset, length) {
                            return blitBuffer(
                                base64ToBytes(string),
                                buf,
                                offset,
                                length
                            );
                        }

                        function ucs2Write(buf, string, offset, length) {
                            return blitBuffer(
                                utf16leToBytes(string, buf.length - offset),
                                buf,
                                offset,
                                length
                            );
                        }

                        Buffer.prototype.write = function write(
                            string,
                            offset,
                            length,
                            encoding
                        ) {
                            // Buffer#write(string)
                            if (offset === undefined) {
                                encoding = "utf8";
                                length = this.length;
                                offset = 0;
                                // Buffer#write(string, encoding)
                            } else if (
                                length === undefined &&
                                typeof offset === "string"
                            ) {
                                encoding = offset;
                                length = this.length;
                                offset = 0;
                                // Buffer#write(string, offset[, length][, encoding])
                            } else if (isFinite(offset)) {
                                offset = offset >>> 0;
                                if (isFinite(length)) {
                                    length = length >>> 0;
                                    if (encoding === undefined)
                                        encoding = "utf8";
                                } else {
                                    encoding = length;
                                    length = undefined;
                                }
                            } else {
                                throw new Error(
                                    "Buffer.write(string, encoding, offset[, length]) is no longer supported"
                                );
                            }

                            var remaining = this.length - offset;
                            if (length === undefined || length > remaining)
                                length = remaining;

                            if (
                                (string.length > 0 &&
                                    (length < 0 || offset < 0)) ||
                                offset > this.length
                            ) {
                                throw new RangeError(
                                    "Attempt to write outside buffer bounds"
                                );
                            }

                            if (!encoding) encoding = "utf8";

                            var loweredCase = false;
                            for (;;) {
                                switch (encoding) {
                                    case "hex":
                                        return hexWrite(
                                            this,
                                            string,
                                            offset,
                                            length
                                        );

                                    case "utf8":
                                    case "utf-8":
                                        return utf8Write(
                                            this,
                                            string,
                                            offset,
                                            length
                                        );

                                    case "ascii":
                                    case "latin1":
                                    case "binary":
                                        return asciiWrite(
                                            this,
                                            string,
                                            offset,
                                            length
                                        );

                                    case "base64":
                                        // Warning: maxLength not taken into account in base64Write
                                        return base64Write(
                                            this,
                                            string,
                                            offset,
                                            length
                                        );

                                    case "ucs2":
                                    case "ucs-2":
                                    case "utf16le":
                                    case "utf-16le":
                                        return ucs2Write(
                                            this,
                                            string,
                                            offset,
                                            length
                                        );

                                    default:
                                        if (loweredCase)
                                            throw new TypeError(
                                                "Unknown encoding: " + encoding
                                            );
                                        encoding = (
                                            "" + encoding
                                        ).toLowerCase();
                                        loweredCase = true;
                                }
                            }
                        };

                        Buffer.prototype.toJSON = function toJSON() {
                            return {
                                type: "Buffer",
                                data: Array.prototype.slice.call(
                                    this._arr || this,
                                    0
                                ),
                            };
                        };

                        function base64Slice(buf, start, end) {
                            if (start === 0 && end === buf.length) {
                                return base64.fromByteArray(buf);
                            } else {
                                return base64.fromByteArray(
                                    buf.slice(start, end)
                                );
                            }
                        }

                        function utf8Slice(buf, start, end) {
                            end = Math.min(buf.length, end);
                            var res = [];

                            var i = start;
                            while (i < end) {
                                var firstByte = buf[i];
                                var codePoint = null;
                                var bytesPerSequence =
                                    firstByte > 0xef
                                        ? 4
                                        : firstByte > 0xdf
                                        ? 3
                                        : firstByte > 0xbf
                                        ? 2
                                        : 1;

                                if (i + bytesPerSequence <= end) {
                                    var secondByte,
                                        thirdByte,
                                        fourthByte,
                                        tempCodePoint;

                                    switch (bytesPerSequence) {
                                        case 1:
                                            if (firstByte < 0x80) {
                                                codePoint = firstByte;
                                            }
                                            break;
                                        case 2:
                                            secondByte = buf[i + 1];
                                            if ((secondByte & 0xc0) === 0x80) {
                                                tempCodePoint =
                                                    ((firstByte & 0x1f) <<
                                                        0x6) |
                                                    (secondByte & 0x3f);
                                                if (tempCodePoint > 0x7f) {
                                                    codePoint = tempCodePoint;
                                                }
                                            }
                                            break;
                                        case 3:
                                            secondByte = buf[i + 1];
                                            thirdByte = buf[i + 2];
                                            if (
                                                (secondByte & 0xc0) === 0x80 &&
                                                (thirdByte & 0xc0) === 0x80
                                            ) {
                                                tempCodePoint =
                                                    ((firstByte & 0xf) << 0xc) |
                                                    ((secondByte & 0x3f) <<
                                                        0x6) |
                                                    (thirdByte & 0x3f);
                                                if (
                                                    tempCodePoint > 0x7ff &&
                                                    (tempCodePoint < 0xd800 ||
                                                        tempCodePoint > 0xdfff)
                                                ) {
                                                    codePoint = tempCodePoint;
                                                }
                                            }
                                            break;
                                        case 4:
                                            secondByte = buf[i + 1];
                                            thirdByte = buf[i + 2];
                                            fourthByte = buf[i + 3];
                                            if (
                                                (secondByte & 0xc0) === 0x80 &&
                                                (thirdByte & 0xc0) === 0x80 &&
                                                (fourthByte & 0xc0) === 0x80
                                            ) {
                                                tempCodePoint =
                                                    ((firstByte & 0xf) <<
                                                        0x12) |
                                                    ((secondByte & 0x3f) <<
                                                        0xc) |
                                                    ((thirdByte & 0x3f) <<
                                                        0x6) |
                                                    (fourthByte & 0x3f);
                                                if (
                                                    tempCodePoint > 0xffff &&
                                                    tempCodePoint < 0x110000
                                                ) {
                                                    codePoint = tempCodePoint;
                                                }
                                            }
                                    }
                                }

                                if (codePoint === null) {
                                    // we did not generate a valid codePoint so insert a
                                    // replacement char (U+FFFD) and advance only 1 byte
                                    codePoint = 0xfffd;
                                    bytesPerSequence = 1;
                                } else if (codePoint > 0xffff) {
                                    // encode to utf16 (surrogate pair dance)
                                    codePoint -= 0x10000;
                                    res.push(
                                        ((codePoint >>> 10) & 0x3ff) | 0xd800
                                    );
                                    codePoint = 0xdc00 | (codePoint & 0x3ff);
                                }

                                res.push(codePoint);
                                i += bytesPerSequence;
                            }

                            return decodeCodePointsArray(res);
                        }

                        // Based on http://stackoverflow.com/a/22747272/680742, the browser with
                        // the lowest limit is Chrome, with 0x10000 args.
                        // We go 1 magnitude less, for safety
                        var MAX_ARGUMENTS_LENGTH = 0x1000;

                        function decodeCodePointsArray(codePoints) {
                            var len = codePoints.length;
                            if (len <= MAX_ARGUMENTS_LENGTH) {
                                return String.fromCharCode.apply(
                                    String,
                                    codePoints
                                ); // avoid extra slice()
                            }

                            // Decode in chunks to avoid "call stack size exceeded".
                            var res = "";
                            var i = 0;
                            while (i < len) {
                                res += String.fromCharCode.apply(
                                    String,
                                    codePoints.slice(
                                        i,
                                        (i += MAX_ARGUMENTS_LENGTH)
                                    )
                                );
                            }
                            return res;
                        }

                        function asciiSlice(buf, start, end) {
                            var ret = "";
                            end = Math.min(buf.length, end);

                            for (var i = start; i < end; ++i) {
                                ret += String.fromCharCode(buf[i] & 0x7f);
                            }
                            return ret;
                        }

                        function latin1Slice(buf, start, end) {
                            var ret = "";
                            end = Math.min(buf.length, end);

                            for (var i = start; i < end; ++i) {
                                ret += String.fromCharCode(buf[i]);
                            }
                            return ret;
                        }

                        function hexSlice(buf, start, end) {
                            var len = buf.length;

                            if (!start || start < 0) start = 0;
                            if (!end || end < 0 || end > len) end = len;

                            var out = "";
                            for (var i = start; i < end; ++i) {
                                out += hexSliceLookupTable[buf[i]];
                            }
                            return out;
                        }

                        function utf16leSlice(buf, start, end) {
                            var bytes = buf.slice(start, end);
                            var res = "";
                            // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
                            for (var i = 0; i < bytes.length - 1; i += 2) {
                                res += String.fromCharCode(
                                    bytes[i] + bytes[i + 1] * 256
                                );
                            }
                            return res;
                        }

                        Buffer.prototype.slice = function slice(start, end) {
                            var len = this.length;
                            start = ~~start;
                            end = end === undefined ? len : ~~end;

                            if (start < 0) {
                                start += len;
                                if (start < 0) start = 0;
                            } else if (start > len) {
                                start = len;
                            }

                            if (end < 0) {
                                end += len;
                                if (end < 0) end = 0;
                            } else if (end > len) {
                                end = len;
                            }

                            if (end < start) end = start;

                            var newBuf = this.subarray(start, end);
                            // Return an augmented `Uint8Array` instance
                            Object.setPrototypeOf(newBuf, Buffer.prototype);

                            return newBuf;
                        };

                        /*
                         * Need to make sure that buffer isn't trying to write out of bounds.
                         */
                        function checkOffset(offset, ext, length) {
                            if (offset % 1 !== 0 || offset < 0)
                                throw new RangeError("offset is not uint");
                            if (offset + ext > length)
                                throw new RangeError(
                                    "Trying to access beyond buffer length"
                                );
                        }

                        Buffer.prototype.readUintLE =
                            Buffer.prototype.readUIntLE = function readUIntLE(
                                offset,
                                byteLength,
                                noAssert
                            ) {
                                offset = offset >>> 0;
                                byteLength = byteLength >>> 0;
                                if (!noAssert)
                                    checkOffset(
                                        offset,
                                        byteLength,
                                        this.length
                                    );

                                var val = this[offset];
                                var mul = 1;
                                var i = 0;
                                while (++i < byteLength && (mul *= 0x100)) {
                                    val += this[offset + i] * mul;
                                }

                                return val;
                            };

                        Buffer.prototype.readUintBE =
                            Buffer.prototype.readUIntBE = function readUIntBE(
                                offset,
                                byteLength,
                                noAssert
                            ) {
                                offset = offset >>> 0;
                                byteLength = byteLength >>> 0;
                                if (!noAssert) {
                                    checkOffset(
                                        offset,
                                        byteLength,
                                        this.length
                                    );
                                }

                                var val = this[offset + --byteLength];
                                var mul = 1;
                                while (byteLength > 0 && (mul *= 0x100)) {
                                    val += this[offset + --byteLength] * mul;
                                }

                                return val;
                            };

                        Buffer.prototype.readUint8 =
                            Buffer.prototype.readUInt8 = function readUInt8(
                                offset,
                                noAssert
                            ) {
                                offset = offset >>> 0;
                                if (!noAssert)
                                    checkOffset(offset, 1, this.length);
                                return this[offset];
                            };

                        Buffer.prototype.readUint16LE =
                            Buffer.prototype.readUInt16LE =
                                function readUInt16LE(offset, noAssert) {
                                    offset = offset >>> 0;
                                    if (!noAssert)
                                        checkOffset(offset, 2, this.length);
                                    return (
                                        this[offset] | (this[offset + 1] << 8)
                                    );
                                };

                        Buffer.prototype.readUint16BE =
                            Buffer.prototype.readUInt16BE =
                                function readUInt16BE(offset, noAssert) {
                                    offset = offset >>> 0;
                                    if (!noAssert)
                                        checkOffset(offset, 2, this.length);
                                    return (
                                        (this[offset] << 8) | this[offset + 1]
                                    );
                                };

                        Buffer.prototype.readUint32LE =
                            Buffer.prototype.readUInt32LE =
                                function readUInt32LE(offset, noAssert) {
                                    offset = offset >>> 0;
                                    if (!noAssert)
                                        checkOffset(offset, 4, this.length);

                                    return (
                                        (this[offset] |
                                            (this[offset + 1] << 8) |
                                            (this[offset + 2] << 16)) +
                                        this[offset + 3] * 0x1000000
                                    );
                                };

                        Buffer.prototype.readUint32BE =
                            Buffer.prototype.readUInt32BE =
                                function readUInt32BE(offset, noAssert) {
                                    offset = offset >>> 0;
                                    if (!noAssert)
                                        checkOffset(offset, 4, this.length);

                                    return (
                                        this[offset] * 0x1000000 +
                                        ((this[offset + 1] << 16) |
                                            (this[offset + 2] << 8) |
                                            this[offset + 3])
                                    );
                                };

                        Buffer.prototype.readIntLE = function readIntLE(
                            offset,
                            byteLength,
                            noAssert
                        ) {
                            offset = offset >>> 0;
                            byteLength = byteLength >>> 0;
                            if (!noAssert)
                                checkOffset(offset, byteLength, this.length);

                            var val = this[offset];
                            var mul = 1;
                            var i = 0;
                            while (++i < byteLength && (mul *= 0x100)) {
                                val += this[offset + i] * mul;
                            }
                            mul *= 0x80;

                            if (val >= mul) val -= Math.pow(2, 8 * byteLength);

                            return val;
                        };

                        Buffer.prototype.readIntBE = function readIntBE(
                            offset,
                            byteLength,
                            noAssert
                        ) {
                            offset = offset >>> 0;
                            byteLength = byteLength >>> 0;
                            if (!noAssert)
                                checkOffset(offset, byteLength, this.length);

                            var i = byteLength;
                            var mul = 1;
                            var val = this[offset + --i];
                            while (i > 0 && (mul *= 0x100)) {
                                val += this[offset + --i] * mul;
                            }
                            mul *= 0x80;

                            if (val >= mul) val -= Math.pow(2, 8 * byteLength);

                            return val;
                        };

                        Buffer.prototype.readInt8 = function readInt8(
                            offset,
                            noAssert
                        ) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 1, this.length);
                            if (!(this[offset] & 0x80)) return this[offset];
                            return (0xff - this[offset] + 1) * -1;
                        };

                        Buffer.prototype.readInt16LE = function readInt16LE(
                            offset,
                            noAssert
                        ) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 2, this.length);
                            var val = this[offset] | (this[offset + 1] << 8);
                            return val & 0x8000 ? val | 0xffff0000 : val;
                        };

                        Buffer.prototype.readInt16BE = function readInt16BE(
                            offset,
                            noAssert
                        ) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 2, this.length);
                            var val = this[offset + 1] | (this[offset] << 8);
                            return val & 0x8000 ? val | 0xffff0000 : val;
                        };

                        Buffer.prototype.readInt32LE = function readInt32LE(
                            offset,
                            noAssert
                        ) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 4, this.length);

                            return (
                                this[offset] |
                                (this[offset + 1] << 8) |
                                (this[offset + 2] << 16) |
                                (this[offset + 3] << 24)
                            );
                        };

                        Buffer.prototype.readInt32BE = function readInt32BE(
                            offset,
                            noAssert
                        ) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 4, this.length);

                            return (
                                (this[offset] << 24) |
                                (this[offset + 1] << 16) |
                                (this[offset + 2] << 8) |
                                this[offset + 3]
                            );
                        };

                        Buffer.prototype.readFloatLE = function readFloatLE(
                            offset,
                            noAssert
                        ) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 4, this.length);
                            return ieee754.read(this, offset, true, 23, 4);
                        };

                        Buffer.prototype.readFloatBE = function readFloatBE(
                            offset,
                            noAssert
                        ) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 4, this.length);
                            return ieee754.read(this, offset, false, 23, 4);
                        };

                        Buffer.prototype.readDoubleLE = function readDoubleLE(
                            offset,
                            noAssert
                        ) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 8, this.length);
                            return ieee754.read(this, offset, true, 52, 8);
                        };

                        Buffer.prototype.readDoubleBE = function readDoubleBE(
                            offset,
                            noAssert
                        ) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 8, this.length);
                            return ieee754.read(this, offset, false, 52, 8);
                        };

                        function checkInt(buf, value, offset, ext, max, min) {
                            if (!Buffer.isBuffer(buf))
                                throw new TypeError(
                                    '"buffer" argument must be a Buffer instance'
                                );
                            if (value > max || value < min)
                                throw new RangeError(
                                    '"value" argument is out of bounds'
                                );
                            if (offset + ext > buf.length)
                                throw new RangeError("Index out of range");
                        }

                        Buffer.prototype.writeUintLE =
                            Buffer.prototype.writeUIntLE = function writeUIntLE(
                                value,
                                offset,
                                byteLength,
                                noAssert
                            ) {
                                value = +value;
                                offset = offset >>> 0;
                                byteLength = byteLength >>> 0;
                                if (!noAssert) {
                                    var maxBytes =
                                        Math.pow(2, 8 * byteLength) - 1;
                                    checkInt(
                                        this,
                                        value,
                                        offset,
                                        byteLength,
                                        maxBytes,
                                        0
                                    );
                                }

                                var mul = 1;
                                var i = 0;
                                this[offset] = value & 0xff;
                                while (++i < byteLength && (mul *= 0x100)) {
                                    this[offset + i] = (value / mul) & 0xff;
                                }

                                return offset + byteLength;
                            };

                        Buffer.prototype.writeUintBE =
                            Buffer.prototype.writeUIntBE = function writeUIntBE(
                                value,
                                offset,
                                byteLength,
                                noAssert
                            ) {
                                value = +value;
                                offset = offset >>> 0;
                                byteLength = byteLength >>> 0;
                                if (!noAssert) {
                                    var maxBytes =
                                        Math.pow(2, 8 * byteLength) - 1;
                                    checkInt(
                                        this,
                                        value,
                                        offset,
                                        byteLength,
                                        maxBytes,
                                        0
                                    );
                                }

                                var i = byteLength - 1;
                                var mul = 1;
                                this[offset + i] = value & 0xff;
                                while (--i >= 0 && (mul *= 0x100)) {
                                    this[offset + i] = (value / mul) & 0xff;
                                }

                                return offset + byteLength;
                            };

                        Buffer.prototype.writeUint8 =
                            Buffer.prototype.writeUInt8 = function writeUInt8(
                                value,
                                offset,
                                noAssert
                            ) {
                                value = +value;
                                offset = offset >>> 0;
                                if (!noAssert)
                                    checkInt(this, value, offset, 1, 0xff, 0);
                                this[offset] = value & 0xff;
                                return offset + 1;
                            };

                        Buffer.prototype.writeUint16LE =
                            Buffer.prototype.writeUInt16LE =
                                function writeUInt16LE(
                                    value,
                                    offset,
                                    noAssert
                                ) {
                                    value = +value;
                                    offset = offset >>> 0;
                                    if (!noAssert)
                                        checkInt(
                                            this,
                                            value,
                                            offset,
                                            2,
                                            0xffff,
                                            0
                                        );
                                    this[offset] = value & 0xff;
                                    this[offset + 1] = value >>> 8;
                                    return offset + 2;
                                };

                        Buffer.prototype.writeUint16BE =
                            Buffer.prototype.writeUInt16BE =
                                function writeUInt16BE(
                                    value,
                                    offset,
                                    noAssert
                                ) {
                                    value = +value;
                                    offset = offset >>> 0;
                                    if (!noAssert)
                                        checkInt(
                                            this,
                                            value,
                                            offset,
                                            2,
                                            0xffff,
                                            0
                                        );
                                    this[offset] = value >>> 8;
                                    this[offset + 1] = value & 0xff;
                                    return offset + 2;
                                };

                        Buffer.prototype.writeUint32LE =
                            Buffer.prototype.writeUInt32LE =
                                function writeUInt32LE(
                                    value,
                                    offset,
                                    noAssert
                                ) {
                                    value = +value;
                                    offset = offset >>> 0;
                                    if (!noAssert)
                                        checkInt(
                                            this,
                                            value,
                                            offset,
                                            4,
                                            0xffffffff,
                                            0
                                        );
                                    this[offset + 3] = value >>> 24;
                                    this[offset + 2] = value >>> 16;
                                    this[offset + 1] = value >>> 8;
                                    this[offset] = value & 0xff;
                                    return offset + 4;
                                };

                        Buffer.prototype.writeUint32BE =
                            Buffer.prototype.writeUInt32BE =
                                function writeUInt32BE(
                                    value,
                                    offset,
                                    noAssert
                                ) {
                                    value = +value;
                                    offset = offset >>> 0;
                                    if (!noAssert)
                                        checkInt(
                                            this,
                                            value,
                                            offset,
                                            4,
                                            0xffffffff,
                                            0
                                        );
                                    this[offset] = value >>> 24;
                                    this[offset + 1] = value >>> 16;
                                    this[offset + 2] = value >>> 8;
                                    this[offset + 3] = value & 0xff;
                                    return offset + 4;
                                };

                        Buffer.prototype.writeIntLE = function writeIntLE(
                            value,
                            offset,
                            byteLength,
                            noAssert
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) {
                                var limit = Math.pow(2, 8 * byteLength - 1);

                                checkInt(
                                    this,
                                    value,
                                    offset,
                                    byteLength,
                                    limit - 1,
                                    -limit
                                );
                            }

                            var i = 0;
                            var mul = 1;
                            var sub = 0;
                            this[offset] = value & 0xff;
                            while (++i < byteLength && (mul *= 0x100)) {
                                if (
                                    value < 0 &&
                                    sub === 0 &&
                                    this[offset + i - 1] !== 0
                                ) {
                                    sub = 1;
                                }
                                this[offset + i] =
                                    (((value / mul) >> 0) - sub) & 0xff;
                            }

                            return offset + byteLength;
                        };

                        Buffer.prototype.writeIntBE = function writeIntBE(
                            value,
                            offset,
                            byteLength,
                            noAssert
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) {
                                var limit = Math.pow(2, 8 * byteLength - 1);

                                checkInt(
                                    this,
                                    value,
                                    offset,
                                    byteLength,
                                    limit - 1,
                                    -limit
                                );
                            }

                            var i = byteLength - 1;
                            var mul = 1;
                            var sub = 0;
                            this[offset + i] = value & 0xff;
                            while (--i >= 0 && (mul *= 0x100)) {
                                if (
                                    value < 0 &&
                                    sub === 0 &&
                                    this[offset + i + 1] !== 0
                                ) {
                                    sub = 1;
                                }
                                this[offset + i] =
                                    (((value / mul) >> 0) - sub) & 0xff;
                            }

                            return offset + byteLength;
                        };

                        Buffer.prototype.writeInt8 = function writeInt8(
                            value,
                            offset,
                            noAssert
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert)
                                checkInt(this, value, offset, 1, 0x7f, -0x80);
                            if (value < 0) value = 0xff + value + 1;
                            this[offset] = value & 0xff;
                            return offset + 1;
                        };

                        Buffer.prototype.writeInt16LE = function writeInt16LE(
                            value,
                            offset,
                            noAssert
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert)
                                checkInt(
                                    this,
                                    value,
                                    offset,
                                    2,
                                    0x7fff,
                                    -0x8000
                                );
                            this[offset] = value & 0xff;
                            this[offset + 1] = value >>> 8;
                            return offset + 2;
                        };

                        Buffer.prototype.writeInt16BE = function writeInt16BE(
                            value,
                            offset,
                            noAssert
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert)
                                checkInt(
                                    this,
                                    value,
                                    offset,
                                    2,
                                    0x7fff,
                                    -0x8000
                                );
                            this[offset] = value >>> 8;
                            this[offset + 1] = value & 0xff;
                            return offset + 2;
                        };

                        Buffer.prototype.writeInt32LE = function writeInt32LE(
                            value,
                            offset,
                            noAssert
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert)
                                checkInt(
                                    this,
                                    value,
                                    offset,
                                    4,
                                    0x7fffffff,
                                    -0x80000000
                                );
                            this[offset] = value & 0xff;
                            this[offset + 1] = value >>> 8;
                            this[offset + 2] = value >>> 16;
                            this[offset + 3] = value >>> 24;
                            return offset + 4;
                        };

                        Buffer.prototype.writeInt32BE = function writeInt32BE(
                            value,
                            offset,
                            noAssert
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert)
                                checkInt(
                                    this,
                                    value,
                                    offset,
                                    4,
                                    0x7fffffff,
                                    -0x80000000
                                );
                            if (value < 0) value = 0xffffffff + value + 1;
                            this[offset] = value >>> 24;
                            this[offset + 1] = value >>> 16;
                            this[offset + 2] = value >>> 8;
                            this[offset + 3] = value & 0xff;
                            return offset + 4;
                        };

                        function checkIEEE754(
                            buf,
                            value,
                            offset,
                            ext,
                            max,
                            min
                        ) {
                            if (offset + ext > buf.length)
                                throw new RangeError("Index out of range");
                            if (offset < 0)
                                throw new RangeError("Index out of range");
                        }

                        function writeFloat(
                            buf,
                            value,
                            offset,
                            littleEndian,
                            noAssert
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) {
                                checkIEEE754(
                                    buf,
                                    value,
                                    offset,
                                    4,
                                    3.4028234663852886e38,
                                    -3.4028234663852886e38
                                );
                            }
                            ieee754.write(
                                buf,
                                value,
                                offset,
                                littleEndian,
                                23,
                                4
                            );
                            return offset + 4;
                        }

                        Buffer.prototype.writeFloatLE = function writeFloatLE(
                            value,
                            offset,
                            noAssert
                        ) {
                            return writeFloat(
                                this,
                                value,
                                offset,
                                true,
                                noAssert
                            );
                        };

                        Buffer.prototype.writeFloatBE = function writeFloatBE(
                            value,
                            offset,
                            noAssert
                        ) {
                            return writeFloat(
                                this,
                                value,
                                offset,
                                false,
                                noAssert
                            );
                        };

                        function writeDouble(
                            buf,
                            value,
                            offset,
                            littleEndian,
                            noAssert
                        ) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) {
                                checkIEEE754(
                                    buf,
                                    value,
                                    offset,
                                    8,
                                    1.7976931348623157e308,
                                    -1.7976931348623157e308
                                );
                            }
                            ieee754.write(
                                buf,
                                value,
                                offset,
                                littleEndian,
                                52,
                                8
                            );
                            return offset + 8;
                        }

                        Buffer.prototype.writeDoubleLE = function writeDoubleLE(
                            value,
                            offset,
                            noAssert
                        ) {
                            return writeDouble(
                                this,
                                value,
                                offset,
                                true,
                                noAssert
                            );
                        };

                        Buffer.prototype.writeDoubleBE = function writeDoubleBE(
                            value,
                            offset,
                            noAssert
                        ) {
                            return writeDouble(
                                this,
                                value,
                                offset,
                                false,
                                noAssert
                            );
                        };

                        // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
                        Buffer.prototype.copy = function copy(
                            target,
                            targetStart,
                            start,
                            end
                        ) {
                            if (!Buffer.isBuffer(target))
                                throw new TypeError(
                                    "argument should be a Buffer"
                                );
                            if (!start) start = 0;
                            if (!end && end !== 0) end = this.length;
                            if (targetStart >= target.length)
                                targetStart = target.length;
                            if (!targetStart) targetStart = 0;
                            if (end > 0 && end < start) end = start;

                            // Copy 0 bytes; we're done
                            if (end === start) return 0;
                            if (target.length === 0 || this.length === 0)
                                return 0;

                            // Fatal error conditions
                            if (targetStart < 0) {
                                throw new RangeError(
                                    "targetStart out of bounds"
                                );
                            }
                            if (start < 0 || start >= this.length)
                                throw new RangeError("Index out of range");
                            if (end < 0)
                                throw new RangeError("sourceEnd out of bounds");

                            // Are we oob?
                            if (end > this.length) end = this.length;
                            if (target.length - targetStart < end - start) {
                                end = target.length - targetStart + start;
                            }

                            var len = end - start;

                            if (
                                this === target &&
                                typeof Uint8Array.prototype.copyWithin ===
                                    "function"
                            ) {
                                // Use built-in when available, missing from IE11
                                this.copyWithin(targetStart, start, end);
                            } else {
                                Uint8Array.prototype.set.call(
                                    target,
                                    this.subarray(start, end),
                                    targetStart
                                );
                            }

                            return len;
                        };

                        // Usage:
                        //    buffer.fill(number[, offset[, end]])
                        //    buffer.fill(buffer[, offset[, end]])
                        //    buffer.fill(string[, offset[, end]][, encoding])
                        Buffer.prototype.fill = function fill(
                            val,
                            start,
                            end,
                            encoding
                        ) {
                            // Handle string cases:
                            if (typeof val === "string") {
                                if (typeof start === "string") {
                                    encoding = start;
                                    start = 0;
                                    end = this.length;
                                } else if (typeof end === "string") {
                                    encoding = end;
                                    end = this.length;
                                }
                                if (
                                    encoding !== undefined &&
                                    typeof encoding !== "string"
                                ) {
                                    throw new TypeError(
                                        "encoding must be a string"
                                    );
                                }
                                if (
                                    typeof encoding === "string" &&
                                    !Buffer.isEncoding(encoding)
                                ) {
                                    throw new TypeError(
                                        "Unknown encoding: " + encoding
                                    );
                                }
                                if (val.length === 1) {
                                    var code = val.charCodeAt(0);
                                    if (
                                        (encoding === "utf8" && code < 128) ||
                                        encoding === "latin1"
                                    ) {
                                        // Fast path: If `val` fits into a single byte, use that numeric value.
                                        val = code;
                                    }
                                }
                            } else if (typeof val === "number") {
                                val = val & 255;
                            } else if (typeof val === "boolean") {
                                val = Number(val);
                            }

                            // Invalid ranges are not set to a default, so can range check early.
                            if (
                                start < 0 ||
                                this.length < start ||
                                this.length < end
                            ) {
                                throw new RangeError("Out of range index");
                            }

                            if (end <= start) {
                                return this;
                            }

                            start = start >>> 0;
                            end = end === undefined ? this.length : end >>> 0;

                            if (!val) val = 0;

                            var i;
                            if (typeof val === "number") {
                                for (i = start; i < end; ++i) {
                                    this[i] = val;
                                }
                            } else {
                                var bytes = Buffer.isBuffer(val)
                                    ? val
                                    : Buffer.from(val, encoding);
                                var len = bytes.length;
                                if (len === 0) {
                                    throw new TypeError(
                                        'The value "' +
                                            val +
                                            '" is invalid for argument "value"'
                                    );
                                }
                                for (i = 0; i < end - start; ++i) {
                                    this[i + start] = bytes[i % len];
                                }
                            }

                            return this;
                        };

                        // HELPER FUNCTIONS
                        // ================

                        var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

                        function base64clean(str) {
                            // Node takes equal signs as end of the Base64 encoding
                            str = str.split("=")[0];
                            // Node strips out invalid characters like \n and \t from the string, base64-js does not
                            str = str.trim().replace(INVALID_BASE64_RE, "");
                            // Node converts strings with length < 2 to ''
                            if (str.length < 2) return "";
                            // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
                            while (str.length % 4 !== 0) {
                                str = str + "=";
                            }
                            return str;
                        }

                        function utf8ToBytes(string, units) {
                            units = units || Infinity;
                            var codePoint;
                            var length = string.length;
                            var leadSurrogate = null;
                            var bytes = [];

                            for (var i = 0; i < length; ++i) {
                                codePoint = string.charCodeAt(i);

                                // is surrogate component
                                if (codePoint > 0xd7ff && codePoint < 0xe000) {
                                    // last char was a lead
                                    if (!leadSurrogate) {
                                        // no lead yet
                                        if (codePoint > 0xdbff) {
                                            // unexpected trail
                                            if ((units -= 3) > -1)
                                                bytes.push(0xef, 0xbf, 0xbd);
                                            continue;
                                        } else if (i + 1 === length) {
                                            // unpaired lead
                                            if ((units -= 3) > -1)
                                                bytes.push(0xef, 0xbf, 0xbd);
                                            continue;
                                        }

                                        // valid lead
                                        leadSurrogate = codePoint;

                                        continue;
                                    }

                                    // 2 leads in a row
                                    if (codePoint < 0xdc00) {
                                        if ((units -= 3) > -1)
                                            bytes.push(0xef, 0xbf, 0xbd);
                                        leadSurrogate = codePoint;
                                        continue;
                                    }

                                    // valid surrogate pair
                                    codePoint =
                                        (((leadSurrogate - 0xd800) << 10) |
                                            (codePoint - 0xdc00)) +
                                        0x10000;
                                } else if (leadSurrogate) {
                                    // valid bmp char, but last char was a lead
                                    if ((units -= 3) > -1)
                                        bytes.push(0xef, 0xbf, 0xbd);
                                }

                                leadSurrogate = null;

                                // encode utf8
                                if (codePoint < 0x80) {
                                    if ((units -= 1) < 0) break;
                                    bytes.push(codePoint);
                                } else if (codePoint < 0x800) {
                                    if ((units -= 2) < 0) break;
                                    bytes.push(
                                        (codePoint >> 0x6) | 0xc0,
                                        (codePoint & 0x3f) | 0x80
                                    );
                                } else if (codePoint < 0x10000) {
                                    if ((units -= 3) < 0) break;
                                    bytes.push(
                                        (codePoint >> 0xc) | 0xe0,
                                        ((codePoint >> 0x6) & 0x3f) | 0x80,
                                        (codePoint & 0x3f) | 0x80
                                    );
                                } else if (codePoint < 0x110000) {
                                    if ((units -= 4) < 0) break;
                                    bytes.push(
                                        (codePoint >> 0x12) | 0xf0,
                                        ((codePoint >> 0xc) & 0x3f) | 0x80,
                                        ((codePoint >> 0x6) & 0x3f) | 0x80,
                                        (codePoint & 0x3f) | 0x80
                                    );
                                } else {
                                    throw new Error("Invalid code point");
                                }
                            }

                            return bytes;
                        }

                        function asciiToBytes(str) {
                            var byteArray = [];
                            for (var i = 0; i < str.length; ++i) {
                                // Node's code seems to be doing this and not & 0x7F..
                                byteArray.push(str.charCodeAt(i) & 0xff);
                            }
                            return byteArray;
                        }

                        function utf16leToBytes(str, units) {
                            var c, hi, lo;
                            var byteArray = [];
                            for (var i = 0; i < str.length; ++i) {
                                if ((units -= 2) < 0) break;

                                c = str.charCodeAt(i);
                                hi = c >> 8;
                                lo = c % 256;
                                byteArray.push(lo);
                                byteArray.push(hi);
                            }

                            return byteArray;
                        }

                        function base64ToBytes(str) {
                            return base64.toByteArray(base64clean(str));
                        }

                        function blitBuffer(src, dst, offset, length) {
                            for (var i = 0; i < length; ++i) {
                                if (i + offset >= dst.length || i >= src.length)
                                    break;
                                dst[i + offset] = src[i];
                            }
                            return i;
                        }

                        // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
                        // the `instanceof` check but they should be treated as of that type.
                        // See: https://github.com/feross/buffer/issues/166
                        function isInstance(obj, type) {
                            return (
                                obj instanceof type ||
                                (obj != null &&
                                    obj.constructor != null &&
                                    obj.constructor.name != null &&
                                    obj.constructor.name === type.name)
                            );
                        }
                        function numberIsNaN(obj) {
                            // For IE11 support
                            return obj !== obj; // eslint-disable-line no-self-compare
                        }

                        // Create lookup table for `toString('hex')`
                        // See: https://github.com/feross/buffer/issues/219
                        var hexSliceLookupTable = (function () {
                            var alphabet = "0123456789abcdef";
                            var table = new Array(256);
                            for (var i = 0; i < 16; ++i) {
                                var i16 = i * 16;
                                for (var j = 0; j < 16; ++j) {
                                    table[i16 + j] = alphabet[i] + alphabet[j];
                                }
                            }
                            return table;
                        })();
                    }.call(this));
                }.call(this, require("buffer").Buffer));
            },
            { "base64-js": 76, buffer: 80, ieee754: 86 },
        ],
        81: [
            function (require, module, exports) {
                module.exports = {
                    100: "Continue",
                    101: "Switching Protocols",
                    102: "Processing",
                    200: "OK",
                    201: "Created",
                    202: "Accepted",
                    203: "Non-Authoritative Information",
                    204: "No Content",
                    205: "Reset Content",
                    206: "Partial Content",
                    207: "Multi-Status",
                    208: "Already Reported",
                    226: "IM Used",
                    300: "Multiple Choices",
                    301: "Moved Permanently",
                    302: "Found",
                    303: "See Other",
                    304: "Not Modified",
                    305: "Use Proxy",
                    307: "Temporary Redirect",
                    308: "Permanent Redirect",
                    400: "Bad Request",
                    401: "Unauthorized",
                    402: "Payment Required",
                    403: "Forbidden",
                    404: "Not Found",
                    405: "Method Not Allowed",
                    406: "Not Acceptable",
                    407: "Proxy Authentication Required",
                    408: "Request Timeout",
                    409: "Conflict",
                    410: "Gone",
                    411: "Length Required",
                    412: "Precondition Failed",
                    413: "Payload Too Large",
                    414: "URI Too Long",
                    415: "Unsupported Media Type",
                    416: "Range Not Satisfiable",
                    417: "Expectation Failed",
                    418: "I'm a teapot",
                    421: "Misdirected Request",
                    422: "Unprocessable Entity",
                    423: "Locked",
                    424: "Failed Dependency",
                    425: "Unordered Collection",
                    426: "Upgrade Required",
                    428: "Precondition Required",
                    429: "Too Many Requests",
                    431: "Request Header Fields Too Large",
                    451: "Unavailable For Legal Reasons",
                    500: "Internal Server Error",
                    501: "Not Implemented",
                    502: "Bad Gateway",
                    503: "Service Unavailable",
                    504: "Gateway Timeout",
                    505: "HTTP Version Not Supported",
                    506: "Variant Also Negotiates",
                    507: "Insufficient Storage",
                    508: "Loop Detected",
                    509: "Bandwidth Limit Exceeded",
                    510: "Not Extended",
                    511: "Network Authentication Required",
                };
            },
            {},
        ],
        82: [
            function (require, module, exports) {
                module.exports = {
                    O_RDONLY: 0,
                    O_WRONLY: 1,
                    O_RDWR: 2,
                    S_IFMT: 61440,
                    S_IFREG: 32768,
                    S_IFDIR: 16384,
                    S_IFCHR: 8192,
                    S_IFBLK: 24576,
                    S_IFIFO: 4096,
                    S_IFLNK: 40960,
                    S_IFSOCK: 49152,
                    O_CREAT: 512,
                    O_EXCL: 2048,
                    O_NOCTTY: 131072,
                    O_TRUNC: 1024,
                    O_APPEND: 8,
                    O_DIRECTORY: 1048576,
                    O_NOFOLLOW: 256,
                    O_SYNC: 128,
                    O_SYMLINK: 2097152,
                    O_NONBLOCK: 4,
                    S_IRWXU: 448,
                    S_IRUSR: 256,
                    S_IWUSR: 128,
                    S_IXUSR: 64,
                    S_IRWXG: 56,
                    S_IRGRP: 32,
                    S_IWGRP: 16,
                    S_IXGRP: 8,
                    S_IRWXO: 7,
                    S_IROTH: 4,
                    S_IWOTH: 2,
                    S_IXOTH: 1,
                    E2BIG: 7,
                    EACCES: 13,
                    EADDRINUSE: 48,
                    EADDRNOTAVAIL: 49,
                    EAFNOSUPPORT: 47,
                    EAGAIN: 35,
                    EALREADY: 37,
                    EBADF: 9,
                    EBADMSG: 94,
                    EBUSY: 16,
                    ECANCELED: 89,
                    ECHILD: 10,
                    ECONNABORTED: 53,
                    ECONNREFUSED: 61,
                    ECONNRESET: 54,
                    EDEADLK: 11,
                    EDESTADDRREQ: 39,
                    EDOM: 33,
                    EDQUOT: 69,
                    EEXIST: 17,
                    EFAULT: 14,
                    EFBIG: 27,
                    EHOSTUNREACH: 65,
                    EIDRM: 90,
                    EILSEQ: 92,
                    EINPROGRESS: 36,
                    EINTR: 4,
                    EINVAL: 22,
                    EIO: 5,
                    EISCONN: 56,
                    EISDIR: 21,
                    ELOOP: 62,
                    EMFILE: 24,
                    EMLINK: 31,
                    EMSGSIZE: 40,
                    EMULTIHOP: 95,
                    ENAMETOOLONG: 63,
                    ENETDOWN: 50,
                    ENETRESET: 52,
                    ENETUNREACH: 51,
                    ENFILE: 23,
                    ENOBUFS: 55,
                    ENODATA: 96,
                    ENODEV: 19,
                    ENOENT: 2,
                    ENOEXEC: 8,
                    ENOLCK: 77,
                    ENOLINK: 97,
                    ENOMEM: 12,
                    ENOMSG: 91,
                    ENOPROTOOPT: 42,
                    ENOSPC: 28,
                    ENOSR: 98,
                    ENOSTR: 99,
                    ENOSYS: 78,
                    ENOTCONN: 57,
                    ENOTDIR: 20,
                    ENOTEMPTY: 66,
                    ENOTSOCK: 38,
                    ENOTSUP: 45,
                    ENOTTY: 25,
                    ENXIO: 6,
                    EOPNOTSUPP: 102,
                    EOVERFLOW: 84,
                    EPERM: 1,
                    EPIPE: 32,
                    EPROTO: 100,
                    EPROTONOSUPPORT: 43,
                    EPROTOTYPE: 41,
                    ERANGE: 34,
                    EROFS: 30,
                    ESPIPE: 29,
                    ESRCH: 3,
                    ESTALE: 70,
                    ETIME: 101,
                    ETIMEDOUT: 60,
                    ETXTBSY: 26,
                    EWOULDBLOCK: 35,
                    EXDEV: 18,
                    SIGHUP: 1,
                    SIGINT: 2,
                    SIGQUIT: 3,
                    SIGILL: 4,
                    SIGTRAP: 5,
                    SIGABRT: 6,
                    SIGIOT: 6,
                    SIGBUS: 10,
                    SIGFPE: 8,
                    SIGKILL: 9,
                    SIGUSR1: 30,
                    SIGSEGV: 11,
                    SIGUSR2: 31,
                    SIGPIPE: 13,
                    SIGALRM: 14,
                    SIGTERM: 15,
                    SIGCHLD: 20,
                    SIGCONT: 19,
                    SIGSTOP: 17,
                    SIGTSTP: 18,
                    SIGTTIN: 21,
                    SIGTTOU: 22,
                    SIGURG: 16,
                    SIGXCPU: 24,
                    SIGXFSZ: 25,
                    SIGVTALRM: 26,
                    SIGPROF: 27,
                    SIGWINCH: 28,
                    SIGIO: 23,
                    SIGSYS: 12,
                    SSL_OP_ALL: 2147486719,
                    SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION: 262144,
                    SSL_OP_CIPHER_SERVER_PREFERENCE: 4194304,
                    SSL_OP_CISCO_ANYCONNECT: 32768,
                    SSL_OP_COOKIE_EXCHANGE: 8192,
                    SSL_OP_CRYPTOPRO_TLSEXT_BUG: 2147483648,
                    SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS: 2048,
                    SSL_OP_EPHEMERAL_RSA: 0,
                    SSL_OP_LEGACY_SERVER_CONNECT: 4,
                    SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER: 32,
                    SSL_OP_MICROSOFT_SESS_ID_BUG: 1,
                    SSL_OP_MSIE_SSLV2_RSA_PADDING: 0,
                    SSL_OP_NETSCAPE_CA_DN_BUG: 536870912,
                    SSL_OP_NETSCAPE_CHALLENGE_BUG: 2,
                    SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG: 1073741824,
                    SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG: 8,
                    SSL_OP_NO_COMPRESSION: 131072,
                    SSL_OP_NO_QUERY_MTU: 4096,
                    SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION: 65536,
                    SSL_OP_NO_SSLv2: 16777216,
                    SSL_OP_NO_SSLv3: 33554432,
                    SSL_OP_NO_TICKET: 16384,
                    SSL_OP_NO_TLSv1: 67108864,
                    SSL_OP_NO_TLSv1_1: 268435456,
                    SSL_OP_NO_TLSv1_2: 134217728,
                    SSL_OP_PKCS1_CHECK_1: 0,
                    SSL_OP_PKCS1_CHECK_2: 0,
                    SSL_OP_SINGLE_DH_USE: 1048576,
                    SSL_OP_SINGLE_ECDH_USE: 524288,
                    SSL_OP_SSLEAY_080_CLIENT_DH_BUG: 128,
                    SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG: 0,
                    SSL_OP_TLS_BLOCK_PADDING_BUG: 512,
                    SSL_OP_TLS_D5_BUG: 256,
                    SSL_OP_TLS_ROLLBACK_BUG: 8388608,
                    ENGINE_METHOD_DSA: 2,
                    ENGINE_METHOD_DH: 4,
                    ENGINE_METHOD_RAND: 8,
                    ENGINE_METHOD_ECDH: 16,
                    ENGINE_METHOD_ECDSA: 32,
                    ENGINE_METHOD_CIPHERS: 64,
                    ENGINE_METHOD_DIGESTS: 128,
                    ENGINE_METHOD_STORE: 256,
                    ENGINE_METHOD_PKEY_METHS: 512,
                    ENGINE_METHOD_PKEY_ASN1_METHS: 1024,
                    ENGINE_METHOD_ALL: 65535,
                    ENGINE_METHOD_NONE: 0,
                    DH_CHECK_P_NOT_SAFE_PRIME: 2,
                    DH_CHECK_P_NOT_PRIME: 1,
                    DH_UNABLE_TO_CHECK_GENERATOR: 4,
                    DH_NOT_SUITABLE_GENERATOR: 8,
                    NPN_ENABLED: 1,
                    RSA_PKCS1_PADDING: 1,
                    RSA_SSLV23_PADDING: 2,
                    RSA_NO_PADDING: 3,
                    RSA_PKCS1_OAEP_PADDING: 4,
                    RSA_X931_PADDING: 5,
                    RSA_PKCS1_PSS_PADDING: 6,
                    POINT_CONVERSION_COMPRESSED: 2,
                    POINT_CONVERSION_UNCOMPRESSED: 4,
                    POINT_CONVERSION_HYBRID: 6,
                    F_OK: 0,
                    R_OK: 4,
                    W_OK: 2,
                    X_OK: 1,
                    UV_UDP_REUSEADDR: 4,
                };
            },
            {},
        ],
        83: [
            function (require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                // NOTE: These type checking functions intentionally don't use `instanceof`
                // because it is fragile and can be easily faked with `Object.create()`.

                function isArray(arg) {
                    if (Array.isArray) {
                        return Array.isArray(arg);
                    }
                    return objectToString(arg) === "[object Array]";
                }
                exports.isArray = isArray;

                function isBoolean(arg) {
                    return typeof arg === "boolean";
                }
                exports.isBoolean = isBoolean;

                function isNull(arg) {
                    return arg === null;
                }
                exports.isNull = isNull;

                function isNullOrUndefined(arg) {
                    return arg == null;
                }
                exports.isNullOrUndefined = isNullOrUndefined;

                function isNumber(arg) {
                    return typeof arg === "number";
                }
                exports.isNumber = isNumber;

                function isString(arg) {
                    return typeof arg === "string";
                }
                exports.isString = isString;

                function isSymbol(arg) {
                    return typeof arg === "symbol";
                }
                exports.isSymbol = isSymbol;

                function isUndefined(arg) {
                    return arg === void 0;
                }
                exports.isUndefined = isUndefined;

                function isRegExp(re) {
                    return objectToString(re) === "[object RegExp]";
                }
                exports.isRegExp = isRegExp;

                function isObject(arg) {
                    return typeof arg === "object" && arg !== null;
                }
                exports.isObject = isObject;

                function isDate(d) {
                    return objectToString(d) === "[object Date]";
                }
                exports.isDate = isDate;

                function isError(e) {
                    return (
                        objectToString(e) === "[object Error]" ||
                        e instanceof Error
                    );
                }
                exports.isError = isError;

                function isFunction(arg) {
                    return typeof arg === "function";
                }
                exports.isFunction = isFunction;

                function isPrimitive(arg) {
                    return (
                        arg === null ||
                        typeof arg === "boolean" ||
                        typeof arg === "number" ||
                        typeof arg === "string" ||
                        typeof arg === "symbol" || // ES6 symbol
                        typeof arg === "undefined"
                    );
                }
                exports.isPrimitive = isPrimitive;

                exports.isBuffer = require("buffer").Buffer.isBuffer;

                function objectToString(o) {
                    return Object.prototype.toString.call(o);
                }
            },
            { buffer: 80 },
        ],
        84: [
            function (require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                function EventEmitter() {
                    this._events = this._events || {};
                    this._maxListeners = this._maxListeners || undefined;
                }
                module.exports = EventEmitter;

                // Backwards-compat with node 0.10.x
                EventEmitter.EventEmitter = EventEmitter;

                EventEmitter.prototype._events = undefined;
                EventEmitter.prototype._maxListeners = undefined;

                // By default EventEmitters will print a warning if more than 10 listeners are
                // added to it. This is a useful default which helps finding memory leaks.
                EventEmitter.defaultMaxListeners = 10;

                // Obviously not all Emitters should be limited to 10. This function allows
                // that to be increased. Set to zero for unlimited.
                EventEmitter.prototype.setMaxListeners = function (n) {
                    if (!isNumber(n) || n < 0 || isNaN(n))
                        throw TypeError("n must be a positive number");
                    this._maxListeners = n;
                    return this;
                };

                EventEmitter.prototype.emit = function (type) {
                    var er, handler, len, args, i, listeners;

                    if (!this._events) this._events = {};

                    // If there is no 'error' event listener then throw.
                    if (type === "error") {
                        if (
                            !this._events.error ||
                            (isObject(this._events.error) &&
                                !this._events.error.length)
                        ) {
                            er = arguments[1];
                            if (er instanceof Error) {
                                throw er; // Unhandled 'error' event
                            } else {
                                // At least give some kind of context to the user
                                var err = new Error(
                                    'Uncaught, unspecified "error" event. (' +
                                        er +
                                        ")"
                                );
                                err.context = er;
                                throw err;
                            }
                        }
                    }

                    handler = this._events[type];

                    if (isUndefined(handler)) return false;

                    if (isFunction(handler)) {
                        switch (arguments.length) {
                            // fast cases
                            case 1:
                                handler.call(this);
                                break;
                            case 2:
                                handler.call(this, arguments[1]);
                                break;
                            case 3:
                                handler.call(this, arguments[1], arguments[2]);
                                break;
                            // slower
                            default:
                                args = Array.prototype.slice.call(arguments, 1);
                                handler.apply(this, args);
                        }
                    } else if (isObject(handler)) {
                        args = Array.prototype.slice.call(arguments, 1);
                        listeners = handler.slice();
                        len = listeners.length;
                        for (i = 0; i < len; i++)
                            listeners[i].apply(this, args);
                    }

                    return true;
                };

                EventEmitter.prototype.addListener = function (type, listener) {
                    var m;

                    if (!isFunction(listener))
                        throw TypeError("listener must be a function");

                    if (!this._events) this._events = {};

                    // To avoid recursion in the case that type === "newListener"! Before
                    // adding it to the listeners, first emit "newListener".
                    if (this._events.newListener)
                        this.emit(
                            "newListener",
                            type,
                            isFunction(listener.listener)
                                ? listener.listener
                                : listener
                        );

                    if (!this._events[type])
                        // Optimize the case of one listener. Don't need the extra array object.
                        this._events[type] = listener;
                    else if (isObject(this._events[type]))
                        // If we've already got an array, just append.
                        this._events[type].push(listener);
                    // Adding the second element, need to change to array.
                    else this._events[type] = [this._events[type], listener];

                    // Check for listener leak
                    if (
                        isObject(this._events[type]) &&
                        !this._events[type].warned
                    ) {
                        if (!isUndefined(this._maxListeners)) {
                            m = this._maxListeners;
                        } else {
                            m = EventEmitter.defaultMaxListeners;
                        }

                        if (m && m > 0 && this._events[type].length > m) {
                            this._events[type].warned = true;
                            console.error(
                                "(node) warning: possible EventEmitter memory " +
                                    "leak detected. %d listeners added. " +
                                    "Use emitter.setMaxListeners() to increase limit.",
                                this._events[type].length
                            );
                            if (typeof console.trace === "function") {
                                // not supported in IE 10
                                console.trace();
                            }
                        }
                    }

                    return this;
                };

                EventEmitter.prototype.on = EventEmitter.prototype.addListener;

                EventEmitter.prototype.once = function (type, listener) {
                    if (!isFunction(listener))
                        throw TypeError("listener must be a function");

                    var fired = false;

                    function g() {
                        this.removeListener(type, g);

                        if (!fired) {
                            fired = true;
                            listener.apply(this, arguments);
                        }
                    }

                    g.listener = listener;
                    this.on(type, g);

                    return this;
                };

                // emits a 'removeListener' event iff the listener was removed
                EventEmitter.prototype.removeListener = function (
                    type,
                    listener
                ) {
                    var list, position, length, i;

                    if (!isFunction(listener))
                        throw TypeError("listener must be a function");

                    if (!this._events || !this._events[type]) return this;

                    list = this._events[type];
                    length = list.length;
                    position = -1;

                    if (
                        list === listener ||
                        (isFunction(list.listener) &&
                            list.listener === listener)
                    ) {
                        delete this._events[type];
                        if (this._events.removeListener)
                            this.emit("removeListener", type, listener);
                    } else if (isObject(list)) {
                        for (i = length; i-- > 0; ) {
                            if (
                                list[i] === listener ||
                                (list[i].listener &&
                                    list[i].listener === listener)
                            ) {
                                position = i;
                                break;
                            }
                        }

                        if (position < 0) return this;

                        if (list.length === 1) {
                            list.length = 0;
                            delete this._events[type];
                        } else {
                            list.splice(position, 1);
                        }

                        if (this._events.removeListener)
                            this.emit("removeListener", type, listener);
                    }

                    return this;
                };

                EventEmitter.prototype.removeAllListeners = function (type) {
                    var key, listeners;

                    if (!this._events) return this;

                    // not listening for removeListener, no need to emit
                    if (!this._events.removeListener) {
                        if (arguments.length === 0) this._events = {};
                        else if (this._events[type]) delete this._events[type];
                        return this;
                    }

                    // emit removeListener for all listeners on all events
                    if (arguments.length === 0) {
                        for (key in this._events) {
                            if (key === "removeListener") continue;
                            this.removeAllListeners(key);
                        }
                        this.removeAllListeners("removeListener");
                        this._events = {};
                        return this;
                    }

                    listeners = this._events[type];

                    if (isFunction(listeners)) {
                        this.removeListener(type, listeners);
                    } else if (listeners) {
                        // LIFO order
                        while (listeners.length)
                            this.removeListener(
                                type,
                                listeners[listeners.length - 1]
                            );
                    }
                    delete this._events[type];

                    return this;
                };

                EventEmitter.prototype.listeners = function (type) {
                    var ret;
                    if (!this._events || !this._events[type]) ret = [];
                    else if (isFunction(this._events[type]))
                        ret = [this._events[type]];
                    else ret = this._events[type].slice();
                    return ret;
                };

                EventEmitter.prototype.listenerCount = function (type) {
                    if (this._events) {
                        var evlistener = this._events[type];

                        if (isFunction(evlistener)) return 1;
                        else if (evlistener) return evlistener.length;
                    }
                    return 0;
                };

                EventEmitter.listenerCount = function (emitter, type) {
                    return emitter.listenerCount(type);
                };

                function isFunction(arg) {
                    return typeof arg === "function";
                }

                function isNumber(arg) {
                    return typeof arg === "number";
                }

                function isObject(arg) {
                    return typeof arg === "object" && arg !== null;
                }

                function isUndefined(arg) {
                    return arg === void 0;
                }
            },
            {},
        ],
        85: [
            function (require, module, exports) {
                var http = require("http");
                var url = require("url");

                var https = module.exports;

                for (var key in http) {
                    if (http.hasOwnProperty(key)) https[key] = http[key];
                }

                https.request = function (params, cb) {
                    params = validateParams(params);
                    return http.request.call(this, params, cb);
                };

                https.get = function (params, cb) {
                    params = validateParams(params);
                    return http.get.call(this, params, cb);
                };

                function validateParams(params) {
                    if (typeof params === "string") {
                        params = url.parse(params);
                    }
                    if (!params.protocol) {
                        params.protocol = "https:";
                    }
                    if (params.protocol !== "https:") {
                        throw new Error(
                            'Protocol "' +
                                params.protocol +
                                '" not supported. Expected "https:"'
                        );
                    }
                    return params;
                }
            },
            { http: 123, url: 129 },
        ],
        86: [
            function (require, module, exports) {
                /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
                exports.read = function (buffer, offset, isLE, mLen, nBytes) {
                    var e, m;
                    var eLen = nBytes * 8 - mLen - 1;
                    var eMax = (1 << eLen) - 1;
                    var eBias = eMax >> 1;
                    var nBits = -7;
                    var i = isLE ? nBytes - 1 : 0;
                    var d = isLE ? -1 : 1;
                    var s = buffer[offset + i];

                    i += d;

                    e = s & ((1 << -nBits) - 1);
                    s >>= -nBits;
                    nBits += eLen;
                    for (
                        ;
                        nBits > 0;
                        e = e * 256 + buffer[offset + i], i += d, nBits -= 8
                    ) {}

                    m = e & ((1 << -nBits) - 1);
                    e >>= -nBits;
                    nBits += mLen;
                    for (
                        ;
                        nBits > 0;
                        m = m * 256 + buffer[offset + i], i += d, nBits -= 8
                    ) {}

                    if (e === 0) {
                        e = 1 - eBias;
                    } else if (e === eMax) {
                        return m ? NaN : (s ? -1 : 1) * Infinity;
                    } else {
                        m = m + Math.pow(2, mLen);
                        e = e - eBias;
                    }
                    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
                };

                exports.write = function (
                    buffer,
                    value,
                    offset,
                    isLE,
                    mLen,
                    nBytes
                ) {
                    var e, m, c;
                    var eLen = nBytes * 8 - mLen - 1;
                    var eMax = (1 << eLen) - 1;
                    var eBias = eMax >> 1;
                    var rt =
                        mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
                    var i = isLE ? 0 : nBytes - 1;
                    var d = isLE ? 1 : -1;
                    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

                    value = Math.abs(value);

                    if (isNaN(value) || value === Infinity) {
                        m = isNaN(value) ? 1 : 0;
                        e = eMax;
                    } else {
                        e = Math.floor(Math.log(value) / Math.LN2);
                        if (value * (c = Math.pow(2, -e)) < 1) {
                            e--;
                            c *= 2;
                        }
                        if (e + eBias >= 1) {
                            value += rt / c;
                        } else {
                            value += rt * Math.pow(2, 1 - eBias);
                        }
                        if (value * c >= 2) {
                            e++;
                            c /= 2;
                        }

                        if (e + eBias >= eMax) {
                            m = 0;
                            e = eMax;
                        } else if (e + eBias >= 1) {
                            m = (value * c - 1) * Math.pow(2, mLen);
                            e = e + eBias;
                        } else {
                            m =
                                value *
                                Math.pow(2, eBias - 1) *
                                Math.pow(2, mLen);
                            e = 0;
                        }
                    }

                    for (
                        ;
                        mLen >= 8;
                        buffer[offset + i] = m & 0xff,
                            i += d,
                            m /= 256,
                            mLen -= 8
                    ) {}

                    e = (e << mLen) | m;
                    eLen += mLen;
                    for (
                        ;
                        eLen > 0;
                        buffer[offset + i] = e & 0xff,
                            i += d,
                            e /= 256,
                            eLen -= 8
                    ) {}

                    buffer[offset + i - d] |= s * 128;
                };
            },
            {},
        ],
        87: [
            function (require, module, exports) {
                if (typeof Object.create === "function") {
                    // implementation from standard node.js 'util' module
                    module.exports = function inherits(ctor, superCtor) {
                        if (superCtor) {
                            ctor.super_ = superCtor;
                            ctor.prototype = Object.create(
                                superCtor.prototype,
                                {
                                    constructor: {
                                        value: ctor,
                                        enumerable: false,
                                        writable: true,
                                        configurable: true,
                                    },
                                }
                            );
                        }
                    };
                } else {
                    // old school shim for old browsers
                    module.exports = function inherits(ctor, superCtor) {
                        if (superCtor) {
                            ctor.super_ = superCtor;
                            var TempCtor = function () {};
                            TempCtor.prototype = superCtor.prototype;
                            ctor.prototype = new TempCtor();
                            ctor.prototype.constructor = ctor;
                        }
                    };
                }
            },
            {},
        ],
        88: [
            function (require, module, exports) {
                var toString = {}.toString;

                module.exports =
                    Array.isArray ||
                    function (arr) {
                        return toString.call(arr) == "[object Array]";
                    };
            },
            {},
        ],
        89: [
            function (require, module, exports) {
                /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */

                "use strict";
                /* eslint-disable no-unused-vars */
                var getOwnPropertySymbols = Object.getOwnPropertySymbols;
                var hasOwnProperty = Object.prototype.hasOwnProperty;
                var propIsEnumerable = Object.prototype.propertyIsEnumerable;

                function toObject(val) {
                    if (val === null || val === undefined) {
                        throw new TypeError(
                            "Object.assign cannot be called with null or undefined"
                        );
                    }

                    return Object(val);
                }

                function shouldUseNative() {
                    try {
                        if (!Object.assign) {
                            return false;
                        }

                        // Detect buggy property enumeration order in older V8 versions.

                        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
                        var test1 = new String("abc"); // eslint-disable-line no-new-wrappers
                        test1[5] = "de";
                        if (Object.getOwnPropertyNames(test1)[0] === "5") {
                            return false;
                        }

                        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
                        var test2 = {};
                        for (var i = 0; i < 10; i++) {
                            test2["_" + String.fromCharCode(i)] = i;
                        }
                        var order2 = Object.getOwnPropertyNames(test2).map(
                            function (n) {
                                return test2[n];
                            }
                        );
                        if (order2.join("") !== "0123456789") {
                            return false;
                        }

                        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
                        var test3 = {};
                        "abcdefghijklmnopqrst"
                            .split("")
                            .forEach(function (letter) {
                                test3[letter] = letter;
                            });
                        if (
                            Object.keys(Object.assign({}, test3)).join("") !==
                            "abcdefghijklmnopqrst"
                        ) {
                            return false;
                        }

                        return true;
                    } catch (err) {
                        // We don't expect any of the above to throw, but better to be safe.
                        return false;
                    }
                }

                module.exports = shouldUseNative()
                    ? Object.assign
                    : function (target, source) {
                          var from;
                          var to = toObject(target);
                          var symbols;

                          for (var s = 1; s < arguments.length; s++) {
                              from = Object(arguments[s]);

                              for (var key in from) {
                                  if (hasOwnProperty.call(from, key)) {
                                      to[key] = from[key];
                                  }
                              }

                              if (getOwnPropertySymbols) {
                                  symbols = getOwnPropertySymbols(from);
                                  for (var i = 0; i < symbols.length; i++) {
                                      if (
                                          propIsEnumerable.call(
                                              from,
                                              symbols[i]
                                          )
                                      ) {
                                          to[symbols[i]] = from[symbols[i]];
                                      }
                                  }
                              }
                          }

                          return to;
                      };
            },
            {},
        ],
        90: [
            function (require, module, exports) {
                "use strict";

                var TYPED_OK =
                    typeof Uint8Array !== "undefined" &&
                    typeof Uint16Array !== "undefined" &&
                    typeof Int32Array !== "undefined";

                function _has(obj, key) {
                    return Object.prototype.hasOwnProperty.call(obj, key);
                }

                exports.assign = function (obj /*from1, from2, from3, ...*/) {
                    var sources = Array.prototype.slice.call(arguments, 1);
                    while (sources.length) {
                        var source = sources.shift();
                        if (!source) {
                            continue;
                        }

                        if (typeof source !== "object") {
                            throw new TypeError(source + "must be non-object");
                        }

                        for (var p in source) {
                            if (_has(source, p)) {
                                obj[p] = source[p];
                            }
                        }
                    }

                    return obj;
                };

                // reduce buffer size, avoiding mem copy
                exports.shrinkBuf = function (buf, size) {
                    if (buf.length === size) {
                        return buf;
                    }
                    if (buf.subarray) {
                        return buf.subarray(0, size);
                    }
                    buf.length = size;
                    return buf;
                };

                var fnTyped = {
                    arraySet: function (dest, src, src_offs, len, dest_offs) {
                        if (src.subarray && dest.subarray) {
                            dest.set(
                                src.subarray(src_offs, src_offs + len),
                                dest_offs
                            );
                            return;
                        }
                        // Fallback to ordinary array
                        for (var i = 0; i < len; i++) {
                            dest[dest_offs + i] = src[src_offs + i];
                        }
                    },
                    // Join array of chunks to single array.
                    flattenChunks: function (chunks) {
                        var i, l, len, pos, chunk, result;

                        // calculate data length
                        len = 0;
                        for (i = 0, l = chunks.length; i < l; i++) {
                            len += chunks[i].length;
                        }

                        // join chunks
                        result = new Uint8Array(len);
                        pos = 0;
                        for (i = 0, l = chunks.length; i < l; i++) {
                            chunk = chunks[i];
                            result.set(chunk, pos);
                            pos += chunk.length;
                        }

                        return result;
                    },
                };

                var fnUntyped = {
                    arraySet: function (dest, src, src_offs, len, dest_offs) {
                        for (var i = 0; i < len; i++) {
                            dest[dest_offs + i] = src[src_offs + i];
                        }
                    },
                    // Join array of chunks to single array.
                    flattenChunks: function (chunks) {
                        return [].concat.apply([], chunks);
                    },
                };

                // Enable/Disable typed arrays use, for testing
                //
                exports.setTyped = function (on) {
                    if (on) {
                        exports.Buf8 = Uint8Array;
                        exports.Buf16 = Uint16Array;
                        exports.Buf32 = Int32Array;
                        exports.assign(exports, fnTyped);
                    } else {
                        exports.Buf8 = Array;
                        exports.Buf16 = Array;
                        exports.Buf32 = Array;
                        exports.assign(exports, fnUntyped);
                    }
                };

                exports.setTyped(TYPED_OK);
            },
            {},
        ],
        91: [
            function (require, module, exports) {
                "use strict";

                // Note: adler32 takes 12% for level 0 and 2% for level 6.
                // It isn't worth it to make additional optimizations as in original.
                // Small size is preferable.

                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                function adler32(adler, buf, len, pos) {
                    var s1 = (adler & 0xffff) | 0,
                        s2 = ((adler >>> 16) & 0xffff) | 0,
                        n = 0;

                    while (len !== 0) {
                        // Set limit ~ twice less than 5552, to keep
                        // s2 in 31-bits, because we force signed ints.
                        // in other case %= will fail.
                        n = len > 2000 ? 2000 : len;
                        len -= n;

                        do {
                            s1 = (s1 + buf[pos++]) | 0;
                            s2 = (s2 + s1) | 0;
                        } while (--n);

                        s1 %= 65521;
                        s2 %= 65521;
                    }

                    return s1 | (s2 << 16) | 0;
                }

                module.exports = adler32;
            },
            {},
        ],
        92: [
            function (require, module, exports) {
                "use strict";

                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                module.exports = {
                    /* Allowed flush values; see deflate() and inflate() below for details */
                    Z_NO_FLUSH: 0,
                    Z_PARTIAL_FLUSH: 1,
                    Z_SYNC_FLUSH: 2,
                    Z_FULL_FLUSH: 3,
                    Z_FINISH: 4,
                    Z_BLOCK: 5,
                    Z_TREES: 6,

                    /* Return codes for the compression/decompression functions. Negative values
                     * are errors, positive values are used for special but normal events.
                     */
                    Z_OK: 0,
                    Z_STREAM_END: 1,
                    Z_NEED_DICT: 2,
                    Z_ERRNO: -1,
                    Z_STREAM_ERROR: -2,
                    Z_DATA_ERROR: -3,
                    //Z_MEM_ERROR:     -4,
                    Z_BUF_ERROR: -5,
                    //Z_VERSION_ERROR: -6,

                    /* compression levels */
                    Z_NO_COMPRESSION: 0,
                    Z_BEST_SPEED: 1,
                    Z_BEST_COMPRESSION: 9,
                    Z_DEFAULT_COMPRESSION: -1,

                    Z_FILTERED: 1,
                    Z_HUFFMAN_ONLY: 2,
                    Z_RLE: 3,
                    Z_FIXED: 4,
                    Z_DEFAULT_STRATEGY: 0,

                    /* Possible values of the data_type field (though see inflate()) */
                    Z_BINARY: 0,
                    Z_TEXT: 1,
                    //Z_ASCII:                1, // = Z_TEXT (deprecated)
                    Z_UNKNOWN: 2,

                    /* The deflate compression method */
                    Z_DEFLATED: 8,
                    //Z_NULL:                 null // Use -1 or null inline, depending on var type
                };
            },
            {},
        ],
        93: [
            function (require, module, exports) {
                "use strict";

                // Note: we can't get significant speed boost here.
                // So write code to minimize size - no pregenerated tables
                // and array tools dependencies.

                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                // Use ordinary array, since untyped makes no boost here
                function makeTable() {
                    var c,
                        table = [];

                    for (var n = 0; n < 256; n++) {
                        c = n;
                        for (var k = 0; k < 8; k++) {
                            c = c & 1 ? 0xedb88320 ^ (c >>> 1) : c >>> 1;
                        }
                        table[n] = c;
                    }

                    return table;
                }

                // Create table on load. Just 255 signed longs. Not a problem.
                var crcTable = makeTable();

                function crc32(crc, buf, len, pos) {
                    var t = crcTable,
                        end = pos + len;

                    crc ^= -1;

                    for (var i = pos; i < end; i++) {
                        crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xff];
                    }

                    return crc ^ -1; // >>> 0;
                }

                module.exports = crc32;
            },
            {},
        ],
        94: [
            function (require, module, exports) {
                "use strict";

                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                var utils = require("../utils/common");
                var trees = require("./trees");
                var adler32 = require("./adler32");
                var crc32 = require("./crc32");
                var msg = require("./messages");

                /* Public constants ==========================================================*/
                /* ===========================================================================*/

                /* Allowed flush values; see deflate() and inflate() below for details */
                var Z_NO_FLUSH = 0;
                var Z_PARTIAL_FLUSH = 1;
                //var Z_SYNC_FLUSH    = 2;
                var Z_FULL_FLUSH = 3;
                var Z_FINISH = 4;
                var Z_BLOCK = 5;
                //var Z_TREES         = 6;

                /* Return codes for the compression/decompression functions. Negative values
                 * are errors, positive values are used for special but normal events.
                 */
                var Z_OK = 0;
                var Z_STREAM_END = 1;
                //var Z_NEED_DICT     = 2;
                //var Z_ERRNO         = -1;
                var Z_STREAM_ERROR = -2;
                var Z_DATA_ERROR = -3;
                //var Z_MEM_ERROR     = -4;
                var Z_BUF_ERROR = -5;
                //var Z_VERSION_ERROR = -6;

                /* compression levels */
                //var Z_NO_COMPRESSION      = 0;
                //var Z_BEST_SPEED          = 1;
                //var Z_BEST_COMPRESSION    = 9;
                var Z_DEFAULT_COMPRESSION = -1;

                var Z_FILTERED = 1;
                var Z_HUFFMAN_ONLY = 2;
                var Z_RLE = 3;
                var Z_FIXED = 4;
                var Z_DEFAULT_STRATEGY = 0;

                /* Possible values of the data_type field (though see inflate()) */
                //var Z_BINARY              = 0;
                //var Z_TEXT                = 1;
                //var Z_ASCII               = 1; // = Z_TEXT
                var Z_UNKNOWN = 2;

                /* The deflate compression method */
                var Z_DEFLATED = 8;

                /*============================================================================*/

                var MAX_MEM_LEVEL = 9;
                /* Maximum value for memLevel in deflateInit2 */
                var MAX_WBITS = 15;
                /* 32K LZ77 window */
                var DEF_MEM_LEVEL = 8;

                var LENGTH_CODES = 29;
                /* number of length codes, not counting the special END_BLOCK code */
                var LITERALS = 256;
                /* number of literal bytes 0..255 */
                var L_CODES = LITERALS + 1 + LENGTH_CODES;
                /* number of Literal or Length codes, including the END_BLOCK code */
                var D_CODES = 30;
                /* number of distance codes */
                var BL_CODES = 19;
                /* number of codes used to transfer the bit lengths */
                var HEAP_SIZE = 2 * L_CODES + 1;
                /* maximum heap size */
                var MAX_BITS = 15;
                /* All codes must not exceed MAX_BITS bits */

                var MIN_MATCH = 3;
                var MAX_MATCH = 258;
                var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;

                var PRESET_DICT = 0x20;

                var INIT_STATE = 42;
                var EXTRA_STATE = 69;
                var NAME_STATE = 73;
                var COMMENT_STATE = 91;
                var HCRC_STATE = 103;
                var BUSY_STATE = 113;
                var FINISH_STATE = 666;

                var BS_NEED_MORE = 1; /* block not completed, need more input or more output */
                var BS_BLOCK_DONE = 2; /* block flush performed */
                var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
                var BS_FINISH_DONE = 4; /* finish done, accept no more input or output */

                var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

                function err(strm, errorCode) {
                    strm.msg = msg[errorCode];
                    return errorCode;
                }

                function rank(f) {
                    return (f << 1) - (f > 4 ? 9 : 0);
                }

                function zero(buf) {
                    var len = buf.length;
                    while (--len >= 0) {
                        buf[len] = 0;
                    }
                }

                /* =========================================================================
                 * Flush as much pending output as possible. All deflate() output goes
                 * through this function so some applications may wish to modify it
                 * to avoid allocating a large strm->output buffer and copying into it.
                 * (See also read_buf()).
                 */
                function flush_pending(strm) {
                    var s = strm.state;

                    //_tr_flush_bits(s);
                    var len = s.pending;
                    if (len > strm.avail_out) {
                        len = strm.avail_out;
                    }
                    if (len === 0) {
                        return;
                    }

                    utils.arraySet(
                        strm.output,
                        s.pending_buf,
                        s.pending_out,
                        len,
                        strm.next_out
                    );
                    strm.next_out += len;
                    s.pending_out += len;
                    strm.total_out += len;
                    strm.avail_out -= len;
                    s.pending -= len;
                    if (s.pending === 0) {
                        s.pending_out = 0;
                    }
                }

                function flush_block_only(s, last) {
                    trees._tr_flush_block(
                        s,
                        s.block_start >= 0 ? s.block_start : -1,
                        s.strstart - s.block_start,
                        last
                    );
                    s.block_start = s.strstart;
                    flush_pending(s.strm);
                }

                function put_byte(s, b) {
                    s.pending_buf[s.pending++] = b;
                }

                /* =========================================================================
                 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
                 * IN assertion: the stream state is correct and there is enough room in
                 * pending_buf.
                 */
                function putShortMSB(s, b) {
                    //  put_byte(s, (Byte)(b >> 8));
                    //  put_byte(s, (Byte)(b & 0xff));
                    s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
                    s.pending_buf[s.pending++] = b & 0xff;
                }

                /* ===========================================================================
                 * Read a new buffer from the current input stream, update the adler32
                 * and total number of bytes read.  All deflate() input goes through
                 * this function so some applications may wish to modify it to avoid
                 * allocating a large strm->input buffer and copying from it.
                 * (See also flush_pending()).
                 */
                function read_buf(strm, buf, start, size) {
                    var len = strm.avail_in;

                    if (len > size) {
                        len = size;
                    }
                    if (len === 0) {
                        return 0;
                    }

                    strm.avail_in -= len;

                    // zmemcpy(buf, strm->next_in, len);
                    utils.arraySet(buf, strm.input, strm.next_in, len, start);
                    if (strm.state.wrap === 1) {
                        strm.adler = adler32(strm.adler, buf, len, start);
                    } else if (strm.state.wrap === 2) {
                        strm.adler = crc32(strm.adler, buf, len, start);
                    }

                    strm.next_in += len;
                    strm.total_in += len;

                    return len;
                }

                /* ===========================================================================
                 * Set match_start to the longest match starting at the given string and
                 * return its length. Matches shorter or equal to prev_length are discarded,
                 * in which case the result is equal to prev_length and match_start is
                 * garbage.
                 * IN assertions: cur_match is the head of the hash chain for the current
                 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
                 * OUT assertion: the match length is not greater than s->lookahead.
                 */
                function longest_match(s, cur_match) {
                    var chain_length =
                        s.max_chain_length; /* max hash chain length */
                    var scan = s.strstart; /* current string */
                    var match; /* matched string */
                    var len; /* length of current match */
                    var best_len = s.prev_length; /* best match length so far */
                    var nice_match =
                        s.nice_match; /* stop if match long enough */
                    var limit =
                        s.strstart > s.w_size - MIN_LOOKAHEAD
                            ? s.strstart - (s.w_size - MIN_LOOKAHEAD)
                            : 0; /*NIL*/

                    var _win = s.window; // shortcut

                    var wmask = s.w_mask;
                    var prev = s.prev;

                    /* Stop when cur_match becomes <= limit. To simplify the code,
                     * we prevent matches with the string of window index 0.
                     */

                    var strend = s.strstart + MAX_MATCH;
                    var scan_end1 = _win[scan + best_len - 1];
                    var scan_end = _win[scan + best_len];

                    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
                     * It is easy to get rid of this optimization if necessary.
                     */
                    // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

                    /* Do not waste too much time if we already have a good match: */
                    if (s.prev_length >= s.good_match) {
                        chain_length >>= 2;
                    }
                    /* Do not look for matches beyond the end of the input. This is necessary
                     * to make deflate deterministic.
                     */
                    if (nice_match > s.lookahead) {
                        nice_match = s.lookahead;
                    }

                    // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

                    do {
                        // Assert(cur_match < s->strstart, "no future");
                        match = cur_match;

                        /* Skip to next match if the match length cannot increase
                         * or if the match length is less than 2.  Note that the checks below
                         * for insufficient lookahead only occur occasionally for performance
                         * reasons.  Therefore uninitialized memory will be accessed, and
                         * conditional jumps will be made that depend on those values.
                         * However the length of the match is limited to the lookahead, so
                         * the output of deflate is not affected by the uninitialized values.
                         */

                        if (
                            _win[match + best_len] !== scan_end ||
                            _win[match + best_len - 1] !== scan_end1 ||
                            _win[match] !== _win[scan] ||
                            _win[++match] !== _win[scan + 1]
                        ) {
                            continue;
                        }

                        /* The check at best_len-1 can be removed because it will be made
                         * again later. (This heuristic is not always a win.)
                         * It is not necessary to compare scan[2] and match[2] since they
                         * are always equal when the other bytes match, given that
                         * the hash keys are equal and that HASH_BITS >= 8.
                         */
                        scan += 2;
                        match++;
                        // Assert(*scan == *match, "match[2]?");

                        /* We check for insufficient lookahead only every 8th comparison;
                         * the 256th check will be made at strstart+258.
                         */
                        do {
                            /*jshint noempty:false*/
                        } while (
                            _win[++scan] === _win[++match] &&
                            _win[++scan] === _win[++match] &&
                            _win[++scan] === _win[++match] &&
                            _win[++scan] === _win[++match] &&
                            _win[++scan] === _win[++match] &&
                            _win[++scan] === _win[++match] &&
                            _win[++scan] === _win[++match] &&
                            _win[++scan] === _win[++match] &&
                            scan < strend
                        );

                        // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

                        len = MAX_MATCH - (strend - scan);
                        scan = strend - MAX_MATCH;

                        if (len > best_len) {
                            s.match_start = cur_match;
                            best_len = len;
                            if (len >= nice_match) {
                                break;
                            }
                            scan_end1 = _win[scan + best_len - 1];
                            scan_end = _win[scan + best_len];
                        }
                    } while (
                        (cur_match = prev[cur_match & wmask]) > limit &&
                        --chain_length !== 0
                    );

                    if (best_len <= s.lookahead) {
                        return best_len;
                    }
                    return s.lookahead;
                }

                /* ===========================================================================
                 * Fill the window when the lookahead becomes insufficient.
                 * Updates strstart and lookahead.
                 *
                 * IN assertion: lookahead < MIN_LOOKAHEAD
                 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
                 *    At least one byte has been read, or avail_in == 0; reads are
                 *    performed for at least two bytes (required for the zip translate_eol
                 *    option -- not supported here).
                 */
                function fill_window(s) {
                    var _w_size = s.w_size;
                    var p, n, m, more, str;

                    //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

                    do {
                        more = s.window_size - s.lookahead - s.strstart;

                        // JS ints have 32 bit, block below not needed
                        /* Deal with !@#$% 64K limit: */
                        //if (sizeof(int) <= 2) {
                        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
                        //        more = wsize;
                        //
                        //  } else if (more == (unsigned)(-1)) {
                        //        /* Very unlikely, but possible on 16 bit machine if
                        //         * strstart == 0 && lookahead == 1 (input done a byte at time)
                        //         */
                        //        more--;
                        //    }
                        //}

                        /* If the window is almost full and there is insufficient lookahead,
                         * move the upper half to the lower one to make room in the upper half.
                         */
                        if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
                            utils.arraySet(
                                s.window,
                                s.window,
                                _w_size,
                                _w_size,
                                0
                            );
                            s.match_start -= _w_size;
                            s.strstart -= _w_size;
                            /* we now have strstart >= MAX_DIST */
                            s.block_start -= _w_size;

                            /* Slide the hash table (could be avoided with 32 bit values
           at the expense of memory usage). We slide even when level == 0
           to keep the hash table consistent if we switch back to level > 0
           later. (Using level 0 permanently is not an optimal usage of
           zlib, so we don't care about this pathological case.)
           */

                            n = s.hash_size;
                            p = n;
                            do {
                                m = s.head[--p];
                                s.head[p] = m >= _w_size ? m - _w_size : 0;
                            } while (--n);

                            n = _w_size;
                            p = n;
                            do {
                                m = s.prev[--p];
                                s.prev[p] = m >= _w_size ? m - _w_size : 0;
                                /* If n is not on any hash chain, prev[n] is garbage but
                                 * its value will never be used.
                                 */
                            } while (--n);

                            more += _w_size;
                        }
                        if (s.strm.avail_in === 0) {
                            break;
                        }

                        /* If there was no sliding:
                         *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
                         *    more == window_size - lookahead - strstart
                         * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
                         * => more >= window_size - 2*WSIZE + 2
                         * In the BIG_MEM or MMAP case (not yet supported),
                         *   window_size == input_size + MIN_LOOKAHEAD  &&
                         *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
                         * Otherwise, window_size == 2*WSIZE so more >= 2.
                         * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
                         */
                        //Assert(more >= 2, "more < 2");
                        n = read_buf(
                            s.strm,
                            s.window,
                            s.strstart + s.lookahead,
                            more
                        );
                        s.lookahead += n;

                        /* Initialize the hash value now that we have some input: */
                        if (s.lookahead + s.insert >= MIN_MATCH) {
                            str = s.strstart - s.insert;
                            s.ins_h = s.window[str];

                            /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
                            s.ins_h =
                                ((s.ins_h << s.hash_shift) ^
                                    s.window[str + 1]) &
                                s.hash_mask;
                            //#if MIN_MATCH != 3
                            //        Call update_hash() MIN_MATCH-3 more times
                            //#endif
                            while (s.insert) {
                                /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
                                s.ins_h =
                                    ((s.ins_h << s.hash_shift) ^
                                        s.window[str + MIN_MATCH - 1]) &
                                    s.hash_mask;

                                s.prev[str & s.w_mask] = s.head[s.ins_h];
                                s.head[s.ins_h] = str;
                                str++;
                                s.insert--;
                                if (s.lookahead + s.insert < MIN_MATCH) {
                                    break;
                                }
                            }
                        }
                        /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
                         * but this is not important since only literal bytes will be emitted.
                         */
                    } while (
                        s.lookahead < MIN_LOOKAHEAD &&
                        s.strm.avail_in !== 0
                    );

                    /* If the WIN_INIT bytes after the end of the current data have never been
                     * written, then zero those bytes in order to avoid memory check reports of
                     * the use of uninitialized (or uninitialised as Julian writes) bytes by
                     * the longest match routines.  Update the high water mark for the next
                     * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
                     * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
                     */
                    //  if (s.high_water < s.window_size) {
                    //    var curr = s.strstart + s.lookahead;
                    //    var init = 0;
                    //
                    //    if (s.high_water < curr) {
                    //      /* Previous high water mark below current data -- zero WIN_INIT
                    //       * bytes or up to end of window, whichever is less.
                    //       */
                    //      init = s.window_size - curr;
                    //      if (init > WIN_INIT)
                    //        init = WIN_INIT;
                    //      zmemzero(s->window + curr, (unsigned)init);
                    //      s->high_water = curr + init;
                    //    }
                    //    else if (s->high_water < (ulg)curr + WIN_INIT) {
                    //      /* High water mark at or above current data, but below current data
                    //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
                    //       * to end of window, whichever is less.
                    //       */
                    //      init = (ulg)curr + WIN_INIT - s->high_water;
                    //      if (init > s->window_size - s->high_water)
                    //        init = s->window_size - s->high_water;
                    //      zmemzero(s->window + s->high_water, (unsigned)init);
                    //      s->high_water += init;
                    //    }
                    //  }
                    //
                    //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
                    //    "not enough room for search");
                }

                /* ===========================================================================
                 * Copy without compression as much as possible from the input stream, return
                 * the current block state.
                 * This function does not insert new strings in the dictionary since
                 * uncompressible data is probably not useful. This function is used
                 * only for the level=0 compression option.
                 * NOTE: this function should be optimized to avoid extra copying from
                 * window to pending_buf.
                 */
                function deflate_stored(s, flush) {
                    /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
                     * to pending_buf_size, and each stored block has a 5 byte header:
                     */
                    var max_block_size = 0xffff;

                    if (max_block_size > s.pending_buf_size - 5) {
                        max_block_size = s.pending_buf_size - 5;
                    }

                    /* Copy as much as possible from input to output: */
                    for (;;) {
                        /* Fill the window as much as possible: */
                        if (s.lookahead <= 1) {
                            //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
                            //  s->block_start >= (long)s->w_size, "slide too late");
                            //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
                            //        s.block_start >= s.w_size)) {
                            //        throw  new Error("slide too late");
                            //      }

                            fill_window(s);
                            if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
                                return BS_NEED_MORE;
                            }

                            if (s.lookahead === 0) {
                                break;
                            }
                            /* flush the current block */
                        }
                        //Assert(s->block_start >= 0L, "block gone");
                        //    if (s.block_start < 0) throw new Error("block gone");

                        s.strstart += s.lookahead;
                        s.lookahead = 0;

                        /* Emit a stored block if pending_buf will be full: */
                        var max_start = s.block_start + max_block_size;

                        if (s.strstart === 0 || s.strstart >= max_start) {
                            /* strstart == 0 is possible when wraparound on 16-bit machine */
                            s.lookahead = s.strstart - max_start;
                            s.strstart = max_start;
                            /*** FLUSH_BLOCK(s, 0); ***/
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                            /***/
                        }
                        /* Flush if we may have to slide, otherwise block_start may become
                         * negative and the data will be gone:
                         */
                        if (
                            s.strstart - s.block_start >=
                            s.w_size - MIN_LOOKAHEAD
                        ) {
                            /*** FLUSH_BLOCK(s, 0); ***/
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                            /***/
                        }
                    }

                    s.insert = 0;

                    if (flush === Z_FINISH) {
                        /*** FLUSH_BLOCK(s, 1); ***/
                        flush_block_only(s, true);
                        if (s.strm.avail_out === 0) {
                            return BS_FINISH_STARTED;
                        }
                        /***/
                        return BS_FINISH_DONE;
                    }

                    if (s.strstart > s.block_start) {
                        /*** FLUSH_BLOCK(s, 0); ***/
                        flush_block_only(s, false);
                        if (s.strm.avail_out === 0) {
                            return BS_NEED_MORE;
                        }
                        /***/
                    }

                    return BS_NEED_MORE;
                }

                /* ===========================================================================
                 * Compress as much as possible from the input stream, return the current
                 * block state.
                 * This function does not perform lazy evaluation of matches and inserts
                 * new strings in the dictionary only for unmatched strings or for short
                 * matches. It is used only for the fast compression options.
                 */
                function deflate_fast(s, flush) {
                    var hash_head; /* head of the hash chain */
                    var bflush; /* set if current block must be flushed */

                    for (;;) {
                        /* Make sure that we always have enough lookahead, except
                         * at the end of the input file. We need MAX_MATCH bytes
                         * for the next match, plus MIN_MATCH bytes to insert the
                         * string following the next match.
                         */
                        if (s.lookahead < MIN_LOOKAHEAD) {
                            fill_window(s);
                            if (
                                s.lookahead < MIN_LOOKAHEAD &&
                                flush === Z_NO_FLUSH
                            ) {
                                return BS_NEED_MORE;
                            }
                            if (s.lookahead === 0) {
                                break; /* flush the current block */
                            }
                        }

                        /* Insert the string window[strstart .. strstart+2] in the
                         * dictionary, and set hash_head to the head of the hash chain:
                         */
                        hash_head = 0 /*NIL*/;
                        if (s.lookahead >= MIN_MATCH) {
                            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                            s.ins_h =
                                ((s.ins_h << s.hash_shift) ^
                                    s.window[s.strstart + MIN_MATCH - 1]) &
                                s.hash_mask;
                            hash_head = s.prev[s.strstart & s.w_mask] =
                                s.head[s.ins_h];
                            s.head[s.ins_h] = s.strstart;
                            /***/
                        }

                        /* Find the longest match, discarding those <= prev_length.
                         * At this point we have always match_length < MIN_MATCH
                         */
                        if (
                            hash_head !== 0 /*NIL*/ &&
                            s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD
                        ) {
                            /* To simplify the code, we prevent matches with the string
                             * of window index 0 (in particular we have to avoid a match
                             * of the string with itself at the start of the input file).
                             */
                            s.match_length = longest_match(s, hash_head);
                            /* longest_match() sets match_start */
                        }
                        if (s.match_length >= MIN_MATCH) {
                            // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

                            /*** _tr_tally_dist(s, s.strstart - s.match_start,
                         s.match_length - MIN_MATCH, bflush); ***/
                            bflush = trees._tr_tally(
                                s,
                                s.strstart - s.match_start,
                                s.match_length - MIN_MATCH
                            );

                            s.lookahead -= s.match_length;

                            /* Insert new strings in the hash table only if the match length
                             * is not too large. This saves time but degrades compression.
                             */
                            if (
                                s.match_length <=
                                    s.max_lazy_match /*max_insert_length*/ &&
                                s.lookahead >= MIN_MATCH
                            ) {
                                s.match_length--; /* string at strstart already in table */
                                do {
                                    s.strstart++;
                                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                                    s.ins_h =
                                        ((s.ins_h << s.hash_shift) ^
                                            s.window[
                                                s.strstart + MIN_MATCH - 1
                                            ]) &
                                        s.hash_mask;
                                    hash_head = s.prev[s.strstart & s.w_mask] =
                                        s.head[s.ins_h];
                                    s.head[s.ins_h] = s.strstart;
                                    /***/
                                    /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                                     * always MIN_MATCH bytes ahead.
                                     */
                                } while (--s.match_length !== 0);
                                s.strstart++;
                            } else {
                                s.strstart += s.match_length;
                                s.match_length = 0;
                                s.ins_h = s.window[s.strstart];
                                /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
                                s.ins_h =
                                    ((s.ins_h << s.hash_shift) ^
                                        s.window[s.strstart + 1]) &
                                    s.hash_mask;

                                //#if MIN_MATCH != 3
                                //                Call UPDATE_HASH() MIN_MATCH-3 more times
                                //#endif
                                /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
                                 * matter since it will be recomputed at next deflate call.
                                 */
                            }
                        } else {
                            /* No match, output a literal byte */
                            //Tracevv((stderr,"%c", s.window[s.strstart]));
                            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
                            bflush = trees._tr_tally(
                                s,
                                0,
                                s.window[s.strstart]
                            );

                            s.lookahead--;
                            s.strstart++;
                        }
                        if (bflush) {
                            /*** FLUSH_BLOCK(s, 0); ***/
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                            /***/
                        }
                    }
                    s.insert =
                        s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
                    if (flush === Z_FINISH) {
                        /*** FLUSH_BLOCK(s, 1); ***/
                        flush_block_only(s, true);
                        if (s.strm.avail_out === 0) {
                            return BS_FINISH_STARTED;
                        }
                        /***/
                        return BS_FINISH_DONE;
                    }
                    if (s.last_lit) {
                        /*** FLUSH_BLOCK(s, 0); ***/
                        flush_block_only(s, false);
                        if (s.strm.avail_out === 0) {
                            return BS_NEED_MORE;
                        }
                        /***/
                    }
                    return BS_BLOCK_DONE;
                }

                /* ===========================================================================
                 * Same as above, but achieves better compression. We use a lazy
                 * evaluation for matches: a match is finally adopted only if there is
                 * no better match at the next window position.
                 */
                function deflate_slow(s, flush) {
                    var hash_head; /* head of hash chain */
                    var bflush; /* set if current block must be flushed */

                    var max_insert;

                    /* Process the input block. */
                    for (;;) {
                        /* Make sure that we always have enough lookahead, except
                         * at the end of the input file. We need MAX_MATCH bytes
                         * for the next match, plus MIN_MATCH bytes to insert the
                         * string following the next match.
                         */
                        if (s.lookahead < MIN_LOOKAHEAD) {
                            fill_window(s);
                            if (
                                s.lookahead < MIN_LOOKAHEAD &&
                                flush === Z_NO_FLUSH
                            ) {
                                return BS_NEED_MORE;
                            }
                            if (s.lookahead === 0) {
                                break;
                            } /* flush the current block */
                        }

                        /* Insert the string window[strstart .. strstart+2] in the
                         * dictionary, and set hash_head to the head of the hash chain:
                         */
                        hash_head = 0 /*NIL*/;
                        if (s.lookahead >= MIN_MATCH) {
                            /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                            s.ins_h =
                                ((s.ins_h << s.hash_shift) ^
                                    s.window[s.strstart + MIN_MATCH - 1]) &
                                s.hash_mask;
                            hash_head = s.prev[s.strstart & s.w_mask] =
                                s.head[s.ins_h];
                            s.head[s.ins_h] = s.strstart;
                            /***/
                        }

                        /* Find the longest match, discarding those <= prev_length.
                         */
                        s.prev_length = s.match_length;
                        s.prev_match = s.match_start;
                        s.match_length = MIN_MATCH - 1;

                        if (
                            hash_head !== 0 /*NIL*/ &&
                            s.prev_length < s.max_lazy_match &&
                            s.strstart - hash_head <=
                                s.w_size - MIN_LOOKAHEAD /*MAX_DIST(s)*/
                        ) {
                            /* To simplify the code, we prevent matches with the string
                             * of window index 0 (in particular we have to avoid a match
                             * of the string with itself at the start of the input file).
                             */
                            s.match_length = longest_match(s, hash_head);
                            /* longest_match() sets match_start */

                            if (
                                s.match_length <= 5 &&
                                (s.strategy === Z_FILTERED ||
                                    (s.match_length === MIN_MATCH &&
                                        s.strstart - s.match_start >
                                            4096)) /*TOO_FAR*/
                            ) {
                                /* If prev_match is also MIN_MATCH, match_start is garbage
                                 * but we will ignore the current match anyway.
                                 */
                                s.match_length = MIN_MATCH - 1;
                            }
                        }
                        /* If there was a match at the previous step and the current
                         * match is not better, output the previous match:
                         */
                        if (
                            s.prev_length >= MIN_MATCH &&
                            s.match_length <= s.prev_length
                        ) {
                            max_insert = s.strstart + s.lookahead - MIN_MATCH;
                            /* Do not insert strings in hash table beyond this. */

                            //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

                            /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                         s.prev_length - MIN_MATCH, bflush);***/
                            bflush = trees._tr_tally(
                                s,
                                s.strstart - 1 - s.prev_match,
                                s.prev_length - MIN_MATCH
                            );
                            /* Insert in hash table all strings up to the end of the match.
                             * strstart-1 and strstart are already inserted. If there is not
                             * enough lookahead, the last two strings are not inserted in
                             * the hash table.
                             */
                            s.lookahead -= s.prev_length - 1;
                            s.prev_length -= 2;
                            do {
                                if (++s.strstart <= max_insert) {
                                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                                    s.ins_h =
                                        ((s.ins_h << s.hash_shift) ^
                                            s.window[
                                                s.strstart + MIN_MATCH - 1
                                            ]) &
                                        s.hash_mask;
                                    hash_head = s.prev[s.strstart & s.w_mask] =
                                        s.head[s.ins_h];
                                    s.head[s.ins_h] = s.strstart;
                                    /***/
                                }
                            } while (--s.prev_length !== 0);
                            s.match_available = 0;
                            s.match_length = MIN_MATCH - 1;
                            s.strstart++;

                            if (bflush) {
                                /*** FLUSH_BLOCK(s, 0); ***/
                                flush_block_only(s, false);
                                if (s.strm.avail_out === 0) {
                                    return BS_NEED_MORE;
                                }
                                /***/
                            }
                        } else if (s.match_available) {
                            /* If there was no match at the previous position, output a
                             * single literal. If there was a match but the current match
                             * is longer, truncate the previous match to a single literal.
                             */
                            //Tracevv((stderr,"%c", s->window[s->strstart-1]));
                            /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
                            bflush = trees._tr_tally(
                                s,
                                0,
                                s.window[s.strstart - 1]
                            );

                            if (bflush) {
                                /*** FLUSH_BLOCK_ONLY(s, 0) ***/
                                flush_block_only(s, false);
                                /***/
                            }
                            s.strstart++;
                            s.lookahead--;
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                        } else {
                            /* There is no previous match to compare with, wait for
                             * the next step to decide.
                             */
                            s.match_available = 1;
                            s.strstart++;
                            s.lookahead--;
                        }
                    }
                    //Assert (flush != Z_NO_FLUSH, "no flush?");
                    if (s.match_available) {
                        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
                        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
                        bflush = trees._tr_tally(
                            s,
                            0,
                            s.window[s.strstart - 1]
                        );

                        s.match_available = 0;
                    }
                    s.insert =
                        s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
                    if (flush === Z_FINISH) {
                        /*** FLUSH_BLOCK(s, 1); ***/
                        flush_block_only(s, true);
                        if (s.strm.avail_out === 0) {
                            return BS_FINISH_STARTED;
                        }
                        /***/
                        return BS_FINISH_DONE;
                    }
                    if (s.last_lit) {
                        /*** FLUSH_BLOCK(s, 0); ***/
                        flush_block_only(s, false);
                        if (s.strm.avail_out === 0) {
                            return BS_NEED_MORE;
                        }
                        /***/
                    }

                    return BS_BLOCK_DONE;
                }

                /* ===========================================================================
                 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
                 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
                 * deflate switches away from Z_RLE.)
                 */
                function deflate_rle(s, flush) {
                    var bflush; /* set if current block must be flushed */
                    var prev; /* byte at distance one to match */
                    var scan,
                        strend; /* scan goes up to strend for length of run */

                    var _win = s.window;

                    for (;;) {
                        /* Make sure that we always have enough lookahead, except
                         * at the end of the input file. We need MAX_MATCH bytes
                         * for the longest run, plus one for the unrolled loop.
                         */
                        if (s.lookahead <= MAX_MATCH) {
                            fill_window(s);
                            if (
                                s.lookahead <= MAX_MATCH &&
                                flush === Z_NO_FLUSH
                            ) {
                                return BS_NEED_MORE;
                            }
                            if (s.lookahead === 0) {
                                break;
                            } /* flush the current block */
                        }

                        /* See how many times the previous byte repeats */
                        s.match_length = 0;
                        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
                            scan = s.strstart - 1;
                            prev = _win[scan];
                            if (
                                prev === _win[++scan] &&
                                prev === _win[++scan] &&
                                prev === _win[++scan]
                            ) {
                                strend = s.strstart + MAX_MATCH;
                                do {
                                    /*jshint noempty:false*/
                                } while (
                                    prev === _win[++scan] &&
                                    prev === _win[++scan] &&
                                    prev === _win[++scan] &&
                                    prev === _win[++scan] &&
                                    prev === _win[++scan] &&
                                    prev === _win[++scan] &&
                                    prev === _win[++scan] &&
                                    prev === _win[++scan] &&
                                    scan < strend
                                );
                                s.match_length = MAX_MATCH - (strend - scan);
                                if (s.match_length > s.lookahead) {
                                    s.match_length = s.lookahead;
                                }
                            }
                            //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
                        }

                        /* Emit match if have run of MIN_MATCH or longer, else emit literal */
                        if (s.match_length >= MIN_MATCH) {
                            //check_match(s, s.strstart, s.strstart - 1, s.match_length);

                            /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
                            bflush = trees._tr_tally(
                                s,
                                1,
                                s.match_length - MIN_MATCH
                            );

                            s.lookahead -= s.match_length;
                            s.strstart += s.match_length;
                            s.match_length = 0;
                        } else {
                            /* No match, output a literal byte */
                            //Tracevv((stderr,"%c", s->window[s->strstart]));
                            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
                            bflush = trees._tr_tally(
                                s,
                                0,
                                s.window[s.strstart]
                            );

                            s.lookahead--;
                            s.strstart++;
                        }
                        if (bflush) {
                            /*** FLUSH_BLOCK(s, 0); ***/
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                            /***/
                        }
                    }
                    s.insert = 0;
                    if (flush === Z_FINISH) {
                        /*** FLUSH_BLOCK(s, 1); ***/
                        flush_block_only(s, true);
                        if (s.strm.avail_out === 0) {
                            return BS_FINISH_STARTED;
                        }
                        /***/
                        return BS_FINISH_DONE;
                    }
                    if (s.last_lit) {
                        /*** FLUSH_BLOCK(s, 0); ***/
                        flush_block_only(s, false);
                        if (s.strm.avail_out === 0) {
                            return BS_NEED_MORE;
                        }
                        /***/
                    }
                    return BS_BLOCK_DONE;
                }

                /* ===========================================================================
                 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
                 * (It will be regenerated if this run of deflate switches away from Huffman.)
                 */
                function deflate_huff(s, flush) {
                    var bflush; /* set if current block must be flushed */

                    for (;;) {
                        /* Make sure that we have a literal to write. */
                        if (s.lookahead === 0) {
                            fill_window(s);
                            if (s.lookahead === 0) {
                                if (flush === Z_NO_FLUSH) {
                                    return BS_NEED_MORE;
                                }
                                break; /* flush the current block */
                            }
                        }

                        /* Output a literal byte */
                        s.match_length = 0;
                        //Tracevv((stderr,"%c", s->window[s->strstart]));
                        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
                        bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
                        s.lookahead--;
                        s.strstart++;
                        if (bflush) {
                            /*** FLUSH_BLOCK(s, 0); ***/
                            flush_block_only(s, false);
                            if (s.strm.avail_out === 0) {
                                return BS_NEED_MORE;
                            }
                            /***/
                        }
                    }
                    s.insert = 0;
                    if (flush === Z_FINISH) {
                        /*** FLUSH_BLOCK(s, 1); ***/
                        flush_block_only(s, true);
                        if (s.strm.avail_out === 0) {
                            return BS_FINISH_STARTED;
                        }
                        /***/
                        return BS_FINISH_DONE;
                    }
                    if (s.last_lit) {
                        /*** FLUSH_BLOCK(s, 0); ***/
                        flush_block_only(s, false);
                        if (s.strm.avail_out === 0) {
                            return BS_NEED_MORE;
                        }
                        /***/
                    }
                    return BS_BLOCK_DONE;
                }

                /* Values for max_lazy_match, good_match and max_chain_length, depending on
                 * the desired pack level (0..9). The values given below have been tuned to
                 * exclude worst case performance for pathological files. Better values may be
                 * found for specific files.
                 */
                function Config(
                    good_length,
                    max_lazy,
                    nice_length,
                    max_chain,
                    func
                ) {
                    this.good_length = good_length;
                    this.max_lazy = max_lazy;
                    this.nice_length = nice_length;
                    this.max_chain = max_chain;
                    this.func = func;
                }

                var configuration_table;

                configuration_table = [
                    /*      good lazy nice chain */
                    new Config(0, 0, 0, 0, deflate_stored) /* 0 store only */,
                    new Config(
                        4,
                        4,
                        8,
                        4,
                        deflate_fast
                    ) /* 1 max speed, no lazy matches */,
                    new Config(4, 5, 16, 8, deflate_fast) /* 2 */,
                    new Config(4, 6, 32, 32, deflate_fast) /* 3 */,

                    new Config(4, 4, 16, 16, deflate_slow) /* 4 lazy matches */,
                    new Config(8, 16, 32, 32, deflate_slow) /* 5 */,
                    new Config(8, 16, 128, 128, deflate_slow) /* 6 */,
                    new Config(8, 32, 128, 256, deflate_slow) /* 7 */,
                    new Config(32, 128, 258, 1024, deflate_slow) /* 8 */,
                    new Config(
                        32,
                        258,
                        258,
                        4096,
                        deflate_slow
                    ) /* 9 max compression */,
                ];

                /* ===========================================================================
                 * Initialize the "longest match" routines for a new zlib stream
                 */
                function lm_init(s) {
                    s.window_size = 2 * s.w_size;

                    /*** CLEAR_HASH(s); ***/
                    zero(s.head); // Fill with NIL (= 0);

                    /* Set the default configuration parameters:
                     */
                    s.max_lazy_match = configuration_table[s.level].max_lazy;
                    s.good_match = configuration_table[s.level].good_length;
                    s.nice_match = configuration_table[s.level].nice_length;
                    s.max_chain_length = configuration_table[s.level].max_chain;

                    s.strstart = 0;
                    s.block_start = 0;
                    s.lookahead = 0;
                    s.insert = 0;
                    s.match_length = s.prev_length = MIN_MATCH - 1;
                    s.match_available = 0;
                    s.ins_h = 0;
                }

                function DeflateState() {
                    this.strm = null; /* pointer back to this zlib stream */
                    this.status = 0; /* as the name implies */
                    this.pending_buf = null; /* output still pending */
                    this.pending_buf_size = 0; /* size of pending_buf */
                    this.pending_out = 0; /* next pending byte to output to the stream */
                    this.pending = 0; /* nb of bytes in the pending buffer */
                    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
                    this.gzhead = null; /* gzip header information to write */
                    this.gzindex = 0; /* where in extra, name, or comment */
                    this.method = Z_DEFLATED; /* can only be DEFLATED */
                    this.last_flush =
                        -1; /* value of flush param for previous deflate call */

                    this.w_size = 0; /* LZ77 window size (32K by default) */
                    this.w_bits = 0; /* log2(w_size)  (8..16) */
                    this.w_mask = 0; /* w_size - 1 */

                    this.window = null;
                    /* Sliding window. Input bytes are read into the second half of the window,
                     * and move to the first half later to keep a dictionary of at least wSize
                     * bytes. With this organization, matches are limited to a distance of
                     * wSize-MAX_MATCH bytes, but this ensures that IO is always
                     * performed with a length multiple of the block size.
                     */

                    this.window_size = 0;
                    /* Actual size of window: 2*wSize, except when the user input buffer
                     * is directly used as sliding window.
                     */

                    this.prev = null;
                    /* Link to older string with same hash index. To limit the size of this
                     * array to 64K, this link is maintained only for the last 32K strings.
                     * An index in this array is thus a window index modulo 32K.
                     */

                    this.head = null; /* Heads of the hash chains or NIL. */

                    this.ins_h = 0; /* hash index of string to be inserted */
                    this.hash_size = 0; /* number of elements in hash table */
                    this.hash_bits = 0; /* log2(hash_size) */
                    this.hash_mask = 0; /* hash_size-1 */

                    this.hash_shift = 0;
                    /* Number of bits by which ins_h must be shifted at each input
                     * step. It must be such that after MIN_MATCH steps, the oldest
                     * byte no longer takes part in the hash key, that is:
                     *   hash_shift * MIN_MATCH >= hash_bits
                     */

                    this.block_start = 0;
                    /* Window position at the beginning of the current output block. Gets
                     * negative when the window is moved backwards.
                     */

                    this.match_length = 0; /* length of best match */
                    this.prev_match = 0; /* previous match */
                    this.match_available = 0; /* set if previous match exists */
                    this.strstart = 0; /* start of string to insert */
                    this.match_start = 0; /* start of matching string */
                    this.lookahead = 0; /* number of valid bytes ahead in window */

                    this.prev_length = 0;
                    /* Length of the best match at previous step. Matches not greater than this
                     * are discarded. This is used in the lazy match evaluation.
                     */

                    this.max_chain_length = 0;
                    /* To speed up deflation, hash chains are never searched beyond this
                     * length.  A higher limit improves compression ratio but degrades the
                     * speed.
                     */

                    this.max_lazy_match = 0;
                    /* Attempt to find a better match only when the current match is strictly
                     * smaller than this value. This mechanism is used only for compression
                     * levels >= 4.
                     */
                    // That's alias to max_lazy_match, don't use directly
                    //this.max_insert_length = 0;
                    /* Insert new strings in the hash table only if the match length is not
                     * greater than this length. This saves time but degrades compression.
                     * max_insert_length is used only for compression levels <= 3.
                     */

                    this.level = 0; /* compression level (1..9) */
                    this.strategy = 0; /* favor or force Huffman coding*/

                    this.good_match = 0;
                    /* Use a faster search when the previous match is longer than this */

                    this.nice_match = 0; /* Stop searching when current match exceeds this */

                    /* used by trees.c: */

                    /* Didn't use ct_data typedef below to suppress compiler warning */

                    // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
                    // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
                    // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

                    // Use flat array of DOUBLE size, with interleaved fata,
                    // because JS does not support effective
                    this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);
                    this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);
                    this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);
                    zero(this.dyn_ltree);
                    zero(this.dyn_dtree);
                    zero(this.bl_tree);

                    this.l_desc = null; /* desc. for literal tree */
                    this.d_desc = null; /* desc. for distance tree */
                    this.bl_desc = null; /* desc. for bit length tree */

                    //ush bl_count[MAX_BITS+1];
                    this.bl_count = new utils.Buf16(MAX_BITS + 1);
                    /* number of codes at each bit length for an optimal tree */

                    //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
                    this.heap = new utils.Buf16(
                        2 * L_CODES + 1
                    ); /* heap used to build the Huffman trees */
                    zero(this.heap);

                    this.heap_len = 0; /* number of elements in the heap */
                    this.heap_max = 0; /* element of largest frequency */
                    /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
                     * The same heap array is used to build all trees.
                     */

                    this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
                    zero(this.depth);
                    /* Depth of each subtree used as tie breaker for trees of equal frequency
                     */

                    this.l_buf = 0; /* buffer index for literals or lengths */

                    this.lit_bufsize = 0;
                    /* Size of match buffer for literals/lengths.  There are 4 reasons for
                     * limiting lit_bufsize to 64K:
                     *   - frequencies can be kept in 16 bit counters
                     *   - if compression is not successful for the first block, all input
                     *     data is still in the window so we can still emit a stored block even
                     *     when input comes from standard input.  (This can also be done for
                     *     all blocks if lit_bufsize is not greater than 32K.)
                     *   - if compression is not successful for a file smaller than 64K, we can
                     *     even emit a stored file instead of a stored block (saving 5 bytes).
                     *     This is applicable only for zip (not gzip or zlib).
                     *   - creating new Huffman trees less frequently may not provide fast
                     *     adaptation to changes in the input data statistics. (Take for
                     *     example a binary file with poorly compressible code followed by
                     *     a highly compressible string table.) Smaller buffer sizes give
                     *     fast adaptation but have of course the overhead of transmitting
                     *     trees more frequently.
                     *   - I can't count above 4
                     */

                    this.last_lit = 0; /* running index in l_buf */

                    this.d_buf = 0;
                    /* Buffer index for distances. To simplify the code, d_buf and l_buf have
                     * the same number of elements. To use different lengths, an extra flag
                     * array would be necessary.
                     */

                    this.opt_len = 0; /* bit length of current block with optimal trees */
                    this.static_len = 0; /* bit length of current block with static trees */
                    this.matches = 0; /* number of string matches in current block */
                    this.insert = 0; /* bytes at end of window left to insert */

                    this.bi_buf = 0;
                    /* Output buffer. bits are inserted starting at the bottom (least
                     * significant bits).
                     */
                    this.bi_valid = 0;
                    /* Number of valid bits in bi_buf.  All bits above the last valid bit
                     * are always zero.
                     */

                    // Used for window memory init. We safely ignore it for JS. That makes
                    // sense only for pointers and memory check tools.
                    //this.high_water = 0;
                    /* High water mark offset in window for initialized bytes -- bytes above
                     * this are set to zero in order to avoid memory check warnings when
                     * longest match routines access bytes past the input.  This is then
                     * updated to the new high water mark.
                     */
                }

                function deflateResetKeep(strm) {
                    var s;

                    if (!strm || !strm.state) {
                        return err(strm, Z_STREAM_ERROR);
                    }

                    strm.total_in = strm.total_out = 0;
                    strm.data_type = Z_UNKNOWN;

                    s = strm.state;
                    s.pending = 0;
                    s.pending_out = 0;

                    if (s.wrap < 0) {
                        s.wrap = -s.wrap;
                        /* was made negative by deflate(..., Z_FINISH); */
                    }
                    s.status = s.wrap ? INIT_STATE : BUSY_STATE;
                    strm.adler =
                        s.wrap === 2
                            ? 0 // crc32(0, Z_NULL, 0)
                            : 1; // adler32(0, Z_NULL, 0)
                    s.last_flush = Z_NO_FLUSH;
                    trees._tr_init(s);
                    return Z_OK;
                }

                function deflateReset(strm) {
                    var ret = deflateResetKeep(strm);
                    if (ret === Z_OK) {
                        lm_init(strm.state);
                    }
                    return ret;
                }

                function deflateSetHeader(strm, head) {
                    if (!strm || !strm.state) {
                        return Z_STREAM_ERROR;
                    }
                    if (strm.state.wrap !== 2) {
                        return Z_STREAM_ERROR;
                    }
                    strm.state.gzhead = head;
                    return Z_OK;
                }

                function deflateInit2(
                    strm,
                    level,
                    method,
                    windowBits,
                    memLevel,
                    strategy
                ) {
                    if (!strm) {
                        // === Z_NULL
                        return Z_STREAM_ERROR;
                    }
                    var wrap = 1;

                    if (level === Z_DEFAULT_COMPRESSION) {
                        level = 6;
                    }

                    if (windowBits < 0) {
                        /* suppress zlib wrapper */
                        wrap = 0;
                        windowBits = -windowBits;
                    } else if (windowBits > 15) {
                        wrap = 2; /* write gzip wrapper instead */
                        windowBits -= 16;
                    }

                    if (
                        memLevel < 1 ||
                        memLevel > MAX_MEM_LEVEL ||
                        method !== Z_DEFLATED ||
                        windowBits < 8 ||
                        windowBits > 15 ||
                        level < 0 ||
                        level > 9 ||
                        strategy < 0 ||
                        strategy > Z_FIXED
                    ) {
                        return err(strm, Z_STREAM_ERROR);
                    }

                    if (windowBits === 8) {
                        windowBits = 9;
                    }
                    /* until 256-byte window bug fixed */

                    var s = new DeflateState();

                    strm.state = s;
                    s.strm = strm;

                    s.wrap = wrap;
                    s.gzhead = null;
                    s.w_bits = windowBits;
                    s.w_size = 1 << s.w_bits;
                    s.w_mask = s.w_size - 1;

                    s.hash_bits = memLevel + 7;
                    s.hash_size = 1 << s.hash_bits;
                    s.hash_mask = s.hash_size - 1;
                    s.hash_shift = ~~(
                        (s.hash_bits + MIN_MATCH - 1) /
                        MIN_MATCH
                    );

                    s.window = new utils.Buf8(s.w_size * 2);
                    s.head = new utils.Buf16(s.hash_size);
                    s.prev = new utils.Buf16(s.w_size);

                    // Don't need mem init magic for JS.
                    //s.high_water = 0;  /* nothing written to s->window yet */

                    s.lit_bufsize =
                        1 << (memLevel + 6); /* 16K elements by default */

                    s.pending_buf_size = s.lit_bufsize * 4;

                    //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
                    //s->pending_buf = (uchf *) overlay;
                    s.pending_buf = new utils.Buf8(s.pending_buf_size);

                    // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
                    //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
                    s.d_buf = 1 * s.lit_bufsize;

                    //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
                    s.l_buf = (1 + 2) * s.lit_bufsize;

                    s.level = level;
                    s.strategy = strategy;
                    s.method = method;

                    return deflateReset(strm);
                }

                function deflateInit(strm, level) {
                    return deflateInit2(
                        strm,
                        level,
                        Z_DEFLATED,
                        MAX_WBITS,
                        DEF_MEM_LEVEL,
                        Z_DEFAULT_STRATEGY
                    );
                }

                function deflate(strm, flush) {
                    var old_flush, s;
                    var beg, val; // for gzip header write only

                    if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
                        return strm
                            ? err(strm, Z_STREAM_ERROR)
                            : Z_STREAM_ERROR;
                    }

                    s = strm.state;

                    if (
                        !strm.output ||
                        (!strm.input && strm.avail_in !== 0) ||
                        (s.status === FINISH_STATE && flush !== Z_FINISH)
                    ) {
                        return err(
                            strm,
                            strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR
                        );
                    }

                    s.strm = strm; /* just in case */
                    old_flush = s.last_flush;
                    s.last_flush = flush;

                    /* Write the header */
                    if (s.status === INIT_STATE) {
                        if (s.wrap === 2) {
                            // GZIP header
                            strm.adler = 0; //crc32(0L, Z_NULL, 0);
                            put_byte(s, 31);
                            put_byte(s, 139);
                            put_byte(s, 8);
                            if (!s.gzhead) {
                                // s->gzhead == Z_NULL
                                put_byte(s, 0);
                                put_byte(s, 0);
                                put_byte(s, 0);
                                put_byte(s, 0);
                                put_byte(s, 0);
                                put_byte(
                                    s,
                                    s.level === 9
                                        ? 2
                                        : s.strategy >= Z_HUFFMAN_ONLY ||
                                          s.level < 2
                                        ? 4
                                        : 0
                                );
                                put_byte(s, OS_CODE);
                                s.status = BUSY_STATE;
                            } else {
                                put_byte(
                                    s,
                                    (s.gzhead.text ? 1 : 0) +
                                        (s.gzhead.hcrc ? 2 : 0) +
                                        (!s.gzhead.extra ? 0 : 4) +
                                        (!s.gzhead.name ? 0 : 8) +
                                        (!s.gzhead.comment ? 0 : 16)
                                );
                                put_byte(s, s.gzhead.time & 0xff);
                                put_byte(s, (s.gzhead.time >> 8) & 0xff);
                                put_byte(s, (s.gzhead.time >> 16) & 0xff);
                                put_byte(s, (s.gzhead.time >> 24) & 0xff);
                                put_byte(
                                    s,
                                    s.level === 9
                                        ? 2
                                        : s.strategy >= Z_HUFFMAN_ONLY ||
                                          s.level < 2
                                        ? 4
                                        : 0
                                );
                                put_byte(s, s.gzhead.os & 0xff);
                                if (s.gzhead.extra && s.gzhead.extra.length) {
                                    put_byte(s, s.gzhead.extra.length & 0xff);
                                    put_byte(
                                        s,
                                        (s.gzhead.extra.length >> 8) & 0xff
                                    );
                                }
                                if (s.gzhead.hcrc) {
                                    strm.adler = crc32(
                                        strm.adler,
                                        s.pending_buf,
                                        s.pending,
                                        0
                                    );
                                }
                                s.gzindex = 0;
                                s.status = EXTRA_STATE;
                            }
                        } // DEFLATE header
                        else {
                            var header =
                                (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
                            var level_flags = -1;

                            if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
                                level_flags = 0;
                            } else if (s.level < 6) {
                                level_flags = 1;
                            } else if (s.level === 6) {
                                level_flags = 2;
                            } else {
                                level_flags = 3;
                            }
                            header |= level_flags << 6;
                            if (s.strstart !== 0) {
                                header |= PRESET_DICT;
                            }
                            header += 31 - (header % 31);

                            s.status = BUSY_STATE;
                            putShortMSB(s, header);

                            /* Save the adler32 of the preset dictionary: */
                            if (s.strstart !== 0) {
                                putShortMSB(s, strm.adler >>> 16);
                                putShortMSB(s, strm.adler & 0xffff);
                            }
                            strm.adler = 1; // adler32(0L, Z_NULL, 0);
                        }
                    }

                    //#ifdef GZIP
                    if (s.status === EXTRA_STATE) {
                        if (s.gzhead.extra /* != Z_NULL*/) {
                            beg = s.pending; /* start of bytes to update crc */

                            while (
                                s.gzindex <
                                (s.gzhead.extra.length & 0xffff)
                            ) {
                                if (s.pending === s.pending_buf_size) {
                                    if (s.gzhead.hcrc && s.pending > beg) {
                                        strm.adler = crc32(
                                            strm.adler,
                                            s.pending_buf,
                                            s.pending - beg,
                                            beg
                                        );
                                    }
                                    flush_pending(strm);
                                    beg = s.pending;
                                    if (s.pending === s.pending_buf_size) {
                                        break;
                                    }
                                }
                                put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
                                s.gzindex++;
                            }
                            if (s.gzhead.hcrc && s.pending > beg) {
                                strm.adler = crc32(
                                    strm.adler,
                                    s.pending_buf,
                                    s.pending - beg,
                                    beg
                                );
                            }
                            if (s.gzindex === s.gzhead.extra.length) {
                                s.gzindex = 0;
                                s.status = NAME_STATE;
                            }
                        } else {
                            s.status = NAME_STATE;
                        }
                    }
                    if (s.status === NAME_STATE) {
                        if (s.gzhead.name /* != Z_NULL*/) {
                            beg = s.pending; /* start of bytes to update crc */
                            //int val;

                            do {
                                if (s.pending === s.pending_buf_size) {
                                    if (s.gzhead.hcrc && s.pending > beg) {
                                        strm.adler = crc32(
                                            strm.adler,
                                            s.pending_buf,
                                            s.pending - beg,
                                            beg
                                        );
                                    }
                                    flush_pending(strm);
                                    beg = s.pending;
                                    if (s.pending === s.pending_buf_size) {
                                        val = 1;
                                        break;
                                    }
                                }
                                // JS specific: little magic to add zero terminator to end of string
                                if (s.gzindex < s.gzhead.name.length) {
                                    val =
                                        s.gzhead.name.charCodeAt(s.gzindex++) &
                                        0xff;
                                } else {
                                    val = 0;
                                }
                                put_byte(s, val);
                            } while (val !== 0);

                            if (s.gzhead.hcrc && s.pending > beg) {
                                strm.adler = crc32(
                                    strm.adler,
                                    s.pending_buf,
                                    s.pending - beg,
                                    beg
                                );
                            }
                            if (val === 0) {
                                s.gzindex = 0;
                                s.status = COMMENT_STATE;
                            }
                        } else {
                            s.status = COMMENT_STATE;
                        }
                    }
                    if (s.status === COMMENT_STATE) {
                        if (s.gzhead.comment /* != Z_NULL*/) {
                            beg = s.pending; /* start of bytes to update crc */
                            //int val;

                            do {
                                if (s.pending === s.pending_buf_size) {
                                    if (s.gzhead.hcrc && s.pending > beg) {
                                        strm.adler = crc32(
                                            strm.adler,
                                            s.pending_buf,
                                            s.pending - beg,
                                            beg
                                        );
                                    }
                                    flush_pending(strm);
                                    beg = s.pending;
                                    if (s.pending === s.pending_buf_size) {
                                        val = 1;
                                        break;
                                    }
                                }
                                // JS specific: little magic to add zero terminator to end of string
                                if (s.gzindex < s.gzhead.comment.length) {
                                    val =
                                        s.gzhead.comment.charCodeAt(
                                            s.gzindex++
                                        ) & 0xff;
                                } else {
                                    val = 0;
                                }
                                put_byte(s, val);
                            } while (val !== 0);

                            if (s.gzhead.hcrc && s.pending > beg) {
                                strm.adler = crc32(
                                    strm.adler,
                                    s.pending_buf,
                                    s.pending - beg,
                                    beg
                                );
                            }
                            if (val === 0) {
                                s.status = HCRC_STATE;
                            }
                        } else {
                            s.status = HCRC_STATE;
                        }
                    }
                    if (s.status === HCRC_STATE) {
                        if (s.gzhead.hcrc) {
                            if (s.pending + 2 > s.pending_buf_size) {
                                flush_pending(strm);
                            }
                            if (s.pending + 2 <= s.pending_buf_size) {
                                put_byte(s, strm.adler & 0xff);
                                put_byte(s, (strm.adler >> 8) & 0xff);
                                strm.adler = 0; //crc32(0L, Z_NULL, 0);
                                s.status = BUSY_STATE;
                            }
                        } else {
                            s.status = BUSY_STATE;
                        }
                    }
                    //#endif

                    /* Flush as much pending output as possible */
                    if (s.pending !== 0) {
                        flush_pending(strm);
                        if (strm.avail_out === 0) {
                            /* Since avail_out is 0, deflate will be called again with
                             * more output space, but possibly with both pending and
                             * avail_in equal to zero. There won't be anything to do,
                             * but this is not an error situation so make sure we
                             * return OK instead of BUF_ERROR at next call of deflate:
                             */
                            s.last_flush = -1;
                            return Z_OK;
                        }

                        /* Make sure there is something to do and avoid duplicate consecutive
                         * flushes. For repeated and useless calls with Z_FINISH, we keep
                         * returning Z_STREAM_END instead of Z_BUF_ERROR.
                         */
                    } else if (
                        strm.avail_in === 0 &&
                        rank(flush) <= rank(old_flush) &&
                        flush !== Z_FINISH
                    ) {
                        return err(strm, Z_BUF_ERROR);
                    }

                    /* User must not provide more input after the first FINISH: */
                    if (s.status === FINISH_STATE && strm.avail_in !== 0) {
                        return err(strm, Z_BUF_ERROR);
                    }

                    /* Start a new block or continue the current one.
                     */
                    if (
                        strm.avail_in !== 0 ||
                        s.lookahead !== 0 ||
                        (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)
                    ) {
                        var bstate =
                            s.strategy === Z_HUFFMAN_ONLY
                                ? deflate_huff(s, flush)
                                : s.strategy === Z_RLE
                                ? deflate_rle(s, flush)
                                : configuration_table[s.level].func(s, flush);

                        if (
                            bstate === BS_FINISH_STARTED ||
                            bstate === BS_FINISH_DONE
                        ) {
                            s.status = FINISH_STATE;
                        }
                        if (
                            bstate === BS_NEED_MORE ||
                            bstate === BS_FINISH_STARTED
                        ) {
                            if (strm.avail_out === 0) {
                                s.last_flush = -1;
                                /* avoid BUF_ERROR next call, see above */
                            }
                            return Z_OK;
                            /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
                             * of deflate should use the same flush parameter to make sure
                             * that the flush is complete. So we don't have to output an
                             * empty block here, this will be done at next call. This also
                             * ensures that for a very small output buffer, we emit at most
                             * one empty block.
                             */
                        }
                        if (bstate === BS_BLOCK_DONE) {
                            if (flush === Z_PARTIAL_FLUSH) {
                                trees._tr_align(s);
                            } else if (flush !== Z_BLOCK) {
                                /* FULL_FLUSH or SYNC_FLUSH */

                                trees._tr_stored_block(s, 0, 0, false);
                                /* For a full flush, this empty block will be recognized
                                 * as a special marker by inflate_sync().
                                 */
                                if (flush === Z_FULL_FLUSH) {
                                    /*** CLEAR_HASH(s); ***/ /* forget history */
                                    zero(s.head); // Fill with NIL (= 0);

                                    if (s.lookahead === 0) {
                                        s.strstart = 0;
                                        s.block_start = 0;
                                        s.insert = 0;
                                    }
                                }
                            }
                            flush_pending(strm);
                            if (strm.avail_out === 0) {
                                s.last_flush =
                                    -1; /* avoid BUF_ERROR at next call, see above */
                                return Z_OK;
                            }
                        }
                    }
                    //Assert(strm->avail_out > 0, "bug2");
                    //if (strm.avail_out <= 0) { throw new Error("bug2");}

                    if (flush !== Z_FINISH) {
                        return Z_OK;
                    }
                    if (s.wrap <= 0) {
                        return Z_STREAM_END;
                    }

                    /* Write the trailer */
                    if (s.wrap === 2) {
                        put_byte(s, strm.adler & 0xff);
                        put_byte(s, (strm.adler >> 8) & 0xff);
                        put_byte(s, (strm.adler >> 16) & 0xff);
                        put_byte(s, (strm.adler >> 24) & 0xff);
                        put_byte(s, strm.total_in & 0xff);
                        put_byte(s, (strm.total_in >> 8) & 0xff);
                        put_byte(s, (strm.total_in >> 16) & 0xff);
                        put_byte(s, (strm.total_in >> 24) & 0xff);
                    } else {
                        putShortMSB(s, strm.adler >>> 16);
                        putShortMSB(s, strm.adler & 0xffff);
                    }

                    flush_pending(strm);
                    /* If avail_out is zero, the application will call deflate again
                     * to flush the rest.
                     */
                    if (s.wrap > 0) {
                        s.wrap = -s.wrap;
                    }
                    /* write the trailer only once! */
                    return s.pending !== 0 ? Z_OK : Z_STREAM_END;
                }

                function deflateEnd(strm) {
                    var status;

                    if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/) {
                        return Z_STREAM_ERROR;
                    }

                    status = strm.state.status;
                    if (
                        status !== INIT_STATE &&
                        status !== EXTRA_STATE &&
                        status !== NAME_STATE &&
                        status !== COMMENT_STATE &&
                        status !== HCRC_STATE &&
                        status !== BUSY_STATE &&
                        status !== FINISH_STATE
                    ) {
                        return err(strm, Z_STREAM_ERROR);
                    }

                    strm.state = null;

                    return status === BUSY_STATE
                        ? err(strm, Z_DATA_ERROR)
                        : Z_OK;
                }

                /* =========================================================================
                 * Initializes the compression dictionary from the given byte
                 * sequence without producing any compressed output.
                 */
                function deflateSetDictionary(strm, dictionary) {
                    var dictLength = dictionary.length;

                    var s;
                    var str, n;
                    var wrap;
                    var avail;
                    var next;
                    var input;
                    var tmpDict;

                    if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/) {
                        return Z_STREAM_ERROR;
                    }

                    s = strm.state;
                    wrap = s.wrap;

                    if (
                        wrap === 2 ||
                        (wrap === 1 && s.status !== INIT_STATE) ||
                        s.lookahead
                    ) {
                        return Z_STREAM_ERROR;
                    }

                    /* when using zlib wrappers, compute Adler-32 for provided dictionary */
                    if (wrap === 1) {
                        /* adler32(strm->adler, dictionary, dictLength); */
                        strm.adler = adler32(
                            strm.adler,
                            dictionary,
                            dictLength,
                            0
                        );
                    }

                    s.wrap = 0; /* avoid computing Adler-32 in read_buf */

                    /* if dictionary would fill window, just replace the history */
                    if (dictLength >= s.w_size) {
                        if (wrap === 0) {
                            /* already empty otherwise */
                            /*** CLEAR_HASH(s); ***/
                            zero(s.head); // Fill with NIL (= 0);
                            s.strstart = 0;
                            s.block_start = 0;
                            s.insert = 0;
                        }
                        /* use the tail */
                        // dictionary = dictionary.slice(dictLength - s.w_size);
                        tmpDict = new utils.Buf8(s.w_size);
                        utils.arraySet(
                            tmpDict,
                            dictionary,
                            dictLength - s.w_size,
                            s.w_size,
                            0
                        );
                        dictionary = tmpDict;
                        dictLength = s.w_size;
                    }
                    /* insert dictionary into window and hash */
                    avail = strm.avail_in;
                    next = strm.next_in;
                    input = strm.input;
                    strm.avail_in = dictLength;
                    strm.next_in = 0;
                    strm.input = dictionary;
                    fill_window(s);
                    while (s.lookahead >= MIN_MATCH) {
                        str = s.strstart;
                        n = s.lookahead - (MIN_MATCH - 1);
                        do {
                            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
                            s.ins_h =
                                ((s.ins_h << s.hash_shift) ^
                                    s.window[str + MIN_MATCH - 1]) &
                                s.hash_mask;

                            s.prev[str & s.w_mask] = s.head[s.ins_h];

                            s.head[s.ins_h] = str;
                            str++;
                        } while (--n);
                        s.strstart = str;
                        s.lookahead = MIN_MATCH - 1;
                        fill_window(s);
                    }
                    s.strstart += s.lookahead;
                    s.block_start = s.strstart;
                    s.insert = s.lookahead;
                    s.lookahead = 0;
                    s.match_length = s.prev_length = MIN_MATCH - 1;
                    s.match_available = 0;
                    strm.next_in = next;
                    strm.input = input;
                    strm.avail_in = avail;
                    s.wrap = wrap;
                    return Z_OK;
                }

                exports.deflateInit = deflateInit;
                exports.deflateInit2 = deflateInit2;
                exports.deflateReset = deflateReset;
                exports.deflateResetKeep = deflateResetKeep;
                exports.deflateSetHeader = deflateSetHeader;
                exports.deflate = deflate;
                exports.deflateEnd = deflateEnd;
                exports.deflateSetDictionary = deflateSetDictionary;
                exports.deflateInfo = "pako deflate (from Nodeca project)";

                /* Not implemented
    exports.deflateBound = deflateBound;
    exports.deflateCopy = deflateCopy;
    exports.deflateParams = deflateParams;
    exports.deflatePending = deflatePending;
    exports.deflatePrime = deflatePrime;
    exports.deflateTune = deflateTune;
    */
            },
            {
                "../utils/common": 90,
                "./adler32": 91,
                "./crc32": 93,
                "./messages": 98,
                "./trees": 99,
            },
        ],
        95: [
            function (require, module, exports) {
                "use strict";

                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                // See state defs from inflate.js
                var BAD = 30; /* got a data error -- remain here until reset */
                var TYPE = 12; /* i: waiting for type bits, including last-flag bit */

                /*
       Decode literal, length, and distance codes and write out the resulting
       literal and match bytes until either not enough input or output is
       available, an end-of-block is encountered, or a data error is encountered.
       When large enough input and output buffers are supplied to inflate(), for
       example, a 16K input buffer and a 64K output buffer, more than 95% of the
       inflate execution time is spent in this routine.

       Entry assumptions:

            state.mode === LEN
            strm.avail_in >= 6
            strm.avail_out >= 258
            start >= strm.avail_out
            state.bits < 8

       On return, state.mode is one of:

            LEN -- ran out of enough output space or enough available input
            TYPE -- reached end of block code, inflate() to interpret next block
            BAD -- error in block data

       Notes:

        - The maximum input bits used by a length/distance pair is 15 bits for the
          length code, 5 bits for the length extra, 15 bits for the distance code,
          and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
          Therefore if strm.avail_in >= 6, then there is enough input to avoid
          checking for available input while decoding.

        - The maximum bytes that a single length/distance pair can output is 258
          bytes, which is the maximum length that can be coded.  inflate_fast()
          requires strm.avail_out >= 258 for each loop to avoid checking for
          output space.
     */
                module.exports = function inflate_fast(strm, start) {
                    var state;
                    var _in; /* local strm.input */
                    var last; /* have enough input while in < last */
                    var _out; /* local strm.output */
                    var beg; /* inflate()'s initial strm.output */
                    var end; /* while out < end, enough space available */
                    //#ifdef INFLATE_STRICT
                    var dmax; /* maximum distance from zlib header */
                    //#endif
                    var wsize; /* window size or zero if not using window */
                    var whave; /* valid bytes in the window */
                    var wnext; /* window write index */
                    // Use `s_window` instead `window`, avoid conflict with instrumentation tools
                    var s_window; /* allocated sliding window, if wsize != 0 */
                    var hold; /* local strm.hold */
                    var bits; /* local strm.bits */
                    var lcode; /* local strm.lencode */
                    var dcode; /* local strm.distcode */
                    var lmask; /* mask for first level of length codes */
                    var dmask; /* mask for first level of distance codes */
                    var here; /* retrieved table entry */
                    var op; /* code bits, operation, extra bits, or */
                    /*  window position, window bytes to copy */
                    var len; /* match length, unused bytes */
                    var dist; /* match distance */
                    var from; /* where to copy match from */
                    var from_source;

                    var input, output; // JS specific, because we have no pointers

                    /* copy state to local variables */
                    state = strm.state;
                    //here = state.here;
                    _in = strm.next_in;
                    input = strm.input;
                    last = _in + (strm.avail_in - 5);
                    _out = strm.next_out;
                    output = strm.output;
                    beg = _out - (start - strm.avail_out);
                    end = _out + (strm.avail_out - 257);
                    //#ifdef INFLATE_STRICT
                    dmax = state.dmax;
                    //#endif
                    wsize = state.wsize;
                    whave = state.whave;
                    wnext = state.wnext;
                    s_window = state.window;
                    hold = state.hold;
                    bits = state.bits;
                    lcode = state.lencode;
                    dcode = state.distcode;
                    lmask = (1 << state.lenbits) - 1;
                    dmask = (1 << state.distbits) - 1;

                    /* decode literals and length/distances until end-of-block or not enough
         input data or output space */

                    top: do {
                        if (bits < 15) {
                            hold += input[_in++] << bits;
                            bits += 8;
                            hold += input[_in++] << bits;
                            bits += 8;
                        }

                        here = lcode[hold & lmask];

                        dolen: for (;;) {
                            // Goto emulation
                            op = here >>> 24 /*here.bits*/;
                            hold >>>= op;
                            bits -= op;
                            op = (here >>> 16) & 0xff /*here.op*/;
                            if (op === 0) {
                                /* literal */
                                //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                                //        "inflate:         literal '%c'\n" :
                                //        "inflate:         literal 0x%02x\n", here.val));
                                output[_out++] = here & 0xffff /*here.val*/;
                            } else if (op & 16) {
                                /* length base */
                                len = here & 0xffff /*here.val*/;
                                op &= 15; /* number of extra bits */
                                if (op) {
                                    if (bits < op) {
                                        hold += input[_in++] << bits;
                                        bits += 8;
                                    }
                                    len += hold & ((1 << op) - 1);
                                    hold >>>= op;
                                    bits -= op;
                                }
                                //Tracevv((stderr, "inflate:         length %u\n", len));
                                if (bits < 15) {
                                    hold += input[_in++] << bits;
                                    bits += 8;
                                    hold += input[_in++] << bits;
                                    bits += 8;
                                }
                                here = dcode[hold & dmask];

                                dodist: for (;;) {
                                    // goto emulation
                                    op = here >>> 24 /*here.bits*/;
                                    hold >>>= op;
                                    bits -= op;
                                    op = (here >>> 16) & 0xff /*here.op*/;

                                    if (op & 16) {
                                        /* distance base */
                                        dist = here & 0xffff /*here.val*/;
                                        op &= 15; /* number of extra bits */
                                        if (bits < op) {
                                            hold += input[_in++] << bits;
                                            bits += 8;
                                            if (bits < op) {
                                                hold += input[_in++] << bits;
                                                bits += 8;
                                            }
                                        }
                                        dist += hold & ((1 << op) - 1);
                                        //#ifdef INFLATE_STRICT
                                        if (dist > dmax) {
                                            strm.msg =
                                                "invalid distance too far back";
                                            state.mode = BAD;
                                            break top;
                                        }
                                        //#endif
                                        hold >>>= op;
                                        bits -= op;
                                        //Tracevv((stderr, "inflate:         distance %u\n", dist));
                                        op =
                                            _out -
                                            beg; /* max distance in output */
                                        if (dist > op) {
                                            /* see if copy from window */
                                            op =
                                                dist -
                                                op; /* distance back in window */
                                            if (op > whave) {
                                                if (state.sane) {
                                                    strm.msg =
                                                        "invalid distance too far back";
                                                    state.mode = BAD;
                                                    break top;
                                                }

                                                // (!) This block is disabled in zlib defaults,
                                                // don't enable it for binary compatibility
                                                //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                                                //                if (len <= op - whave) {
                                                //                  do {
                                                //                    output[_out++] = 0;
                                                //                  } while (--len);
                                                //                  continue top;
                                                //                }
                                                //                len -= op - whave;
                                                //                do {
                                                //                  output[_out++] = 0;
                                                //                } while (--op > whave);
                                                //                if (op === 0) {
                                                //                  from = _out - dist;
                                                //                  do {
                                                //                    output[_out++] = output[from++];
                                                //                  } while (--len);
                                                //                  continue top;
                                                //                }
                                                //#endif
                                            }
                                            from = 0; // window index
                                            from_source = s_window;
                                            if (wnext === 0) {
                                                /* very common case */
                                                from += wsize - op;
                                                if (op < len) {
                                                    /* some from window */
                                                    len -= op;
                                                    do {
                                                        output[_out++] =
                                                            s_window[from++];
                                                    } while (--op);
                                                    from =
                                                        _out -
                                                        dist; /* rest from output */
                                                    from_source = output;
                                                }
                                            } else if (wnext < op) {
                                                /* wrap around window */
                                                from += wsize + wnext - op;
                                                op -= wnext;
                                                if (op < len) {
                                                    /* some from end of window */
                                                    len -= op;
                                                    do {
                                                        output[_out++] =
                                                            s_window[from++];
                                                    } while (--op);
                                                    from = 0;
                                                    if (wnext < len) {
                                                        /* some from start of window */
                                                        op = wnext;
                                                        len -= op;
                                                        do {
                                                            output[_out++] =
                                                                s_window[
                                                                    from++
                                                                ];
                                                        } while (--op);
                                                        from =
                                                            _out -
                                                            dist; /* rest from output */
                                                        from_source = output;
                                                    }
                                                }
                                            } else {
                                                /* contiguous in window */
                                                from += wnext - op;
                                                if (op < len) {
                                                    /* some from window */
                                                    len -= op;
                                                    do {
                                                        output[_out++] =
                                                            s_window[from++];
                                                    } while (--op);
                                                    from =
                                                        _out -
                                                        dist; /* rest from output */
                                                    from_source = output;
                                                }
                                            }
                                            while (len > 2) {
                                                output[_out++] =
                                                    from_source[from++];
                                                output[_out++] =
                                                    from_source[from++];
                                                output[_out++] =
                                                    from_source[from++];
                                                len -= 3;
                                            }
                                            if (len) {
                                                output[_out++] =
                                                    from_source[from++];
                                                if (len > 1) {
                                                    output[_out++] =
                                                        from_source[from++];
                                                }
                                            }
                                        } else {
                                            from =
                                                _out -
                                                dist; /* copy direct from output */
                                            do {
                                                /* minimum length is three */
                                                output[_out++] = output[from++];
                                                output[_out++] = output[from++];
                                                output[_out++] = output[from++];
                                                len -= 3;
                                            } while (len > 2);
                                            if (len) {
                                                output[_out++] = output[from++];
                                                if (len > 1) {
                                                    output[_out++] =
                                                        output[from++];
                                                }
                                            }
                                        }
                                    } else if ((op & 64) === 0) {
                                        /* 2nd level distance code */
                                        here =
                                            dcode[
                                                (here & 0xffff) /*here.val*/ +
                                                    (hold & ((1 << op) - 1))
                                            ];
                                        continue dodist;
                                    } else {
                                        strm.msg = "invalid distance code";
                                        state.mode = BAD;
                                        break top;
                                    }

                                    break; // need to emulate goto via "continue"
                                }
                            } else if ((op & 64) === 0) {
                                /* 2nd level length code */
                                here =
                                    lcode[
                                        (here & 0xffff) /*here.val*/ +
                                            (hold & ((1 << op) - 1))
                                    ];
                                continue dolen;
                            } else if (op & 32) {
                                /* end-of-block */
                                //Tracevv((stderr, "inflate:         end of block\n"));
                                state.mode = TYPE;
                                break top;
                            } else {
                                strm.msg = "invalid literal/length code";
                                state.mode = BAD;
                                break top;
                            }

                            break; // need to emulate goto via "continue"
                        }
                    } while (_in < last && _out < end);

                    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
                    len = bits >> 3;
                    _in -= len;
                    bits -= len << 3;
                    hold &= (1 << bits) - 1;

                    /* update state and return */
                    strm.next_in = _in;
                    strm.next_out = _out;
                    strm.avail_in =
                        _in < last ? 5 + (last - _in) : 5 - (_in - last);
                    strm.avail_out =
                        _out < end ? 257 + (end - _out) : 257 - (_out - end);
                    state.hold = hold;
                    state.bits = bits;
                    return;
                };
            },
            {},
        ],
        96: [
            function (require, module, exports) {
                "use strict";

                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                var utils = require("../utils/common");
                var adler32 = require("./adler32");
                var crc32 = require("./crc32");
                var inflate_fast = require("./inffast");
                var inflate_table = require("./inftrees");

                var CODES = 0;
                var LENS = 1;
                var DISTS = 2;

                /* Public constants ==========================================================*/
                /* ===========================================================================*/

                /* Allowed flush values; see deflate() and inflate() below for details */
                //var Z_NO_FLUSH      = 0;
                //var Z_PARTIAL_FLUSH = 1;
                //var Z_SYNC_FLUSH    = 2;
                //var Z_FULL_FLUSH    = 3;
                var Z_FINISH = 4;
                var Z_BLOCK = 5;
                var Z_TREES = 6;

                /* Return codes for the compression/decompression functions. Negative values
                 * are errors, positive values are used for special but normal events.
                 */
                var Z_OK = 0;
                var Z_STREAM_END = 1;
                var Z_NEED_DICT = 2;
                //var Z_ERRNO         = -1;
                var Z_STREAM_ERROR = -2;
                var Z_DATA_ERROR = -3;
                var Z_MEM_ERROR = -4;
                var Z_BUF_ERROR = -5;
                //var Z_VERSION_ERROR = -6;

                /* The deflate compression method */
                var Z_DEFLATED = 8;

                /* STATES ====================================================================*/
                /* ===========================================================================*/

                var HEAD = 1; /* i: waiting for magic header */
                var FLAGS = 2; /* i: waiting for method and flags (gzip) */
                var TIME = 3; /* i: waiting for modification time (gzip) */
                var OS = 4; /* i: waiting for extra flags and operating system (gzip) */
                var EXLEN = 5; /* i: waiting for extra length (gzip) */
                var EXTRA = 6; /* i: waiting for extra bytes (gzip) */
                var NAME = 7; /* i: waiting for end of file name (gzip) */
                var COMMENT = 8; /* i: waiting for end of comment (gzip) */
                var HCRC = 9; /* i: waiting for header crc (gzip) */
                var DICTID = 10; /* i: waiting for dictionary check value */
                var DICT = 11; /* waiting for inflateSetDictionary() call */
                var TYPE = 12; /* i: waiting for type bits, including last-flag bit */
                var TYPEDO = 13; /* i: same, but skip check to exit inflate on new block */
                var STORED = 14; /* i: waiting for stored size (length and complement) */
                var COPY_ = 15; /* i/o: same as COPY below, but only first time in */
                var COPY = 16; /* i/o: waiting for input or output to copy stored block */
                var TABLE = 17; /* i: waiting for dynamic block table lengths */
                var LENLENS = 18; /* i: waiting for code length code lengths */
                var CODELENS = 19; /* i: waiting for length/lit and distance code lengths */
                var LEN_ = 20; /* i: same as LEN below, but only first time in */
                var LEN = 21; /* i: waiting for length/lit/eob code */
                var LENEXT = 22; /* i: waiting for length extra bits */
                var DIST = 23; /* i: waiting for distance code */
                var DISTEXT = 24; /* i: waiting for distance extra bits */
                var MATCH = 25; /* o: waiting for output space to copy string */
                var LIT = 26; /* o: waiting for output space to write literal */
                var CHECK = 27; /* i: waiting for 32-bit check value */
                var LENGTH = 28; /* i: waiting for 32-bit length (gzip) */
                var DONE = 29; /* finished check, done -- remain here until reset */
                var BAD = 30; /* got a data error -- remain here until reset */
                var MEM = 31; /* got an inflate() memory error -- remain here until reset */
                var SYNC = 32; /* looking for synchronization bytes to restart inflate() */

                /* ===========================================================================*/

                var ENOUGH_LENS = 852;
                var ENOUGH_DISTS = 592;
                //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

                var MAX_WBITS = 15;
                /* 32K LZ77 window */
                var DEF_WBITS = MAX_WBITS;

                function zswap32(q) {
                    return (
                        ((q >>> 24) & 0xff) +
                        ((q >>> 8) & 0xff00) +
                        ((q & 0xff00) << 8) +
                        ((q & 0xff) << 24)
                    );
                }

                function InflateState() {
                    this.mode = 0; /* current inflate mode */
                    this.last = false; /* true if processing last block */
                    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
                    this.havedict = false; /* true if dictionary provided */
                    this.flags = 0; /* gzip header method and flags (0 if zlib) */
                    this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */
                    this.check = 0; /* protected copy of check value */
                    this.total = 0; /* protected copy of output count */
                    // TODO: may be {}
                    this.head =
                        null; /* where to save gzip header information */

                    /* sliding window */
                    this.wbits = 0; /* log base 2 of requested window size */
                    this.wsize = 0; /* window size or zero if not using window */
                    this.whave = 0; /* valid bytes in the window */
                    this.wnext = 0; /* window write index */
                    this.window =
                        null; /* allocated sliding window, if needed */

                    /* bit accumulator */
                    this.hold = 0; /* input bit accumulator */
                    this.bits = 0; /* number of bits in "in" */

                    /* for string and stored block copying */
                    this.length = 0; /* literal or length of data to copy */
                    this.offset = 0; /* distance back to copy string from */

                    /* for table and code decoding */
                    this.extra = 0; /* extra bits needed */

                    /* fixed and dynamic code tables */
                    this.lencode =
                        null; /* starting table for length/literal codes */
                    this.distcode =
                        null; /* starting table for distance codes */
                    this.lenbits = 0; /* index bits for lencode */
                    this.distbits = 0; /* index bits for distcode */

                    /* dynamic table building */
                    this.ncode = 0; /* number of code length code lengths */
                    this.nlen = 0; /* number of length code lengths */
                    this.ndist = 0; /* number of distance code lengths */
                    this.have = 0; /* number of code lengths in lens[] */
                    this.next = null; /* next available space in codes[] */

                    this.lens = new utils.Buf16(
                        320
                    ); /* temporary storage for code lengths */
                    this.work = new utils.Buf16(
                        288
                    ); /* work area for code table building */

                    /*
       because we don't have pointers in js, we use lencode and distcode directly
       as buffers so we don't need codes
      */
                    //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
                    this.lendyn =
                        null; /* dynamic table for length/literal codes (JS specific) */
                    this.distdyn =
                        null; /* dynamic table for distance codes (JS specific) */
                    this.sane = 0; /* if false, allow invalid distance too far */
                    this.back = 0; /* bits back of last unprocessed length/lit */
                    this.was = 0; /* initial length of match */
                }

                function inflateResetKeep(strm) {
                    var state;

                    if (!strm || !strm.state) {
                        return Z_STREAM_ERROR;
                    }
                    state = strm.state;
                    strm.total_in = strm.total_out = state.total = 0;
                    strm.msg = ""; /*Z_NULL*/
                    if (state.wrap) {
                        /* to support ill-conceived Java test suite */
                        strm.adler = state.wrap & 1;
                    }
                    state.mode = HEAD;
                    state.last = 0;
                    state.havedict = 0;
                    state.dmax = 32768;
                    state.head = null /*Z_NULL*/;
                    state.hold = 0;
                    state.bits = 0;
                    //state.lencode = state.distcode = state.next = state.codes;
                    state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
                    state.distcode = state.distdyn = new utils.Buf32(
                        ENOUGH_DISTS
                    );

                    state.sane = 1;
                    state.back = -1;
                    //Tracev((stderr, "inflate: reset\n"));
                    return Z_OK;
                }

                function inflateReset(strm) {
                    var state;

                    if (!strm || !strm.state) {
                        return Z_STREAM_ERROR;
                    }
                    state = strm.state;
                    state.wsize = 0;
                    state.whave = 0;
                    state.wnext = 0;
                    return inflateResetKeep(strm);
                }

                function inflateReset2(strm, windowBits) {
                    var wrap;
                    var state;

                    /* get the state */
                    if (!strm || !strm.state) {
                        return Z_STREAM_ERROR;
                    }
                    state = strm.state;

                    /* extract wrap request from windowBits parameter */
                    if (windowBits < 0) {
                        wrap = 0;
                        windowBits = -windowBits;
                    } else {
                        wrap = (windowBits >> 4) + 1;
                        if (windowBits < 48) {
                            windowBits &= 15;
                        }
                    }

                    /* set number of window bits, free window if different */
                    if (windowBits && (windowBits < 8 || windowBits > 15)) {
                        return Z_STREAM_ERROR;
                    }
                    if (state.window !== null && state.wbits !== windowBits) {
                        state.window = null;
                    }

                    /* update state and reset the rest of it */
                    state.wrap = wrap;
                    state.wbits = windowBits;
                    return inflateReset(strm);
                }

                function inflateInit2(strm, windowBits) {
                    var ret;
                    var state;

                    if (!strm) {
                        return Z_STREAM_ERROR;
                    }
                    //strm.msg = Z_NULL;                 /* in case we return an error */

                    state = new InflateState();

                    //if (state === Z_NULL) return Z_MEM_ERROR;
                    //Tracev((stderr, "inflate: allocated\n"));
                    strm.state = state;
                    state.window = null /*Z_NULL*/;
                    ret = inflateReset2(strm, windowBits);
                    if (ret !== Z_OK) {
                        strm.state = null /*Z_NULL*/;
                    }
                    return ret;
                }

                function inflateInit(strm) {
                    return inflateInit2(strm, DEF_WBITS);
                }

                /*
     Return state with length and distance decoding tables and index sizes set to
     fixed code decoding.  Normally this returns fixed tables from inffixed.h.
     If BUILDFIXED is defined, then instead this routine builds the tables the
     first time it's called, and returns those tables the first time and
     thereafter.  This reduces the size of the code by about 2K bytes, in
     exchange for a little execution time.  However, BUILDFIXED should not be
     used for threaded applications, since the rewriting of the tables and virgin
     may not be thread-safe.
     */
                var virgin = true;

                var lenfix, distfix; // We have no pointers in JS, so keep tables separate

                function fixedtables(state) {
                    /* build fixed huffman tables if first call (may not be thread safe) */
                    if (virgin) {
                        var sym;

                        lenfix = new utils.Buf32(512);
                        distfix = new utils.Buf32(32);

                        /* literal/length table */
                        sym = 0;
                        while (sym < 144) {
                            state.lens[sym++] = 8;
                        }
                        while (sym < 256) {
                            state.lens[sym++] = 9;
                        }
                        while (sym < 280) {
                            state.lens[sym++] = 7;
                        }
                        while (sym < 288) {
                            state.lens[sym++] = 8;
                        }

                        inflate_table(
                            LENS,
                            state.lens,
                            0,
                            288,
                            lenfix,
                            0,
                            state.work,
                            { bits: 9 }
                        );

                        /* distance table */
                        sym = 0;
                        while (sym < 32) {
                            state.lens[sym++] = 5;
                        }

                        inflate_table(
                            DISTS,
                            state.lens,
                            0,
                            32,
                            distfix,
                            0,
                            state.work,
                            { bits: 5 }
                        );

                        /* do this just once */
                        virgin = false;
                    }

                    state.lencode = lenfix;
                    state.lenbits = 9;
                    state.distcode = distfix;
                    state.distbits = 5;
                }

                /*
     Update the window with the last wsize (normally 32K) bytes written before
     returning.  If window does not exist yet, create it.  This is only called
     when a window is already in use, or when output has been written during this
     inflate call, but the end of the deflate stream has not been reached yet.
     It is also called to create a window for dictionary data when a dictionary
     is loaded.

     Providing output buffers larger than 32K to inflate() should provide a speed
     advantage, since only the last 32K of output is copied to the sliding window
     upon return from inflate(), and since all distances after the first 32K of
     output will fall in the output data, making match copies simpler and faster.
     The advantage may be dependent on the size of the processor's data caches.
     */
                function updatewindow(strm, src, end, copy) {
                    var dist;
                    var state = strm.state;

                    /* if it hasn't been done already, allocate space for the window */
                    if (state.window === null) {
                        state.wsize = 1 << state.wbits;
                        state.wnext = 0;
                        state.whave = 0;

                        state.window = new utils.Buf8(state.wsize);
                    }

                    /* copy state->wsize or less output bytes into the circular window */
                    if (copy >= state.wsize) {
                        utils.arraySet(
                            state.window,
                            src,
                            end - state.wsize,
                            state.wsize,
                            0
                        );
                        state.wnext = 0;
                        state.whave = state.wsize;
                    } else {
                        dist = state.wsize - state.wnext;
                        if (dist > copy) {
                            dist = copy;
                        }
                        //zmemcpy(state->window + state->wnext, end - copy, dist);
                        utils.arraySet(
                            state.window,
                            src,
                            end - copy,
                            dist,
                            state.wnext
                        );
                        copy -= dist;
                        if (copy) {
                            //zmemcpy(state->window, end - copy, copy);
                            utils.arraySet(
                                state.window,
                                src,
                                end - copy,
                                copy,
                                0
                            );
                            state.wnext = copy;
                            state.whave = state.wsize;
                        } else {
                            state.wnext += dist;
                            if (state.wnext === state.wsize) {
                                state.wnext = 0;
                            }
                            if (state.whave < state.wsize) {
                                state.whave += dist;
                            }
                        }
                    }
                    return 0;
                }

                function inflate(strm, flush) {
                    var state;
                    var input, output; // input/output buffers
                    var next; /* next input INDEX */
                    var put; /* next output INDEX */
                    var have, left; /* available input and output */
                    var hold; /* bit buffer */
                    var bits; /* bits in bit buffer */
                    var _in,
                        _out; /* save starting available input and output */
                    var copy; /* number of stored or match bytes to copy */
                    var from; /* where to copy match bytes from */
                    var from_source;
                    var here = 0; /* current decoding table entry */
                    var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
                    //var last;                   /* parent table entry */
                    var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
                    var len; /* length to copy for repeats, bits to drop */
                    var ret; /* return code */
                    var hbuf = new utils.Buf8(
                        4
                    ); /* buffer for gzip header crc calculation */
                    var opts;

                    var n; // temporary var for NEED_BITS

                    var order =
                        /* permutation of code lengths */
                        [
                            16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13,
                            2, 14, 1, 15,
                        ];

                    if (
                        !strm ||
                        !strm.state ||
                        !strm.output ||
                        (!strm.input && strm.avail_in !== 0)
                    ) {
                        return Z_STREAM_ERROR;
                    }

                    state = strm.state;
                    if (state.mode === TYPE) {
                        state.mode = TYPEDO;
                    } /* skip check */

                    //--- LOAD() ---
                    put = strm.next_out;
                    output = strm.output;
                    left = strm.avail_out;
                    next = strm.next_in;
                    input = strm.input;
                    have = strm.avail_in;
                    hold = state.hold;
                    bits = state.bits;
                    //---

                    _in = have;
                    _out = left;
                    ret = Z_OK;

                    // goto emulation
                    inf_leave: for (;;) {
                        switch (state.mode) {
                            case HEAD:
                                if (state.wrap === 0) {
                                    state.mode = TYPEDO;
                                    break;
                                }
                                //=== NEEDBITS(16);
                                while (bits < 16) {
                                    if (have === 0) {
                                        break inf_leave;
                                    }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                }
                                //===//
                                if (state.wrap & 2 && hold === 0x8b1f) {
                                    /* gzip header */
                                    state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
                                    //=== CRC2(state.check, hold);
                                    hbuf[0] = hold & 0xff;
                                    hbuf[1] = (hold >>> 8) & 0xff;
                                    state.check = crc32(
                                        state.check,
                                        hbuf,
                                        2,
                                        0
                                    );
                                    //===//

                                    //=== INITBITS();
                                    hold = 0;
                                    bits = 0;
                                    //===//
                                    state.mode = FLAGS;
                                    break;
                                }
                                state.flags = 0; /* expect zlib header */
                                if (state.head) {
                                    state.head.done = false;
                                }
                                if (
                                    !(
                                        state.wrap & 1
                                    ) /* check if zlib header allowed */ ||
                                    (((hold & 0xff) /*BITS(8)*/ << 8) +
                                        (hold >> 8)) %
                                        31
                                ) {
                                    strm.msg = "incorrect header check";
                                    state.mode = BAD;
                                    break;
                                }
                                if ((hold & 0x0f) /*BITS(4)*/ !== Z_DEFLATED) {
                                    strm.msg = "unknown compression method";
                                    state.mode = BAD;
                                    break;
                                }
                                //--- DROPBITS(4) ---//
                                hold >>>= 4;
                                bits -= 4;
                                //---//
                                len = (hold & 0x0f) /*BITS(4)*/ + 8;
                                if (state.wbits === 0) {
                                    state.wbits = len;
                                } else if (len > state.wbits) {
                                    strm.msg = "invalid window size";
                                    state.mode = BAD;
                                    break;
                                }
                                state.dmax = 1 << len;
                                //Tracev((stderr, "inflate:   zlib header ok\n"));
                                strm.adler =
                                    state.check = 1 /*adler32(0L, Z_NULL, 0)*/;
                                state.mode = hold & 0x200 ? DICTID : TYPE;
                                //=== INITBITS();
                                hold = 0;
                                bits = 0;
                                //===//
                                break;
                            case FLAGS:
                                //=== NEEDBITS(16); */
                                while (bits < 16) {
                                    if (have === 0) {
                                        break inf_leave;
                                    }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                }
                                //===//
                                state.flags = hold;
                                if ((state.flags & 0xff) !== Z_DEFLATED) {
                                    strm.msg = "unknown compression method";
                                    state.mode = BAD;
                                    break;
                                }
                                if (state.flags & 0xe000) {
                                    strm.msg = "unknown header flags set";
                                    state.mode = BAD;
                                    break;
                                }
                                if (state.head) {
                                    state.head.text = (hold >> 8) & 1;
                                }
                                if (state.flags & 0x0200) {
                                    //=== CRC2(state.check, hold);
                                    hbuf[0] = hold & 0xff;
                                    hbuf[1] = (hold >>> 8) & 0xff;
                                    state.check = crc32(
                                        state.check,
                                        hbuf,
                                        2,
                                        0
                                    );
                                    //===//
                                }
                                //=== INITBITS();
                                hold = 0;
                                bits = 0;
                                //===//
                                state.mode = TIME;
                            /* falls through */
                            case TIME:
                                //=== NEEDBITS(32); */
                                while (bits < 32) {
                                    if (have === 0) {
                                        break inf_leave;
                                    }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                }
                                //===//
                                if (state.head) {
                                    state.head.time = hold;
                                }
                                if (state.flags & 0x0200) {
                                    //=== CRC4(state.check, hold)
                                    hbuf[0] = hold & 0xff;
                                    hbuf[1] = (hold >>> 8) & 0xff;
                                    hbuf[2] = (hold >>> 16) & 0xff;
                                    hbuf[3] = (hold >>> 24) & 0xff;
                                    state.check = crc32(
                                        state.check,
                                        hbuf,
                                        4,
                                        0
                                    );
                                    //===
                                }
                                //=== INITBITS();
                                hold = 0;
                                bits = 0;
                                //===//
                                state.mode = OS;
                            /* falls through */
                            case OS:
                                //=== NEEDBITS(16); */
                                while (bits < 16) {
                                    if (have === 0) {
                                        break inf_leave;
                                    }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                }
                                //===//
                                if (state.head) {
                                    state.head.xflags = hold & 0xff;
                                    state.head.os = hold >> 8;
                                }
                                if (state.flags & 0x0200) {
                                    //=== CRC2(state.check, hold);
                                    hbuf[0] = hold & 0xff;
                                    hbuf[1] = (hold >>> 8) & 0xff;
                                    state.check = crc32(
                                        state.check,
                                        hbuf,
                                        2,
                                        0
                                    );
                                    //===//
                                }
                                //=== INITBITS();
                                hold = 0;
                                bits = 0;
                                //===//
                                state.mode = EXLEN;
                            /* falls through */
                            case EXLEN:
                                if (state.flags & 0x0400) {
                                    //=== NEEDBITS(16); */
                                    while (bits < 16) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    state.length = hold;
                                    if (state.head) {
                                        state.head.extra_len = hold;
                                    }
                                    if (state.flags & 0x0200) {
                                        //=== CRC2(state.check, hold);
                                        hbuf[0] = hold & 0xff;
                                        hbuf[1] = (hold >>> 8) & 0xff;
                                        state.check = crc32(
                                            state.check,
                                            hbuf,
                                            2,
                                            0
                                        );
                                        //===//
                                    }
                                    //=== INITBITS();
                                    hold = 0;
                                    bits = 0;
                                    //===//
                                } else if (state.head) {
                                    state.head.extra = null /*Z_NULL*/;
                                }
                                state.mode = EXTRA;
                            /* falls through */
                            case EXTRA:
                                if (state.flags & 0x0400) {
                                    copy = state.length;
                                    if (copy > have) {
                                        copy = have;
                                    }
                                    if (copy) {
                                        if (state.head) {
                                            len =
                                                state.head.extra_len -
                                                state.length;
                                            if (!state.head.extra) {
                                                // Use untyped array for more convenient processing later
                                                state.head.extra = new Array(
                                                    state.head.extra_len
                                                );
                                            }
                                            utils.arraySet(
                                                state.head.extra,
                                                input,
                                                next,
                                                // extra field is limited to 65536 bytes
                                                // - no need for additional size check
                                                copy,
                                                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                                                len
                                            );
                                            //zmemcpy(state.head.extra + len, next,
                                            //        len + copy > state.head.extra_max ?
                                            //        state.head.extra_max - len : copy);
                                        }
                                        if (state.flags & 0x0200) {
                                            state.check = crc32(
                                                state.check,
                                                input,
                                                copy,
                                                next
                                            );
                                        }
                                        have -= copy;
                                        next += copy;
                                        state.length -= copy;
                                    }
                                    if (state.length) {
                                        break inf_leave;
                                    }
                                }
                                state.length = 0;
                                state.mode = NAME;
                            /* falls through */
                            case NAME:
                                if (state.flags & 0x0800) {
                                    if (have === 0) {
                                        break inf_leave;
                                    }
                                    copy = 0;
                                    do {
                                        // TODO: 2 or 1 bytes?
                                        len = input[next + copy++];
                                        /* use constant limit because in js we should not preallocate memory */
                                        if (
                                            state.head &&
                                            len &&
                                            state.length <
                                                65536 /*state.head.name_max*/
                                        ) {
                                            state.head.name +=
                                                String.fromCharCode(len);
                                        }
                                    } while (len && copy < have);

                                    if (state.flags & 0x0200) {
                                        state.check = crc32(
                                            state.check,
                                            input,
                                            copy,
                                            next
                                        );
                                    }
                                    have -= copy;
                                    next += copy;
                                    if (len) {
                                        break inf_leave;
                                    }
                                } else if (state.head) {
                                    state.head.name = null;
                                }
                                state.length = 0;
                                state.mode = COMMENT;
                            /* falls through */
                            case COMMENT:
                                if (state.flags & 0x1000) {
                                    if (have === 0) {
                                        break inf_leave;
                                    }
                                    copy = 0;
                                    do {
                                        len = input[next + copy++];
                                        /* use constant limit because in js we should not preallocate memory */
                                        if (
                                            state.head &&
                                            len &&
                                            state.length <
                                                65536 /*state.head.comm_max*/
                                        ) {
                                            state.head.comment +=
                                                String.fromCharCode(len);
                                        }
                                    } while (len && copy < have);
                                    if (state.flags & 0x0200) {
                                        state.check = crc32(
                                            state.check,
                                            input,
                                            copy,
                                            next
                                        );
                                    }
                                    have -= copy;
                                    next += copy;
                                    if (len) {
                                        break inf_leave;
                                    }
                                } else if (state.head) {
                                    state.head.comment = null;
                                }
                                state.mode = HCRC;
                            /* falls through */
                            case HCRC:
                                if (state.flags & 0x0200) {
                                    //=== NEEDBITS(16); */
                                    while (bits < 16) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    if (hold !== (state.check & 0xffff)) {
                                        strm.msg = "header crc mismatch";
                                        state.mode = BAD;
                                        break;
                                    }
                                    //=== INITBITS();
                                    hold = 0;
                                    bits = 0;
                                    //===//
                                }
                                if (state.head) {
                                    state.head.hcrc = (state.flags >> 9) & 1;
                                    state.head.done = true;
                                }
                                strm.adler = state.check = 0;
                                state.mode = TYPE;
                                break;
                            case DICTID:
                                //=== NEEDBITS(32); */
                                while (bits < 32) {
                                    if (have === 0) {
                                        break inf_leave;
                                    }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                }
                                //===//
                                strm.adler = state.check = zswap32(hold);
                                //=== INITBITS();
                                hold = 0;
                                bits = 0;
                                //===//
                                state.mode = DICT;
                            /* falls through */
                            case DICT:
                                if (state.havedict === 0) {
                                    //--- RESTORE() ---
                                    strm.next_out = put;
                                    strm.avail_out = left;
                                    strm.next_in = next;
                                    strm.avail_in = have;
                                    state.hold = hold;
                                    state.bits = bits;
                                    //---
                                    return Z_NEED_DICT;
                                }
                                strm.adler =
                                    state.check = 1 /*adler32(0L, Z_NULL, 0)*/;
                                state.mode = TYPE;
                            /* falls through */
                            case TYPE:
                                if (flush === Z_BLOCK || flush === Z_TREES) {
                                    break inf_leave;
                                }
                            /* falls through */
                            case TYPEDO:
                                if (state.last) {
                                    //--- BYTEBITS() ---//
                                    hold >>>= bits & 7;
                                    bits -= bits & 7;
                                    //---//
                                    state.mode = CHECK;
                                    break;
                                }
                                //=== NEEDBITS(3); */
                                while (bits < 3) {
                                    if (have === 0) {
                                        break inf_leave;
                                    }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                }
                                //===//
                                state.last = hold & 0x01 /*BITS(1)*/;
                                //--- DROPBITS(1) ---//
                                hold >>>= 1;
                                bits -= 1;
                                //---//

                                switch (hold & 0x03 /*BITS(2)*/) {
                                    case 0 /* stored block */:
                                        //Tracev((stderr, "inflate:     stored block%s\n",
                                        //        state.last ? " (last)" : ""));
                                        state.mode = STORED;
                                        break;
                                    case 1 /* fixed block */:
                                        fixedtables(state);
                                        //Tracev((stderr, "inflate:     fixed codes block%s\n",
                                        //        state.last ? " (last)" : ""));
                                        state.mode = LEN_; /* decode codes */
                                        if (flush === Z_TREES) {
                                            //--- DROPBITS(2) ---//
                                            hold >>>= 2;
                                            bits -= 2;
                                            //---//
                                            break inf_leave;
                                        }
                                        break;
                                    case 2 /* dynamic block */:
                                        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                                        //        state.last ? " (last)" : ""));
                                        state.mode = TABLE;
                                        break;
                                    case 3:
                                        strm.msg = "invalid block type";
                                        state.mode = BAD;
                                }
                                //--- DROPBITS(2) ---//
                                hold >>>= 2;
                                bits -= 2;
                                //---//
                                break;
                            case STORED:
                                //--- BYTEBITS() ---// /* go to byte boundary */
                                hold >>>= bits & 7;
                                bits -= bits & 7;
                                //---//
                                //=== NEEDBITS(32); */
                                while (bits < 32) {
                                    if (have === 0) {
                                        break inf_leave;
                                    }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                }
                                //===//
                                if (
                                    (hold & 0xffff) !==
                                    ((hold >>> 16) ^ 0xffff)
                                ) {
                                    strm.msg = "invalid stored block lengths";
                                    state.mode = BAD;
                                    break;
                                }
                                state.length = hold & 0xffff;
                                //Tracev((stderr, "inflate:       stored length %u\n",
                                //        state.length));
                                //=== INITBITS();
                                hold = 0;
                                bits = 0;
                                //===//
                                state.mode = COPY_;
                                if (flush === Z_TREES) {
                                    break inf_leave;
                                }
                            /* falls through */
                            case COPY_:
                                state.mode = COPY;
                            /* falls through */
                            case COPY:
                                copy = state.length;
                                if (copy) {
                                    if (copy > have) {
                                        copy = have;
                                    }
                                    if (copy > left) {
                                        copy = left;
                                    }
                                    if (copy === 0) {
                                        break inf_leave;
                                    }
                                    //--- zmemcpy(put, next, copy); ---
                                    utils.arraySet(
                                        output,
                                        input,
                                        next,
                                        copy,
                                        put
                                    );
                                    //---//
                                    have -= copy;
                                    next += copy;
                                    left -= copy;
                                    put += copy;
                                    state.length -= copy;
                                    break;
                                }
                                //Tracev((stderr, "inflate:       stored end\n"));
                                state.mode = TYPE;
                                break;
                            case TABLE:
                                //=== NEEDBITS(14); */
                                while (bits < 14) {
                                    if (have === 0) {
                                        break inf_leave;
                                    }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                }
                                //===//
                                state.nlen = (hold & 0x1f) /*BITS(5)*/ + 257;
                                //--- DROPBITS(5) ---//
                                hold >>>= 5;
                                bits -= 5;
                                //---//
                                state.ndist = (hold & 0x1f) /*BITS(5)*/ + 1;
                                //--- DROPBITS(5) ---//
                                hold >>>= 5;
                                bits -= 5;
                                //---//
                                state.ncode = (hold & 0x0f) /*BITS(4)*/ + 4;
                                //--- DROPBITS(4) ---//
                                hold >>>= 4;
                                bits -= 4;
                                //---//
                                //#ifndef PKZIP_BUG_WORKAROUND
                                if (state.nlen > 286 || state.ndist > 30) {
                                    strm.msg =
                                        "too many length or distance symbols";
                                    state.mode = BAD;
                                    break;
                                }
                                //#endif
                                //Tracev((stderr, "inflate:       table sizes ok\n"));
                                state.have = 0;
                                state.mode = LENLENS;
                            /* falls through */
                            case LENLENS:
                                while (state.have < state.ncode) {
                                    //=== NEEDBITS(3);
                                    while (bits < 3) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    state.lens[order[state.have++]] =
                                        hold & 0x07; //BITS(3);
                                    //--- DROPBITS(3) ---//
                                    hold >>>= 3;
                                    bits -= 3;
                                    //---//
                                }
                                while (state.have < 19) {
                                    state.lens[order[state.have++]] = 0;
                                }
                                // We have separate tables & no pointers. 2 commented lines below not needed.
                                //state.next = state.codes;
                                //state.lencode = state.next;
                                // Switch to use dynamic table
                                state.lencode = state.lendyn;
                                state.lenbits = 7;

                                opts = { bits: state.lenbits };
                                ret = inflate_table(
                                    CODES,
                                    state.lens,
                                    0,
                                    19,
                                    state.lencode,
                                    0,
                                    state.work,
                                    opts
                                );
                                state.lenbits = opts.bits;

                                if (ret) {
                                    strm.msg = "invalid code lengths set";
                                    state.mode = BAD;
                                    break;
                                }
                                //Tracev((stderr, "inflate:       code lengths ok\n"));
                                state.have = 0;
                                state.mode = CODELENS;
                            /* falls through */
                            case CODELENS:
                                while (state.have < state.nlen + state.ndist) {
                                    for (;;) {
                                        here =
                                            state.lencode[
                                                hold &
                                                    ((1 << state.lenbits) - 1)
                                            ]; /*BITS(state.lenbits)*/
                                        here_bits = here >>> 24;
                                        here_op = (here >>> 16) & 0xff;
                                        here_val = here & 0xffff;

                                        if (here_bits <= bits) {
                                            break;
                                        }
                                        //--- PULLBYTE() ---//
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                        //---//
                                    }
                                    if (here_val < 16) {
                                        //--- DROPBITS(here.bits) ---//
                                        hold >>>= here_bits;
                                        bits -= here_bits;
                                        //---//
                                        state.lens[state.have++] = here_val;
                                    } else {
                                        if (here_val === 16) {
                                            //=== NEEDBITS(here.bits + 2);
                                            n = here_bits + 2;
                                            while (bits < n) {
                                                if (have === 0) {
                                                    break inf_leave;
                                                }
                                                have--;
                                                hold += input[next++] << bits;
                                                bits += 8;
                                            }
                                            //===//
                                            //--- DROPBITS(here.bits) ---//
                                            hold >>>= here_bits;
                                            bits -= here_bits;
                                            //---//
                                            if (state.have === 0) {
                                                strm.msg =
                                                    "invalid bit length repeat";
                                                state.mode = BAD;
                                                break;
                                            }
                                            len = state.lens[state.have - 1];
                                            copy = 3 + (hold & 0x03); //BITS(2);
                                            //--- DROPBITS(2) ---//
                                            hold >>>= 2;
                                            bits -= 2;
                                            //---//
                                        } else if (here_val === 17) {
                                            //=== NEEDBITS(here.bits + 3);
                                            n = here_bits + 3;
                                            while (bits < n) {
                                                if (have === 0) {
                                                    break inf_leave;
                                                }
                                                have--;
                                                hold += input[next++] << bits;
                                                bits += 8;
                                            }
                                            //===//
                                            //--- DROPBITS(here.bits) ---//
                                            hold >>>= here_bits;
                                            bits -= here_bits;
                                            //---//
                                            len = 0;
                                            copy = 3 + (hold & 0x07); //BITS(3);
                                            //--- DROPBITS(3) ---//
                                            hold >>>= 3;
                                            bits -= 3;
                                            //---//
                                        } else {
                                            //=== NEEDBITS(here.bits + 7);
                                            n = here_bits + 7;
                                            while (bits < n) {
                                                if (have === 0) {
                                                    break inf_leave;
                                                }
                                                have--;
                                                hold += input[next++] << bits;
                                                bits += 8;
                                            }
                                            //===//
                                            //--- DROPBITS(here.bits) ---//
                                            hold >>>= here_bits;
                                            bits -= here_bits;
                                            //---//
                                            len = 0;
                                            copy = 11 + (hold & 0x7f); //BITS(7);
                                            //--- DROPBITS(7) ---//
                                            hold >>>= 7;
                                            bits -= 7;
                                            //---//
                                        }
                                        if (
                                            state.have + copy >
                                            state.nlen + state.ndist
                                        ) {
                                            strm.msg =
                                                "invalid bit length repeat";
                                            state.mode = BAD;
                                            break;
                                        }
                                        while (copy--) {
                                            state.lens[state.have++] = len;
                                        }
                                    }
                                }

                                /* handle error breaks in while */
                                if (state.mode === BAD) {
                                    break;
                                }

                                /* check for end-of-block code (better have one) */
                                if (state.lens[256] === 0) {
                                    strm.msg =
                                        "invalid code -- missing end-of-block";
                                    state.mode = BAD;
                                    break;
                                }

                                /* build code tables -- note: do not change the lenbits or distbits
               values here (9 and 6) without reading the comments in inftrees.h
               concerning the ENOUGH constants, which depend on those values */
                                state.lenbits = 9;

                                opts = { bits: state.lenbits };
                                ret = inflate_table(
                                    LENS,
                                    state.lens,
                                    0,
                                    state.nlen,
                                    state.lencode,
                                    0,
                                    state.work,
                                    opts
                                );
                                // We have separate tables & no pointers. 2 commented lines below not needed.
                                // state.next_index = opts.table_index;
                                state.lenbits = opts.bits;
                                // state.lencode = state.next;

                                if (ret) {
                                    strm.msg = "invalid literal/lengths set";
                                    state.mode = BAD;
                                    break;
                                }

                                state.distbits = 6;
                                //state.distcode.copy(state.codes);
                                // Switch to use dynamic table
                                state.distcode = state.distdyn;
                                opts = { bits: state.distbits };
                                ret = inflate_table(
                                    DISTS,
                                    state.lens,
                                    state.nlen,
                                    state.ndist,
                                    state.distcode,
                                    0,
                                    state.work,
                                    opts
                                );
                                // We have separate tables & no pointers. 2 commented lines below not needed.
                                // state.next_index = opts.table_index;
                                state.distbits = opts.bits;
                                // state.distcode = state.next;

                                if (ret) {
                                    strm.msg = "invalid distances set";
                                    state.mode = BAD;
                                    break;
                                }
                                //Tracev((stderr, 'inflate:       codes ok\n'));
                                state.mode = LEN_;
                                if (flush === Z_TREES) {
                                    break inf_leave;
                                }
                            /* falls through */
                            case LEN_:
                                state.mode = LEN;
                            /* falls through */
                            case LEN:
                                if (have >= 6 && left >= 258) {
                                    //--- RESTORE() ---
                                    strm.next_out = put;
                                    strm.avail_out = left;
                                    strm.next_in = next;
                                    strm.avail_in = have;
                                    state.hold = hold;
                                    state.bits = bits;
                                    //---
                                    inflate_fast(strm, _out);
                                    //--- LOAD() ---
                                    put = strm.next_out;
                                    output = strm.output;
                                    left = strm.avail_out;
                                    next = strm.next_in;
                                    input = strm.input;
                                    have = strm.avail_in;
                                    hold = state.hold;
                                    bits = state.bits;
                                    //---

                                    if (state.mode === TYPE) {
                                        state.back = -1;
                                    }
                                    break;
                                }
                                state.back = 0;
                                for (;;) {
                                    here =
                                        state.lencode[
                                            hold & ((1 << state.lenbits) - 1)
                                        ]; /*BITS(state.lenbits)*/
                                    here_bits = here >>> 24;
                                    here_op = (here >>> 16) & 0xff;
                                    here_val = here & 0xffff;

                                    if (here_bits <= bits) {
                                        break;
                                    }
                                    //--- PULLBYTE() ---//
                                    if (have === 0) {
                                        break inf_leave;
                                    }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                    //---//
                                }
                                if (here_op && (here_op & 0xf0) === 0) {
                                    last_bits = here_bits;
                                    last_op = here_op;
                                    last_val = here_val;
                                    for (;;) {
                                        here =
                                            state.lencode[
                                                last_val +
                                                    ((hold &
                                                        ((1 <<
                                                            (last_bits +
                                                                last_op)) -
                                                            1)) /*BITS(last.bits + last.op)*/ >>
                                                        last_bits)
                                            ];
                                        here_bits = here >>> 24;
                                        here_op = (here >>> 16) & 0xff;
                                        here_val = here & 0xffff;

                                        if (last_bits + here_bits <= bits) {
                                            break;
                                        }
                                        //--- PULLBYTE() ---//
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                        //---//
                                    }
                                    //--- DROPBITS(last.bits) ---//
                                    hold >>>= last_bits;
                                    bits -= last_bits;
                                    //---//
                                    state.back += last_bits;
                                }
                                //--- DROPBITS(here.bits) ---//
                                hold >>>= here_bits;
                                bits -= here_bits;
                                //---//
                                state.back += here_bits;
                                state.length = here_val;
                                if (here_op === 0) {
                                    //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                                    //        "inflate:         literal '%c'\n" :
                                    //        "inflate:         literal 0x%02x\n", here.val));
                                    state.mode = LIT;
                                    break;
                                }
                                if (here_op & 32) {
                                    //Tracevv((stderr, "inflate:         end of block\n"));
                                    state.back = -1;
                                    state.mode = TYPE;
                                    break;
                                }
                                if (here_op & 64) {
                                    strm.msg = "invalid literal/length code";
                                    state.mode = BAD;
                                    break;
                                }
                                state.extra = here_op & 15;
                                state.mode = LENEXT;
                            /* falls through */
                            case LENEXT:
                                if (state.extra) {
                                    //=== NEEDBITS(state.extra);
                                    n = state.extra;
                                    while (bits < n) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    state.length +=
                                        hold &
                                        ((1 << state.extra) -
                                            1) /*BITS(state.extra)*/;
                                    //--- DROPBITS(state.extra) ---//
                                    hold >>>= state.extra;
                                    bits -= state.extra;
                                    //---//
                                    state.back += state.extra;
                                }
                                //Tracevv((stderr, "inflate:         length %u\n", state.length));
                                state.was = state.length;
                                state.mode = DIST;
                            /* falls through */
                            case DIST:
                                for (;;) {
                                    here =
                                        state.distcode[
                                            hold & ((1 << state.distbits) - 1)
                                        ]; /*BITS(state.distbits)*/
                                    here_bits = here >>> 24;
                                    here_op = (here >>> 16) & 0xff;
                                    here_val = here & 0xffff;

                                    if (here_bits <= bits) {
                                        break;
                                    }
                                    //--- PULLBYTE() ---//
                                    if (have === 0) {
                                        break inf_leave;
                                    }
                                    have--;
                                    hold += input[next++] << bits;
                                    bits += 8;
                                    //---//
                                }
                                if ((here_op & 0xf0) === 0) {
                                    last_bits = here_bits;
                                    last_op = here_op;
                                    last_val = here_val;
                                    for (;;) {
                                        here =
                                            state.distcode[
                                                last_val +
                                                    ((hold &
                                                        ((1 <<
                                                            (last_bits +
                                                                last_op)) -
                                                            1)) /*BITS(last.bits + last.op)*/ >>
                                                        last_bits)
                                            ];
                                        here_bits = here >>> 24;
                                        here_op = (here >>> 16) & 0xff;
                                        here_val = here & 0xffff;

                                        if (last_bits + here_bits <= bits) {
                                            break;
                                        }
                                        //--- PULLBYTE() ---//
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                        //---//
                                    }
                                    //--- DROPBITS(last.bits) ---//
                                    hold >>>= last_bits;
                                    bits -= last_bits;
                                    //---//
                                    state.back += last_bits;
                                }
                                //--- DROPBITS(here.bits) ---//
                                hold >>>= here_bits;
                                bits -= here_bits;
                                //---//
                                state.back += here_bits;
                                if (here_op & 64) {
                                    strm.msg = "invalid distance code";
                                    state.mode = BAD;
                                    break;
                                }
                                state.offset = here_val;
                                state.extra = here_op & 15;
                                state.mode = DISTEXT;
                            /* falls through */
                            case DISTEXT:
                                if (state.extra) {
                                    //=== NEEDBITS(state.extra);
                                    n = state.extra;
                                    while (bits < n) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    state.offset +=
                                        hold &
                                        ((1 << state.extra) -
                                            1) /*BITS(state.extra)*/;
                                    //--- DROPBITS(state.extra) ---//
                                    hold >>>= state.extra;
                                    bits -= state.extra;
                                    //---//
                                    state.back += state.extra;
                                }
                                //#ifdef INFLATE_STRICT
                                if (state.offset > state.dmax) {
                                    strm.msg = "invalid distance too far back";
                                    state.mode = BAD;
                                    break;
                                }
                                //#endif
                                //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
                                state.mode = MATCH;
                            /* falls through */
                            case MATCH:
                                if (left === 0) {
                                    break inf_leave;
                                }
                                copy = _out - left;
                                if (state.offset > copy) {
                                    /* copy from window */
                                    copy = state.offset - copy;
                                    if (copy > state.whave) {
                                        if (state.sane) {
                                            strm.msg =
                                                "invalid distance too far back";
                                            state.mode = BAD;
                                            break;
                                        }
                                        // (!) This block is disabled in zlib defaults,
                                        // don't enable it for binary compatibility
                                        //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                                        //          Trace((stderr, "inflate.c too far\n"));
                                        //          copy -= state.whave;
                                        //          if (copy > state.length) { copy = state.length; }
                                        //          if (copy > left) { copy = left; }
                                        //          left -= copy;
                                        //          state.length -= copy;
                                        //          do {
                                        //            output[put++] = 0;
                                        //          } while (--copy);
                                        //          if (state.length === 0) { state.mode = LEN; }
                                        //          break;
                                        //#endif
                                    }
                                    if (copy > state.wnext) {
                                        copy -= state.wnext;
                                        from = state.wsize - copy;
                                    } else {
                                        from = state.wnext - copy;
                                    }
                                    if (copy > state.length) {
                                        copy = state.length;
                                    }
                                    from_source = state.window;
                                } else {
                                    /* copy from output */
                                    from_source = output;
                                    from = put - state.offset;
                                    copy = state.length;
                                }
                                if (copy > left) {
                                    copy = left;
                                }
                                left -= copy;
                                state.length -= copy;
                                do {
                                    output[put++] = from_source[from++];
                                } while (--copy);
                                if (state.length === 0) {
                                    state.mode = LEN;
                                }
                                break;
                            case LIT:
                                if (left === 0) {
                                    break inf_leave;
                                }
                                output[put++] = state.length;
                                left--;
                                state.mode = LEN;
                                break;
                            case CHECK:
                                if (state.wrap) {
                                    //=== NEEDBITS(32);
                                    while (bits < 32) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        // Use '|' instead of '+' to make sure that result is signed
                                        hold |= input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    _out -= left;
                                    strm.total_out += _out;
                                    state.total += _out;
                                    if (_out) {
                                        strm.adler = state.check =
                                            /*UPDATE(state.check, put - _out, _out);*/
                                            state.flags
                                                ? crc32(
                                                      state.check,
                                                      output,
                                                      _out,
                                                      put - _out
                                                  )
                                                : adler32(
                                                      state.check,
                                                      output,
                                                      _out,
                                                      put - _out
                                                  );
                                    }
                                    _out = left;
                                    // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
                                    if (
                                        (state.flags ? hold : zswap32(hold)) !==
                                        state.check
                                    ) {
                                        strm.msg = "incorrect data check";
                                        state.mode = BAD;
                                        break;
                                    }
                                    //=== INITBITS();
                                    hold = 0;
                                    bits = 0;
                                    //===//
                                    //Tracev((stderr, "inflate:   check matches trailer\n"));
                                }
                                state.mode = LENGTH;
                            /* falls through */
                            case LENGTH:
                                if (state.wrap && state.flags) {
                                    //=== NEEDBITS(32);
                                    while (bits < 32) {
                                        if (have === 0) {
                                            break inf_leave;
                                        }
                                        have--;
                                        hold += input[next++] << bits;
                                        bits += 8;
                                    }
                                    //===//
                                    if (hold !== (state.total & 0xffffffff)) {
                                        strm.msg = "incorrect length check";
                                        state.mode = BAD;
                                        break;
                                    }
                                    //=== INITBITS();
                                    hold = 0;
                                    bits = 0;
                                    //===//
                                    //Tracev((stderr, "inflate:   length matches trailer\n"));
                                }
                                state.mode = DONE;
                            /* falls through */
                            case DONE:
                                ret = Z_STREAM_END;
                                break inf_leave;
                            case BAD:
                                ret = Z_DATA_ERROR;
                                break inf_leave;
                            case MEM:
                                return Z_MEM_ERROR;
                            case SYNC:
                            /* falls through */
                            default:
                                return Z_STREAM_ERROR;
                        }
                    }

                    // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

                    /*
         Return from inflate(), updating the total counts and the check value.
         If there was no progress during the inflate() call, return a buffer
         error.  Call updatewindow() to create and/or update the window state.
         Note: a memory error from inflate() is non-recoverable.
       */

                    //--- RESTORE() ---
                    strm.next_out = put;
                    strm.avail_out = left;
                    strm.next_in = next;
                    strm.avail_in = have;
                    state.hold = hold;
                    state.bits = bits;
                    //---

                    if (
                        state.wsize ||
                        (_out !== strm.avail_out &&
                            state.mode < BAD &&
                            (state.mode < CHECK || flush !== Z_FINISH))
                    ) {
                        if (
                            updatewindow(
                                strm,
                                strm.output,
                                strm.next_out,
                                _out - strm.avail_out
                            )
                        ) {
                            state.mode = MEM;
                            return Z_MEM_ERROR;
                        }
                    }
                    _in -= strm.avail_in;
                    _out -= strm.avail_out;
                    strm.total_in += _in;
                    strm.total_out += _out;
                    state.total += _out;
                    if (state.wrap && _out) {
                        strm.adler = state.check =
                            /*UPDATE(state.check, strm.next_out - _out, _out);*/
                            state.flags
                                ? crc32(
                                      state.check,
                                      output,
                                      _out,
                                      strm.next_out - _out
                                  )
                                : adler32(
                                      state.check,
                                      output,
                                      _out,
                                      strm.next_out - _out
                                  );
                    }
                    strm.data_type =
                        state.bits +
                        (state.last ? 64 : 0) +
                        (state.mode === TYPE ? 128 : 0) +
                        (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
                    if (
                        ((_in === 0 && _out === 0) || flush === Z_FINISH) &&
                        ret === Z_OK
                    ) {
                        ret = Z_BUF_ERROR;
                    }
                    return ret;
                }

                function inflateEnd(strm) {
                    if (
                        !strm ||
                        !strm.state /*|| strm->zfree == (free_func)0*/
                    ) {
                        return Z_STREAM_ERROR;
                    }

                    var state = strm.state;
                    if (state.window) {
                        state.window = null;
                    }
                    strm.state = null;
                    return Z_OK;
                }

                function inflateGetHeader(strm, head) {
                    var state;

                    /* check state */
                    if (!strm || !strm.state) {
                        return Z_STREAM_ERROR;
                    }
                    state = strm.state;
                    if ((state.wrap & 2) === 0) {
                        return Z_STREAM_ERROR;
                    }

                    /* save header structure */
                    state.head = head;
                    head.done = false;
                    return Z_OK;
                }

                function inflateSetDictionary(strm, dictionary) {
                    var dictLength = dictionary.length;

                    var state;
                    var dictid;
                    var ret;

                    /* check state */
                    if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) {
                        return Z_STREAM_ERROR;
                    }
                    state = strm.state;

                    if (state.wrap !== 0 && state.mode !== DICT) {
                        return Z_STREAM_ERROR;
                    }

                    /* check for correct dictionary identifier */
                    if (state.mode === DICT) {
                        dictid = 1; /* adler32(0, null, 0)*/
                        /* dictid = adler32(dictid, dictionary, dictLength); */
                        dictid = adler32(dictid, dictionary, dictLength, 0);
                        if (dictid !== state.check) {
                            return Z_DATA_ERROR;
                        }
                    }
                    /* copy dictionary to window using updatewindow(), which will amend the
       existing dictionary if appropriate */
                    ret = updatewindow(
                        strm,
                        dictionary,
                        dictLength,
                        dictLength
                    );
                    if (ret) {
                        state.mode = MEM;
                        return Z_MEM_ERROR;
                    }
                    state.havedict = 1;
                    // Tracev((stderr, "inflate:   dictionary set\n"));
                    return Z_OK;
                }

                exports.inflateReset = inflateReset;
                exports.inflateReset2 = inflateReset2;
                exports.inflateResetKeep = inflateResetKeep;
                exports.inflateInit = inflateInit;
                exports.inflateInit2 = inflateInit2;
                exports.inflate = inflate;
                exports.inflateEnd = inflateEnd;
                exports.inflateGetHeader = inflateGetHeader;
                exports.inflateSetDictionary = inflateSetDictionary;
                exports.inflateInfo = "pako inflate (from Nodeca project)";

                /* Not implemented
    exports.inflateCopy = inflateCopy;
    exports.inflateGetDictionary = inflateGetDictionary;
    exports.inflateMark = inflateMark;
    exports.inflatePrime = inflatePrime;
    exports.inflateSync = inflateSync;
    exports.inflateSyncPoint = inflateSyncPoint;
    exports.inflateUndermine = inflateUndermine;
    */
            },
            {
                "../utils/common": 90,
                "./adler32": 91,
                "./crc32": 93,
                "./inffast": 95,
                "./inftrees": 97,
            },
        ],
        97: [
            function (require, module, exports) {
                "use strict";

                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                var utils = require("../utils/common");

                var MAXBITS = 15;
                var ENOUGH_LENS = 852;
                var ENOUGH_DISTS = 592;
                //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

                var CODES = 0;
                var LENS = 1;
                var DISTS = 2;

                var lbase = [
                    /* Length codes 257..285 base */ 3, 4, 5, 6, 7, 8, 9, 10,
                    11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99,
                    115, 131, 163, 195, 227, 258, 0, 0,
                ];

                var lext = [
                    /* Length codes 257..285 extra */ 16, 16, 16, 16, 16, 16,
                    16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20,
                    20, 20, 20, 21, 21, 21, 21, 16, 72, 78,
                ];

                var dbase = [
                    /* Distance codes 0..29 base */ 1, 2, 3, 4, 5, 7, 9, 13, 17,
                    25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025,
                    1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0,
                    0,
                ];

                var dext = [
                    /* Distance codes 0..29 extra */ 16, 16, 16, 16, 17, 17, 18,
                    18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25,
                    26, 26, 27, 27, 28, 28, 29, 29, 64, 64,
                ];

                module.exports = function inflate_table(
                    type,
                    lens,
                    lens_index,
                    codes,
                    table,
                    table_index,
                    work,
                    opts
                ) {
                    var bits = opts.bits;
                    //here = opts.here; /* table entry for duplication */

                    var len = 0; /* a code's length in bits */
                    var sym = 0; /* index of code symbols */
                    var min = 0,
                        max = 0; /* minimum and maximum code lengths */
                    var root = 0; /* number of index bits for root table */
                    var curr = 0; /* number of index bits for current table */
                    var drop = 0; /* code bits to drop for sub-table */
                    var left = 0; /* number of prefix codes available */
                    var used = 0; /* code entries in table used */
                    var huff = 0; /* Huffman code */
                    var incr; /* for incrementing code, index */
                    var fill; /* index for replicating entries */
                    var low; /* low bits for current root entry */
                    var mask; /* mask for low root bits */
                    var next; /* next available space in table */
                    var base = null; /* base value table to use */
                    var base_index = 0;
                    //  var shoextra;    /* extra bits table to use */
                    var end; /* use base and extra for symbol > end */
                    var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
                    var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
                    var extra = null;
                    var extra_index = 0;

                    var here_bits, here_op, here_val;

                    /*
       Process a set of code lengths to create a canonical Huffman code.  The
       code lengths are lens[0..codes-1].  Each length corresponds to the
       symbols 0..codes-1.  The Huffman code is generated by first sorting the
       symbols by length from short to long, and retaining the symbol order
       for codes with equal lengths.  Then the code starts with all zero bits
       for the first code of the shortest length, and the codes are integer
       increments for the same length, and zeros are appended as the length
       increases.  For the deflate format, these bits are stored backwards
       from their more natural integer increment ordering, and so when the
       decoding tables are built in the large loop below, the integer codes
       are incremented backwards.

       This routine assumes, but does not check, that all of the entries in
       lens[] are in the range 0..MAXBITS.  The caller must assure this.
       1..MAXBITS is interpreted as that code length.  zero means that that
       symbol does not occur in this code.

       The codes are sorted by computing a count of codes for each length,
       creating from that a table of starting indices for each length in the
       sorted table, and then entering the symbols in order in the sorted
       table.  The sorted table is work[], with that space being provided by
       the caller.

       The length counts are used for other purposes as well, i.e. finding
       the minimum and maximum length codes, determining if there are any
       codes at all, checking for a valid set of lengths, and looking ahead
       at length counts to determine sub-table sizes when building the
       decoding tables.
       */

                    /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
                    for (len = 0; len <= MAXBITS; len++) {
                        count[len] = 0;
                    }
                    for (sym = 0; sym < codes; sym++) {
                        count[lens[lens_index + sym]]++;
                    }

                    /* bound code lengths, force root to be within code lengths */
                    root = bits;
                    for (max = MAXBITS; max >= 1; max--) {
                        if (count[max] !== 0) {
                            break;
                        }
                    }
                    if (root > max) {
                        root = max;
                    }
                    if (max === 0) {
                        /* no symbols to code at all */
                        //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
                        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
                        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
                        table[table_index++] = (1 << 24) | (64 << 16) | 0;

                        //table.op[opts.table_index] = 64;
                        //table.bits[opts.table_index] = 1;
                        //table.val[opts.table_index++] = 0;
                        table[table_index++] = (1 << 24) | (64 << 16) | 0;

                        opts.bits = 1;
                        return 0; /* no symbols, but wait for decoding to report error */
                    }
                    for (min = 1; min < max; min++) {
                        if (count[min] !== 0) {
                            break;
                        }
                    }
                    if (root < min) {
                        root = min;
                    }

                    /* check for an over-subscribed or incomplete set of lengths */
                    left = 1;
                    for (len = 1; len <= MAXBITS; len++) {
                        left <<= 1;
                        left -= count[len];
                        if (left < 0) {
                            return -1;
                        } /* over-subscribed */
                    }
                    if (left > 0 && (type === CODES || max !== 1)) {
                        return -1; /* incomplete set */
                    }

                    /* generate offsets into symbol table for each length for sorting */
                    offs[1] = 0;
                    for (len = 1; len < MAXBITS; len++) {
                        offs[len + 1] = offs[len] + count[len];
                    }

                    /* sort symbols by length, by symbol order within each length */
                    for (sym = 0; sym < codes; sym++) {
                        if (lens[lens_index + sym] !== 0) {
                            work[offs[lens[lens_index + sym]]++] = sym;
                        }
                    }

                    /*
       Create and fill in decoding tables.  In this loop, the table being
       filled is at next and has curr index bits.  The code being used is huff
       with length len.  That code is converted to an index by dropping drop
       bits off of the bottom.  For codes where len is less than drop + curr,
       those top drop + curr - len bits are incremented through all values to
       fill the table with replicated entries.

       root is the number of index bits for the root table.  When len exceeds
       root, sub-tables are created pointed to by the root entry with an index
       of the low root bits of huff.  This is saved in low to check for when a
       new sub-table should be started.  drop is zero when the root table is
       being filled, and drop is root when sub-tables are being filled.

       When a new sub-table is needed, it is necessary to look ahead in the
       code lengths to determine what size sub-table is needed.  The length
       counts are used for this, and so count[] is decremented as codes are
       entered in the tables.

       used keeps track of how many table entries have been allocated from the
       provided *table space.  It is checked for LENS and DIST tables against
       the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
       the initial root table size constants.  See the comments in inftrees.h
       for more information.

       sym increments through all symbols, and the loop terminates when
       all codes of length max, i.e. all codes, have been processed.  This
       routine permits incomplete codes, so another loop after this one fills
       in the rest of the decoding tables with invalid code markers.
       */

                    /* set up for code type */
                    // poor man optimization - use if-else instead of switch,
                    // to avoid deopts in old v8
                    if (type === CODES) {
                        base = extra = work; /* dummy value--not used */
                        end = 19;
                    } else if (type === LENS) {
                        base = lbase;
                        base_index -= 257;
                        extra = lext;
                        extra_index -= 257;
                        end = 256;
                    } else {
                        /* DISTS */
                        base = dbase;
                        extra = dext;
                        end = -1;
                    }

                    /* initialize opts for loop */
                    huff = 0; /* starting code */
                    sym = 0; /* starting code symbol */
                    len = min; /* starting code length */
                    next = table_index; /* current table to fill in */
                    curr = root; /* current table index bits */
                    drop = 0; /* current bits to drop from code for index */
                    low = -1; /* trigger new sub-table when len > root */
                    used = 1 << root; /* use root table entries */
                    mask = used - 1; /* mask for comparing low */

                    /* check available table space */
                    if (
                        (type === LENS && used > ENOUGH_LENS) ||
                        (type === DISTS && used > ENOUGH_DISTS)
                    ) {
                        return 1;
                    }

                    /* process all codes and make table entries */
                    for (;;) {
                        /* create table entry */
                        here_bits = len - drop;
                        if (work[sym] < end) {
                            here_op = 0;
                            here_val = work[sym];
                        } else if (work[sym] > end) {
                            here_op = extra[extra_index + work[sym]];
                            here_val = base[base_index + work[sym]];
                        } else {
                            here_op = 32 + 64; /* end of block */
                            here_val = 0;
                        }

                        /* replicate for those indices with low len bits equal to huff */
                        incr = 1 << (len - drop);
                        fill = 1 << curr;
                        min = fill; /* save offset to next table */
                        do {
                            fill -= incr;
                            table[next + (huff >> drop) + fill] =
                                (here_bits << 24) |
                                (here_op << 16) |
                                here_val |
                                0;
                        } while (fill !== 0);

                        /* backwards increment the len-bit code huff */
                        incr = 1 << (len - 1);
                        while (huff & incr) {
                            incr >>= 1;
                        }
                        if (incr !== 0) {
                            huff &= incr - 1;
                            huff += incr;
                        } else {
                            huff = 0;
                        }

                        /* go to next symbol, update count, len */
                        sym++;
                        if (--count[len] === 0) {
                            if (len === max) {
                                break;
                            }
                            len = lens[lens_index + work[sym]];
                        }

                        /* create new sub-table if needed */
                        if (len > root && (huff & mask) !== low) {
                            /* if first time, transition to sub-tables */
                            if (drop === 0) {
                                drop = root;
                            }

                            /* increment past last table */
                            next += min; /* here min is 1 << curr */

                            /* determine length of next table */
                            curr = len - drop;
                            left = 1 << curr;
                            while (curr + drop < max) {
                                left -= count[curr + drop];
                                if (left <= 0) {
                                    break;
                                }
                                curr++;
                                left <<= 1;
                            }

                            /* check for enough space */
                            used += 1 << curr;
                            if (
                                (type === LENS && used > ENOUGH_LENS) ||
                                (type === DISTS && used > ENOUGH_DISTS)
                            ) {
                                return 1;
                            }

                            /* point entry in root table to sub-table */
                            low = huff & mask;
                            /*table.op[low] = curr;
          table.bits[low] = root;
          table.val[low] = next - opts.table_index;*/
                            table[low] =
                                (root << 24) |
                                (curr << 16) |
                                (next - table_index) |
                                0;
                        }
                    }

                    /* fill in remaining table entry if code is incomplete (guaranteed to have
       at most one remaining entry, since if the code is incomplete, the
       maximum code length that was allowed to get this far is one bit) */
                    if (huff !== 0) {
                        //table.op[next + huff] = 64;            /* invalid code marker */
                        //table.bits[next + huff] = len - drop;
                        //table.val[next + huff] = 0;
                        table[next + huff] =
                            ((len - drop) << 24) | (64 << 16) | 0;
                    }

                    /* set return parameters */
                    //opts.table_index += used;
                    opts.bits = root;
                    return 0;
                };
            },
            { "../utils/common": 90 },
        ],
        98: [
            function (require, module, exports) {
                "use strict";

                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                module.exports = {
                    2: "need dictionary" /* Z_NEED_DICT       2  */,
                    1: "stream end" /* Z_STREAM_END      1  */,
                    0: "" /* Z_OK              0  */,
                    "-1": "file error" /* Z_ERRNO         (-1) */,
                    "-2": "stream error" /* Z_STREAM_ERROR  (-2) */,
                    "-3": "data error" /* Z_DATA_ERROR    (-3) */,
                    "-4": "insufficient memory" /* Z_MEM_ERROR     (-4) */,
                    "-5": "buffer error" /* Z_BUF_ERROR     (-5) */,
                    "-6": "incompatible version" /* Z_VERSION_ERROR (-6) */,
                };
            },
            {},
        ],
        99: [
            function (require, module, exports) {
                "use strict";

                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                /* eslint-disable space-unary-ops */

                var utils = require("../utils/common");

                /* Public constants ==========================================================*/
                /* ===========================================================================*/

                //var Z_FILTERED          = 1;
                //var Z_HUFFMAN_ONLY      = 2;
                //var Z_RLE               = 3;
                var Z_FIXED = 4;
                //var Z_DEFAULT_STRATEGY  = 0;

                /* Possible values of the data_type field (though see inflate()) */
                var Z_BINARY = 0;
                var Z_TEXT = 1;
                //var Z_ASCII             = 1; // = Z_TEXT
                var Z_UNKNOWN = 2;

                /*============================================================================*/

                function zero(buf) {
                    var len = buf.length;
                    while (--len >= 0) {
                        buf[len] = 0;
                    }
                }

                // From zutil.h

                var STORED_BLOCK = 0;
                var STATIC_TREES = 1;
                var DYN_TREES = 2;
                /* The three kinds of block type */

                var MIN_MATCH = 3;
                var MAX_MATCH = 258;
                /* The minimum and maximum match lengths */

                // From deflate.h
                /* ===========================================================================
                 * Internal compression state.
                 */

                var LENGTH_CODES = 29;
                /* number of length codes, not counting the special END_BLOCK code */

                var LITERALS = 256;
                /* number of literal bytes 0..255 */

                var L_CODES = LITERALS + 1 + LENGTH_CODES;
                /* number of Literal or Length codes, including the END_BLOCK code */

                var D_CODES = 30;
                /* number of distance codes */

                var BL_CODES = 19;
                /* number of codes used to transfer the bit lengths */

                var HEAP_SIZE = 2 * L_CODES + 1;
                /* maximum heap size */

                var MAX_BITS = 15;
                /* All codes must not exceed MAX_BITS bits */

                var Buf_size = 16;
                /* size of bit buffer in bi_buf */

                /* ===========================================================================
                 * Constants
                 */

                var MAX_BL_BITS = 7;
                /* Bit length codes must not exceed MAX_BL_BITS bits */

                var END_BLOCK = 256;
                /* end of block literal code */

                var REP_3_6 = 16;
                /* repeat previous bit length 3-6 times (2 bits of repeat count) */

                var REPZ_3_10 = 17;
                /* repeat a zero length 3-10 times  (3 bits of repeat count) */

                var REPZ_11_138 = 18;
                /* repeat a zero length 11-138 times  (7 bits of repeat count) */

                /* eslint-disable comma-spacing,array-bracket-spacing */
                var extra_lbits =
                    /* extra bits for each length code */
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3,
                        3, 4, 4, 4, 4, 5, 5, 5, 5, 0,
                    ];

                var extra_dbits =
                    /* extra bits for each distance code */
                    [
                        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8,
                        8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13,
                    ];

                var extra_blbits =
                    /* extra bits for each bit length code */
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];

                var bl_order = [
                    16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14,
                    1, 15,
                ];
                /* eslint-enable comma-spacing,array-bracket-spacing */

                /* The lengths of the bit length codes are sent in order of decreasing
                 * probability, to avoid transmitting the lengths for unused bit length codes.
                 */

                /* ===========================================================================
                 * Local data. These are initialized only once.
                 */

                // We pre-fill arrays with 0 to avoid uninitialized gaps

                var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

                // !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
                var static_ltree = new Array((L_CODES + 2) * 2);
                zero(static_ltree);
                /* The static literal tree. Since the bit lengths are imposed, there is no
                 * need for the L_CODES extra codes used during heap construction. However
                 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
                 * below).
                 */

                var static_dtree = new Array(D_CODES * 2);
                zero(static_dtree);
                /* The static distance tree. (Actually a trivial tree since all codes use
                 * 5 bits.)
                 */

                var _dist_code = new Array(DIST_CODE_LEN);
                zero(_dist_code);
                /* Distance codes. The first 256 values correspond to the distances
                 * 3 .. 258, the last 256 values correspond to the top 8 bits of
                 * the 15 bit distances.
                 */

                var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
                zero(_length_code);
                /* length code for each normalized match length (0 == MIN_MATCH) */

                var base_length = new Array(LENGTH_CODES);
                zero(base_length);
                /* First normalized length for each code (0 = MIN_MATCH) */

                var base_dist = new Array(D_CODES);
                zero(base_dist);
                /* First normalized distance for each code (0 = distance of 1) */

                function StaticTreeDesc(
                    static_tree,
                    extra_bits,
                    extra_base,
                    elems,
                    max_length
                ) {
                    this.static_tree = static_tree; /* static tree or NULL */
                    this.extra_bits =
                        extra_bits; /* extra bits for each code or NULL */
                    this.extra_base =
                        extra_base; /* base index for extra_bits */
                    this.elems = elems; /* max number of elements in the tree */
                    this.max_length =
                        max_length; /* max bit length for the codes */

                    // show if `static_tree` has data or dummy - needed for monomorphic objects
                    this.has_stree = static_tree && static_tree.length;
                }

                var static_l_desc;
                var static_d_desc;
                var static_bl_desc;

                function TreeDesc(dyn_tree, stat_desc) {
                    this.dyn_tree = dyn_tree; /* the dynamic tree */
                    this.max_code = 0; /* largest code with non zero frequency */
                    this.stat_desc =
                        stat_desc; /* the corresponding static tree */
                }

                function d_code(dist) {
                    return dist < 256
                        ? _dist_code[dist]
                        : _dist_code[256 + (dist >>> 7)];
                }

                /* ===========================================================================
                 * Output a short LSB first on the stream.
                 * IN assertion: there is enough room in pendingBuf.
                 */
                function put_short(s, w) {
                    //    put_byte(s, (uch)((w) & 0xff));
                    //    put_byte(s, (uch)((ush)(w) >> 8));
                    s.pending_buf[s.pending++] = w & 0xff;
                    s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
                }

                /* ===========================================================================
                 * Send a value on a given number of bits.
                 * IN assertion: length <= 16 and value fits in length bits.
                 */
                function send_bits(s, value, length) {
                    if (s.bi_valid > Buf_size - length) {
                        s.bi_buf |= (value << s.bi_valid) & 0xffff;
                        put_short(s, s.bi_buf);
                        s.bi_buf = value >> (Buf_size - s.bi_valid);
                        s.bi_valid += length - Buf_size;
                    } else {
                        s.bi_buf |= (value << s.bi_valid) & 0xffff;
                        s.bi_valid += length;
                    }
                }

                function send_code(s, c, tree) {
                    send_bits(
                        s,
                        tree[c * 2] /*.Code*/,
                        tree[c * 2 + 1] /*.Len*/
                    );
                }

                /* ===========================================================================
                 * Reverse the first len bits of a code, using straightforward code (a faster
                 * method would use a table)
                 * IN assertion: 1 <= len <= 15
                 */
                function bi_reverse(code, len) {
                    var res = 0;
                    do {
                        res |= code & 1;
                        code >>>= 1;
                        res <<= 1;
                    } while (--len > 0);
                    return res >>> 1;
                }

                /* ===========================================================================
                 * Flush the bit buffer, keeping at most 7 bits in it.
                 */
                function bi_flush(s) {
                    if (s.bi_valid === 16) {
                        put_short(s, s.bi_buf);
                        s.bi_buf = 0;
                        s.bi_valid = 0;
                    } else if (s.bi_valid >= 8) {
                        s.pending_buf[s.pending++] = s.bi_buf & 0xff;
                        s.bi_buf >>= 8;
                        s.bi_valid -= 8;
                    }
                }

                /* ===========================================================================
                 * Compute the optimal bit lengths for a tree and update the total bit length
                 * for the current block.
                 * IN assertion: the fields freq and dad are set, heap[heap_max] and
                 *    above are the tree nodes sorted by increasing frequency.
                 * OUT assertions: the field len is set to the optimal bit length, the
                 *     array bl_count contains the frequencies for each bit length.
                 *     The length opt_len is updated; static_len is also updated if stree is
                 *     not null.
                 */
                function gen_bitlen(s, desc) {
                    //    deflate_state *s;
                    //    tree_desc *desc;    /* the tree descriptor */
                    var tree = desc.dyn_tree;
                    var max_code = desc.max_code;
                    var stree = desc.stat_desc.static_tree;
                    var has_stree = desc.stat_desc.has_stree;
                    var extra = desc.stat_desc.extra_bits;
                    var base = desc.stat_desc.extra_base;
                    var max_length = desc.stat_desc.max_length;
                    var h; /* heap index */
                    var n, m; /* iterate over the tree elements */
                    var bits; /* bit length */
                    var xbits; /* extra bits */
                    var f; /* frequency */
                    var overflow = 0; /* number of elements with bit length too large */

                    for (bits = 0; bits <= MAX_BITS; bits++) {
                        s.bl_count[bits] = 0;
                    }

                    /* In a first pass, compute the optimal bit lengths (which may
                     * overflow in the case of the bit length tree).
                     */
                    tree[
                        s.heap[s.heap_max] * 2 + 1
                    ] /*.Len*/ = 0; /* root of the heap */

                    for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
                        n = s.heap[h];
                        bits =
                            tree[tree[n * 2 + 1] /*.Dad*/ * 2 + 1] /*.Len*/ + 1;
                        if (bits > max_length) {
                            bits = max_length;
                            overflow++;
                        }
                        tree[n * 2 + 1] /*.Len*/ = bits;
                        /* We overwrite tree[n].Dad which is no longer needed */

                        if (n > max_code) {
                            continue;
                        } /* not a leaf node */

                        s.bl_count[bits]++;
                        xbits = 0;
                        if (n >= base) {
                            xbits = extra[n - base];
                        }
                        f = tree[n * 2] /*.Freq*/;
                        s.opt_len += f * (bits + xbits);
                        if (has_stree) {
                            s.static_len +=
                                f * (stree[n * 2 + 1] /*.Len*/ + xbits);
                        }
                    }
                    if (overflow === 0) {
                        return;
                    }

                    // Trace((stderr,"\nbit length overflow\n"));
                    /* This happens for example on obj2 and pic of the Calgary corpus */

                    /* Find the first bit length which could increase: */
                    do {
                        bits = max_length - 1;
                        while (s.bl_count[bits] === 0) {
                            bits--;
                        }
                        s.bl_count[bits]--; /* move one leaf down the tree */
                        s.bl_count[
                            bits + 1
                        ] += 2; /* move one overflow item as its brother */
                        s.bl_count[max_length]--;
                        /* The brother of the overflow item also moves one step up,
                         * but this does not affect bl_count[max_length]
                         */
                        overflow -= 2;
                    } while (overflow > 0);

                    /* Now recompute all bit lengths, scanning in increasing frequency.
                     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
                     * lengths instead of fixing only the wrong ones. This idea is taken
                     * from 'ar' written by Haruhiko Okumura.)
                     */
                    for (bits = max_length; bits !== 0; bits--) {
                        n = s.bl_count[bits];
                        while (n !== 0) {
                            m = s.heap[--h];
                            if (m > max_code) {
                                continue;
                            }
                            if (tree[m * 2 + 1] /*.Len*/ !== bits) {
                                // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
                                s.opt_len +=
                                    (bits - tree[m * 2 + 1]) /*.Len*/ *
                                    tree[m * 2] /*.Freq*/;
                                tree[m * 2 + 1] /*.Len*/ = bits;
                            }
                            n--;
                        }
                    }
                }

                /* ===========================================================================
                 * Generate the codes for a given tree and bit counts (which need not be
                 * optimal).
                 * IN assertion: the array bl_count contains the bit length statistics for
                 * the given tree and the field len is set for all tree elements.
                 * OUT assertion: the field code is set for all tree elements of non
                 *     zero code length.
                 */
                function gen_codes(tree, max_code, bl_count) {
                    //    ct_data *tree;             /* the tree to decorate */
                    //    int max_code;              /* largest code with non zero frequency */
                    //    ushf *bl_count;            /* number of codes at each bit length */
                    var next_code = new Array(
                        MAX_BITS + 1
                    ); /* next code value for each bit length */
                    var code = 0; /* running code value */
                    var bits; /* bit index */
                    var n; /* code index */

                    /* The distribution counts are first used to generate the code values
                     * without bit reversal.
                     */
                    for (bits = 1; bits <= MAX_BITS; bits++) {
                        next_code[bits] = code =
                            (code + bl_count[bits - 1]) << 1;
                    }
                    /* Check that the bit counts in bl_count are consistent. The last code
                     * must be all ones.
                     */
                    //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
                    //        "inconsistent bit counts");
                    //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

                    for (n = 0; n <= max_code; n++) {
                        var len = tree[n * 2 + 1]; /*.Len*/
                        if (len === 0) {
                            continue;
                        }
                        /* Now reverse the bits */
                        tree[n * 2] /*.Code*/ = bi_reverse(
                            next_code[len]++,
                            len
                        );

                        //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
                        //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
                    }
                }

                /* ===========================================================================
                 * Initialize the various 'constant' tables.
                 */
                function tr_static_init() {
                    var n; /* iterates over tree elements */
                    var bits; /* bit counter */
                    var length; /* length value */
                    var code; /* code value */
                    var dist; /* distance index */
                    var bl_count = new Array(MAX_BITS + 1);
                    /* number of codes at each bit length for an optimal tree */

                    // do check in _tr_init()
                    //if (static_init_done) return;

                    /* For some embedded targets, global variables are not initialized: */
                    /*#ifdef NO_INIT_GLOBAL_POINTERS
      static_l_desc.static_tree = static_ltree;
      static_l_desc.extra_bits = extra_lbits;
      static_d_desc.static_tree = static_dtree;
      static_d_desc.extra_bits = extra_dbits;
      static_bl_desc.extra_bits = extra_blbits;
    #endif*/

                    /* Initialize the mapping length (0..255) -> length code (0..28) */
                    length = 0;
                    for (code = 0; code < LENGTH_CODES - 1; code++) {
                        base_length[code] = length;
                        for (n = 0; n < 1 << extra_lbits[code]; n++) {
                            _length_code[length++] = code;
                        }
                    }
                    //Assert (length == 256, "tr_static_init: length != 256");
                    /* Note that the length 255 (match length 258) can be represented
                     * in two different ways: code 284 + 5 bits or code 285, so we
                     * overwrite length_code[255] to use the best encoding:
                     */
                    _length_code[length - 1] = code;

                    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
                    dist = 0;
                    for (code = 0; code < 16; code++) {
                        base_dist[code] = dist;
                        for (n = 0; n < 1 << extra_dbits[code]; n++) {
                            _dist_code[dist++] = code;
                        }
                    }
                    //Assert (dist == 256, "tr_static_init: dist != 256");
                    dist >>= 7; /* from now on, all distances are divided by 128 */
                    for (; code < D_CODES; code++) {
                        base_dist[code] = dist << 7;
                        for (n = 0; n < 1 << (extra_dbits[code] - 7); n++) {
                            _dist_code[256 + dist++] = code;
                        }
                    }
                    //Assert (dist == 256, "tr_static_init: 256+dist != 512");

                    /* Construct the codes of the static literal tree */
                    for (bits = 0; bits <= MAX_BITS; bits++) {
                        bl_count[bits] = 0;
                    }

                    n = 0;
                    while (n <= 143) {
                        static_ltree[n * 2 + 1] /*.Len*/ = 8;
                        n++;
                        bl_count[8]++;
                    }
                    while (n <= 255) {
                        static_ltree[n * 2 + 1] /*.Len*/ = 9;
                        n++;
                        bl_count[9]++;
                    }
                    while (n <= 279) {
                        static_ltree[n * 2 + 1] /*.Len*/ = 7;
                        n++;
                        bl_count[7]++;
                    }
                    while (n <= 287) {
                        static_ltree[n * 2 + 1] /*.Len*/ = 8;
                        n++;
                        bl_count[8]++;
                    }
                    /* Codes 286 and 287 do not exist, but we must include them in the
                     * tree construction to get a canonical Huffman tree (longest code
                     * all ones)
                     */
                    gen_codes(static_ltree, L_CODES + 1, bl_count);

                    /* The static distance tree is trivial: */
                    for (n = 0; n < D_CODES; n++) {
                        static_dtree[n * 2 + 1] /*.Len*/ = 5;
                        static_dtree[n * 2] /*.Code*/ = bi_reverse(n, 5);
                    }

                    // Now data ready and we can init static trees
                    static_l_desc = new StaticTreeDesc(
                        static_ltree,
                        extra_lbits,
                        LITERALS + 1,
                        L_CODES,
                        MAX_BITS
                    );
                    static_d_desc = new StaticTreeDesc(
                        static_dtree,
                        extra_dbits,
                        0,
                        D_CODES,
                        MAX_BITS
                    );
                    static_bl_desc = new StaticTreeDesc(
                        new Array(0),
                        extra_blbits,
                        0,
                        BL_CODES,
                        MAX_BL_BITS
                    );

                    //static_init_done = true;
                }

                /* ===========================================================================
                 * Initialize a new block.
                 */
                function init_block(s) {
                    var n; /* iterates over tree elements */

                    /* Initialize the trees. */
                    for (n = 0; n < L_CODES; n++) {
                        s.dyn_ltree[n * 2] /*.Freq*/ = 0;
                    }
                    for (n = 0; n < D_CODES; n++) {
                        s.dyn_dtree[n * 2] /*.Freq*/ = 0;
                    }
                    for (n = 0; n < BL_CODES; n++) {
                        s.bl_tree[n * 2] /*.Freq*/ = 0;
                    }

                    s.dyn_ltree[END_BLOCK * 2] /*.Freq*/ = 1;
                    s.opt_len = s.static_len = 0;
                    s.last_lit = s.matches = 0;
                }

                /* ===========================================================================
                 * Flush the bit buffer and align the output on a byte boundary
                 */
                function bi_windup(s) {
                    if (s.bi_valid > 8) {
                        put_short(s, s.bi_buf);
                    } else if (s.bi_valid > 0) {
                        //put_byte(s, (Byte)s->bi_buf);
                        s.pending_buf[s.pending++] = s.bi_buf;
                    }
                    s.bi_buf = 0;
                    s.bi_valid = 0;
                }

                /* ===========================================================================
                 * Copy a stored block, storing first the length and its
                 * one's complement if requested.
                 */
                function copy_block(s, buf, len, header) {
                    //DeflateState *s;
                    //charf    *buf;    /* the input data */
                    //unsigned len;     /* its length */
                    //int      header;  /* true if block header must be written */
                    bi_windup(s); /* align on byte boundary */

                    if (header) {
                        put_short(s, len);
                        put_short(s, ~len);
                    }
                    //  while (len--) {
                    //    put_byte(s, *buf++);
                    //  }
                    utils.arraySet(
                        s.pending_buf,
                        s.window,
                        buf,
                        len,
                        s.pending
                    );
                    s.pending += len;
                }

                /* ===========================================================================
                 * Compares to subtrees, using the tree depth as tie breaker when
                 * the subtrees have equal frequency. This minimizes the worst case length.
                 */
                function smaller(tree, n, m, depth) {
                    var _n2 = n * 2;
                    var _m2 = m * 2;
                    return (
                        tree[_n2] /*.Freq*/ < tree[_m2] /*.Freq*/ ||
                        (tree[_n2] /*.Freq*/ === tree[_m2] /*.Freq*/ &&
                            depth[n] <= depth[m])
                    );
                }

                /* ===========================================================================
                 * Restore the heap property by moving down the tree starting at node k,
                 * exchanging a node with the smallest of its two sons if necessary, stopping
                 * when the heap property is re-established (each father smaller than its
                 * two sons).
                 */
                function pqdownheap(s, tree, k) {
                    //    deflate_state *s;
                    //    ct_data *tree;  /* the tree to restore */
                    //    int k;               /* node to move down */
                    var v = s.heap[k];
                    var j = k << 1; /* left son of k */
                    while (j <= s.heap_len) {
                        /* Set j to the smallest of the two sons: */
                        if (
                            j < s.heap_len &&
                            smaller(tree, s.heap[j + 1], s.heap[j], s.depth)
                        ) {
                            j++;
                        }
                        /* Exit if v is smaller than both sons */
                        if (smaller(tree, v, s.heap[j], s.depth)) {
                            break;
                        }

                        /* Exchange v with the smallest son */
                        s.heap[k] = s.heap[j];
                        k = j;

                        /* And continue down the tree, setting j to the left son of k */
                        j <<= 1;
                    }
                    s.heap[k] = v;
                }

                // inlined manually
                // var SMALLEST = 1;

                /* ===========================================================================
                 * Send the block data compressed using the given Huffman trees
                 */
                function compress_block(s, ltree, dtree) {
                    //    deflate_state *s;
                    //    const ct_data *ltree; /* literal tree */
                    //    const ct_data *dtree; /* distance tree */
                    var dist; /* distance of matched string */
                    var lc; /* match length or unmatched char (if dist == 0) */
                    var lx = 0; /* running index in l_buf */
                    var code; /* the code to send */
                    var extra; /* number of extra bits to send */

                    if (s.last_lit !== 0) {
                        do {
                            dist =
                                (s.pending_buf[s.d_buf + lx * 2] << 8) |
                                s.pending_buf[s.d_buf + lx * 2 + 1];
                            lc = s.pending_buf[s.l_buf + lx];
                            lx++;

                            if (dist === 0) {
                                send_code(
                                    s,
                                    lc,
                                    ltree
                                ); /* send a literal byte */
                                //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
                            } else {
                                /* Here, lc is the match length - MIN_MATCH */
                                code = _length_code[lc];
                                send_code(
                                    s,
                                    code + LITERALS + 1,
                                    ltree
                                ); /* send the length code */
                                extra = extra_lbits[code];
                                if (extra !== 0) {
                                    lc -= base_length[code];
                                    send_bits(
                                        s,
                                        lc,
                                        extra
                                    ); /* send the extra length bits */
                                }
                                dist--; /* dist is now the match distance - 1 */
                                code = d_code(dist);
                                //Assert (code < D_CODES, "bad d_code");

                                send_code(
                                    s,
                                    code,
                                    dtree
                                ); /* send the distance code */
                                extra = extra_dbits[code];
                                if (extra !== 0) {
                                    dist -= base_dist[code];
                                    send_bits(
                                        s,
                                        dist,
                                        extra
                                    ); /* send the extra distance bits */
                                }
                            } /* literal or match pair ? */

                            /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
                            //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
                            //       "pendingBuf overflow");
                        } while (lx < s.last_lit);
                    }

                    send_code(s, END_BLOCK, ltree);
                }

                /* ===========================================================================
                 * Construct one Huffman tree and assigns the code bit strings and lengths.
                 * Update the total bit length for the current block.
                 * IN assertion: the field freq is set for all tree elements.
                 * OUT assertions: the fields len and code are set to the optimal bit length
                 *     and corresponding code. The length opt_len is updated; static_len is
                 *     also updated if stree is not null. The field max_code is set.
                 */
                function build_tree(s, desc) {
                    //    deflate_state *s;
                    //    tree_desc *desc; /* the tree descriptor */
                    var tree = desc.dyn_tree;
                    var stree = desc.stat_desc.static_tree;
                    var has_stree = desc.stat_desc.has_stree;
                    var elems = desc.stat_desc.elems;
                    var n, m; /* iterate over heap elements */
                    var max_code =
                        -1; /* largest code with non zero frequency */
                    var node; /* new node being created */

                    /* Construct the initial heap, with least frequent element in
                     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
                     * heap[0] is not used.
                     */
                    s.heap_len = 0;
                    s.heap_max = HEAP_SIZE;

                    for (n = 0; n < elems; n++) {
                        if (tree[n * 2] /*.Freq*/ !== 0) {
                            s.heap[++s.heap_len] = max_code = n;
                            s.depth[n] = 0;
                        } else {
                            tree[n * 2 + 1] /*.Len*/ = 0;
                        }
                    }

                    /* The pkzip format requires that at least one distance code exists,
                     * and that at least one bit should be sent even if there is only one
                     * possible code. So to avoid special checks later on we force at least
                     * two codes of non zero frequency.
                     */
                    while (s.heap_len < 2) {
                        node = s.heap[++s.heap_len] =
                            max_code < 2 ? ++max_code : 0;
                        tree[node * 2] /*.Freq*/ = 1;
                        s.depth[node] = 0;
                        s.opt_len--;

                        if (has_stree) {
                            s.static_len -= stree[node * 2 + 1] /*.Len*/;
                        }
                        /* node is 0 or 1 so it does not have extra bits */
                    }
                    desc.max_code = max_code;

                    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
                     * establish sub-heaps of increasing lengths:
                     */
                    for (n = s.heap_len >> 1 /*int /2*/; n >= 1; n--) {
                        pqdownheap(s, tree, n);
                    }

                    /* Construct the Huffman tree by repeatedly combining the least two
                     * frequent nodes.
                     */
                    node = elems; /* next internal node of the tree */
                    do {
                        //pqremove(s, tree, n);  /* n = node of least frequency */
                        /*** pqremove ***/
                        n = s.heap[1 /*SMALLEST*/];
                        s.heap[1 /*SMALLEST*/] = s.heap[s.heap_len--];
                        pqdownheap(s, tree, 1 /*SMALLEST*/);
                        /***/

                        m =
                            s
                                .heap[1 /*SMALLEST*/]; /* m = node of next least frequency */

                        s.heap[--s.heap_max] =
                            n; /* keep the nodes sorted by frequency */
                        s.heap[--s.heap_max] = m;

                        /* Create a new node father of n and m */
                        tree[node * 2] /*.Freq*/ =
                            tree[n * 2] /*.Freq*/ + tree[m * 2] /*.Freq*/;
                        s.depth[node] =
                            (s.depth[n] >= s.depth[m]
                                ? s.depth[n]
                                : s.depth[m]) + 1;
                        tree[n * 2 + 1] /*.Dad*/ = tree[m * 2 + 1] /*.Dad*/ =
                            node;

                        /* and insert the new node in the heap */
                        s.heap[1 /*SMALLEST*/] = node++;
                        pqdownheap(s, tree, 1 /*SMALLEST*/);
                    } while (s.heap_len >= 2);

                    s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/];

                    /* At this point, the fields freq and dad are set. We can now
                     * generate the bit lengths.
                     */
                    gen_bitlen(s, desc);

                    /* The field len is now set, we can generate the bit codes */
                    gen_codes(tree, max_code, s.bl_count);
                }

                /* ===========================================================================
                 * Scan a literal or distance tree to determine the frequencies of the codes
                 * in the bit length tree.
                 */
                function scan_tree(s, tree, max_code) {
                    //    deflate_state *s;
                    //    ct_data *tree;   /* the tree to be scanned */
                    //    int max_code;    /* and its largest code of non zero frequency */
                    var n; /* iterates over all tree elements */
                    var prevlen = -1; /* last emitted length */
                    var curlen; /* length of current code */

                    var nextlen =
                        tree[0 * 2 + 1]; /*.Len*/ /* length of next code */

                    var count = 0; /* repeat count of the current code */
                    var max_count = 7; /* max repeat count */
                    var min_count = 4; /* min repeat count */

                    if (nextlen === 0) {
                        max_count = 138;
                        min_count = 3;
                    }
                    tree[(max_code + 1) * 2 + 1] /*.Len*/ = 0xffff; /* guard */

                    for (n = 0; n <= max_code; n++) {
                        curlen = nextlen;
                        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;

                        if (++count < max_count && curlen === nextlen) {
                            continue;
                        } else if (count < min_count) {
                            s.bl_tree[curlen * 2] /*.Freq*/ += count;
                        } else if (curlen !== 0) {
                            if (curlen !== prevlen) {
                                s.bl_tree[curlen * 2] /*.Freq*/++;
                            }
                            s.bl_tree[REP_3_6 * 2] /*.Freq*/++;
                        } else if (count <= 10) {
                            s.bl_tree[REPZ_3_10 * 2] /*.Freq*/++;
                        } else {
                            s.bl_tree[REPZ_11_138 * 2] /*.Freq*/++;
                        }

                        count = 0;
                        prevlen = curlen;

                        if (nextlen === 0) {
                            max_count = 138;
                            min_count = 3;
                        } else if (curlen === nextlen) {
                            max_count = 6;
                            min_count = 3;
                        } else {
                            max_count = 7;
                            min_count = 4;
                        }
                    }
                }

                /* ===========================================================================
                 * Send a literal or distance tree in compressed form, using the codes in
                 * bl_tree.
                 */
                function send_tree(s, tree, max_code) {
                    //    deflate_state *s;
                    //    ct_data *tree; /* the tree to be scanned */
                    //    int max_code;       /* and its largest code of non zero frequency */
                    var n; /* iterates over all tree elements */
                    var prevlen = -1; /* last emitted length */
                    var curlen; /* length of current code */

                    var nextlen =
                        tree[0 * 2 + 1]; /*.Len*/ /* length of next code */

                    var count = 0; /* repeat count of the current code */
                    var max_count = 7; /* max repeat count */
                    var min_count = 4; /* min repeat count */

                    /* tree[max_code+1].Len = -1; */ /* guard already set */
                    if (nextlen === 0) {
                        max_count = 138;
                        min_count = 3;
                    }

                    for (n = 0; n <= max_code; n++) {
                        curlen = nextlen;
                        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;

                        if (++count < max_count && curlen === nextlen) {
                            continue;
                        } else if (count < min_count) {
                            do {
                                send_code(s, curlen, s.bl_tree);
                            } while (--count !== 0);
                        } else if (curlen !== 0) {
                            if (curlen !== prevlen) {
                                send_code(s, curlen, s.bl_tree);
                                count--;
                            }
                            //Assert(count >= 3 && count <= 6, " 3_6?");
                            send_code(s, REP_3_6, s.bl_tree);
                            send_bits(s, count - 3, 2);
                        } else if (count <= 10) {
                            send_code(s, REPZ_3_10, s.bl_tree);
                            send_bits(s, count - 3, 3);
                        } else {
                            send_code(s, REPZ_11_138, s.bl_tree);
                            send_bits(s, count - 11, 7);
                        }

                        count = 0;
                        prevlen = curlen;
                        if (nextlen === 0) {
                            max_count = 138;
                            min_count = 3;
                        } else if (curlen === nextlen) {
                            max_count = 6;
                            min_count = 3;
                        } else {
                            max_count = 7;
                            min_count = 4;
                        }
                    }
                }

                /* ===========================================================================
                 * Construct the Huffman tree for the bit lengths and return the index in
                 * bl_order of the last bit length code to send.
                 */
                function build_bl_tree(s) {
                    var max_blindex; /* index of last bit length code of non zero freq */

                    /* Determine the bit length frequencies for literal and distance trees */
                    scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
                    scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

                    /* Build the bit length tree: */
                    build_tree(s, s.bl_desc);
                    /* opt_len now includes the length of the tree representations, except
                     * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
                     */

                    /* Determine the number of bit length codes to send. The pkzip format
                     * requires that at least 4 bit length codes be sent. (appnote.txt says
                     * 3 but the actual value used is 4.)
                     */
                    for (
                        max_blindex = BL_CODES - 1;
                        max_blindex >= 3;
                        max_blindex--
                    ) {
                        if (
                            s.bl_tree[
                                bl_order[max_blindex] * 2 + 1
                            ] /*.Len*/ !== 0
                        ) {
                            break;
                        }
                    }
                    /* Update opt_len to include the bit length tree and counts */
                    s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
                    //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
                    //        s->opt_len, s->static_len));

                    return max_blindex;
                }

                /* ===========================================================================
                 * Send the header for a block using dynamic Huffman trees: the counts, the
                 * lengths of the bit length codes, the literal tree and the distance tree.
                 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
                 */
                function send_all_trees(s, lcodes, dcodes, blcodes) {
                    //    deflate_state *s;
                    //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
                    var rank; /* index in bl_order */

                    //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
                    //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
                    //        "too many codes");
                    //Tracev((stderr, "\nbl counts: "));
                    send_bits(
                        s,
                        lcodes - 257,
                        5
                    ); /* not +255 as stated in appnote.txt */
                    send_bits(s, dcodes - 1, 5);
                    send_bits(
                        s,
                        blcodes - 4,
                        4
                    ); /* not -3 as stated in appnote.txt */
                    for (rank = 0; rank < blcodes; rank++) {
                        //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
                        send_bits(
                            s,
                            s.bl_tree[bl_order[rank] * 2 + 1] /*.Len*/,
                            3
                        );
                    }
                    //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

                    send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
                    //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

                    send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
                    //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
                }

                /* ===========================================================================
                 * Check if the data type is TEXT or BINARY, using the following algorithm:
                 * - TEXT if the two conditions below are satisfied:
                 *    a) There are no non-portable control characters belonging to the
                 *       "black list" (0..6, 14..25, 28..31).
                 *    b) There is at least one printable character belonging to the
                 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
                 * - BINARY otherwise.
                 * - The following partially-portable control characters form a
                 *   "gray list" that is ignored in this detection algorithm:
                 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
                 * IN assertion: the fields Freq of dyn_ltree are set.
                 */
                function detect_data_type(s) {
                    /* black_mask is the bit mask of black-listed bytes
                     * set bits 0..6, 14..25, and 28..31
                     * 0xf3ffc07f = binary 11110011111111111100000001111111
                     */
                    var black_mask = 0xf3ffc07f;
                    var n;

                    /* Check for non-textual ("black-listed") bytes. */
                    for (n = 0; n <= 31; n++, black_mask >>>= 1) {
                        if (
                            black_mask & 1 &&
                            s.dyn_ltree[n * 2] /*.Freq*/ !== 0
                        ) {
                            return Z_BINARY;
                        }
                    }

                    /* Check for textual ("white-listed") bytes. */
                    if (
                        s.dyn_ltree[9 * 2] /*.Freq*/ !== 0 ||
                        s.dyn_ltree[10 * 2] /*.Freq*/ !== 0 ||
                        s.dyn_ltree[13 * 2] /*.Freq*/ !== 0
                    ) {
                        return Z_TEXT;
                    }
                    for (n = 32; n < LITERALS; n++) {
                        if (s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
                            return Z_TEXT;
                        }
                    }

                    /* There are no "black-listed" or "white-listed" bytes:
                     * this stream either is empty or has tolerated ("gray-listed") bytes only.
                     */
                    return Z_BINARY;
                }

                var static_init_done = false;

                /* ===========================================================================
                 * Initialize the tree data structures for a new zlib stream.
                 */
                function _tr_init(s) {
                    if (!static_init_done) {
                        tr_static_init();
                        static_init_done = true;
                    }

                    s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
                    s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
                    s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

                    s.bi_buf = 0;
                    s.bi_valid = 0;

                    /* Initialize the first block of the first file: */
                    init_block(s);
                }

                /* ===========================================================================
                 * Send a stored block
                 */
                function _tr_stored_block(s, buf, stored_len, last) {
                    //DeflateState *s;
                    //charf *buf;       /* input block */
                    //ulg stored_len;   /* length of input block */
                    //int last;         /* one if this is the last block for a file */
                    send_bits(
                        s,
                        (STORED_BLOCK << 1) + (last ? 1 : 0),
                        3
                    ); /* send block type */
                    copy_block(s, buf, stored_len, true); /* with header */
                }

                /* ===========================================================================
                 * Send one empty static block to give enough lookahead for inflate.
                 * This takes 10 bits, of which 7 may remain in the bit buffer.
                 */
                function _tr_align(s) {
                    send_bits(s, STATIC_TREES << 1, 3);
                    send_code(s, END_BLOCK, static_ltree);
                    bi_flush(s);
                }

                /* ===========================================================================
                 * Determine the best encoding for the current block: dynamic trees, static
                 * trees or store, and output the encoded block to the zip file.
                 */
                function _tr_flush_block(s, buf, stored_len, last) {
                    //DeflateState *s;
                    //charf *buf;       /* input block, or NULL if too old */
                    //ulg stored_len;   /* length of input block */
                    //int last;         /* one if this is the last block for a file */
                    var opt_lenb,
                        static_lenb; /* opt_len and static_len in bytes */
                    var max_blindex = 0; /* index of last bit length code of non zero freq */

                    /* Build the Huffman trees unless a stored block is forced */
                    if (s.level > 0) {
                        /* Check if the file is binary or text */
                        if (s.strm.data_type === Z_UNKNOWN) {
                            s.strm.data_type = detect_data_type(s);
                        }

                        /* Construct the literal and distance trees */
                        build_tree(s, s.l_desc);
                        // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
                        //        s->static_len));

                        build_tree(s, s.d_desc);
                        // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
                        //        s->static_len));
                        /* At this point, opt_len and static_len are the total bit lengths of
                         * the compressed block data, excluding the tree representations.
                         */

                        /* Build the bit length tree for the above two trees, and get the index
                         * in bl_order of the last bit length code to send.
                         */
                        max_blindex = build_bl_tree(s);

                        /* Determine the best encoding. Compute the block lengths in bytes. */
                        opt_lenb = (s.opt_len + 3 + 7) >>> 3;
                        static_lenb = (s.static_len + 3 + 7) >>> 3;

                        // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
                        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
                        //        s->last_lit));

                        if (static_lenb <= opt_lenb) {
                            opt_lenb = static_lenb;
                        }
                    } else {
                        // Assert(buf != (char*)0, "lost buf");
                        opt_lenb = static_lenb =
                            stored_len + 5; /* force a stored block */
                    }

                    if (stored_len + 4 <= opt_lenb && buf !== -1) {
                        /* 4: two words for the lengths */

                        /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
                         * Otherwise we can't have processed more than WSIZE input bytes since
                         * the last block flush, because compression would have been
                         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
                         * transform a block into a stored block.
                         */
                        _tr_stored_block(s, buf, stored_len, last);
                    } else if (
                        s.strategy === Z_FIXED ||
                        static_lenb === opt_lenb
                    ) {
                        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
                        compress_block(s, static_ltree, static_dtree);
                    } else {
                        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
                        send_all_trees(
                            s,
                            s.l_desc.max_code + 1,
                            s.d_desc.max_code + 1,
                            max_blindex + 1
                        );
                        compress_block(s, s.dyn_ltree, s.dyn_dtree);
                    }
                    // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
                    /* The above check is made mod 2^32, for files larger than 512 MB
                     * and uLong implemented on 32 bits.
                     */
                    init_block(s);

                    if (last) {
                        bi_windup(s);
                    }
                    // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
                    //       s->compressed_len-7*last));
                }

                /* ===========================================================================
                 * Save the match info and tally the frequency counts. Return true if
                 * the current block must be flushed.
                 */
                function _tr_tally(s, dist, lc) {
                    //    deflate_state *s;
                    //    unsigned dist;  /* distance of matched string */
                    //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
                    //var out_length, in_length, dcode;

                    s.pending_buf[s.d_buf + s.last_lit * 2] =
                        (dist >>> 8) & 0xff;
                    s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

                    s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
                    s.last_lit++;

                    if (dist === 0) {
                        /* lc is the unmatched char */
                        s.dyn_ltree[lc * 2] /*.Freq*/++;
                    } else {
                        s.matches++;
                        /* Here, lc is the match length - MIN_MATCH */
                        dist--; /* dist = match distance - 1 */
                        //Assert((ush)dist < (ush)MAX_DIST(s) &&
                        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
                        //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

                        s.dyn_ltree[
                            (_length_code[lc] + LITERALS + 1) * 2
                        ] /*.Freq*/++;
                        s.dyn_dtree[d_code(dist) * 2] /*.Freq*/++;
                    }

                    // (!) This block is disabled in zlib defaults,
                    // don't enable it for binary compatibility

                    //#ifdef TRUNCATE_BLOCK
                    //  /* Try to guess if it is profitable to stop the current block here */
                    //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
                    //    /* Compute an upper bound for the compressed length */
                    //    out_length = s.last_lit*8;
                    //    in_length = s.strstart - s.block_start;
                    //
                    //    for (dcode = 0; dcode < D_CODES; dcode++) {
                    //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
                    //    }
                    //    out_length >>>= 3;
                    //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
                    //    //       s->last_lit, in_length, out_length,
                    //    //       100L - out_length*100L/in_length));
                    //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
                    //      return true;
                    //    }
                    //  }
                    //#endif

                    return s.last_lit === s.lit_bufsize - 1;
                    /* We avoid equality with lit_bufsize because of wraparound at 64K
                     * on 16 bit machines and because stored blocks are restricted to
                     * 64K-1 bytes.
                     */
                }

                exports._tr_init = _tr_init;
                exports._tr_stored_block = _tr_stored_block;
                exports._tr_flush_block = _tr_flush_block;
                exports._tr_tally = _tr_tally;
                exports._tr_align = _tr_align;
            },
            { "../utils/common": 90 },
        ],
        100: [
            function (require, module, exports) {
                "use strict";

                // (C) 1995-2013 Jean-loup Gailly and Mark Adler
                // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
                //
                // This software is provided 'as-is', without any express or implied
                // warranty. In no event will the authors be held liable for any damages
                // arising from the use of this software.
                //
                // Permission is granted to anyone to use this software for any purpose,
                // including commercial applications, and to alter it and redistribute it
                // freely, subject to the following restrictions:
                //
                // 1. The origin of this software must not be misrepresented; you must not
                //   claim that you wrote the original software. If you use this software
                //   in a product, an acknowledgment in the product documentation would be
                //   appreciated but is not required.
                // 2. Altered source versions must be plainly marked as such, and must not be
                //   misrepresented as being the original software.
                // 3. This notice may not be removed or altered from any source distribution.

                function ZStream() {
                    /* next input byte */
                    this.input = null; // JS specific, because we have no pointers
                    this.next_in = 0;
                    /* number of bytes available at input */
                    this.avail_in = 0;
                    /* total number of input bytes read so far */
                    this.total_in = 0;
                    /* next output byte should be put there */
                    this.output = null; // JS specific, because we have no pointers
                    this.next_out = 0;
                    /* remaining free space at output */
                    this.avail_out = 0;
                    /* total number of bytes output so far */
                    this.total_out = 0;
                    /* last error message, NULL if no error */
                    this.msg = "" /*Z_NULL*/;
                    /* not visible by applications */
                    this.state = null;
                    /* best guess about the data type: binary or text */
                    this.data_type = 2 /*Z_UNKNOWN*/;
                    /* adler32 value of the uncompressed data */
                    this.adler = 0;
                }

                module.exports = ZStream;
            },
            {},
        ],
        101: [
            function (require, module, exports) {
                (function (process) {
                    (function () {
                        "use strict";

                        if (
                            typeof process === "undefined" ||
                            !process.version ||
                            process.version.indexOf("v0.") === 0 ||
                            (process.version.indexOf("v1.") === 0 &&
                                process.version.indexOf("v1.8.") !== 0)
                        ) {
                            module.exports = { nextTick: nextTick };
                        } else {
                            module.exports = process;
                        }

                        function nextTick(fn, arg1, arg2, arg3) {
                            if (typeof fn !== "function") {
                                throw new TypeError(
                                    '"callback" argument must be a function'
                                );
                            }
                            var len = arguments.length;
                            var args, i;
                            switch (len) {
                                case 0:
                                case 1:
                                    return process.nextTick(fn);
                                case 2:
                                    return process.nextTick(
                                        function afterTickOne() {
                                            fn.call(null, arg1);
                                        }
                                    );
                                case 3:
                                    return process.nextTick(
                                        function afterTickTwo() {
                                            fn.call(null, arg1, arg2);
                                        }
                                    );
                                case 4:
                                    return process.nextTick(
                                        function afterTickThree() {
                                            fn.call(null, arg1, arg2, arg3);
                                        }
                                    );
                                default:
                                    args = new Array(len - 1);
                                    i = 0;
                                    while (i < args.length) {
                                        args[i++] = arguments[i];
                                    }
                                    return process.nextTick(
                                        function afterTick() {
                                            fn.apply(null, args);
                                        }
                                    );
                            }
                        }
                    }.call(this));
                }.call(this, require("_process")));
            },
            { _process: 102 },
        ],
        102: [
            function (require, module, exports) {
                // shim for using process in browser
                var process = (module.exports = {});

                // cached from whatever global is present so that test runners that stub it
                // don't break things.  But we need to wrap it in a try catch in case it is
                // wrapped in strict mode code which doesn't define any globals.  It's inside a
                // function because try/catches deoptimize in certain engines.

                var cachedSetTimeout;
                var cachedClearTimeout;

                function defaultSetTimout() {
                    throw new Error("setTimeout has not been defined");
                }
                function defaultClearTimeout() {
                    throw new Error("clearTimeout has not been defined");
                }
                (function () {
                    try {
                        if (typeof setTimeout === "function") {
                            cachedSetTimeout = setTimeout;
                        } else {
                            cachedSetTimeout = defaultSetTimout;
                        }
                    } catch (e) {
                        cachedSetTimeout = defaultSetTimout;
                    }
                    try {
                        if (typeof clearTimeout === "function") {
                            cachedClearTimeout = clearTimeout;
                        } else {
                            cachedClearTimeout = defaultClearTimeout;
                        }
                    } catch (e) {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                })();
                function runTimeout(fun) {
                    if (cachedSetTimeout === setTimeout) {
                        //normal enviroments in sane situations
                        return setTimeout(fun, 0);
                    }
                    // if setTimeout wasn't available but was latter defined
                    if (
                        (cachedSetTimeout === defaultSetTimout ||
                            !cachedSetTimeout) &&
                        setTimeout
                    ) {
                        cachedSetTimeout = setTimeout;
                        return setTimeout(fun, 0);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedSetTimeout(fun, 0);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                            return cachedSetTimeout.call(null, fun, 0);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                            return cachedSetTimeout.call(this, fun, 0);
                        }
                    }
                }
                function runClearTimeout(marker) {
                    if (cachedClearTimeout === clearTimeout) {
                        //normal enviroments in sane situations
                        return clearTimeout(marker);
                    }
                    // if clearTimeout wasn't available but was latter defined
                    if (
                        (cachedClearTimeout === defaultClearTimeout ||
                            !cachedClearTimeout) &&
                        clearTimeout
                    ) {
                        cachedClearTimeout = clearTimeout;
                        return clearTimeout(marker);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedClearTimeout(marker);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                            return cachedClearTimeout.call(null, marker);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                            return cachedClearTimeout.call(this, marker);
                        }
                    }
                }
                var queue = [];
                var draining = false;
                var currentQueue;
                var queueIndex = -1;

                function cleanUpNextTick() {
                    if (!draining || !currentQueue) {
                        return;
                    }
                    draining = false;
                    if (currentQueue.length) {
                        queue = currentQueue.concat(queue);
                    } else {
                        queueIndex = -1;
                    }
                    if (queue.length) {
                        drainQueue();
                    }
                }

                function drainQueue() {
                    if (draining) {
                        return;
                    }
                    var timeout = runTimeout(cleanUpNextTick);
                    draining = true;

                    var len = queue.length;
                    while (len) {
                        currentQueue = queue;
                        queue = [];
                        while (++queueIndex < len) {
                            if (currentQueue) {
                                currentQueue[queueIndex].run();
                            }
                        }
                        queueIndex = -1;
                        len = queue.length;
                    }
                    currentQueue = null;
                    draining = false;
                    runClearTimeout(timeout);
                }

                process.nextTick = function (fun) {
                    var args = new Array(arguments.length - 1);
                    if (arguments.length > 1) {
                        for (var i = 1; i < arguments.length; i++) {
                            args[i - 1] = arguments[i];
                        }
                    }
                    queue.push(new Item(fun, args));
                    if (queue.length === 1 && !draining) {
                        runTimeout(drainQueue);
                    }
                };

                // v8 likes predictible objects
                function Item(fun, array) {
                    this.fun = fun;
                    this.array = array;
                }
                Item.prototype.run = function () {
                    this.fun.apply(null, this.array);
                };
                process.title = "browser";
                process.browser = true;
                process.env = {};
                process.argv = [];
                process.version = ""; // empty string to avoid regexp issues
                process.versions = {};

                function noop() {}

                process.on = noop;
                process.addListener = noop;
                process.once = noop;
                process.off = noop;
                process.removeListener = noop;
                process.removeAllListeners = noop;
                process.emit = noop;
                process.prependListener = noop;
                process.prependOnceListener = noop;

                process.listeners = function (name) {
                    return [];
                };

                process.binding = function (name) {
                    throw new Error("process.binding is not supported");
                };

                process.cwd = function () {
                    return "/";
                };
                process.chdir = function (dir) {
                    throw new Error("process.chdir is not supported");
                };
                process.umask = function () {
                    return 0;
                };
            },
            {},
        ],
        103: [
            function (require, module, exports) {
                (function (global) {
                    (function () {
                        /*! https://mths.be/punycode v1.4.1 by @mathias */
                        (function (root) {
                            /** Detect free variables */
                            var freeExports =
                                typeof exports == "object" &&
                                exports &&
                                !exports.nodeType &&
                                exports;
                            var freeModule =
                                typeof module == "object" &&
                                module &&
                                !module.nodeType &&
                                module;
                            var freeGlobal =
                                typeof global == "object" && global;
                            if (
                                freeGlobal.global === freeGlobal ||
                                freeGlobal.window === freeGlobal ||
                                freeGlobal.self === freeGlobal
                            ) {
                                root = freeGlobal;
                            }

                            /**
                             * The `punycode` object.
                             * @name punycode
                             * @type Object
                             */
                            var punycode,
                                /** Highest positive signed 32-bit float value */
                                maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
                                /** Bootstring parameters */
                                base = 36,
                                tMin = 1,
                                tMax = 26,
                                skew = 38,
                                damp = 700,
                                initialBias = 72,
                                initialN = 128, // 0x80
                                delimiter = "-", // '\x2D'
                                /** Regular expressions */
                                regexPunycode = /^xn--/,
                                regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
                                regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
                                /** Error messages */
                                errors = {
                                    overflow:
                                        "Overflow: input needs wider integers to process",
                                    "not-basic":
                                        "Illegal input >= 0x80 (not a basic code point)",
                                    "invalid-input": "Invalid input",
                                },
                                /** Convenience shortcuts */
                                baseMinusTMin = base - tMin,
                                floor = Math.floor,
                                stringFromCharCode = String.fromCharCode,
                                /** Temporary variable */
                                key;

                            /*--------------------------------------------------------------------------*/

                            /**
                             * A generic error utility function.
                             * @private
                             * @param {String} type The error type.
                             * @returns {Error} Throws a `RangeError` with the applicable error message.
                             */
                            function error(type) {
                                throw new RangeError(errors[type]);
                            }

                            /**
                             * A generic `Array#map` utility function.
                             * @private
                             * @param {Array} array The array to iterate over.
                             * @param {Function} callback The function that gets called for every array
                             * item.
                             * @returns {Array} A new array of values returned by the callback function.
                             */
                            function map(array, fn) {
                                var length = array.length;
                                var result = [];
                                while (length--) {
                                    result[length] = fn(array[length]);
                                }
                                return result;
                            }

                            /**
                             * A simple `Array#map`-like wrapper to work with domain name strings or email
                             * addresses.
                             * @private
                             * @param {String} domain The domain name or email address.
                             * @param {Function} callback The function that gets called for every
                             * character.
                             * @returns {Array} A new string of characters returned by the callback
                             * function.
                             */
                            function mapDomain(string, fn) {
                                var parts = string.split("@");
                                var result = "";
                                if (parts.length > 1) {
                                    // In email addresses, only the domain name should be punycoded. Leave
                                    // the local part (i.e. everything up to `@`) intact.
                                    result = parts[0] + "@";
                                    string = parts[1];
                                }
                                // Avoid `split(regex)` for IE8 compatibility. See #17.
                                string = string.replace(
                                    regexSeparators,
                                    "\x2E"
                                );
                                var labels = string.split(".");
                                var encoded = map(labels, fn).join(".");
                                return result + encoded;
                            }

                            /**
                             * Creates an array containing the numeric code points of each Unicode
                             * character in the string. While JavaScript uses UCS-2 internally,
                             * this function will convert a pair of surrogate halves (each of which
                             * UCS-2 exposes as separate characters) into a single code point,
                             * matching UTF-16.
                             * @see `punycode.ucs2.encode`
                             * @see <https://mathiasbynens.be/notes/javascript-encoding>
                             * @memberOf punycode.ucs2
                             * @name decode
                             * @param {String} string The Unicode input string (UCS-2).
                             * @returns {Array} The new array of code points.
                             */
                            function ucs2decode(string) {
                                var output = [],
                                    counter = 0,
                                    length = string.length,
                                    value,
                                    extra;
                                while (counter < length) {
                                    value = string.charCodeAt(counter++);
                                    if (
                                        value >= 0xd800 &&
                                        value <= 0xdbff &&
                                        counter < length
                                    ) {
                                        // high surrogate, and there is a next character
                                        extra = string.charCodeAt(counter++);
                                        if ((extra & 0xfc00) == 0xdc00) {
                                            // low surrogate
                                            output.push(
                                                ((value & 0x3ff) << 10) +
                                                    (extra & 0x3ff) +
                                                    0x10000
                                            );
                                        } else {
                                            // unmatched surrogate; only append this code unit, in case the next
                                            // code unit is the high surrogate of a surrogate pair
                                            output.push(value);
                                            counter--;
                                        }
                                    } else {
                                        output.push(value);
                                    }
                                }
                                return output;
                            }

                            /**
                             * Creates a string based on an array of numeric code points.
                             * @see `punycode.ucs2.decode`
                             * @memberOf punycode.ucs2
                             * @name encode
                             * @param {Array} codePoints The array of numeric code points.
                             * @returns {String} The new Unicode string (UCS-2).
                             */
                            function ucs2encode(array) {
                                return map(array, function (value) {
                                    var output = "";
                                    if (value > 0xffff) {
                                        value -= 0x10000;
                                        output += stringFromCharCode(
                                            ((value >>> 10) & 0x3ff) | 0xd800
                                        );
                                        value = 0xdc00 | (value & 0x3ff);
                                    }
                                    output += stringFromCharCode(value);
                                    return output;
                                }).join("");
                            }

                            /**
                             * Converts a basic code point into a digit/integer.
                             * @see `digitToBasic()`
                             * @private
                             * @param {Number} codePoint The basic numeric code point value.
                             * @returns {Number} The numeric value of a basic code point (for use in
                             * representing integers) in the range `0` to `base - 1`, or `base` if
                             * the code point does not represent a value.
                             */
                            function basicToDigit(codePoint) {
                                if (codePoint - 48 < 10) {
                                    return codePoint - 22;
                                }
                                if (codePoint - 65 < 26) {
                                    return codePoint - 65;
                                }
                                if (codePoint - 97 < 26) {
                                    return codePoint - 97;
                                }
                                return base;
                            }

                            /**
                             * Converts a digit/integer into a basic code point.
                             * @see `basicToDigit()`
                             * @private
                             * @param {Number} digit The numeric value of a basic code point.
                             * @returns {Number} The basic code point whose value (when used for
                             * representing integers) is `digit`, which needs to be in the range
                             * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
                             * used; else, the lowercase form is used. The behavior is undefined
                             * if `flag` is non-zero and `digit` has no uppercase form.
                             */
                            function digitToBasic(digit, flag) {
                                //  0..25 map to ASCII a..z or A..Z
                                // 26..35 map to ASCII 0..9
                                return (
                                    digit +
                                    22 +
                                    75 * (digit < 26) -
                                    ((flag != 0) << 5)
                                );
                            }

                            /**
                             * Bias adaptation function as per section 3.4 of RFC 3492.
                             * https://tools.ietf.org/html/rfc3492#section-3.4
                             * @private
                             */
                            function adapt(delta, numPoints, firstTime) {
                                var k = 0;
                                delta = firstTime
                                    ? floor(delta / damp)
                                    : delta >> 1;
                                delta += floor(delta / numPoints);
                                for (
                                    ;
                                    /* no initialization */ delta >
                                    (baseMinusTMin * tMax) >> 1;
                                    k += base
                                ) {
                                    delta = floor(delta / baseMinusTMin);
                                }
                                return floor(
                                    k +
                                        ((baseMinusTMin + 1) * delta) /
                                            (delta + skew)
                                );
                            }

                            /**
                             * Converts a Punycode string of ASCII-only symbols to a string of Unicode
                             * symbols.
                             * @memberOf punycode
                             * @param {String} input The Punycode string of ASCII-only symbols.
                             * @returns {String} The resulting string of Unicode symbols.
                             */
                            function decode(input) {
                                // Don't use UCS-2
                                var output = [],
                                    inputLength = input.length,
                                    out,
                                    i = 0,
                                    n = initialN,
                                    bias = initialBias,
                                    basic,
                                    j,
                                    index,
                                    oldi,
                                    w,
                                    k,
                                    digit,
                                    t,
                                    /** Cached calculation results */
                                    baseMinusT;

                                // Handle the basic code points: let `basic` be the number of input code
                                // points before the last delimiter, or `0` if there is none, then copy
                                // the first basic code points to the output.

                                basic = input.lastIndexOf(delimiter);
                                if (basic < 0) {
                                    basic = 0;
                                }

                                for (j = 0; j < basic; ++j) {
                                    // if it's not a basic code point
                                    if (input.charCodeAt(j) >= 0x80) {
                                        error("not-basic");
                                    }
                                    output.push(input.charCodeAt(j));
                                }

                                // Main decoding loop: start just after the last delimiter if any basic code
                                // points were copied; start at the beginning otherwise.

                                for (
                                    index = basic > 0 ? basic + 1 : 0;
                                    index <
                                    inputLength /* no final expression */;

                                ) {
                                    // `index` is the index of the next character to be consumed.
                                    // Decode a generalized variable-length integer into `delta`,
                                    // which gets added to `i`. The overflow checking is easier
                                    // if we increase `i` as we go, then subtract off its starting
                                    // value at the end to obtain `delta`.
                                    for (
                                        oldi = i,
                                            w = 1,
                                            k = base /* no condition */;
                                        ;
                                        k += base
                                    ) {
                                        if (index >= inputLength) {
                                            error("invalid-input");
                                        }

                                        digit = basicToDigit(
                                            input.charCodeAt(index++)
                                        );

                                        if (
                                            digit >= base ||
                                            digit > floor((maxInt - i) / w)
                                        ) {
                                            error("overflow");
                                        }

                                        i += digit * w;
                                        t =
                                            k <= bias
                                                ? tMin
                                                : k >= bias + tMax
                                                ? tMax
                                                : k - bias;

                                        if (digit < t) {
                                            break;
                                        }

                                        baseMinusT = base - t;
                                        if (w > floor(maxInt / baseMinusT)) {
                                            error("overflow");
                                        }

                                        w *= baseMinusT;
                                    }

                                    out = output.length + 1;
                                    bias = adapt(i - oldi, out, oldi == 0);

                                    // `i` was supposed to wrap around from `out` to `0`,
                                    // incrementing `n` each time, so we'll fix that now:
                                    if (floor(i / out) > maxInt - n) {
                                        error("overflow");
                                    }

                                    n += floor(i / out);
                                    i %= out;

                                    // Insert `n` at position `i` of the output
                                    output.splice(i++, 0, n);
                                }

                                return ucs2encode(output);
                            }

                            /**
                             * Converts a string of Unicode symbols (e.g. a domain name label) to a
                             * Punycode string of ASCII-only symbols.
                             * @memberOf punycode
                             * @param {String} input The string of Unicode symbols.
                             * @returns {String} The resulting Punycode string of ASCII-only symbols.
                             */
                            function encode(input) {
                                var n,
                                    delta,
                                    handledCPCount,
                                    basicLength,
                                    bias,
                                    j,
                                    m,
                                    q,
                                    k,
                                    t,
                                    currentValue,
                                    output = [],
                                    /** `inputLength` will hold the number of code points in `input`. */
                                    inputLength,
                                    /** Cached calculation results */
                                    handledCPCountPlusOne,
                                    baseMinusT,
                                    qMinusT;

                                // Convert the input in UCS-2 to Unicode
                                input = ucs2decode(input);

                                // Cache the length
                                inputLength = input.length;

                                // Initialize the state
                                n = initialN;
                                delta = 0;
                                bias = initialBias;

                                // Handle the basic code points
                                for (j = 0; j < inputLength; ++j) {
                                    currentValue = input[j];
                                    if (currentValue < 0x80) {
                                        output.push(
                                            stringFromCharCode(currentValue)
                                        );
                                    }
                                }

                                handledCPCount = basicLength = output.length;

                                // `handledCPCount` is the number of code points that have been handled;
                                // `basicLength` is the number of basic code points.

                                // Finish the basic string - if it is not empty - with a delimiter
                                if (basicLength) {
                                    output.push(delimiter);
                                }

                                // Main encoding loop:
                                while (handledCPCount < inputLength) {
                                    // All non-basic code points < n have been handled already. Find the next
                                    // larger one:
                                    for (
                                        m = maxInt, j = 0;
                                        j < inputLength;
                                        ++j
                                    ) {
                                        currentValue = input[j];
                                        if (
                                            currentValue >= n &&
                                            currentValue < m
                                        ) {
                                            m = currentValue;
                                        }
                                    }

                                    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
                                    // but guard against overflow
                                    handledCPCountPlusOne = handledCPCount + 1;
                                    if (
                                        m - n >
                                        floor(
                                            (maxInt - delta) /
                                                handledCPCountPlusOne
                                        )
                                    ) {
                                        error("overflow");
                                    }

                                    delta += (m - n) * handledCPCountPlusOne;
                                    n = m;

                                    for (j = 0; j < inputLength; ++j) {
                                        currentValue = input[j];

                                        if (
                                            currentValue < n &&
                                            ++delta > maxInt
                                        ) {
                                            error("overflow");
                                        }

                                        if (currentValue == n) {
                                            // Represent delta as a generalized variable-length integer
                                            for (
                                                q = delta,
                                                    k = base /* no condition */;
                                                ;
                                                k += base
                                            ) {
                                                t =
                                                    k <= bias
                                                        ? tMin
                                                        : k >= bias + tMax
                                                        ? tMax
                                                        : k - bias;
                                                if (q < t) {
                                                    break;
                                                }
                                                qMinusT = q - t;
                                                baseMinusT = base - t;
                                                output.push(
                                                    stringFromCharCode(
                                                        digitToBasic(
                                                            t +
                                                                (qMinusT %
                                                                    baseMinusT),
                                                            0
                                                        )
                                                    )
                                                );
                                                q = floor(qMinusT / baseMinusT);
                                            }

                                            output.push(
                                                stringFromCharCode(
                                                    digitToBasic(q, 0)
                                                )
                                            );
                                            bias = adapt(
                                                delta,
                                                handledCPCountPlusOne,
                                                handledCPCount == basicLength
                                            );
                                            delta = 0;
                                            ++handledCPCount;
                                        }
                                    }

                                    ++delta;
                                    ++n;
                                }
                                return output.join("");
                            }

                            /**
                             * Converts a Punycode string representing a domain name or an email address
                             * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
                             * it doesn't matter if you call it on a string that has already been
                             * converted to Unicode.
                             * @memberOf punycode
                             * @param {String} input The Punycoded domain name or email address to
                             * convert to Unicode.
                             * @returns {String} The Unicode representation of the given Punycode
                             * string.
                             */
                            function toUnicode(input) {
                                return mapDomain(input, function (string) {
                                    return regexPunycode.test(string)
                                        ? decode(string.slice(4).toLowerCase())
                                        : string;
                                });
                            }

                            /**
                             * Converts a Unicode string representing a domain name or an email address to
                             * Punycode. Only the non-ASCII parts of the domain name will be converted,
                             * i.e. it doesn't matter if you call it with a domain that's already in
                             * ASCII.
                             * @memberOf punycode
                             * @param {String} input The domain name or email address to convert, as a
                             * Unicode string.
                             * @returns {String} The Punycode representation of the given domain name or
                             * email address.
                             */
                            function toASCII(input) {
                                return mapDomain(input, function (string) {
                                    return regexNonASCII.test(string)
                                        ? "xn--" + encode(string)
                                        : string;
                                });
                            }

                            /*--------------------------------------------------------------------------*/

                            /** Define the public API */
                            punycode = {
                                /**
                                 * A string representing the current Punycode.js version number.
                                 * @memberOf punycode
                                 * @type String
                                 */
                                version: "1.4.1",
                                /**
                                 * An object of methods to convert from JavaScript's internal character
                                 * representation (UCS-2) to Unicode code points, and back.
                                 * @see <https://mathiasbynens.be/notes/javascript-encoding>
                                 * @memberOf punycode
                                 * @type Object
                                 */
                                ucs2: {
                                    decode: ucs2decode,
                                    encode: ucs2encode,
                                },
                                decode: decode,
                                encode: encode,
                                toASCII: toASCII,
                                toUnicode: toUnicode,
                            };

                            /** Expose `punycode` */
                            // Some AMD build optimizers, like r.js, check for specific condition patterns
                            // like the following:
                            if (
                                typeof define == "function" &&
                                typeof define.amd == "object" &&
                                define.amd
                            ) {
                                define("punycode", function () {
                                    return punycode;
                                });
                            } else if (freeExports && freeModule) {
                                if (module.exports == freeExports) {
                                    // in Node.js, io.js, or RingoJS v0.8.0+
                                    freeModule.exports = punycode;
                                } else {
                                    // in Narwhal or RingoJS v0.7.0-
                                    for (key in punycode) {
                                        punycode.hasOwnProperty(key) &&
                                            (freeExports[key] = punycode[key]);
                                    }
                                }
                            } else {
                                // in Rhino or a web browser
                                root.punycode = punycode;
                            }
                        })(this);
                    }.call(this));
                }.call(
                    this,
                    typeof global !== "undefined"
                        ? global
                        : typeof self !== "undefined"
                        ? self
                        : typeof window !== "undefined"
                        ? window
                        : {}
                ));
            },
            {},
        ],
        104: [
            function (require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                "use strict";

                // If obj.hasOwnProperty has been overridden, then calling
                // obj.hasOwnProperty(prop) will break.
                // See: https://github.com/joyent/node/issues/1707
                function hasOwnProperty(obj, prop) {
                    return Object.prototype.hasOwnProperty.call(obj, prop);
                }

                module.exports = function (qs, sep, eq, options) {
                    sep = sep || "&";
                    eq = eq || "=";
                    var obj = {};

                    if (typeof qs !== "string" || qs.length === 0) {
                        return obj;
                    }

                    var regexp = /\+/g;
                    qs = qs.split(sep);

                    var maxKeys = 1000;
                    if (options && typeof options.maxKeys === "number") {
                        maxKeys = options.maxKeys;
                    }

                    var len = qs.length;
                    // maxKeys <= 0 means that we should not limit keys count
                    if (maxKeys > 0 && len > maxKeys) {
                        len = maxKeys;
                    }

                    for (var i = 0; i < len; ++i) {
                        var x = qs[i].replace(regexp, "%20"),
                            idx = x.indexOf(eq),
                            kstr,
                            vstr,
                            k,
                            v;

                        if (idx >= 0) {
                            kstr = x.substr(0, idx);
                            vstr = x.substr(idx + 1);
                        } else {
                            kstr = x;
                            vstr = "";
                        }

                        k = decodeURIComponent(kstr);
                        v = decodeURIComponent(vstr);

                        if (!hasOwnProperty(obj, k)) {
                            obj[k] = v;
                        } else if (isArray(obj[k])) {
                            obj[k].push(v);
                        } else {
                            obj[k] = [obj[k], v];
                        }
                    }

                    return obj;
                };

                var isArray =
                    Array.isArray ||
                    function (xs) {
                        return (
                            Object.prototype.toString.call(xs) ===
                            "[object Array]"
                        );
                    };
            },
            {},
        ],
        105: [
            function (require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                "use strict";

                var stringifyPrimitive = function (v) {
                    switch (typeof v) {
                        case "string":
                            return v;

                        case "boolean":
                            return v ? "true" : "false";

                        case "number":
                            return isFinite(v) ? v : "";

                        default:
                            return "";
                    }
                };

                module.exports = function (obj, sep, eq, name) {
                    sep = sep || "&";
                    eq = eq || "=";
                    if (obj === null) {
                        obj = undefined;
                    }

                    if (typeof obj === "object") {
                        return map(objectKeys(obj), function (k) {
                            var ks =
                                encodeURIComponent(stringifyPrimitive(k)) + eq;
                            if (isArray(obj[k])) {
                                return map(obj[k], function (v) {
                                    return (
                                        ks +
                                        encodeURIComponent(
                                            stringifyPrimitive(v)
                                        )
                                    );
                                }).join(sep);
                            } else {
                                return (
                                    ks +
                                    encodeURIComponent(
                                        stringifyPrimitive(obj[k])
                                    )
                                );
                            }
                        }).join(sep);
                    }

                    if (!name) return "";
                    return (
                        encodeURIComponent(stringifyPrimitive(name)) +
                        eq +
                        encodeURIComponent(stringifyPrimitive(obj))
                    );
                };

                var isArray =
                    Array.isArray ||
                    function (xs) {
                        return (
                            Object.prototype.toString.call(xs) ===
                            "[object Array]"
                        );
                    };

                function map(xs, f) {
                    if (xs.map) return xs.map(f);
                    var res = [];
                    for (var i = 0; i < xs.length; i++) {
                        res.push(f(xs[i], i));
                    }
                    return res;
                }

                var objectKeys =
                    Object.keys ||
                    function (obj) {
                        var res = [];
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key))
                                res.push(key);
                        }
                        return res;
                    };
            },
            {},
        ],
        106: [
            function (require, module, exports) {
                "use strict";

                exports.decode = exports.parse = require("./decode");
                exports.encode = exports.stringify = require("./encode");
            },
            { "./decode": 104, "./encode": 105 },
        ],
        107: [
            function (require, module, exports) {
                module.exports = require("./lib/_stream_duplex.js");
            },
            { "./lib/_stream_duplex.js": 108 },
        ],
        108: [
            function (require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                // a duplex stream is just a stream that is both readable and writable.
                // Since JS doesn't have multiple prototypal inheritance, this class
                // prototypally inherits from Readable, and then parasitically from
                // Writable.

                "use strict";

                /*<replacement>*/

                var pna = require("process-nextick-args");
                /*</replacement>*/

                /*<replacement>*/
                var objectKeys =
                    Object.keys ||
                    function (obj) {
                        var keys = [];
                        for (var key in obj) {
                            keys.push(key);
                        }
                        return keys;
                    };
                /*</replacement>*/

                module.exports = Duplex;

                /*<replacement>*/
                var util = Object.create(require("core-util-is"));
                util.inherits = require("inherits");
                /*</replacement>*/

                var Readable = require("./_stream_readable");
                var Writable = require("./_stream_writable");

                util.inherits(Duplex, Readable);

                {
                    // avoid scope creep, the keys array can then be collected
                    var keys = objectKeys(Writable.prototype);
                    for (var v = 0; v < keys.length; v++) {
                        var method = keys[v];
                        if (!Duplex.prototype[method])
                            Duplex.prototype[method] =
                                Writable.prototype[method];
                    }
                }

                function Duplex(options) {
                    if (!(this instanceof Duplex)) return new Duplex(options);

                    Readable.call(this, options);
                    Writable.call(this, options);

                    if (options && options.readable === false)
                        this.readable = false;

                    if (options && options.writable === false)
                        this.writable = false;

                    this.allowHalfOpen = true;
                    if (options && options.allowHalfOpen === false)
                        this.allowHalfOpen = false;

                    this.once("end", onend);
                }

                Object.defineProperty(
                    Duplex.prototype,
                    "writableHighWaterMark",
                    {
                        // making it explicit this property is not enumerable
                        // because otherwise some prototype manipulation in
                        // userland will fail
                        enumerable: false,
                        get: function () {
                            return this._writableState.highWaterMark;
                        },
                    }
                );

                // the no-half-open enforcer
                function onend() {
                    // if we allow half-open state, or if the writable side ended,
                    // then we're ok.
                    if (this.allowHalfOpen || this._writableState.ended) return;

                    // no more data can be written.
                    // But allow more writes to happen in this tick.
                    pna.nextTick(onEndNT, this);
                }

                function onEndNT(self) {
                    self.end();
                }

                Object.defineProperty(Duplex.prototype, "destroyed", {
                    get: function () {
                        if (
                            this._readableState === undefined ||
                            this._writableState === undefined
                        ) {
                            return false;
                        }
                        return (
                            this._readableState.destroyed &&
                            this._writableState.destroyed
                        );
                    },
                    set: function (value) {
                        // we ignore the value if the stream
                        // has not been initialized yet
                        if (
                            this._readableState === undefined ||
                            this._writableState === undefined
                        ) {
                            return;
                        }

                        // backward compatibility, the user is explicitly
                        // managing destroyed
                        this._readableState.destroyed = value;
                        this._writableState.destroyed = value;
                    },
                });

                Duplex.prototype._destroy = function (err, cb) {
                    this.push(null);
                    this.end();

                    pna.nextTick(cb, err);
                };
            },
            {
                "./_stream_readable": 110,
                "./_stream_writable": 112,
                "core-util-is": 83,
                inherits: 87,
                "process-nextick-args": 101,
            },
        ],
        109: [
            function (require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                // a passthrough stream.
                // basically just the most minimal sort of Transform stream.
                // Every written chunk gets output as-is.

                "use strict";

                module.exports = PassThrough;

                var Transform = require("./_stream_transform");

                /*<replacement>*/
                var util = Object.create(require("core-util-is"));
                util.inherits = require("inherits");
                /*</replacement>*/

                util.inherits(PassThrough, Transform);

                function PassThrough(options) {
                    if (!(this instanceof PassThrough))
                        return new PassThrough(options);

                    Transform.call(this, options);
                }

                PassThrough.prototype._transform = function (
                    chunk,
                    encoding,
                    cb
                ) {
                    cb(null, chunk);
                };
            },
            { "./_stream_transform": 111, "core-util-is": 83, inherits: 87 },
        ],
        110: [
            function (require, module, exports) {
                (function (process, global) {
                    (function () {
                        // Copyright Joyent, Inc. and other Node contributors.
                        //
                        // Permission is hereby granted, free of charge, to any person obtaining a
                        // copy of this software and associated documentation files (the
                        // "Software"), to deal in the Software without restriction, including
                        // without limitation the rights to use, copy, modify, merge, publish,
                        // distribute, sublicense, and/or sell copies of the Software, and to permit
                        // persons to whom the Software is furnished to do so, subject to the
                        // following conditions:
                        //
                        // The above copyright notice and this permission notice shall be included
                        // in all copies or substantial portions of the Software.
                        //
                        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                        // USE OR OTHER DEALINGS IN THE SOFTWARE.

                        "use strict";

                        /*<replacement>*/

                        var pna = require("process-nextick-args");
                        /*</replacement>*/

                        module.exports = Readable;

                        /*<replacement>*/
                        var isArray = require("isarray");
                        /*</replacement>*/

                        /*<replacement>*/
                        var Duplex;
                        /*</replacement>*/

                        Readable.ReadableState = ReadableState;

                        /*<replacement>*/
                        var EE = require("events").EventEmitter;

                        var EElistenerCount = function (emitter, type) {
                            return emitter.listeners(type).length;
                        };
                        /*</replacement>*/

                        /*<replacement>*/
                        var Stream = require("./internal/streams/stream");
                        /*</replacement>*/

                        /*<replacement>*/

                        var Buffer = require("safe-buffer").Buffer;
                        var OurUint8Array = global.Uint8Array || function () {};
                        function _uint8ArrayToBuffer(chunk) {
                            return Buffer.from(chunk);
                        }
                        function _isUint8Array(obj) {
                            return (
                                Buffer.isBuffer(obj) ||
                                obj instanceof OurUint8Array
                            );
                        }

                        /*</replacement>*/

                        /*<replacement>*/
                        var util = Object.create(require("core-util-is"));
                        util.inherits = require("inherits");
                        /*</replacement>*/

                        /*<replacement>*/
                        var debugUtil = require("util");
                        var debug = void 0;
                        if (debugUtil && debugUtil.debuglog) {
                            debug = debugUtil.debuglog("stream");
                        } else {
                            debug = function () {};
                        }
                        /*</replacement>*/

                        var BufferList = require("./internal/streams/BufferList");
                        var destroyImpl = require("./internal/streams/destroy");
                        var StringDecoder;

                        util.inherits(Readable, Stream);

                        var kProxyEvents = [
                            "error",
                            "close",
                            "destroy",
                            "pause",
                            "resume",
                        ];

                        function prependListener(emitter, event, fn) {
                            // Sadly this is not cacheable as some libraries bundle their own
                            // event emitter implementation with them.
                            if (typeof emitter.prependListener === "function")
                                return emitter.prependListener(event, fn);

                            // This is a hack to make sure that our error handler is attached before any
                            // userland ones.  NEVER DO THIS. This is here only because this code needs
                            // to continue to work with older versions of Node.js that do not include
                            // the prependListener() method. The goal is to eventually remove this hack.
                            if (!emitter._events || !emitter._events[event])
                                emitter.on(event, fn);
                            else if (isArray(emitter._events[event]))
                                emitter._events[event].unshift(fn);
                            else
                                emitter._events[event] = [
                                    fn,
                                    emitter._events[event],
                                ];
                        }

                        function ReadableState(options, stream) {
                            Duplex = Duplex || require("./_stream_duplex");

                            options = options || {};

                            // Duplex streams are both readable and writable, but share
                            // the same options object.
                            // However, some cases require setting options to different
                            // values for the readable and the writable sides of the duplex stream.
                            // These options can be provided separately as readableXXX and writableXXX.
                            var isDuplex = stream instanceof Duplex;

                            // object stream flag. Used to make read(n) ignore n and to
                            // make all the buffer merging and length checks go away
                            this.objectMode = !!options.objectMode;

                            if (isDuplex)
                                this.objectMode =
                                    this.objectMode ||
                                    !!options.readableObjectMode;

                            // the point at which it stops calling _read() to fill the buffer
                            // Note: 0 is a valid value, means "don't call _read preemptively ever"
                            var hwm = options.highWaterMark;
                            var readableHwm = options.readableHighWaterMark;
                            var defaultHwm = this.objectMode ? 16 : 16 * 1024;

                            if (hwm || hwm === 0) this.highWaterMark = hwm;
                            else if (
                                isDuplex &&
                                (readableHwm || readableHwm === 0)
                            )
                                this.highWaterMark = readableHwm;
                            else this.highWaterMark = defaultHwm;

                            // cast to ints.
                            this.highWaterMark = Math.floor(this.highWaterMark);

                            // A linked list is used to store data chunks instead of an array because the
                            // linked list can remove elements from the beginning faster than
                            // array.shift()
                            this.buffer = new BufferList();
                            this.length = 0;
                            this.pipes = null;
                            this.pipesCount = 0;
                            this.flowing = null;
                            this.ended = false;
                            this.endEmitted = false;
                            this.reading = false;

                            // a flag to be able to tell if the event 'readable'/'data' is emitted
                            // immediately, or on a later tick.  We set this to true at first, because
                            // any actions that shouldn't happen until "later" should generally also
                            // not happen before the first read call.
                            this.sync = true;

                            // whenever we return null, then we set a flag to say
                            // that we're awaiting a 'readable' event emission.
                            this.needReadable = false;
                            this.emittedReadable = false;
                            this.readableListening = false;
                            this.resumeScheduled = false;

                            // has it been destroyed
                            this.destroyed = false;

                            // Crypto is kind of old and crusty.  Historically, its default string
                            // encoding is 'binary' so we have to make this configurable.
                            // Everything else in the universe uses 'utf8', though.
                            this.defaultEncoding =
                                options.defaultEncoding || "utf8";

                            // the number of writers that are awaiting a drain event in .pipe()s
                            this.awaitDrain = 0;

                            // if true, a maybeReadMore has been scheduled
                            this.readingMore = false;

                            this.decoder = null;
                            this.encoding = null;
                            if (options.encoding) {
                                if (!StringDecoder)
                                    StringDecoder =
                                        require("string_decoder/").StringDecoder;
                                this.decoder = new StringDecoder(
                                    options.encoding
                                );
                                this.encoding = options.encoding;
                            }
                        }

                        function Readable(options) {
                            Duplex = Duplex || require("./_stream_duplex");

                            if (!(this instanceof Readable))
                                return new Readable(options);

                            this._readableState = new ReadableState(
                                options,
                                this
                            );

                            // legacy
                            this.readable = true;

                            if (options) {
                                if (typeof options.read === "function")
                                    this._read = options.read;

                                if (typeof options.destroy === "function")
                                    this._destroy = options.destroy;
                            }

                            Stream.call(this);
                        }

                        Object.defineProperty(Readable.prototype, "destroyed", {
                            get: function () {
                                if (this._readableState === undefined) {
                                    return false;
                                }
                                return this._readableState.destroyed;
                            },
                            set: function (value) {
                                // we ignore the value if the stream
                                // has not been initialized yet
                                if (!this._readableState) {
                                    return;
                                }

                                // backward compatibility, the user is explicitly
                                // managing destroyed
                                this._readableState.destroyed = value;
                            },
                        });

                        Readable.prototype.destroy = destroyImpl.destroy;
                        Readable.prototype._undestroy = destroyImpl.undestroy;
                        Readable.prototype._destroy = function (err, cb) {
                            this.push(null);
                            cb(err);
                        };

                        // Manually shove something into the read() buffer.
                        // This returns true if the highWaterMark has not been hit yet,
                        // similar to how Writable.write() returns true if you should
                        // write() some more.
                        Readable.prototype.push = function (chunk, encoding) {
                            var state = this._readableState;
                            var skipChunkCheck;

                            if (!state.objectMode) {
                                if (typeof chunk === "string") {
                                    encoding =
                                        encoding || state.defaultEncoding;
                                    if (encoding !== state.encoding) {
                                        chunk = Buffer.from(chunk, encoding);
                                        encoding = "";
                                    }
                                    skipChunkCheck = true;
                                }
                            } else {
                                skipChunkCheck = true;
                            }

                            return readableAddChunk(
                                this,
                                chunk,
                                encoding,
                                false,
                                skipChunkCheck
                            );
                        };

                        // Unshift should *always* be something directly out of read()
                        Readable.prototype.unshift = function (chunk) {
                            return readableAddChunk(
                                this,
                                chunk,
                                null,
                                true,
                                false
                            );
                        };

                        function readableAddChunk(
                            stream,
                            chunk,
                            encoding,
                            addToFront,
                            skipChunkCheck
                        ) {
                            var state = stream._readableState;
                            if (chunk === null) {
                                state.reading = false;
                                onEofChunk(stream, state);
                            } else {
                                var er;
                                if (!skipChunkCheck)
                                    er = chunkInvalid(state, chunk);
                                if (er) {
                                    stream.emit("error", er);
                                } else if (
                                    state.objectMode ||
                                    (chunk && chunk.length > 0)
                                ) {
                                    if (
                                        typeof chunk !== "string" &&
                                        !state.objectMode &&
                                        Object.getPrototypeOf(chunk) !==
                                            Buffer.prototype
                                    ) {
                                        chunk = _uint8ArrayToBuffer(chunk);
                                    }

                                    if (addToFront) {
                                        if (state.endEmitted)
                                            stream.emit(
                                                "error",
                                                new Error(
                                                    "stream.unshift() after end event"
                                                )
                                            );
                                        else
                                            addChunk(
                                                stream,
                                                state,
                                                chunk,
                                                true
                                            );
                                    } else if (state.ended) {
                                        stream.emit(
                                            "error",
                                            new Error("stream.push() after EOF")
                                        );
                                    } else {
                                        state.reading = false;
                                        if (state.decoder && !encoding) {
                                            chunk = state.decoder.write(chunk);
                                            if (
                                                state.objectMode ||
                                                chunk.length !== 0
                                            )
                                                addChunk(
                                                    stream,
                                                    state,
                                                    chunk,
                                                    false
                                                );
                                            else maybeReadMore(stream, state);
                                        } else {
                                            addChunk(
                                                stream,
                                                state,
                                                chunk,
                                                false
                                            );
                                        }
                                    }
                                } else if (!addToFront) {
                                    state.reading = false;
                                }
                            }

                            return needMoreData(state);
                        }

                        function addChunk(stream, state, chunk, addToFront) {
                            if (
                                state.flowing &&
                                state.length === 0 &&
                                !state.sync
                            ) {
                                stream.emit("data", chunk);
                                stream.read(0);
                            } else {
                                // update the buffer info.
                                state.length += state.objectMode
                                    ? 1
                                    : chunk.length;
                                if (addToFront) state.buffer.unshift(chunk);
                                else state.buffer.push(chunk);

                                if (state.needReadable) emitReadable(stream);
                            }
                            maybeReadMore(stream, state);
                        }

                        function chunkInvalid(state, chunk) {
                            var er;
                            if (
                                !_isUint8Array(chunk) &&
                                typeof chunk !== "string" &&
                                chunk !== undefined &&
                                !state.objectMode
                            ) {
                                er = new TypeError(
                                    "Invalid non-string/buffer chunk"
                                );
                            }
                            return er;
                        }

                        // if it's past the high water mark, we can push in some more.
                        // Also, if we have no data yet, we can stand some
                        // more bytes.  This is to work around cases where hwm=0,
                        // such as the repl.  Also, if the push() triggered a
                        // readable event, and the user called read(largeNumber) such that
                        // needReadable was set, then we ought to push more, so that another
                        // 'readable' event will be triggered.
                        function needMoreData(state) {
                            return (
                                !state.ended &&
                                (state.needReadable ||
                                    state.length < state.highWaterMark ||
                                    state.length === 0)
                            );
                        }

                        Readable.prototype.isPaused = function () {
                            return this._readableState.flowing === false;
                        };

                        // backwards compatibility.
                        Readable.prototype.setEncoding = function (enc) {
                            if (!StringDecoder)
                                StringDecoder =
                                    require("string_decoder/").StringDecoder;
                            this._readableState.decoder = new StringDecoder(
                                enc
                            );
                            this._readableState.encoding = enc;
                            return this;
                        };

                        // Don't raise the hwm > 8MB
                        var MAX_HWM = 0x800000;
                        function computeNewHighWaterMark(n) {
                            if (n >= MAX_HWM) {
                                n = MAX_HWM;
                            } else {
                                // Get the next highest power of 2 to prevent increasing hwm excessively in
                                // tiny amounts
                                n--;
                                n |= n >>> 1;
                                n |= n >>> 2;
                                n |= n >>> 4;
                                n |= n >>> 8;
                                n |= n >>> 16;
                                n++;
                            }
                            return n;
                        }

                        // This function is designed to be inlinable, so please take care when making
                        // changes to the function body.
                        function howMuchToRead(n, state) {
                            if (n <= 0 || (state.length === 0 && state.ended))
                                return 0;
                            if (state.objectMode) return 1;
                            if (n !== n) {
                                // Only flow one buffer at a time
                                if (state.flowing && state.length)
                                    return state.buffer.head.data.length;
                                else return state.length;
                            }
                            // If we're asking for more than the current hwm, then raise the hwm.
                            if (n > state.highWaterMark)
                                state.highWaterMark =
                                    computeNewHighWaterMark(n);
                            if (n <= state.length) return n;
                            // Don't have enough
                            if (!state.ended) {
                                state.needReadable = true;
                                return 0;
                            }
                            return state.length;
                        }

                        // you can override either this method, or the async _read(n) below.
                        Readable.prototype.read = function (n) {
                            debug("read", n);
                            n = parseInt(n, 10);
                            var state = this._readableState;
                            var nOrig = n;

                            if (n !== 0) state.emittedReadable = false;

                            // if we're doing read(0) to trigger a readable event, but we
                            // already have a bunch of data in the buffer, then just trigger
                            // the 'readable' event and move on.
                            if (
                                n === 0 &&
                                state.needReadable &&
                                (state.length >= state.highWaterMark ||
                                    state.ended)
                            ) {
                                debug(
                                    "read: emitReadable",
                                    state.length,
                                    state.ended
                                );
                                if (state.length === 0 && state.ended)
                                    endReadable(this);
                                else emitReadable(this);
                                return null;
                            }

                            n = howMuchToRead(n, state);

                            // if we've ended, and we're now clear, then finish it up.
                            if (n === 0 && state.ended) {
                                if (state.length === 0) endReadable(this);
                                return null;
                            }

                            // All the actual chunk generation logic needs to be
                            // *below* the call to _read.  The reason is that in certain
                            // synthetic stream cases, such as passthrough streams, _read
                            // may be a completely synchronous operation which may change
                            // the state of the read buffer, providing enough data when
                            // before there was *not* enough.
                            //
                            // So, the steps are:
                            // 1. Figure out what the state of things will be after we do
                            // a read from the buffer.
                            //
                            // 2. If that resulting state will trigger a _read, then call _read.
                            // Note that this may be asynchronous, or synchronous.  Yes, it is
                            // deeply ugly to write APIs this way, but that still doesn't mean
                            // that the Readable class should behave improperly, as streams are
                            // designed to be sync/async agnostic.
                            // Take note if the _read call is sync or async (ie, if the read call
                            // has returned yet), so that we know whether or not it's safe to emit
                            // 'readable' etc.
                            //
                            // 3. Actually pull the requested chunks out of the buffer and return.

                            // if we need a readable event, then we need to do some reading.
                            var doRead = state.needReadable;
                            debug("need readable", doRead);

                            // if we currently have less than the highWaterMark, then also read some
                            if (
                                state.length === 0 ||
                                state.length - n < state.highWaterMark
                            ) {
                                doRead = true;
                                debug("length less than watermark", doRead);
                            }

                            // however, if we've ended, then there's no point, and if we're already
                            // reading, then it's unnecessary.
                            if (state.ended || state.reading) {
                                doRead = false;
                                debug("reading or ended", doRead);
                            } else if (doRead) {
                                debug("do read");
                                state.reading = true;
                                state.sync = true;
                                // if the length is currently zero, then we *need* a readable event.
                                if (state.length === 0)
                                    state.needReadable = true;
                                // call internal read method
                                this._read(state.highWaterMark);
                                state.sync = false;
                                // If _read pushed data synchronously, then `reading` will be false,
                                // and we need to re-evaluate how much data we can return to the user.
                                if (!state.reading)
                                    n = howMuchToRead(nOrig, state);
                            }

                            var ret;
                            if (n > 0) ret = fromList(n, state);
                            else ret = null;

                            if (ret === null) {
                                state.needReadable = true;
                                n = 0;
                            } else {
                                state.length -= n;
                            }

                            if (state.length === 0) {
                                // If we have nothing in the buffer, then we want to know
                                // as soon as we *do* get something into the buffer.
                                if (!state.ended) state.needReadable = true;

                                // If we tried to read() past the EOF, then emit end on the next tick.
                                if (nOrig !== n && state.ended)
                                    endReadable(this);
                            }

                            if (ret !== null) this.emit("data", ret);

                            return ret;
                        };

                        function onEofChunk(stream, state) {
                            if (state.ended) return;
                            if (state.decoder) {
                                var chunk = state.decoder.end();
                                if (chunk && chunk.length) {
                                    state.buffer.push(chunk);
                                    state.length += state.objectMode
                                        ? 1
                                        : chunk.length;
                                }
                            }
                            state.ended = true;

                            // emit 'readable' now to make sure it gets picked up.
                            emitReadable(stream);
                        }

                        // Don't emit readable right away in sync mode, because this can trigger
                        // another read() call => stack overflow.  This way, it might trigger
                        // a nextTick recursion warning, but that's not so bad.
                        function emitReadable(stream) {
                            var state = stream._readableState;
                            state.needReadable = false;
                            if (!state.emittedReadable) {
                                debug("emitReadable", state.flowing);
                                state.emittedReadable = true;
                                if (state.sync)
                                    pna.nextTick(emitReadable_, stream);
                                else emitReadable_(stream);
                            }
                        }

                        function emitReadable_(stream) {
                            debug("emit readable");
                            stream.emit("readable");
                            flow(stream);
                        }

                        // at this point, the user has presumably seen the 'readable' event,
                        // and called read() to consume some data.  that may have triggered
                        // in turn another _read(n) call, in which case reading = true if
                        // it's in progress.
                        // However, if we're not ended, or reading, and the length < hwm,
                        // then go ahead and try to read some more preemptively.
                        function maybeReadMore(stream, state) {
                            if (!state.readingMore) {
                                state.readingMore = true;
                                pna.nextTick(maybeReadMore_, stream, state);
                            }
                        }

                        function maybeReadMore_(stream, state) {
                            var len = state.length;
                            while (
                                !state.reading &&
                                !state.flowing &&
                                !state.ended &&
                                state.length < state.highWaterMark
                            ) {
                                debug("maybeReadMore read 0");
                                stream.read(0);
                                if (len === state.length)
                                    // didn't get any data, stop spinning.
                                    break;
                                else len = state.length;
                            }
                            state.readingMore = false;
                        }

                        // abstract method.  to be overridden in specific implementation classes.
                        // call cb(er, data) where data is <= n in length.
                        // for virtual (non-string, non-buffer) streams, "length" is somewhat
                        // arbitrary, and perhaps not very meaningful.
                        Readable.prototype._read = function (n) {
                            this.emit(
                                "error",
                                new Error("_read() is not implemented")
                            );
                        };

                        Readable.prototype.pipe = function (dest, pipeOpts) {
                            var src = this;
                            var state = this._readableState;

                            switch (state.pipesCount) {
                                case 0:
                                    state.pipes = dest;
                                    break;
                                case 1:
                                    state.pipes = [state.pipes, dest];
                                    break;
                                default:
                                    state.pipes.push(dest);
                                    break;
                            }
                            state.pipesCount += 1;
                            debug(
                                "pipe count=%d opts=%j",
                                state.pipesCount,
                                pipeOpts
                            );

                            var doEnd =
                                (!pipeOpts || pipeOpts.end !== false) &&
                                dest !== process.stdout &&
                                dest !== process.stderr;

                            var endFn = doEnd ? onend : unpipe;
                            if (state.endEmitted) pna.nextTick(endFn);
                            else src.once("end", endFn);

                            dest.on("unpipe", onunpipe);
                            function onunpipe(readable, unpipeInfo) {
                                debug("onunpipe");
                                if (readable === src) {
                                    if (
                                        unpipeInfo &&
                                        unpipeInfo.hasUnpiped === false
                                    ) {
                                        unpipeInfo.hasUnpiped = true;
                                        cleanup();
                                    }
                                }
                            }

                            function onend() {
                                debug("onend");
                                dest.end();
                            }

                            // when the dest drains, it reduces the awaitDrain counter
                            // on the source.  This would be more elegant with a .once()
                            // handler in flow(), but adding and removing repeatedly is
                            // too slow.
                            var ondrain = pipeOnDrain(src);
                            dest.on("drain", ondrain);

                            var cleanedUp = false;
                            function cleanup() {
                                debug("cleanup");
                                // cleanup event handlers once the pipe is broken
                                dest.removeListener("close", onclose);
                                dest.removeListener("finish", onfinish);
                                dest.removeListener("drain", ondrain);
                                dest.removeListener("error", onerror);
                                dest.removeListener("unpipe", onunpipe);
                                src.removeListener("end", onend);
                                src.removeListener("end", unpipe);
                                src.removeListener("data", ondata);

                                cleanedUp = true;

                                // if the reader is waiting for a drain event from this
                                // specific writer, then it would cause it to never start
                                // flowing again.
                                // So, if this is awaiting a drain, then we just call it now.
                                // If we don't know, then assume that we are waiting for one.
                                if (
                                    state.awaitDrain &&
                                    (!dest._writableState ||
                                        dest._writableState.needDrain)
                                )
                                    ondrain();
                            }

                            // If the user pushes more data while we're writing to dest then we'll end up
                            // in ondata again. However, we only want to increase awaitDrain once because
                            // dest will only emit one 'drain' event for the multiple writes.
                            // => Introduce a guard on increasing awaitDrain.
                            var increasedAwaitDrain = false;
                            src.on("data", ondata);
                            function ondata(chunk) {
                                debug("ondata");
                                increasedAwaitDrain = false;
                                var ret = dest.write(chunk);
                                if (false === ret && !increasedAwaitDrain) {
                                    // If the user unpiped during `dest.write()`, it is possible
                                    // to get stuck in a permanently paused state if that write
                                    // also returned false.
                                    // => Check whether `dest` is still a piping destination.
                                    if (
                                        ((state.pipesCount === 1 &&
                                            state.pipes === dest) ||
                                            (state.pipesCount > 1 &&
                                                indexOf(state.pipes, dest) !==
                                                    -1)) &&
                                        !cleanedUp
                                    ) {
                                        debug(
                                            "false write response, pause",
                                            src._readableState.awaitDrain
                                        );
                                        src._readableState.awaitDrain++;
                                        increasedAwaitDrain = true;
                                    }
                                    src.pause();
                                }
                            }

                            // if the dest has an error, then stop piping into it.
                            // however, don't suppress the throwing behavior for this.
                            function onerror(er) {
                                debug("onerror", er);
                                unpipe();
                                dest.removeListener("error", onerror);
                                if (EElistenerCount(dest, "error") === 0)
                                    dest.emit("error", er);
                            }

                            // Make sure our error handler is attached before userland ones.
                            prependListener(dest, "error", onerror);

                            // Both close and finish should trigger unpipe, but only once.
                            function onclose() {
                                dest.removeListener("finish", onfinish);
                                unpipe();
                            }
                            dest.once("close", onclose);
                            function onfinish() {
                                debug("onfinish");
                                dest.removeListener("close", onclose);
                                unpipe();
                            }
                            dest.once("finish", onfinish);

                            function unpipe() {
                                debug("unpipe");
                                src.unpipe(dest);
                            }

                            // tell the dest that it's being piped to
                            dest.emit("pipe", src);

                            // start the flow if it hasn't been started already.
                            if (!state.flowing) {
                                debug("pipe resume");
                                src.resume();
                            }

                            return dest;
                        };

                        function pipeOnDrain(src) {
                            return function () {
                                var state = src._readableState;
                                debug("pipeOnDrain", state.awaitDrain);
                                if (state.awaitDrain) state.awaitDrain--;
                                if (
                                    state.awaitDrain === 0 &&
                                    EElistenerCount(src, "data")
                                ) {
                                    state.flowing = true;
                                    flow(src);
                                }
                            };
                        }

                        Readable.prototype.unpipe = function (dest) {
                            var state = this._readableState;
                            var unpipeInfo = { hasUnpiped: false };

                            // if we're not piping anywhere, then do nothing.
                            if (state.pipesCount === 0) return this;

                            // just one destination.  most common case.
                            if (state.pipesCount === 1) {
                                // passed in one, but it's not the right one.
                                if (dest && dest !== state.pipes) return this;

                                if (!dest) dest = state.pipes;

                                // got a match.
                                state.pipes = null;
                                state.pipesCount = 0;
                                state.flowing = false;
                                if (dest) dest.emit("unpipe", this, unpipeInfo);
                                return this;
                            }

                            // slow case. multiple pipe destinations.

                            if (!dest) {
                                // remove all.
                                var dests = state.pipes;
                                var len = state.pipesCount;
                                state.pipes = null;
                                state.pipesCount = 0;
                                state.flowing = false;

                                for (var i = 0; i < len; i++) {
                                    dests[i].emit("unpipe", this, unpipeInfo);
                                }
                                return this;
                            }

                            // try to find the right one.
                            var index = indexOf(state.pipes, dest);
                            if (index === -1) return this;

                            state.pipes.splice(index, 1);
                            state.pipesCount -= 1;
                            if (state.pipesCount === 1)
                                state.pipes = state.pipes[0];

                            dest.emit("unpipe", this, unpipeInfo);

                            return this;
                        };

                        // set up data events if they are asked for
                        // Ensure readable listeners eventually get something
                        Readable.prototype.on = function (ev, fn) {
                            var res = Stream.prototype.on.call(this, ev, fn);

                            if (ev === "data") {
                                // Start flowing on next tick if stream isn't explicitly paused
                                if (this._readableState.flowing !== false)
                                    this.resume();
                            } else if (ev === "readable") {
                                var state = this._readableState;
                                if (
                                    !state.endEmitted &&
                                    !state.readableListening
                                ) {
                                    state.readableListening =
                                        state.needReadable = true;
                                    state.emittedReadable = false;
                                    if (!state.reading) {
                                        pna.nextTick(nReadingNextTick, this);
                                    } else if (state.length) {
                                        emitReadable(this);
                                    }
                                }
                            }

                            return res;
                        };
                        Readable.prototype.addListener = Readable.prototype.on;

                        function nReadingNextTick(self) {
                            debug("readable nexttick read 0");
                            self.read(0);
                        }

                        // pause() and resume() are remnants of the legacy readable stream API
                        // If the user uses them, then switch into old mode.
                        Readable.prototype.resume = function () {
                            var state = this._readableState;
                            if (!state.flowing) {
                                debug("resume");
                                state.flowing = true;
                                resume(this, state);
                            }
                            return this;
                        };

                        function resume(stream, state) {
                            if (!state.resumeScheduled) {
                                state.resumeScheduled = true;
                                pna.nextTick(resume_, stream, state);
                            }
                        }

                        function resume_(stream, state) {
                            if (!state.reading) {
                                debug("resume read 0");
                                stream.read(0);
                            }

                            state.resumeScheduled = false;
                            state.awaitDrain = 0;
                            stream.emit("resume");
                            flow(stream);
                            if (state.flowing && !state.reading) stream.read(0);
                        }

                        Readable.prototype.pause = function () {
                            debug(
                                "call pause flowing=%j",
                                this._readableState.flowing
                            );
                            if (false !== this._readableState.flowing) {
                                debug("pause");
                                this._readableState.flowing = false;
                                this.emit("pause");
                            }
                            return this;
                        };

                        function flow(stream) {
                            var state = stream._readableState;
                            debug("flow", state.flowing);
                            while (state.flowing && stream.read() !== null) {}
                        }

                        // wrap an old-style stream as the async data source.
                        // This is *not* part of the readable stream interface.
                        // It is an ugly unfortunate mess of history.
                        Readable.prototype.wrap = function (stream) {
                            var _this = this;

                            var state = this._readableState;
                            var paused = false;

                            stream.on("end", function () {
                                debug("wrapped end");
                                if (state.decoder && !state.ended) {
                                    var chunk = state.decoder.end();
                                    if (chunk && chunk.length)
                                        _this.push(chunk);
                                }

                                _this.push(null);
                            });

                            stream.on("data", function (chunk) {
                                debug("wrapped data");
                                if (state.decoder)
                                    chunk = state.decoder.write(chunk);

                                // don't skip over falsy values in objectMode
                                if (
                                    state.objectMode &&
                                    (chunk === null || chunk === undefined)
                                )
                                    return;
                                else if (
                                    !state.objectMode &&
                                    (!chunk || !chunk.length)
                                )
                                    return;

                                var ret = _this.push(chunk);
                                if (!ret) {
                                    paused = true;
                                    stream.pause();
                                }
                            });

                            // proxy all the other methods.
                            // important when wrapping filters and duplexes.
                            for (var i in stream) {
                                if (
                                    this[i] === undefined &&
                                    typeof stream[i] === "function"
                                ) {
                                    this[i] = (function (method) {
                                        return function () {
                                            return stream[method].apply(
                                                stream,
                                                arguments
                                            );
                                        };
                                    })(i);
                                }
                            }

                            // proxy certain important events.
                            for (var n = 0; n < kProxyEvents.length; n++) {
                                stream.on(
                                    kProxyEvents[n],
                                    this.emit.bind(this, kProxyEvents[n])
                                );
                            }

                            // when we try to consume some more bytes, simply unpause the
                            // underlying stream.
                            this._read = function (n) {
                                debug("wrapped _read", n);
                                if (paused) {
                                    paused = false;
                                    stream.resume();
                                }
                            };

                            return this;
                        };

                        Object.defineProperty(
                            Readable.prototype,
                            "readableHighWaterMark",
                            {
                                // making it explicit this property is not enumerable
                                // because otherwise some prototype manipulation in
                                // userland will fail
                                enumerable: false,
                                get: function () {
                                    return this._readableState.highWaterMark;
                                },
                            }
                        );

                        // exposed for testing purposes only.
                        Readable._fromList = fromList;

                        // Pluck off n bytes from an array of buffers.
                        // Length is the combined lengths of all the buffers in the list.
                        // This function is designed to be inlinable, so please take care when making
                        // changes to the function body.
                        function fromList(n, state) {
                            // nothing buffered
                            if (state.length === 0) return null;

                            var ret;
                            if (state.objectMode) ret = state.buffer.shift();
                            else if (!n || n >= state.length) {
                                // read it all, truncate the list
                                if (state.decoder) ret = state.buffer.join("");
                                else if (state.buffer.length === 1)
                                    ret = state.buffer.head.data;
                                else ret = state.buffer.concat(state.length);
                                state.buffer.clear();
                            } else {
                                // read part of list
                                ret = fromListPartial(
                                    n,
                                    state.buffer,
                                    state.decoder
                                );
                            }

                            return ret;
                        }

                        // Extracts only enough buffered data to satisfy the amount requested.
                        // This function is designed to be inlinable, so please take care when making
                        // changes to the function body.
                        function fromListPartial(n, list, hasStrings) {
                            var ret;
                            if (n < list.head.data.length) {
                                // slice is the same for buffers and strings
                                ret = list.head.data.slice(0, n);
                                list.head.data = list.head.data.slice(n);
                            } else if (n === list.head.data.length) {
                                // first chunk is a perfect match
                                ret = list.shift();
                            } else {
                                // result spans more than one buffer
                                ret = hasStrings
                                    ? copyFromBufferString(n, list)
                                    : copyFromBuffer(n, list);
                            }
                            return ret;
                        }

                        // Copies a specified amount of characters from the list of buffered data
                        // chunks.
                        // This function is designed to be inlinable, so please take care when making
                        // changes to the function body.
                        function copyFromBufferString(n, list) {
                            var p = list.head;
                            var c = 1;
                            var ret = p.data;
                            n -= ret.length;
                            while ((p = p.next)) {
                                var str = p.data;
                                var nb = n > str.length ? str.length : n;
                                if (nb === str.length) ret += str;
                                else ret += str.slice(0, n);
                                n -= nb;
                                if (n === 0) {
                                    if (nb === str.length) {
                                        ++c;
                                        if (p.next) list.head = p.next;
                                        else list.head = list.tail = null;
                                    } else {
                                        list.head = p;
                                        p.data = str.slice(nb);
                                    }
                                    break;
                                }
                                ++c;
                            }
                            list.length -= c;
                            return ret;
                        }

                        // Copies a specified amount of bytes from the list of buffered data chunks.
                        // This function is designed to be inlinable, so please take care when making
                        // changes to the function body.
                        function copyFromBuffer(n, list) {
                            var ret = Buffer.allocUnsafe(n);
                            var p = list.head;
                            var c = 1;
                            p.data.copy(ret);
                            n -= p.data.length;
                            while ((p = p.next)) {
                                var buf = p.data;
                                var nb = n > buf.length ? buf.length : n;
                                buf.copy(ret, ret.length - n, 0, nb);
                                n -= nb;
                                if (n === 0) {
                                    if (nb === buf.length) {
                                        ++c;
                                        if (p.next) list.head = p.next;
                                        else list.head = list.tail = null;
                                    } else {
                                        list.head = p;
                                        p.data = buf.slice(nb);
                                    }
                                    break;
                                }
                                ++c;
                            }
                            list.length -= c;
                            return ret;
                        }

                        function endReadable(stream) {
                            var state = stream._readableState;

                            // If we get here before consuming all the bytes, then that is a
                            // bug in node.  Should never happen.
                            if (state.length > 0)
                                throw new Error(
                                    '"endReadable()" called on non-empty stream'
                                );

                            if (!state.endEmitted) {
                                state.ended = true;
                                pna.nextTick(endReadableNT, state, stream);
                            }
                        }

                        function endReadableNT(state, stream) {
                            // Check that we didn't get one last unshift.
                            if (!state.endEmitted && state.length === 0) {
                                state.endEmitted = true;
                                stream.readable = false;
                                stream.emit("end");
                            }
                        }

                        function indexOf(xs, x) {
                            for (var i = 0, l = xs.length; i < l; i++) {
                                if (xs[i] === x) return i;
                            }
                            return -1;
                        }
                    }.call(this));
                }.call(
                    this,
                    require("_process"),
                    typeof global !== "undefined"
                        ? global
                        : typeof self !== "undefined"
                        ? self
                        : typeof window !== "undefined"
                        ? window
                        : {}
                ));
            },
            {
                "./_stream_duplex": 108,
                "./internal/streams/BufferList": 113,
                "./internal/streams/destroy": 114,
                "./internal/streams/stream": 115,
                _process: 102,
                "core-util-is": 83,
                events: 84,
                inherits: 87,
                isarray: 88,
                "process-nextick-args": 101,
                "safe-buffer": 116,
                "string_decoder/": 117,
                util: 77,
            },
        ],
        111: [
            function (require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                // a transform stream is a readable/writable stream where you do
                // something with the data.  Sometimes it's called a "filter",
                // but that's not a great name for it, since that implies a thing where
                // some bits pass through, and others are simply ignored.  (That would
                // be a valid example of a transform, of course.)
                //
                // While the output is causally related to the input, it's not a
                // necessarily symmetric or synchronous transformation.  For example,
                // a zlib stream might take multiple plain-text writes(), and then
                // emit a single compressed chunk some time in the future.
                //
                // Here's how this works:
                //
                // The Transform stream has all the aspects of the readable and writable
                // stream classes.  When you write(chunk), that calls _write(chunk,cb)
                // internally, and returns false if there's a lot of pending writes
                // buffered up.  When you call read(), that calls _read(n) until
                // there's enough pending readable data buffered up.
                //
                // In a transform stream, the written data is placed in a buffer.  When
                // _read(n) is called, it transforms the queued up data, calling the
                // buffered _write cb's as it consumes chunks.  If consuming a single
                // written chunk would result in multiple output chunks, then the first
                // outputted bit calls the readcb, and subsequent chunks just go into
                // the read buffer, and will cause it to emit 'readable' if necessary.
                //
                // This way, back-pressure is actually determined by the reading side,
                // since _read has to be called to start processing a new chunk.  However,
                // a pathological inflate type of transform can cause excessive buffering
                // here.  For example, imagine a stream where every byte of input is
                // interpreted as an integer from 0-255, and then results in that many
                // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
                // 1kb of data being output.  In this case, you could write a very small
                // amount of input, and end up with a very large amount of output.  In
                // such a pathological inflating mechanism, there'd be no way to tell
                // the system to stop doing the transform.  A single 4MB write could
                // cause the system to run out of memory.
                //
                // However, even in such a pathological case, only a single written chunk
                // would be consumed, and then the rest would wait (un-transformed) until
                // the results of the previous transformed chunk were consumed.

                "use strict";

                module.exports = Transform;

                var Duplex = require("./_stream_duplex");

                /*<replacement>*/
                var util = Object.create(require("core-util-is"));
                util.inherits = require("inherits");
                /*</replacement>*/

                util.inherits(Transform, Duplex);

                function afterTransform(er, data) {
                    var ts = this._transformState;
                    ts.transforming = false;

                    var cb = ts.writecb;

                    if (!cb) {
                        return this.emit(
                            "error",
                            new Error("write callback called multiple times")
                        );
                    }

                    ts.writechunk = null;
                    ts.writecb = null;

                    if (data != null)
                        // single equals check for both `null` and `undefined`
                        this.push(data);

                    cb(er);

                    var rs = this._readableState;
                    rs.reading = false;
                    if (rs.needReadable || rs.length < rs.highWaterMark) {
                        this._read(rs.highWaterMark);
                    }
                }

                function Transform(options) {
                    if (!(this instanceof Transform))
                        return new Transform(options);

                    Duplex.call(this, options);

                    this._transformState = {
                        afterTransform: afterTransform.bind(this),
                        needTransform: false,
                        transforming: false,
                        writecb: null,
                        writechunk: null,
                        writeencoding: null,
                    };

                    // start out asking for a readable event once data is transformed.
                    this._readableState.needReadable = true;

                    // we have implemented the _read method, and done the other things
                    // that Readable wants before the first _read call, so unset the
                    // sync guard flag.
                    this._readableState.sync = false;

                    if (options) {
                        if (typeof options.transform === "function")
                            this._transform = options.transform;

                        if (typeof options.flush === "function")
                            this._flush = options.flush;
                    }

                    // When the writable side finishes, then flush out anything remaining.
                    this.on("prefinish", prefinish);
                }

                function prefinish() {
                    var _this = this;

                    if (typeof this._flush === "function") {
                        this._flush(function (er, data) {
                            done(_this, er, data);
                        });
                    } else {
                        done(this, null, null);
                    }
                }

                Transform.prototype.push = function (chunk, encoding) {
                    this._transformState.needTransform = false;
                    return Duplex.prototype.push.call(this, chunk, encoding);
                };

                // This is the part where you do stuff!
                // override this function in implementation classes.
                // 'chunk' is an input chunk.
                //
                // Call `push(newChunk)` to pass along transformed output
                // to the readable side.  You may call 'push' zero or more times.
                //
                // Call `cb(err)` when you are done with this chunk.  If you pass
                // an error, then that'll put the hurt on the whole operation.  If you
                // never call cb(), then you'll never get another chunk.
                Transform.prototype._transform = function (
                    chunk,
                    encoding,
                    cb
                ) {
                    throw new Error("_transform() is not implemented");
                };

                Transform.prototype._write = function (chunk, encoding, cb) {
                    var ts = this._transformState;
                    ts.writecb = cb;
                    ts.writechunk = chunk;
                    ts.writeencoding = encoding;
                    if (!ts.transforming) {
                        var rs = this._readableState;
                        if (
                            ts.needTransform ||
                            rs.needReadable ||
                            rs.length < rs.highWaterMark
                        )
                            this._read(rs.highWaterMark);
                    }
                };

                // Doesn't matter what the args are here.
                // _transform does all the work.
                // That we got here means that the readable side wants more data.
                Transform.prototype._read = function (n) {
                    var ts = this._transformState;

                    if (
                        ts.writechunk !== null &&
                        ts.writecb &&
                        !ts.transforming
                    ) {
                        ts.transforming = true;
                        this._transform(
                            ts.writechunk,
                            ts.writeencoding,
                            ts.afterTransform
                        );
                    } else {
                        // mark that we need a transform, so that any data that comes in
                        // will get processed, now that we've asked for it.
                        ts.needTransform = true;
                    }
                };

                Transform.prototype._destroy = function (err, cb) {
                    var _this2 = this;

                    Duplex.prototype._destroy.call(this, err, function (err2) {
                        cb(err2);
                        _this2.emit("close");
                    });
                };

                function done(stream, er, data) {
                    if (er) return stream.emit("error", er);

                    if (data != null)
                        // single equals check for both `null` and `undefined`
                        stream.push(data);

                    // if there's nothing in the write buffer, then that means
                    // that nothing more will ever be provided
                    if (stream._writableState.length)
                        throw new Error(
                            "Calling transform done when ws.length != 0"
                        );

                    if (stream._transformState.transforming)
                        throw new Error(
                            "Calling transform done when still transforming"
                        );

                    return stream.push(null);
                }
            },
            { "./_stream_duplex": 108, "core-util-is": 83, inherits: 87 },
        ],
        112: [
            function (require, module, exports) {
                (function (process, global, setImmediate) {
                    (function () {
                        // Copyright Joyent, Inc. and other Node contributors.
                        //
                        // Permission is hereby granted, free of charge, to any person obtaining a
                        // copy of this software and associated documentation files (the
                        // "Software"), to deal in the Software without restriction, including
                        // without limitation the rights to use, copy, modify, merge, publish,
                        // distribute, sublicense, and/or sell copies of the Software, and to permit
                        // persons to whom the Software is furnished to do so, subject to the
                        // following conditions:
                        //
                        // The above copyright notice and this permission notice shall be included
                        // in all copies or substantial portions of the Software.
                        //
                        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                        // USE OR OTHER DEALINGS IN THE SOFTWARE.

                        // A bit simpler than readable streams.
                        // Implement an async ._write(chunk, encoding, cb), and it'll handle all
                        // the drain event emission and buffering.

                        "use strict";

                        /*<replacement>*/

                        var pna = require("process-nextick-args");
                        /*</replacement>*/

                        module.exports = Writable;

                        /* <replacement> */
                        function WriteReq(chunk, encoding, cb) {
                            this.chunk = chunk;
                            this.encoding = encoding;
                            this.callback = cb;
                            this.next = null;
                        }

                        // It seems a linked list but it is not
                        // there will be only 2 of these for each stream
                        function CorkedRequest(state) {
                            var _this = this;

                            this.next = null;
                            this.entry = null;
                            this.finish = function () {
                                onCorkedFinish(_this, state);
                            };
                        }
                        /* </replacement> */

                        /*<replacement>*/
                        var asyncWrite =
                            !process.browser &&
                            ["v0.10", "v0.9."].indexOf(
                                process.version.slice(0, 5)
                            ) > -1
                                ? setImmediate
                                : pna.nextTick;
                        /*</replacement>*/

                        /*<replacement>*/
                        var Duplex;
                        /*</replacement>*/

                        Writable.WritableState = WritableState;

                        /*<replacement>*/
                        var util = Object.create(require("core-util-is"));
                        util.inherits = require("inherits");
                        /*</replacement>*/

                        /*<replacement>*/
                        var internalUtil = {
                            deprecate: require("util-deprecate"),
                        };
                        /*</replacement>*/

                        /*<replacement>*/
                        var Stream = require("./internal/streams/stream");
                        /*</replacement>*/

                        /*<replacement>*/

                        var Buffer = require("safe-buffer").Buffer;
                        var OurUint8Array = global.Uint8Array || function () {};
                        function _uint8ArrayToBuffer(chunk) {
                            return Buffer.from(chunk);
                        }
                        function _isUint8Array(obj) {
                            return (
                                Buffer.isBuffer(obj) ||
                                obj instanceof OurUint8Array
                            );
                        }

                        /*</replacement>*/

                        var destroyImpl = require("./internal/streams/destroy");

                        util.inherits(Writable, Stream);

                        function nop() {}

                        function WritableState(options, stream) {
                            Duplex = Duplex || require("./_stream_duplex");

                            options = options || {};

                            // Duplex streams are both readable and writable, but share
                            // the same options object.
                            // However, some cases require setting options to different
                            // values for the readable and the writable sides of the duplex stream.
                            // These options can be provided separately as readableXXX and writableXXX.
                            var isDuplex = stream instanceof Duplex;

                            // object stream flag to indicate whether or not this stream
                            // contains buffers or objects.
                            this.objectMode = !!options.objectMode;

                            if (isDuplex)
                                this.objectMode =
                                    this.objectMode ||
                                    !!options.writableObjectMode;

                            // the point at which write() starts returning false
                            // Note: 0 is a valid value, means that we always return false if
                            // the entire buffer is not flushed immediately on write()
                            var hwm = options.highWaterMark;
                            var writableHwm = options.writableHighWaterMark;
                            var defaultHwm = this.objectMode ? 16 : 16 * 1024;

                            if (hwm || hwm === 0) this.highWaterMark = hwm;
                            else if (
                                isDuplex &&
                                (writableHwm || writableHwm === 0)
                            )
                                this.highWaterMark = writableHwm;
                            else this.highWaterMark = defaultHwm;

                            // cast to ints.
                            this.highWaterMark = Math.floor(this.highWaterMark);

                            // if _final has been called
                            this.finalCalled = false;

                            // drain event flag.
                            this.needDrain = false;
                            // at the start of calling end()
                            this.ending = false;
                            // when end() has been called, and returned
                            this.ended = false;
                            // when 'finish' is emitted
                            this.finished = false;

                            // has it been destroyed
                            this.destroyed = false;

                            // should we decode strings into buffers before passing to _write?
                            // this is here so that some node-core streams can optimize string
                            // handling at a lower level.
                            var noDecode = options.decodeStrings === false;
                            this.decodeStrings = !noDecode;

                            // Crypto is kind of old and crusty.  Historically, its default string
                            // encoding is 'binary' so we have to make this configurable.
                            // Everything else in the universe uses 'utf8', though.
                            this.defaultEncoding =
                                options.defaultEncoding || "utf8";

                            // not an actual buffer we keep track of, but a measurement
                            // of how much we're waiting to get pushed to some underlying
                            // socket or file.
                            this.length = 0;

                            // a flag to see when we're in the middle of a write.
                            this.writing = false;

                            // when true all writes will be buffered until .uncork() call
                            this.corked = 0;

                            // a flag to be able to tell if the onwrite cb is called immediately,
                            // or on a later tick.  We set this to true at first, because any
                            // actions that shouldn't happen until "later" should generally also
                            // not happen before the first write call.
                            this.sync = true;

                            // a flag to know if we're processing previously buffered items, which
                            // may call the _write() callback in the same tick, so that we don't
                            // end up in an overlapped onwrite situation.
                            this.bufferProcessing = false;

                            // the callback that's passed to _write(chunk,cb)
                            this.onwrite = function (er) {
                                onwrite(stream, er);
                            };

                            // the callback that the user supplies to write(chunk,encoding,cb)
                            this.writecb = null;

                            // the amount that is being written when _write is called.
                            this.writelen = 0;

                            this.bufferedRequest = null;
                            this.lastBufferedRequest = null;

                            // number of pending user-supplied write callbacks
                            // this must be 0 before 'finish' can be emitted
                            this.pendingcb = 0;

                            // emit prefinish if the only thing we're waiting for is _write cbs
                            // This is relevant for synchronous Transform streams
                            this.prefinished = false;

                            // True if the error was already emitted and should not be thrown again
                            this.errorEmitted = false;

                            // count buffered requests
                            this.bufferedRequestCount = 0;

                            // allocate the first CorkedRequest, there is always
                            // one allocated and free to use, and we maintain at most two
                            this.corkedRequestsFree = new CorkedRequest(this);
                        }

                        WritableState.prototype.getBuffer =
                            function getBuffer() {
                                var current = this.bufferedRequest;
                                var out = [];
                                while (current) {
                                    out.push(current);
                                    current = current.next;
                                }
                                return out;
                            };

                        (function () {
                            try {
                                Object.defineProperty(
                                    WritableState.prototype,
                                    "buffer",
                                    {
                                        get: internalUtil.deprecate(
                                            function () {
                                                return this.getBuffer();
                                            },
                                            "_writableState.buffer is deprecated. Use _writableState.getBuffer " +
                                                "instead.",
                                            "DEP0003"
                                        ),
                                    }
                                );
                            } catch (_) {}
                        })();

                        // Test _writableState for inheritance to account for Duplex streams,
                        // whose prototype chain only points to Readable.
                        var realHasInstance;
                        if (
                            typeof Symbol === "function" &&
                            Symbol.hasInstance &&
                            typeof Function.prototype[Symbol.hasInstance] ===
                                "function"
                        ) {
                            realHasInstance =
                                Function.prototype[Symbol.hasInstance];
                            Object.defineProperty(
                                Writable,
                                Symbol.hasInstance,
                                {
                                    value: function (object) {
                                        if (realHasInstance.call(this, object))
                                            return true;
                                        if (this !== Writable) return false;

                                        return (
                                            object &&
                                            object._writableState instanceof
                                                WritableState
                                        );
                                    },
                                }
                            );
                        } else {
                            realHasInstance = function (object) {
                                return object instanceof this;
                            };
                        }

                        function Writable(options) {
                            Duplex = Duplex || require("./_stream_duplex");

                            // Writable ctor is applied to Duplexes, too.
                            // `realHasInstance` is necessary because using plain `instanceof`
                            // would return false, as no `_writableState` property is attached.

                            // Trying to use the custom `instanceof` for Writable here will also break the
                            // Node.js LazyTransform implementation, which has a non-trivial getter for
                            // `_writableState` that would lead to infinite recursion.
                            if (
                                !realHasInstance.call(Writable, this) &&
                                !(this instanceof Duplex)
                            ) {
                                return new Writable(options);
                            }

                            this._writableState = new WritableState(
                                options,
                                this
                            );

                            // legacy.
                            this.writable = true;

                            if (options) {
                                if (typeof options.write === "function")
                                    this._write = options.write;

                                if (typeof options.writev === "function")
                                    this._writev = options.writev;

                                if (typeof options.destroy === "function")
                                    this._destroy = options.destroy;

                                if (typeof options.final === "function")
                                    this._final = options.final;
                            }

                            Stream.call(this);
                        }

                        // Otherwise people can pipe Writable streams, which is just wrong.
                        Writable.prototype.pipe = function () {
                            this.emit(
                                "error",
                                new Error("Cannot pipe, not readable")
                            );
                        };

                        function writeAfterEnd(stream, cb) {
                            var er = new Error("write after end");
                            // TODO: defer error events consistently everywhere, not just the cb
                            stream.emit("error", er);
                            pna.nextTick(cb, er);
                        }

                        // Checks that a user-supplied chunk is valid, especially for the particular
                        // mode the stream is in. Currently this means that `null` is never accepted
                        // and undefined/non-string values are only allowed in object mode.
                        function validChunk(stream, state, chunk, cb) {
                            var valid = true;
                            var er = false;

                            if (chunk === null) {
                                er = new TypeError(
                                    "May not write null values to stream"
                                );
                            } else if (
                                typeof chunk !== "string" &&
                                chunk !== undefined &&
                                !state.objectMode
                            ) {
                                er = new TypeError(
                                    "Invalid non-string/buffer chunk"
                                );
                            }
                            if (er) {
                                stream.emit("error", er);
                                pna.nextTick(cb, er);
                                valid = false;
                            }
                            return valid;
                        }

                        Writable.prototype.write = function (
                            chunk,
                            encoding,
                            cb
                        ) {
                            var state = this._writableState;
                            var ret = false;
                            var isBuf =
                                !state.objectMode && _isUint8Array(chunk);

                            if (isBuf && !Buffer.isBuffer(chunk)) {
                                chunk = _uint8ArrayToBuffer(chunk);
                            }

                            if (typeof encoding === "function") {
                                cb = encoding;
                                encoding = null;
                            }

                            if (isBuf) encoding = "buffer";
                            else if (!encoding)
                                encoding = state.defaultEncoding;

                            if (typeof cb !== "function") cb = nop;

                            if (state.ended) writeAfterEnd(this, cb);
                            else if (
                                isBuf ||
                                validChunk(this, state, chunk, cb)
                            ) {
                                state.pendingcb++;
                                ret = writeOrBuffer(
                                    this,
                                    state,
                                    isBuf,
                                    chunk,
                                    encoding,
                                    cb
                                );
                            }

                            return ret;
                        };

                        Writable.prototype.cork = function () {
                            var state = this._writableState;

                            state.corked++;
                        };

                        Writable.prototype.uncork = function () {
                            var state = this._writableState;

                            if (state.corked) {
                                state.corked--;

                                if (
                                    !state.writing &&
                                    !state.corked &&
                                    !state.finished &&
                                    !state.bufferProcessing &&
                                    state.bufferedRequest
                                )
                                    clearBuffer(this, state);
                            }
                        };

                        Writable.prototype.setDefaultEncoding =
                            function setDefaultEncoding(encoding) {
                                // node::ParseEncoding() requires lower case.
                                if (typeof encoding === "string")
                                    encoding = encoding.toLowerCase();
                                if (
                                    !(
                                        [
                                            "hex",
                                            "utf8",
                                            "utf-8",
                                            "ascii",
                                            "binary",
                                            "base64",
                                            "ucs2",
                                            "ucs-2",
                                            "utf16le",
                                            "utf-16le",
                                            "raw",
                                        ].indexOf(
                                            (encoding + "").toLowerCase()
                                        ) > -1
                                    )
                                )
                                    throw new TypeError(
                                        "Unknown encoding: " + encoding
                                    );
                                this._writableState.defaultEncoding = encoding;
                                return this;
                            };

                        function decodeChunk(state, chunk, encoding) {
                            if (
                                !state.objectMode &&
                                state.decodeStrings !== false &&
                                typeof chunk === "string"
                            ) {
                                chunk = Buffer.from(chunk, encoding);
                            }
                            return chunk;
                        }

                        Object.defineProperty(
                            Writable.prototype,
                            "writableHighWaterMark",
                            {
                                // making it explicit this property is not enumerable
                                // because otherwise some prototype manipulation in
                                // userland will fail
                                enumerable: false,
                                get: function () {
                                    return this._writableState.highWaterMark;
                                },
                            }
                        );

                        // if we're already writing something, then just put this
                        // in the queue, and wait our turn.  Otherwise, call _write
                        // If we return false, then we need a drain event, so set that flag.
                        function writeOrBuffer(
                            stream,
                            state,
                            isBuf,
                            chunk,
                            encoding,
                            cb
                        ) {
                            if (!isBuf) {
                                var newChunk = decodeChunk(
                                    state,
                                    chunk,
                                    encoding
                                );
                                if (chunk !== newChunk) {
                                    isBuf = true;
                                    encoding = "buffer";
                                    chunk = newChunk;
                                }
                            }
                            var len = state.objectMode ? 1 : chunk.length;

                            state.length += len;

                            var ret = state.length < state.highWaterMark;
                            // we must ensure that previous needDrain will not be reset to false.
                            if (!ret) state.needDrain = true;

                            if (state.writing || state.corked) {
                                var last = state.lastBufferedRequest;
                                state.lastBufferedRequest = {
                                    chunk: chunk,
                                    encoding: encoding,
                                    isBuf: isBuf,
                                    callback: cb,
                                    next: null,
                                };
                                if (last) {
                                    last.next = state.lastBufferedRequest;
                                } else {
                                    state.bufferedRequest =
                                        state.lastBufferedRequest;
                                }
                                state.bufferedRequestCount += 1;
                            } else {
                                doWrite(
                                    stream,
                                    state,
                                    false,
                                    len,
                                    chunk,
                                    encoding,
                                    cb
                                );
                            }

                            return ret;
                        }

                        function doWrite(
                            stream,
                            state,
                            writev,
                            len,
                            chunk,
                            encoding,
                            cb
                        ) {
                            state.writelen = len;
                            state.writecb = cb;
                            state.writing = true;
                            state.sync = true;
                            if (writev) stream._writev(chunk, state.onwrite);
                            else stream._write(chunk, encoding, state.onwrite);
                            state.sync = false;
                        }

                        function onwriteError(stream, state, sync, er, cb) {
                            --state.pendingcb;

                            if (sync) {
                                // defer the callback if we are being called synchronously
                                // to avoid piling up things on the stack
                                pna.nextTick(cb, er);
                                // this can emit finish, and it will always happen
                                // after error
                                pna.nextTick(finishMaybe, stream, state);
                                stream._writableState.errorEmitted = true;
                                stream.emit("error", er);
                            } else {
                                // the caller expect this to happen before if
                                // it is async
                                cb(er);
                                stream._writableState.errorEmitted = true;
                                stream.emit("error", er);
                                // this can emit finish, but finish must
                                // always follow error
                                finishMaybe(stream, state);
                            }
                        }

                        function onwriteStateUpdate(state) {
                            state.writing = false;
                            state.writecb = null;
                            state.length -= state.writelen;
                            state.writelen = 0;
                        }

                        function onwrite(stream, er) {
                            var state = stream._writableState;
                            var sync = state.sync;
                            var cb = state.writecb;

                            onwriteStateUpdate(state);

                            if (er) onwriteError(stream, state, sync, er, cb);
                            else {
                                // Check if we're actually ready to finish, but don't emit yet
                                var finished = needFinish(state);

                                if (
                                    !finished &&
                                    !state.corked &&
                                    !state.bufferProcessing &&
                                    state.bufferedRequest
                                ) {
                                    clearBuffer(stream, state);
                                }

                                if (sync) {
                                    /*<replacement>*/
                                    asyncWrite(
                                        afterWrite,
                                        stream,
                                        state,
                                        finished,
                                        cb
                                    );
                                    /*</replacement>*/
                                } else {
                                    afterWrite(stream, state, finished, cb);
                                }
                            }
                        }

                        function afterWrite(stream, state, finished, cb) {
                            if (!finished) onwriteDrain(stream, state);
                            state.pendingcb--;
                            cb();
                            finishMaybe(stream, state);
                        }

                        // Must force callback to be called on nextTick, so that we don't
                        // emit 'drain' before the write() consumer gets the 'false' return
                        // value, and has a chance to attach a 'drain' listener.
                        function onwriteDrain(stream, state) {
                            if (state.length === 0 && state.needDrain) {
                                state.needDrain = false;
                                stream.emit("drain");
                            }
                        }

                        // if there's something in the buffer waiting, then process it
                        function clearBuffer(stream, state) {
                            state.bufferProcessing = true;
                            var entry = state.bufferedRequest;

                            if (stream._writev && entry && entry.next) {
                                // Fast case, write everything using _writev()
                                var l = state.bufferedRequestCount;
                                var buffer = new Array(l);
                                var holder = state.corkedRequestsFree;
                                holder.entry = entry;

                                var count = 0;
                                var allBuffers = true;
                                while (entry) {
                                    buffer[count] = entry;
                                    if (!entry.isBuf) allBuffers = false;
                                    entry = entry.next;
                                    count += 1;
                                }
                                buffer.allBuffers = allBuffers;

                                doWrite(
                                    stream,
                                    state,
                                    true,
                                    state.length,
                                    buffer,
                                    "",
                                    holder.finish
                                );

                                // doWrite is almost always async, defer these to save a bit of time
                                // as the hot path ends with doWrite
                                state.pendingcb++;
                                state.lastBufferedRequest = null;
                                if (holder.next) {
                                    state.corkedRequestsFree = holder.next;
                                    holder.next = null;
                                } else {
                                    state.corkedRequestsFree =
                                        new CorkedRequest(state);
                                }
                                state.bufferedRequestCount = 0;
                            } else {
                                // Slow case, write chunks one-by-one
                                while (entry) {
                                    var chunk = entry.chunk;
                                    var encoding = entry.encoding;
                                    var cb = entry.callback;
                                    var len = state.objectMode
                                        ? 1
                                        : chunk.length;

                                    doWrite(
                                        stream,
                                        state,
                                        false,
                                        len,
                                        chunk,
                                        encoding,
                                        cb
                                    );
                                    entry = entry.next;
                                    state.bufferedRequestCount--;
                                    // if we didn't call the onwrite immediately, then
                                    // it means that we need to wait until it does.
                                    // also, that means that the chunk and cb are currently
                                    // being processed, so move the buffer counter past them.
                                    if (state.writing) {
                                        break;
                                    }
                                }

                                if (entry === null)
                                    state.lastBufferedRequest = null;
                            }

                            state.bufferedRequest = entry;
                            state.bufferProcessing = false;
                        }

                        Writable.prototype._write = function (
                            chunk,
                            encoding,
                            cb
                        ) {
                            cb(new Error("_write() is not implemented"));
                        };

                        Writable.prototype._writev = null;

                        Writable.prototype.end = function (
                            chunk,
                            encoding,
                            cb
                        ) {
                            var state = this._writableState;

                            if (typeof chunk === "function") {
                                cb = chunk;
                                chunk = null;
                                encoding = null;
                            } else if (typeof encoding === "function") {
                                cb = encoding;
                                encoding = null;
                            }

                            if (chunk !== null && chunk !== undefined)
                                this.write(chunk, encoding);

                            // .end() fully uncorks
                            if (state.corked) {
                                state.corked = 1;
                                this.uncork();
                            }

                            // ignore unnecessary end() calls.
                            if (!state.ending && !state.finished)
                                endWritable(this, state, cb);
                        };

                        function needFinish(state) {
                            return (
                                state.ending &&
                                state.length === 0 &&
                                state.bufferedRequest === null &&
                                !state.finished &&
                                !state.writing
                            );
                        }
                        function callFinal(stream, state) {
                            stream._final(function (err) {
                                state.pendingcb--;
                                if (err) {
                                    stream.emit("error", err);
                                }
                                state.prefinished = true;
                                stream.emit("prefinish");
                                finishMaybe(stream, state);
                            });
                        }
                        function prefinish(stream, state) {
                            if (!state.prefinished && !state.finalCalled) {
                                if (typeof stream._final === "function") {
                                    state.pendingcb++;
                                    state.finalCalled = true;
                                    pna.nextTick(callFinal, stream, state);
                                } else {
                                    state.prefinished = true;
                                    stream.emit("prefinish");
                                }
                            }
                        }

                        function finishMaybe(stream, state) {
                            var need = needFinish(state);
                            if (need) {
                                prefinish(stream, state);
                                if (state.pendingcb === 0) {
                                    state.finished = true;
                                    stream.emit("finish");
                                }
                            }
                            return need;
                        }

                        function endWritable(stream, state, cb) {
                            state.ending = true;
                            finishMaybe(stream, state);
                            if (cb) {
                                if (state.finished) pna.nextTick(cb);
                                else stream.once("finish", cb);
                            }
                            state.ended = true;
                            stream.writable = false;
                        }

                        function onCorkedFinish(corkReq, state, err) {
                            var entry = corkReq.entry;
                            corkReq.entry = null;
                            while (entry) {
                                var cb = entry.callback;
                                state.pendingcb--;
                                cb(err);
                                entry = entry.next;
                            }
                            if (state.corkedRequestsFree) {
                                state.corkedRequestsFree.next = corkReq;
                            } else {
                                state.corkedRequestsFree = corkReq;
                            }
                        }

                        Object.defineProperty(Writable.prototype, "destroyed", {
                            get: function () {
                                if (this._writableState === undefined) {
                                    return false;
                                }
                                return this._writableState.destroyed;
                            },
                            set: function (value) {
                                // we ignore the value if the stream
                                // has not been initialized yet
                                if (!this._writableState) {
                                    return;
                                }

                                // backward compatibility, the user is explicitly
                                // managing destroyed
                                this._writableState.destroyed = value;
                            },
                        });

                        Writable.prototype.destroy = destroyImpl.destroy;
                        Writable.prototype._undestroy = destroyImpl.undestroy;
                        Writable.prototype._destroy = function (err, cb) {
                            this.end();
                            cb(err);
                        };
                    }.call(this));
                }.call(
                    this,
                    require("_process"),
                    typeof global !== "undefined"
                        ? global
                        : typeof self !== "undefined"
                        ? self
                        : typeof window !== "undefined"
                        ? window
                        : {},
                    require("timers").setImmediate
                ));
            },
            {
                "./_stream_duplex": 108,
                "./internal/streams/destroy": 114,
                "./internal/streams/stream": 115,
                _process: 102,
                "core-util-is": 83,
                inherits: 87,
                "process-nextick-args": 101,
                "safe-buffer": 116,
                timers: 127,
                "util-deprecate": 131,
            },
        ],
        113: [
            function (require, module, exports) {
                "use strict";

                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError(
                            "Cannot call a class as a function"
                        );
                    }
                }

                var Buffer = require("safe-buffer").Buffer;
                var util = require("util");

                function copyBuffer(src, target, offset) {
                    src.copy(target, offset);
                }

                module.exports = (function () {
                    function BufferList() {
                        _classCallCheck(this, BufferList);

                        this.head = null;
                        this.tail = null;
                        this.length = 0;
                    }

                    BufferList.prototype.push = function push(v) {
                        var entry = { data: v, next: null };
                        if (this.length > 0) this.tail.next = entry;
                        else this.head = entry;
                        this.tail = entry;
                        ++this.length;
                    };

                    BufferList.prototype.unshift = function unshift(v) {
                        var entry = { data: v, next: this.head };
                        if (this.length === 0) this.tail = entry;
                        this.head = entry;
                        ++this.length;
                    };

                    BufferList.prototype.shift = function shift() {
                        if (this.length === 0) return;
                        var ret = this.head.data;
                        if (this.length === 1) this.head = this.tail = null;
                        else this.head = this.head.next;
                        --this.length;
                        return ret;
                    };

                    BufferList.prototype.clear = function clear() {
                        this.head = this.tail = null;
                        this.length = 0;
                    };

                    BufferList.prototype.join = function join(s) {
                        if (this.length === 0) return "";
                        var p = this.head;
                        var ret = "" + p.data;
                        while ((p = p.next)) {
                            ret += s + p.data;
                        }
                        return ret;
                    };

                    BufferList.prototype.concat = function concat(n) {
                        if (this.length === 0) return Buffer.alloc(0);
                        if (this.length === 1) return this.head.data;
                        var ret = Buffer.allocUnsafe(n >>> 0);
                        var p = this.head;
                        var i = 0;
                        while (p) {
                            copyBuffer(p.data, ret, i);
                            i += p.data.length;
                            p = p.next;
                        }
                        return ret;
                    };

                    return BufferList;
                })();

                if (util && util.inspect && util.inspect.custom) {
                    module.exports.prototype[util.inspect.custom] =
                        function () {
                            var obj = util.inspect({ length: this.length });
                            return this.constructor.name + " " + obj;
                        };
                }
            },
            { "safe-buffer": 116, util: 77 },
        ],
        114: [
            function (require, module, exports) {
                "use strict";

                /*<replacement>*/

                var pna = require("process-nextick-args");
                /*</replacement>*/

                // undocumented cb() API, needed for core, not for public API
                function destroy(err, cb) {
                    var _this = this;

                    var readableDestroyed =
                        this._readableState && this._readableState.destroyed;
                    var writableDestroyed =
                        this._writableState && this._writableState.destroyed;

                    if (readableDestroyed || writableDestroyed) {
                        if (cb) {
                            cb(err);
                        } else if (
                            err &&
                            (!this._writableState ||
                                !this._writableState.errorEmitted)
                        ) {
                            pna.nextTick(emitErrorNT, this, err);
                        }
                        return this;
                    }

                    // we set destroyed to true before firing error callbacks in order
                    // to make it re-entrance safe in case destroy() is called within callbacks

                    if (this._readableState) {
                        this._readableState.destroyed = true;
                    }

                    // if this is a duplex stream mark the writable part as destroyed as well
                    if (this._writableState) {
                        this._writableState.destroyed = true;
                    }

                    this._destroy(err || null, function (err) {
                        if (!cb && err) {
                            pna.nextTick(emitErrorNT, _this, err);
                            if (_this._writableState) {
                                _this._writableState.errorEmitted = true;
                            }
                        } else if (cb) {
                            cb(err);
                        }
                    });

                    return this;
                }

                function undestroy() {
                    if (this._readableState) {
                        this._readableState.destroyed = false;
                        this._readableState.reading = false;
                        this._readableState.ended = false;
                        this._readableState.endEmitted = false;
                    }

                    if (this._writableState) {
                        this._writableState.destroyed = false;
                        this._writableState.ended = false;
                        this._writableState.ending = false;
                        this._writableState.finished = false;
                        this._writableState.errorEmitted = false;
                    }
                }

                function emitErrorNT(self, err) {
                    self.emit("error", err);
                }

                module.exports = {
                    destroy: destroy,
                    undestroy: undestroy,
                };
            },
            { "process-nextick-args": 101 },
        ],
        115: [
            function (require, module, exports) {
                module.exports = require("events").EventEmitter;
            },
            { events: 84 },
        ],
        116: [
            function (require, module, exports) {
                /* eslint-disable node/no-deprecated-api */
                var buffer = require("buffer");
                var Buffer = buffer.Buffer;

                // alternative to using Object.keys for old browsers
                function copyProps(src, dst) {
                    for (var key in src) {
                        dst[key] = src[key];
                    }
                }
                if (
                    Buffer.from &&
                    Buffer.alloc &&
                    Buffer.allocUnsafe &&
                    Buffer.allocUnsafeSlow
                ) {
                    module.exports = buffer;
                } else {
                    // Copy properties from require('buffer')
                    copyProps(buffer, exports);
                    exports.Buffer = SafeBuffer;
                }

                function SafeBuffer(arg, encodingOrOffset, length) {
                    return Buffer(arg, encodingOrOffset, length);
                }

                // Copy static methods from Buffer
                copyProps(Buffer, SafeBuffer);

                SafeBuffer.from = function (arg, encodingOrOffset, length) {
                    if (typeof arg === "number") {
                        throw new TypeError("Argument must not be a number");
                    }
                    return Buffer(arg, encodingOrOffset, length);
                };

                SafeBuffer.alloc = function (size, fill, encoding) {
                    if (typeof size !== "number") {
                        throw new TypeError("Argument must be a number");
                    }
                    var buf = Buffer(size);
                    if (fill !== undefined) {
                        if (typeof encoding === "string") {
                            buf.fill(fill, encoding);
                        } else {
                            buf.fill(fill);
                        }
                    } else {
                        buf.fill(0);
                    }
                    return buf;
                };

                SafeBuffer.allocUnsafe = function (size) {
                    if (typeof size !== "number") {
                        throw new TypeError("Argument must be a number");
                    }
                    return Buffer(size);
                };

                SafeBuffer.allocUnsafeSlow = function (size) {
                    if (typeof size !== "number") {
                        throw new TypeError("Argument must be a number");
                    }
                    return buffer.SlowBuffer(size);
                };
            },
            { buffer: 80 },
        ],
        117: [
            function (require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                "use strict";

                /*<replacement>*/

                var Buffer = require("safe-buffer").Buffer;
                /*</replacement>*/

                var isEncoding =
                    Buffer.isEncoding ||
                    function (encoding) {
                        encoding = "" + encoding;
                        switch (encoding && encoding.toLowerCase()) {
                            case "hex":
                            case "utf8":
                            case "utf-8":
                            case "ascii":
                            case "binary":
                            case "base64":
                            case "ucs2":
                            case "ucs-2":
                            case "utf16le":
                            case "utf-16le":
                            case "raw":
                                return true;
                            default:
                                return false;
                        }
                    };

                function _normalizeEncoding(enc) {
                    if (!enc) return "utf8";
                    var retried;
                    while (true) {
                        switch (enc) {
                            case "utf8":
                            case "utf-8":
                                return "utf8";
                            case "ucs2":
                            case "ucs-2":
                            case "utf16le":
                            case "utf-16le":
                                return "utf16le";
                            case "latin1":
                            case "binary":
                                return "latin1";
                            case "base64":
                            case "ascii":
                            case "hex":
                                return enc;
                            default: // undefined
                                if (retried) return;
                                enc = ("" + enc).toLowerCase();
                                retried = true;
                        }
                    }
                }

                // Do not cache `Buffer.isEncoding` when checking encoding names as some
                // modules monkey-patch it to support additional encodings
                function normalizeEncoding(enc) {
                    var nenc = _normalizeEncoding(enc);
                    if (
                        typeof nenc !== "string" &&
                        (Buffer.isEncoding === isEncoding || !isEncoding(enc))
                    )
                        throw new Error("Unknown encoding: " + enc);
                    return nenc || enc;
                }

                // StringDecoder provides an interface for efficiently splitting a series of
                // buffers into a series of JS strings without breaking apart multi-byte
                // characters.
                exports.StringDecoder = StringDecoder;
                function StringDecoder(encoding) {
                    this.encoding = normalizeEncoding(encoding);
                    var nb;
                    switch (this.encoding) {
                        case "utf16le":
                            this.text = utf16Text;
                            this.end = utf16End;
                            nb = 4;
                            break;
                        case "utf8":
                            this.fillLast = utf8FillLast;
                            nb = 4;
                            break;
                        case "base64":
                            this.text = base64Text;
                            this.end = base64End;
                            nb = 3;
                            break;
                        default:
                            this.write = simpleWrite;
                            this.end = simpleEnd;
                            return;
                    }
                    this.lastNeed = 0;
                    this.lastTotal = 0;
                    this.lastChar = Buffer.allocUnsafe(nb);
                }

                StringDecoder.prototype.write = function (buf) {
                    if (buf.length === 0) return "";
                    var r;
                    var i;
                    if (this.lastNeed) {
                        r = this.fillLast(buf);
                        if (r === undefined) return "";
                        i = this.lastNeed;
                        this.lastNeed = 0;
                    } else {
                        i = 0;
                    }
                    if (i < buf.length)
                        return r ? r + this.text(buf, i) : this.text(buf, i);
                    return r || "";
                };

                StringDecoder.prototype.end = utf8End;

                // Returns only complete characters in a Buffer
                StringDecoder.prototype.text = utf8Text;

                // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
                StringDecoder.prototype.fillLast = function (buf) {
                    if (this.lastNeed <= buf.length) {
                        buf.copy(
                            this.lastChar,
                            this.lastTotal - this.lastNeed,
                            0,
                            this.lastNeed
                        );
                        return this.lastChar.toString(
                            this.encoding,
                            0,
                            this.lastTotal
                        );
                    }
                    buf.copy(
                        this.lastChar,
                        this.lastTotal - this.lastNeed,
                        0,
                        buf.length
                    );
                    this.lastNeed -= buf.length;
                };

                // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
                // continuation byte. If an invalid byte is detected, -2 is returned.
                function utf8CheckByte(byte) {
                    if (byte <= 0x7f) return 0;
                    else if (byte >> 5 === 0x06) return 2;
                    else if (byte >> 4 === 0x0e) return 3;
                    else if (byte >> 3 === 0x1e) return 4;
                    return byte >> 6 === 0x02 ? -1 : -2;
                }

                // Checks at most 3 bytes at the end of a Buffer in order to detect an
                // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
                // needed to complete the UTF-8 character (if applicable) are returned.
                function utf8CheckIncomplete(self, buf, i) {
                    var j = buf.length - 1;
                    if (j < i) return 0;
                    var nb = utf8CheckByte(buf[j]);
                    if (nb >= 0) {
                        if (nb > 0) self.lastNeed = nb - 1;
                        return nb;
                    }
                    if (--j < i || nb === -2) return 0;
                    nb = utf8CheckByte(buf[j]);
                    if (nb >= 0) {
                        if (nb > 0) self.lastNeed = nb - 2;
                        return nb;
                    }
                    if (--j < i || nb === -2) return 0;
                    nb = utf8CheckByte(buf[j]);
                    if (nb >= 0) {
                        if (nb > 0) {
                            if (nb === 2) nb = 0;
                            else self.lastNeed = nb - 3;
                        }
                        return nb;
                    }
                    return 0;
                }

                // Validates as many continuation bytes for a multi-byte UTF-8 character as
                // needed or are available. If we see a non-continuation byte where we expect
                // one, we "replace" the validated continuation bytes we've seen so far with
                // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
                // behavior. The continuation byte check is included three times in the case
                // where all of the continuation bytes for a character exist in the same buffer.
                // It is also done this way as a slight performance increase instead of using a
                // loop.
                function utf8CheckExtraBytes(self, buf, p) {
                    if ((buf[0] & 0xc0) !== 0x80) {
                        self.lastNeed = 0;
                        return "\ufffd";
                    }
                    if (self.lastNeed > 1 && buf.length > 1) {
                        if ((buf[1] & 0xc0) !== 0x80) {
                            self.lastNeed = 1;
                            return "\ufffd";
                        }
                        if (self.lastNeed > 2 && buf.length > 2) {
                            if ((buf[2] & 0xc0) !== 0x80) {
                                self.lastNeed = 2;
                                return "\ufffd";
                            }
                        }
                    }
                }

                // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
                function utf8FillLast(buf) {
                    var p = this.lastTotal - this.lastNeed;
                    var r = utf8CheckExtraBytes(this, buf, p);
                    if (r !== undefined) return r;
                    if (this.lastNeed <= buf.length) {
                        buf.copy(this.lastChar, p, 0, this.lastNeed);
                        return this.lastChar.toString(
                            this.encoding,
                            0,
                            this.lastTotal
                        );
                    }
                    buf.copy(this.lastChar, p, 0, buf.length);
                    this.lastNeed -= buf.length;
                }

                // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
                // partial character, the character's bytes are buffered until the required
                // number of bytes are available.
                function utf8Text(buf, i) {
                    var total = utf8CheckIncomplete(this, buf, i);
                    if (!this.lastNeed) return buf.toString("utf8", i);
                    this.lastTotal = total;
                    var end = buf.length - (total - this.lastNeed);
                    buf.copy(this.lastChar, 0, end);
                    return buf.toString("utf8", i, end);
                }

                // For UTF-8, a replacement character is added when ending on a partial
                // character.
                function utf8End(buf) {
                    var r = buf && buf.length ? this.write(buf) : "";
                    if (this.lastNeed) return r + "\ufffd";
                    return r;
                }

                // UTF-16LE typically needs two bytes per character, but even if we have an even
                // number of bytes available, we need to check if we end on a leading/high
                // surrogate. In that case, we need to wait for the next two bytes in order to
                // decode the last character properly.
                function utf16Text(buf, i) {
                    if ((buf.length - i) % 2 === 0) {
                        var r = buf.toString("utf16le", i);
                        if (r) {
                            var c = r.charCodeAt(r.length - 1);
                            if (c >= 0xd800 && c <= 0xdbff) {
                                this.lastNeed = 2;
                                this.lastTotal = 4;
                                this.lastChar[0] = buf[buf.length - 2];
                                this.lastChar[1] = buf[buf.length - 1];
                                return r.slice(0, -1);
                            }
                        }
                        return r;
                    }
                    this.lastNeed = 1;
                    this.lastTotal = 2;
                    this.lastChar[0] = buf[buf.length - 1];
                    return buf.toString("utf16le", i, buf.length - 1);
                }

                // For UTF-16LE we do not explicitly append special replacement characters if we
                // end on a partial character, we simply let v8 handle that.
                function utf16End(buf) {
                    var r = buf && buf.length ? this.write(buf) : "";
                    if (this.lastNeed) {
                        var end = this.lastTotal - this.lastNeed;
                        return r + this.lastChar.toString("utf16le", 0, end);
                    }
                    return r;
                }

                function base64Text(buf, i) {
                    var n = (buf.length - i) % 3;
                    if (n === 0) return buf.toString("base64", i);
                    this.lastNeed = 3 - n;
                    this.lastTotal = 3;
                    if (n === 1) {
                        this.lastChar[0] = buf[buf.length - 1];
                    } else {
                        this.lastChar[0] = buf[buf.length - 2];
                        this.lastChar[1] = buf[buf.length - 1];
                    }
                    return buf.toString("base64", i, buf.length - n);
                }

                function base64End(buf) {
                    var r = buf && buf.length ? this.write(buf) : "";
                    if (this.lastNeed)
                        return (
                            r +
                            this.lastChar.toString(
                                "base64",
                                0,
                                3 - this.lastNeed
                            )
                        );
                    return r;
                }

                // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
                function simpleWrite(buf) {
                    return buf.toString(this.encoding);
                }

                function simpleEnd(buf) {
                    return buf && buf.length ? this.write(buf) : "";
                }
            },
            { "safe-buffer": 116 },
        ],
        118: [
            function (require, module, exports) {
                module.exports = require("./readable").PassThrough;
            },
            { "./readable": 119 },
        ],
        119: [
            function (require, module, exports) {
                exports = module.exports = require("./lib/_stream_readable.js");
                exports.Stream = exports;
                exports.Readable = exports;
                exports.Writable = require("./lib/_stream_writable.js");
                exports.Duplex = require("./lib/_stream_duplex.js");
                exports.Transform = require("./lib/_stream_transform.js");
                exports.PassThrough = require("./lib/_stream_passthrough.js");
            },
            {
                "./lib/_stream_duplex.js": 108,
                "./lib/_stream_passthrough.js": 109,
                "./lib/_stream_readable.js": 110,
                "./lib/_stream_transform.js": 111,
                "./lib/_stream_writable.js": 112,
            },
        ],
        120: [
            function (require, module, exports) {
                module.exports = require("./readable").Transform;
            },
            { "./readable": 119 },
        ],
        121: [
            function (require, module, exports) {
                module.exports = require("./lib/_stream_writable.js");
            },
            { "./lib/_stream_writable.js": 112 },
        ],
        122: [
            function (require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                module.exports = Stream;

                var EE = require("events").EventEmitter;
                var inherits = require("inherits");

                inherits(Stream, EE);
                Stream.Readable = require("readable-stream/readable.js");
                Stream.Writable = require("readable-stream/writable.js");
                Stream.Duplex = require("readable-stream/duplex.js");
                Stream.Transform = require("readable-stream/transform.js");
                Stream.PassThrough = require("readable-stream/passthrough.js");

                // Backwards-compat with node 0.4.x
                Stream.Stream = Stream;

                // old-style streams.  Note that the pipe method (the only relevant
                // part of this class) is overridden in the Readable class.

                function Stream() {
                    EE.call(this);
                }

                Stream.prototype.pipe = function (dest, options) {
                    var source = this;

                    function ondata(chunk) {
                        if (dest.writable) {
                            if (false === dest.write(chunk) && source.pause) {
                                source.pause();
                            }
                        }
                    }

                    source.on("data", ondata);

                    function ondrain() {
                        if (source.readable && source.resume) {
                            source.resume();
                        }
                    }

                    dest.on("drain", ondrain);

                    // If the 'end' option is not supplied, dest.end() will be called when
                    // source gets the 'end' or 'close' events.  Only dest.end() once.
                    if (!dest._isStdio && (!options || options.end !== false)) {
                        source.on("end", onend);
                        source.on("close", onclose);
                    }

                    var didOnEnd = false;
                    function onend() {
                        if (didOnEnd) return;
                        didOnEnd = true;

                        dest.end();
                    }

                    function onclose() {
                        if (didOnEnd) return;
                        didOnEnd = true;

                        if (typeof dest.destroy === "function") dest.destroy();
                    }

                    // don't leave dangling pipes when there are errors.
                    function onerror(er) {
                        cleanup();
                        if (EE.listenerCount(this, "error") === 0) {
                            throw er; // Unhandled stream error in pipe.
                        }
                    }

                    source.on("error", onerror);
                    dest.on("error", onerror);

                    // remove all the event listeners that were added.
                    function cleanup() {
                        source.removeListener("data", ondata);
                        dest.removeListener("drain", ondrain);

                        source.removeListener("end", onend);
                        source.removeListener("close", onclose);

                        source.removeListener("error", onerror);
                        dest.removeListener("error", onerror);

                        source.removeListener("end", cleanup);
                        source.removeListener("close", cleanup);

                        dest.removeListener("close", cleanup);
                    }

                    source.on("end", cleanup);
                    source.on("close", cleanup);

                    dest.on("close", cleanup);

                    dest.emit("pipe", source);

                    // Allow for unix-like usage: A.pipe(B).pipe(C)
                    return dest;
                };
            },
            {
                events: 84,
                inherits: 87,
                "readable-stream/duplex.js": 107,
                "readable-stream/passthrough.js": 118,
                "readable-stream/readable.js": 119,
                "readable-stream/transform.js": 120,
                "readable-stream/writable.js": 121,
            },
        ],
        123: [
            function (require, module, exports) {
                (function (global) {
                    (function () {
                        var ClientRequest = require("./lib/request");
                        var response = require("./lib/response");
                        var extend = require("xtend");
                        var statusCodes = require("builtin-status-codes");
                        var url = require("url");

                        var http = exports;

                        http.request = function (opts, cb) {
                            if (typeof opts === "string")
                                opts = url.parse(opts);
                            else opts = extend(opts);

                            // Normally, the page is loaded from http or https, so not specifying a protocol
                            // will result in a (valid) protocol-relative url. However, this won't work if
                            // the protocol is something else, like 'file:'
                            var defaultProtocol =
                                global.location.protocol.search(/^https?:$/) ===
                                -1
                                    ? "http:"
                                    : "";

                            var protocol = opts.protocol || defaultProtocol;
                            var host = opts.hostname || opts.host;
                            var port = opts.port;
                            var path = opts.path || "/";

                            // Necessary for IPv6 addresses
                            if (host && host.indexOf(":") !== -1)
                                host = "[" + host + "]";

                            // This may be a relative url. The browser should always be able to interpret it correctly.
                            opts.url =
                                (host ? protocol + "//" + host : "") +
                                (port ? ":" + port : "") +
                                path;
                            opts.method = (opts.method || "GET").toUpperCase();
                            opts.headers = opts.headers || {};

                            // Also valid opts.auth, opts.mode

                            var req = new ClientRequest(opts);
                            if (cb) req.on("response", cb);
                            return req;
                        };

                        http.get = function get(opts, cb) {
                            var req = http.request(opts, cb);
                            req.end();
                            return req;
                        };

                        http.ClientRequest = ClientRequest;
                        http.IncomingMessage = response.IncomingMessage;

                        http.Agent = function () {};
                        http.Agent.defaultMaxSockets = 4;

                        http.globalAgent = new http.Agent();

                        http.STATUS_CODES = statusCodes;

                        http.METHODS = [
                            "CHECKOUT",
                            "CONNECT",
                            "COPY",
                            "DELETE",
                            "GET",
                            "HEAD",
                            "LOCK",
                            "M-SEARCH",
                            "MERGE",
                            "MKACTIVITY",
                            "MKCOL",
                            "MOVE",
                            "NOTIFY",
                            "OPTIONS",
                            "PATCH",
                            "POST",
                            "PROPFIND",
                            "PROPPATCH",
                            "PURGE",
                            "PUT",
                            "REPORT",
                            "SEARCH",
                            "SUBSCRIBE",
                            "TRACE",
                            "UNLOCK",
                            "UNSUBSCRIBE",
                        ];
                    }.call(this));
                }.call(
                    this,
                    typeof global !== "undefined"
                        ? global
                        : typeof self !== "undefined"
                        ? self
                        : typeof window !== "undefined"
                        ? window
                        : {}
                ));
            },
            {
                "./lib/request": 125,
                "./lib/response": 126,
                "builtin-status-codes": 81,
                url: 129,
                xtend: 136,
            },
        ],
        124: [
            function (require, module, exports) {
                (function (global) {
                    (function () {
                        exports.fetch =
                            isFunction(global.fetch) &&
                            isFunction(global.ReadableStream);

                        exports.writableStream = isFunction(
                            global.WritableStream
                        );

                        exports.abortController = isFunction(
                            global.AbortController
                        );

                        exports.blobConstructor = false;
                        try {
                            new Blob([new ArrayBuffer(1)]);
                            exports.blobConstructor = true;
                        } catch (e) {}

                        // The xhr request to example.com may violate some restrictive CSP configurations,
                        // so if we're running in a browser that supports `fetch`, avoid calling getXHR()
                        // and assume support for certain features below.
                        var xhr;
                        function getXHR() {
                            // Cache the xhr value
                            if (xhr !== undefined) return xhr;

                            if (global.XMLHttpRequest) {
                                xhr = new global.XMLHttpRequest();
                                // If XDomainRequest is available (ie only, where xhr might not work
                                // cross domain), use the page location. Otherwise use example.com
                                // Note: this doesn't actually make an http request.
                                try {
                                    xhr.open(
                                        "GET",
                                        global.XDomainRequest
                                            ? "/"
                                            : "https://example.com"
                                    );
                                } catch (e) {
                                    xhr = null;
                                }
                            } else {
                                // Service workers don't have XHR
                                xhr = null;
                            }
                            return xhr;
                        }

                        function checkTypeSupport(type) {
                            var xhr = getXHR();
                            if (!xhr) return false;
                            try {
                                xhr.responseType = type;
                                return xhr.responseType === type;
                            } catch (e) {}
                            return false;
                        }

                        // For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
                        // Safari 7.1 appears to have fixed this bug.
                        var haveArrayBuffer =
                            typeof global.ArrayBuffer !== "undefined";
                        var haveSlice =
                            haveArrayBuffer &&
                            isFunction(global.ArrayBuffer.prototype.slice);

                        // If fetch is supported, then arraybuffer will be supported too. Skip calling
                        // checkTypeSupport(), since that calls getXHR().
                        exports.arraybuffer =
                            exports.fetch ||
                            (haveArrayBuffer &&
                                checkTypeSupport("arraybuffer"));

                        // These next two tests unavoidably show warnings in Chrome. Since fetch will always
                        // be used if it's available, just return false for these to avoid the warnings.
                        exports.msstream =
                            !exports.fetch &&
                            haveSlice &&
                            checkTypeSupport("ms-stream");
                        exports.mozchunkedarraybuffer =
                            !exports.fetch &&
                            haveArrayBuffer &&
                            checkTypeSupport("moz-chunked-arraybuffer");

                        // If fetch is supported, then overrideMimeType will be supported too. Skip calling
                        // getXHR().
                        exports.overrideMimeType =
                            exports.fetch ||
                            (getXHR()
                                ? isFunction(getXHR().overrideMimeType)
                                : false);

                        exports.vbArray = isFunction(global.VBArray);

                        function isFunction(value) {
                            return typeof value === "function";
                        }

                        xhr = null; // Help gc
                    }.call(this));
                }.call(
                    this,
                    typeof global !== "undefined"
                        ? global
                        : typeof self !== "undefined"
                        ? self
                        : typeof window !== "undefined"
                        ? window
                        : {}
                ));
            },
            {},
        ],
        125: [
            function (require, module, exports) {
                (function (process, global, Buffer) {
                    (function () {
                        var capability = require("./capability");
                        var inherits = require("inherits");
                        var response = require("./response");
                        var stream = require("readable-stream");
                        var toArrayBuffer = require("to-arraybuffer");

                        var IncomingMessage = response.IncomingMessage;
                        var rStates = response.readyStates;

                        function decideMode(preferBinary, useFetch) {
                            if (capability.fetch && useFetch) {
                                return "fetch";
                            } else if (capability.mozchunkedarraybuffer) {
                                return "moz-chunked-arraybuffer";
                            } else if (capability.msstream) {
                                return "ms-stream";
                            } else if (capability.arraybuffer && preferBinary) {
                                return "arraybuffer";
                            } else if (capability.vbArray && preferBinary) {
                                return "text:vbarray";
                            } else {
                                return "text";
                            }
                        }

                        var ClientRequest = (module.exports = function (opts) {
                            var self = this;
                            stream.Writable.call(self);

                            self._opts = opts;
                            self._body = [];
                            self._headers = {};
                            if (opts.auth)
                                self.setHeader(
                                    "Authorization",
                                    "Basic " +
                                        new Buffer(opts.auth).toString("base64")
                                );
                            Object.keys(opts.headers).forEach(function (name) {
                                self.setHeader(name, opts.headers[name]);
                            });

                            var preferBinary;
                            var useFetch = true;
                            if (
                                opts.mode === "disable-fetch" ||
                                ("requestTimeout" in opts &&
                                    !capability.abortController)
                            ) {
                                // If the use of XHR should be preferred. Not typically needed.
                                useFetch = false;
                                preferBinary = true;
                            } else if (opts.mode === "prefer-streaming") {
                                // If streaming is a high priority but binary compatibility and
                                // the accuracy of the 'content-type' header aren't
                                preferBinary = false;
                            } else if (
                                opts.mode === "allow-wrong-content-type"
                            ) {
                                // If streaming is more important than preserving the 'content-type' header
                                preferBinary = !capability.overrideMimeType;
                            } else if (
                                !opts.mode ||
                                opts.mode === "default" ||
                                opts.mode === "prefer-fast"
                            ) {
                                // Use binary if text streaming may corrupt data or the content-type header, or for speed
                                preferBinary = true;
                            } else {
                                throw new Error("Invalid value for opts.mode");
                            }
                            self._mode = decideMode(preferBinary, useFetch);
                            self._fetchTimer = null;

                            self.on("finish", function () {
                                self._onFinish();
                            });
                        });

                        inherits(ClientRequest, stream.Writable);

                        ClientRequest.prototype.setHeader = function (
                            name,
                            value
                        ) {
                            var self = this;
                            var lowerName = name.toLowerCase();
                            // This check is not necessary, but it prevents warnings from browsers about setting unsafe
                            // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
                            // http-browserify did it, so I will too.
                            if (unsafeHeaders.indexOf(lowerName) !== -1) return;

                            self._headers[lowerName] = {
                                name: name,
                                value: value,
                            };
                        };

                        ClientRequest.prototype.getHeader = function (name) {
                            var header = this._headers[name.toLowerCase()];
                            if (header) return header.value;
                            return null;
                        };

                        ClientRequest.prototype.removeHeader = function (name) {
                            var self = this;
                            delete self._headers[name.toLowerCase()];
                        };

                        ClientRequest.prototype._onFinish = function () {
                            var self = this;

                            if (self._destroyed) return;
                            var opts = self._opts;

                            var headersObj = self._headers;
                            var body = null;
                            if (
                                opts.method !== "GET" &&
                                opts.method !== "HEAD"
                            ) {
                                if (capability.arraybuffer) {
                                    body = toArrayBuffer(
                                        Buffer.concat(self._body)
                                    );
                                } else if (capability.blobConstructor) {
                                    body = new global.Blob(
                                        self._body.map(function (buffer) {
                                            return toArrayBuffer(buffer);
                                        }),
                                        {
                                            type:
                                                (
                                                    headersObj[
                                                        "content-type"
                                                    ] || {}
                                                ).value || "",
                                        }
                                    );
                                } else {
                                    // get utf8 string
                                    body = Buffer.concat(self._body).toString();
                                }
                            }

                            // create flattened list of headers
                            var headersList = [];
                            Object.keys(headersObj).forEach(function (keyName) {
                                var name = headersObj[keyName].name;
                                var value = headersObj[keyName].value;
                                if (Array.isArray(value)) {
                                    value.forEach(function (v) {
                                        headersList.push([name, v]);
                                    });
                                } else {
                                    headersList.push([name, value]);
                                }
                            });

                            if (self._mode === "fetch") {
                                var signal = null;
                                var fetchTimer = null;
                                if (capability.abortController) {
                                    var controller = new AbortController();
                                    signal = controller.signal;
                                    self._fetchAbortController = controller;

                                    if (
                                        "requestTimeout" in opts &&
                                        opts.requestTimeout !== 0
                                    ) {
                                        self._fetchTimer = global.setTimeout(
                                            function () {
                                                self.emit("requestTimeout");
                                                if (self._fetchAbortController)
                                                    self._fetchAbortController.abort();
                                            },
                                            opts.requestTimeout
                                        );
                                    }
                                }

                                global
                                    .fetch(self._opts.url, {
                                        method: self._opts.method,
                                        headers: headersList,
                                        body: body || undefined,
                                        mode: "cors",
                                        credentials: opts.withCredentials
                                            ? "include"
                                            : "same-origin",
                                        signal: signal,
                                    })
                                    .then(
                                        function (response) {
                                            self._fetchResponse = response;
                                            self._connect();
                                        },
                                        function (reason) {
                                            global.clearTimeout(
                                                self._fetchTimer
                                            );
                                            if (!self._destroyed)
                                                self.emit("error", reason);
                                        }
                                    );
                            } else {
                                var xhr = (self._xhr =
                                    new global.XMLHttpRequest());
                                try {
                                    xhr.open(
                                        self._opts.method,
                                        self._opts.url,
                                        true
                                    );
                                } catch (err) {
                                    process.nextTick(function () {
                                        self.emit("error", err);
                                    });
                                    return;
                                }

                                // Can't set responseType on really old browsers
                                if ("responseType" in xhr)
                                    xhr.responseType = self._mode.split(":")[0];

                                if ("withCredentials" in xhr)
                                    xhr.withCredentials =
                                        !!opts.withCredentials;

                                if (
                                    self._mode === "text" &&
                                    "overrideMimeType" in xhr
                                )
                                    xhr.overrideMimeType(
                                        "text/plain; charset=x-user-defined"
                                    );

                                if ("requestTimeout" in opts) {
                                    xhr.timeout = opts.requestTimeout;
                                    xhr.ontimeout = function () {
                                        self.emit("requestTimeout");
                                    };
                                }

                                headersList.forEach(function (header) {
                                    xhr.setRequestHeader(header[0], header[1]);
                                });

                                self._response = null;
                                xhr.onreadystatechange = function () {
                                    switch (xhr.readyState) {
                                        case rStates.LOADING:
                                        case rStates.DONE:
                                            self._onXHRProgress();
                                            break;
                                    }
                                };
                                // Necessary for streaming in Firefox, since xhr.response is ONLY defined
                                // in onprogress, not in onreadystatechange with xhr.readyState = 3
                                if (self._mode === "moz-chunked-arraybuffer") {
                                    xhr.onprogress = function () {
                                        self._onXHRProgress();
                                    };
                                }

                                xhr.onerror = function () {
                                    if (self._destroyed) return;
                                    self.emit("error", new Error("XHR error"));
                                };

                                try {
                                    xhr.send(body);
                                } catch (err) {
                                    process.nextTick(function () {
                                        self.emit("error", err);
                                    });
                                    return;
                                }
                            }
                        };

                        /**
                         * Checks if xhr.status is readable and non-zero, indicating no error.
                         * Even though the spec says it should be available in readyState 3,
                         * accessing it throws an exception in IE8
                         */
                        function statusValid(xhr) {
                            try {
                                var status = xhr.status;
                                return status !== null && status !== 0;
                            } catch (e) {
                                return false;
                            }
                        }

                        ClientRequest.prototype._onXHRProgress = function () {
                            var self = this;

                            if (!statusValid(self._xhr) || self._destroyed)
                                return;

                            if (!self._response) self._connect();

                            self._response._onXHRProgress();
                        };

                        ClientRequest.prototype._connect = function () {
                            var self = this;

                            if (self._destroyed) return;

                            self._response = new IncomingMessage(
                                self._xhr,
                                self._fetchResponse,
                                self._mode,
                                self._fetchTimer
                            );
                            self._response.on("error", function (err) {
                                self.emit("error", err);
                            });

                            self.emit("response", self._response);
                        };

                        ClientRequest.prototype._write = function (
                            chunk,
                            encoding,
                            cb
                        ) {
                            var self = this;

                            self._body.push(chunk);
                            cb();
                        };

                        ClientRequest.prototype.abort =
                            ClientRequest.prototype.destroy = function () {
                                var self = this;
                                self._destroyed = true;
                                global.clearTimeout(self._fetchTimer);
                                if (self._response)
                                    self._response._destroyed = true;
                                if (self._xhr) self._xhr.abort();
                                else if (self._fetchAbortController)
                                    self._fetchAbortController.abort();
                            };

                        ClientRequest.prototype.end = function (
                            data,
                            encoding,
                            cb
                        ) {
                            var self = this;
                            if (typeof data === "function") {
                                cb = data;
                                data = undefined;
                            }

                            stream.Writable.prototype.end.call(
                                self,
                                data,
                                encoding,
                                cb
                            );
                        };

                        ClientRequest.prototype.flushHeaders = function () {};
                        ClientRequest.prototype.setTimeout = function () {};
                        ClientRequest.prototype.setNoDelay = function () {};
                        ClientRequest.prototype.setSocketKeepAlive =
                            function () {};

                        // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
                        var unsafeHeaders = [
                            "accept-charset",
                            "accept-encoding",
                            "access-control-request-headers",
                            "access-control-request-method",
                            "connection",
                            "content-length",
                            "cookie",
                            "cookie2",
                            "date",
                            "dnt",
                            "expect",
                            "host",
                            "keep-alive",
                            "origin",
                            "referer",
                            "te",
                            "trailer",
                            "transfer-encoding",
                            "upgrade",
                            "via",
                        ];
                    }.call(this));
                }.call(
                    this,
                    require("_process"),
                    typeof global !== "undefined"
                        ? global
                        : typeof self !== "undefined"
                        ? self
                        : typeof window !== "undefined"
                        ? window
                        : {},
                    require("buffer").Buffer
                ));
            },
            {
                "./capability": 124,
                "./response": 126,
                _process: 102,
                buffer: 80,
                inherits: 87,
                "readable-stream": 119,
                "to-arraybuffer": 128,
            },
        ],
        126: [
            function (require, module, exports) {
                (function (process, global, Buffer) {
                    (function () {
                        var capability = require("./capability");
                        var inherits = require("inherits");
                        var stream = require("readable-stream");

                        var rStates = (exports.readyStates = {
                            UNSENT: 0,
                            OPENED: 1,
                            HEADERS_RECEIVED: 2,
                            LOADING: 3,
                            DONE: 4,
                        });

                        var IncomingMessage = (exports.IncomingMessage =
                            function (xhr, response, mode, fetchTimer) {
                                var self = this;
                                stream.Readable.call(self);

                                self._mode = mode;
                                self.headers = {};
                                self.rawHeaders = [];
                                self.trailers = {};
                                self.rawTrailers = [];

                                // Fake the 'close' event, but only once 'end' fires
                                self.on("end", function () {
                                    // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
                                    process.nextTick(function () {
                                        self.emit("close");
                                    });
                                });

                                if (mode === "fetch") {
                                    self._fetchResponse = response;

                                    self.url = response.url;
                                    self.statusCode = response.status;
                                    self.statusMessage = response.statusText;

                                    response.headers.forEach(function (
                                        header,
                                        key
                                    ) {
                                        self.headers[key.toLowerCase()] =
                                            header;
                                        self.rawHeaders.push(key, header);
                                    });

                                    if (capability.writableStream) {
                                        var writable = new WritableStream({
                                            write: function (chunk) {
                                                return new Promise(function (
                                                    resolve,
                                                    reject
                                                ) {
                                                    if (self._destroyed) {
                                                        reject();
                                                    } else if (
                                                        self.push(
                                                            new Buffer(chunk)
                                                        )
                                                    ) {
                                                        resolve();
                                                    } else {
                                                        self._resumeFetch =
                                                            resolve;
                                                    }
                                                });
                                            },
                                            close: function () {
                                                global.clearTimeout(fetchTimer);
                                                if (!self._destroyed)
                                                    self.push(null);
                                            },
                                            abort: function (err) {
                                                if (!self._destroyed)
                                                    self.emit("error", err);
                                            },
                                        });

                                        try {
                                            response.body
                                                .pipeTo(writable)
                                                .catch(function (err) {
                                                    global.clearTimeout(
                                                        fetchTimer
                                                    );
                                                    if (!self._destroyed)
                                                        self.emit("error", err);
                                                });
                                            return;
                                        } catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
                                    }
                                    // fallback for when writableStream or pipeTo aren't available
                                    var reader = response.body.getReader();
                                    function read() {
                                        reader
                                            .read()
                                            .then(function (result) {
                                                if (self._destroyed) return;
                                                if (result.done) {
                                                    global.clearTimeout(
                                                        fetchTimer
                                                    );
                                                    self.push(null);
                                                    return;
                                                }
                                                self.push(
                                                    new Buffer(result.value)
                                                );
                                                read();
                                            })
                                            .catch(function (err) {
                                                global.clearTimeout(fetchTimer);
                                                if (!self._destroyed)
                                                    self.emit("error", err);
                                            });
                                    }
                                    read();
                                } else {
                                    self._xhr = xhr;
                                    self._pos = 0;

                                    self.url = xhr.responseURL;
                                    self.statusCode = xhr.status;
                                    self.statusMessage = xhr.statusText;
                                    var headers = xhr
                                        .getAllResponseHeaders()
                                        .split(/\r?\n/);
                                    headers.forEach(function (header) {
                                        var matches =
                                            header.match(/^([^:]+):\s*(.*)/);
                                        if (matches) {
                                            var key = matches[1].toLowerCase();
                                            if (key === "set-cookie") {
                                                if (
                                                    self.headers[key] ===
                                                    undefined
                                                ) {
                                                    self.headers[key] = [];
                                                }
                                                self.headers[key].push(
                                                    matches[2]
                                                );
                                            } else if (
                                                self.headers[key] !== undefined
                                            ) {
                                                self.headers[key] +=
                                                    ", " + matches[2];
                                            } else {
                                                self.headers[key] = matches[2];
                                            }
                                            self.rawHeaders.push(
                                                matches[1],
                                                matches[2]
                                            );
                                        }
                                    });

                                    self._charset = "x-user-defined";
                                    if (!capability.overrideMimeType) {
                                        var mimeType =
                                            self.rawHeaders["mime-type"];
                                        if (mimeType) {
                                            var charsetMatch = mimeType.match(
                                                /;\s*charset=([^;])(;|$)/
                                            );
                                            if (charsetMatch) {
                                                self._charset =
                                                    charsetMatch[1].toLowerCase();
                                            }
                                        }
                                        if (!self._charset)
                                            self._charset = "utf-8"; // best guess
                                    }
                                }
                            });

                        inherits(IncomingMessage, stream.Readable);

                        IncomingMessage.prototype._read = function () {
                            var self = this;

                            var resolve = self._resumeFetch;
                            if (resolve) {
                                self._resumeFetch = null;
                                resolve();
                            }
                        };

                        IncomingMessage.prototype._onXHRProgress = function () {
                            var self = this;

                            var xhr = self._xhr;

                            var response = null;
                            switch (self._mode) {
                                case "text:vbarray": // For IE9
                                    if (xhr.readyState !== rStates.DONE) break;
                                    try {
                                        // This fails in IE8
                                        response = new global.VBArray(
                                            xhr.responseBody
                                        ).toArray();
                                    } catch (e) {}
                                    if (response !== null) {
                                        self.push(new Buffer(response));
                                        break;
                                    }
                                // Falls through in IE8
                                case "text":
                                    try {
                                        // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
                                        response = xhr.responseText;
                                    } catch (e) {
                                        self._mode = "text:vbarray";
                                        break;
                                    }
                                    if (response.length > self._pos) {
                                        var newData = response.substr(
                                            self._pos
                                        );
                                        if (
                                            self._charset === "x-user-defined"
                                        ) {
                                            var buffer = new Buffer(
                                                newData.length
                                            );
                                            for (
                                                var i = 0;
                                                i < newData.length;
                                                i++
                                            )
                                                buffer[i] =
                                                    newData.charCodeAt(i) &
                                                    0xff;

                                            self.push(buffer);
                                        } else {
                                            self.push(newData, self._charset);
                                        }
                                        self._pos = response.length;
                                    }
                                    break;
                                case "arraybuffer":
                                    if (
                                        xhr.readyState !== rStates.DONE ||
                                        !xhr.response
                                    )
                                        break;
                                    response = xhr.response;
                                    self.push(
                                        new Buffer(new Uint8Array(response))
                                    );
                                    break;
                                case "moz-chunked-arraybuffer": // take whole
                                    response = xhr.response;
                                    if (
                                        xhr.readyState !== rStates.LOADING ||
                                        !response
                                    )
                                        break;
                                    self.push(
                                        new Buffer(new Uint8Array(response))
                                    );
                                    break;
                                case "ms-stream":
                                    response = xhr.response;
                                    if (xhr.readyState !== rStates.LOADING)
                                        break;
                                    var reader = new global.MSStreamReader();
                                    reader.onprogress = function () {
                                        if (
                                            reader.result.byteLength > self._pos
                                        ) {
                                            self.push(
                                                new Buffer(
                                                    new Uint8Array(
                                                        reader.result.slice(
                                                            self._pos
                                                        )
                                                    )
                                                )
                                            );
                                            self._pos =
                                                reader.result.byteLength;
                                        }
                                    };
                                    reader.onload = function () {
                                        self.push(null);
                                    };
                                    // reader.onerror = ??? // TODO: this
                                    reader.readAsArrayBuffer(response);
                                    break;
                            }

                            // The ms-stream case handles end separately in reader.onload()
                            if (
                                self._xhr.readyState === rStates.DONE &&
                                self._mode !== "ms-stream"
                            ) {
                                self.push(null);
                            }
                        };
                    }.call(this));
                }.call(
                    this,
                    require("_process"),
                    typeof global !== "undefined"
                        ? global
                        : typeof self !== "undefined"
                        ? self
                        : typeof window !== "undefined"
                        ? window
                        : {},
                    require("buffer").Buffer
                ));
            },
            {
                "./capability": 124,
                _process: 102,
                buffer: 80,
                inherits: 87,
                "readable-stream": 119,
            },
        ],
        127: [
            function (require, module, exports) {
                (function (setImmediate, clearImmediate) {
                    (function () {
                        var nextTick = require("process/browser.js").nextTick;
                        var apply = Function.prototype.apply;
                        var slice = Array.prototype.slice;
                        var immediateIds = {};
                        var nextImmediateId = 0;

                        // DOM APIs, for completeness

                        exports.setTimeout = function () {
                            return new Timeout(
                                apply.call(setTimeout, window, arguments),
                                clearTimeout
                            );
                        };
                        exports.setInterval = function () {
                            return new Timeout(
                                apply.call(setInterval, window, arguments),
                                clearInterval
                            );
                        };
                        exports.clearTimeout = exports.clearInterval =
                            function (timeout) {
                                timeout.close();
                            };

                        function Timeout(id, clearFn) {
                            this._id = id;
                            this._clearFn = clearFn;
                        }
                        Timeout.prototype.unref = Timeout.prototype.ref =
                            function () {};
                        Timeout.prototype.close = function () {
                            this._clearFn.call(window, this._id);
                        };

                        // Does not start the time, just sets up the members needed.
                        exports.enroll = function (item, msecs) {
                            clearTimeout(item._idleTimeoutId);
                            item._idleTimeout = msecs;
                        };

                        exports.unenroll = function (item) {
                            clearTimeout(item._idleTimeoutId);
                            item._idleTimeout = -1;
                        };

                        exports._unrefActive = exports.active = function (
                            item
                        ) {
                            clearTimeout(item._idleTimeoutId);

                            var msecs = item._idleTimeout;
                            if (msecs >= 0) {
                                item._idleTimeoutId = setTimeout(
                                    function onTimeout() {
                                        if (item._onTimeout) item._onTimeout();
                                    },
                                    msecs
                                );
                            }
                        };

                        // That's not how node.js implements it but the exposed api is the same.
                        exports.setImmediate =
                            typeof setImmediate === "function"
                                ? setImmediate
                                : function (fn) {
                                      var id = nextImmediateId++;
                                      var args =
                                          arguments.length < 2
                                              ? false
                                              : slice.call(arguments, 1);

                                      immediateIds[id] = true;

                                      nextTick(function onNextTick() {
                                          if (immediateIds[id]) {
                                              // fn.call() is faster so we optimize for the common use-case
                                              // @see http://jsperf.com/call-apply-segu
                                              if (args) {
                                                  fn.apply(null, args);
                                              } else {
                                                  fn.call(null);
                                              }
                                              // Prevent ids from leaking
                                              exports.clearImmediate(id);
                                          }
                                      });

                                      return id;
                                  };

                        exports.clearImmediate =
                            typeof clearImmediate === "function"
                                ? clearImmediate
                                : function (id) {
                                      delete immediateIds[id];
                                  };
                    }.call(this));
                }.call(
                    this,
                    require("timers").setImmediate,
                    require("timers").clearImmediate
                ));
            },
            { "process/browser.js": 102, timers: 127 },
        ],
        128: [
            function (require, module, exports) {
                var Buffer = require("buffer").Buffer;

                module.exports = function (buf) {
                    // If the buffer is backed by a Uint8Array, a faster version will work
                    if (buf instanceof Uint8Array) {
                        // If the buffer isn't a subarray, return the underlying ArrayBuffer
                        if (
                            buf.byteOffset === 0 &&
                            buf.byteLength === buf.buffer.byteLength
                        ) {
                            return buf.buffer;
                        } else if (typeof buf.buffer.slice === "function") {
                            // Otherwise we need to get a proper copy
                            return buf.buffer.slice(
                                buf.byteOffset,
                                buf.byteOffset + buf.byteLength
                            );
                        }
                    }

                    if (Buffer.isBuffer(buf)) {
                        // This is the slow version that will work with any Buffer
                        // implementation (even in old browsers)
                        var arrayCopy = new Uint8Array(buf.length);
                        var len = buf.length;
                        for (var i = 0; i < len; i++) {
                            arrayCopy[i] = buf[i];
                        }
                        return arrayCopy.buffer;
                    } else {
                        throw new Error("Argument must be a Buffer");
                    }
                };
            },
            { buffer: 80 },
        ],
        129: [
            function (require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.

                "use strict";

                var punycode = require("punycode");
                var util = require("./util");

                exports.parse = urlParse;
                exports.resolve = urlResolve;
                exports.resolveObject = urlResolveObject;
                exports.format = urlFormat;

                exports.Url = Url;

                function Url() {
                    this.protocol = null;
                    this.slashes = null;
                    this.auth = null;
                    this.host = null;
                    this.port = null;
                    this.hostname = null;
                    this.hash = null;
                    this.search = null;
                    this.query = null;
                    this.pathname = null;
                    this.path = null;
                    this.href = null;
                }

                // Reference: RFC 3986, RFC 1808, RFC 2396

                // define these here so at least they only have to be
                // compiled once on the first module load.
                var protocolPattern = /^([a-z0-9.+-]+:)/i,
                    portPattern = /:[0-9]*$/,
                    // Special case for a simple path URL
                    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
                    // RFC 2396: characters reserved for delimiting URLs.
                    // We actually just auto-escape these.
                    delims = ["<", ">", '"', "`", " ", "\r", "\n", "\t"],
                    // RFC 2396: characters not allowed for various reasons.
                    unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims),
                    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
                    autoEscape = ["'"].concat(unwise),
                    // Characters that are never ever allowed in a hostname.
                    // Note that any invalid chars are also handled, but these
                    // are the ones that are *expected* to be seen, so we fast-path
                    // them.
                    nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape),
                    hostEndingChars = ["/", "?", "#"],
                    hostnameMaxLen = 255,
                    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
                    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
                    // protocols that can allow "unsafe" and "unwise" chars.
                    unsafeProtocol = {
                        javascript: true,
                        "javascript:": true,
                    },
                    // protocols that never have a hostname.
                    hostlessProtocol = {
                        javascript: true,
                        "javascript:": true,
                    },
                    // protocols that always contain a // bit.
                    slashedProtocol = {
                        http: true,
                        https: true,
                        ftp: true,
                        gopher: true,
                        file: true,
                        "http:": true,
                        "https:": true,
                        "ftp:": true,
                        "gopher:": true,
                        "file:": true,
                    },
                    querystring = require("querystring");

                function urlParse(url, parseQueryString, slashesDenoteHost) {
                    if (url && util.isObject(url) && url instanceof Url)
                        return url;

                    var u = new Url();
                    u.parse(url, parseQueryString, slashesDenoteHost);
                    return u;
                }

                Url.prototype.parse = function (
                    url,
                    parseQueryString,
                    slashesDenoteHost
                ) {
                    if (!util.isString(url)) {
                        throw new TypeError(
                            "Parameter 'url' must be a string, not " +
                                typeof url
                        );
                    }

                    // Copy chrome, IE, opera backslash-handling behavior.
                    // Back slashes before the query string get converted to forward slashes
                    // See: https://code.google.com/p/chromium/issues/detail?id=25916
                    var queryIndex = url.indexOf("?"),
                        splitter =
                            queryIndex !== -1 && queryIndex < url.indexOf("#")
                                ? "?"
                                : "#",
                        uSplit = url.split(splitter),
                        slashRegex = /\\/g;
                    uSplit[0] = uSplit[0].replace(slashRegex, "/");
                    url = uSplit.join(splitter);

                    var rest = url;

                    // trim before proceeding.
                    // This is to support parse stuff like "  http://foo.com  \n"
                    rest = rest.trim();

                    if (!slashesDenoteHost && url.split("#").length === 1) {
                        // Try fast path regexp
                        var simplePath = simplePathPattern.exec(rest);
                        if (simplePath) {
                            this.path = rest;
                            this.href = rest;
                            this.pathname = simplePath[1];
                            if (simplePath[2]) {
                                this.search = simplePath[2];
                                if (parseQueryString) {
                                    this.query = querystring.parse(
                                        this.search.substr(1)
                                    );
                                } else {
                                    this.query = this.search.substr(1);
                                }
                            } else if (parseQueryString) {
                                this.search = "";
                                this.query = {};
                            }
                            return this;
                        }
                    }

                    var proto = protocolPattern.exec(rest);
                    if (proto) {
                        proto = proto[0];
                        var lowerProto = proto.toLowerCase();
                        this.protocol = lowerProto;
                        rest = rest.substr(proto.length);
                    }

                    // figure out if it's got a host
                    // user@server is *always* interpreted as a hostname, and url
                    // resolution will treat //foo/bar as host=foo,path=bar because that's
                    // how the browser resolves relative URLs.
                    if (
                        slashesDenoteHost ||
                        proto ||
                        rest.match(/^\/\/[^@\/]+@[^@\/]+/)
                    ) {
                        var slashes = rest.substr(0, 2) === "//";
                        if (slashes && !(proto && hostlessProtocol[proto])) {
                            rest = rest.substr(2);
                            this.slashes = true;
                        }
                    }

                    if (
                        !hostlessProtocol[proto] &&
                        (slashes || (proto && !slashedProtocol[proto]))
                    ) {
                        // there's a hostname.
                        // the first instance of /, ?, ;, or # ends the host.
                        //
                        // If there is an @ in the hostname, then non-host chars *are* allowed
                        // to the left of the last @ sign, unless some host-ending character
                        // comes *before* the @-sign.
                        // URLs are obnoxious.
                        //
                        // ex:
                        // http://a@b@c/ => user:a@b host:c
                        // http://a@b?@c => user:a host:c path:/?@c

                        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
                        // Review our test case against browsers more comprehensively.

                        // find the first instance of any hostEndingChars
                        var hostEnd = -1;
                        for (var i = 0; i < hostEndingChars.length; i++) {
                            var hec = rest.indexOf(hostEndingChars[i]);
                            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
                                hostEnd = hec;
                        }

                        // at this point, either we have an explicit point where the
                        // auth portion cannot go past, or the last @ char is the decider.
                        var auth, atSign;
                        if (hostEnd === -1) {
                            // atSign can be anywhere.
                            atSign = rest.lastIndexOf("@");
                        } else {
                            // atSign must be in auth portion.
                            // http://a@b/c@d => host:b auth:a path:/c@d
                            atSign = rest.lastIndexOf("@", hostEnd);
                        }

                        // Now we have a portion which is definitely the auth.
                        // Pull that off.
                        if (atSign !== -1) {
                            auth = rest.slice(0, atSign);
                            rest = rest.slice(atSign + 1);
                            this.auth = decodeURIComponent(auth);
                        }

                        // the host is the remaining to the left of the first non-host char
                        hostEnd = -1;
                        for (var i = 0; i < nonHostChars.length; i++) {
                            var hec = rest.indexOf(nonHostChars[i]);
                            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
                                hostEnd = hec;
                        }
                        // if we still have not hit it, then the entire thing is a host.
                        if (hostEnd === -1) hostEnd = rest.length;

                        this.host = rest.slice(0, hostEnd);
                        rest = rest.slice(hostEnd);

                        // pull out port.
                        this.parseHost();

                        // we've indicated that there is a hostname,
                        // so even if it's empty, it has to be present.
                        this.hostname = this.hostname || "";

                        // if hostname begins with [ and ends with ]
                        // assume that it's an IPv6 address.
                        var ipv6Hostname =
                            this.hostname[0] === "[" &&
                            this.hostname[this.hostname.length - 1] === "]";

                        // validate a little.
                        if (!ipv6Hostname) {
                            var hostparts = this.hostname.split(/\./);
                            for (var i = 0, l = hostparts.length; i < l; i++) {
                                var part = hostparts[i];
                                if (!part) continue;
                                if (!part.match(hostnamePartPattern)) {
                                    var newpart = "";
                                    for (
                                        var j = 0, k = part.length;
                                        j < k;
                                        j++
                                    ) {
                                        if (part.charCodeAt(j) > 127) {
                                            // we replace non-ASCII char with a temporary placeholder
                                            // we need this to make sure size of hostname is not
                                            // broken by replacing non-ASCII by nothing
                                            newpart += "x";
                                        } else {
                                            newpart += part[j];
                                        }
                                    }
                                    // we test again with ASCII char only
                                    if (!newpart.match(hostnamePartPattern)) {
                                        var validParts = hostparts.slice(0, i);
                                        var notHost = hostparts.slice(i + 1);
                                        var bit = part.match(hostnamePartStart);
                                        if (bit) {
                                            validParts.push(bit[1]);
                                            notHost.unshift(bit[2]);
                                        }
                                        if (notHost.length) {
                                            rest =
                                                "/" + notHost.join(".") + rest;
                                        }
                                        this.hostname = validParts.join(".");
                                        break;
                                    }
                                }
                            }
                        }

                        if (this.hostname.length > hostnameMaxLen) {
                            this.hostname = "";
                        } else {
                            // hostnames are always lower case.
                            this.hostname = this.hostname.toLowerCase();
                        }

                        if (!ipv6Hostname) {
                            // IDNA Support: Returns a punycoded representation of "domain".
                            // It only converts parts of the domain name that
                            // have non-ASCII characters, i.e. it doesn't matter if
                            // you call it with a domain that already is ASCII-only.
                            this.hostname = punycode.toASCII(this.hostname);
                        }

                        var p = this.port ? ":" + this.port : "";
                        var h = this.hostname || "";
                        this.host = h + p;
                        this.href += this.host;

                        // strip [ and ] from the hostname
                        // the host field still retains them, though
                        if (ipv6Hostname) {
                            this.hostname = this.hostname.substr(
                                1,
                                this.hostname.length - 2
                            );
                            if (rest[0] !== "/") {
                                rest = "/" + rest;
                            }
                        }
                    }

                    // now rest is set to the post-host stuff.
                    // chop off any delim chars.
                    if (!unsafeProtocol[lowerProto]) {
                        // First, make 100% sure that any "autoEscape" chars get
                        // escaped, even if encodeURIComponent doesn't think they
                        // need to be.
                        for (var i = 0, l = autoEscape.length; i < l; i++) {
                            var ae = autoEscape[i];
                            if (rest.indexOf(ae) === -1) continue;
                            var esc = encodeURIComponent(ae);
                            if (esc === ae) {
                                esc = escape(ae);
                            }
                            rest = rest.split(ae).join(esc);
                        }
                    }

                    // chop off from the tail first.
                    var hash = rest.indexOf("#");
                    if (hash !== -1) {
                        // got a fragment string.
                        this.hash = rest.substr(hash);
                        rest = rest.slice(0, hash);
                    }
                    var qm = rest.indexOf("?");
                    if (qm !== -1) {
                        this.search = rest.substr(qm);
                        this.query = rest.substr(qm + 1);
                        if (parseQueryString) {
                            this.query = querystring.parse(this.query);
                        }
                        rest = rest.slice(0, qm);
                    } else if (parseQueryString) {
                        // no query string, but parseQueryString still requested
                        this.search = "";
                        this.query = {};
                    }
                    if (rest) this.pathname = rest;
                    if (
                        slashedProtocol[lowerProto] &&
                        this.hostname &&
                        !this.pathname
                    ) {
                        this.pathname = "/";
                    }

                    //to support http.request
                    if (this.pathname || this.search) {
                        var p = this.pathname || "";
                        var s = this.search || "";
                        this.path = p + s;
                    }

                    // finally, reconstruct the href based on what has been validated.
                    this.href = this.format();
                    return this;
                };

                // format a parsed object into a url string
                function urlFormat(obj) {
                    // ensure it's an object, and not a string url.
                    // If it's an obj, this is a no-op.
                    // this way, you can call url_format() on strings
                    // to clean up potentially wonky urls.
                    if (util.isString(obj)) obj = urlParse(obj);
                    if (!(obj instanceof Url))
                        return Url.prototype.format.call(obj);
                    return obj.format();
                }

                Url.prototype.format = function () {
                    var auth = this.auth || "";
                    if (auth) {
                        auth = encodeURIComponent(auth);
                        auth = auth.replace(/%3A/i, ":");
                        auth += "@";
                    }

                    var protocol = this.protocol || "",
                        pathname = this.pathname || "",
                        hash = this.hash || "",
                        host = false,
                        query = "";

                    if (this.host) {
                        host = auth + this.host;
                    } else if (this.hostname) {
                        host =
                            auth +
                            (this.hostname.indexOf(":") === -1
                                ? this.hostname
                                : "[" + this.hostname + "]");
                        if (this.port) {
                            host += ":" + this.port;
                        }
                    }

                    if (
                        this.query &&
                        util.isObject(this.query) &&
                        Object.keys(this.query).length
                    ) {
                        query = querystring.stringify(this.query);
                    }

                    var search = this.search || (query && "?" + query) || "";

                    if (protocol && protocol.substr(-1) !== ":")
                        protocol += ":";

                    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
                    // unless they had them to begin with.
                    if (
                        this.slashes ||
                        ((!protocol || slashedProtocol[protocol]) &&
                            host !== false)
                    ) {
                        host = "//" + (host || "");
                        if (pathname && pathname.charAt(0) !== "/")
                            pathname = "/" + pathname;
                    } else if (!host) {
                        host = "";
                    }

                    if (hash && hash.charAt(0) !== "#") hash = "#" + hash;
                    if (search && search.charAt(0) !== "?")
                        search = "?" + search;

                    pathname = pathname.replace(/[?#]/g, function (match) {
                        return encodeURIComponent(match);
                    });
                    search = search.replace("#", "%23");

                    return protocol + host + pathname + search + hash;
                };

                function urlResolve(source, relative) {
                    return urlParse(source, false, true).resolve(relative);
                }

                Url.prototype.resolve = function (relative) {
                    return this.resolveObject(
                        urlParse(relative, false, true)
                    ).format();
                };

                function urlResolveObject(source, relative) {
                    if (!source) return relative;
                    return urlParse(source, false, true).resolveObject(
                        relative
                    );
                }

                Url.prototype.resolveObject = function (relative) {
                    if (util.isString(relative)) {
                        var rel = new Url();
                        rel.parse(relative, false, true);
                        relative = rel;
                    }

                    var result = new Url();
                    var tkeys = Object.keys(this);
                    for (var tk = 0; tk < tkeys.length; tk++) {
                        var tkey = tkeys[tk];
                        result[tkey] = this[tkey];
                    }

                    // hash is always overridden, no matter what.
                    // even href="" will remove it.
                    result.hash = relative.hash;

                    // if the relative url is empty, then there's nothing left to do here.
                    if (relative.href === "") {
                        result.href = result.format();
                        return result;
                    }

                    // hrefs like //foo/bar always cut to the protocol.
                    if (relative.slashes && !relative.protocol) {
                        // take everything except the protocol from relative
                        var rkeys = Object.keys(relative);
                        for (var rk = 0; rk < rkeys.length; rk++) {
                            var rkey = rkeys[rk];
                            if (rkey !== "protocol")
                                result[rkey] = relative[rkey];
                        }

                        //urlParse appends trailing / to urls like http://www.example.com
                        if (
                            slashedProtocol[result.protocol] &&
                            result.hostname &&
                            !result.pathname
                        ) {
                            result.path = result.pathname = "/";
                        }

                        result.href = result.format();
                        return result;
                    }

                    if (
                        relative.protocol &&
                        relative.protocol !== result.protocol
                    ) {
                        // if it's a known url protocol, then changing
                        // the protocol does weird things
                        // first, if it's not file:, then we MUST have a host,
                        // and if there was a path
                        // to begin with, then we MUST have a path.
                        // if it is file:, then the host is dropped,
                        // because that's known to be hostless.
                        // anything else is assumed to be absolute.
                        if (!slashedProtocol[relative.protocol]) {
                            var keys = Object.keys(relative);
                            for (var v = 0; v < keys.length; v++) {
                                var k = keys[v];
                                result[k] = relative[k];
                            }
                            result.href = result.format();
                            return result;
                        }

                        result.protocol = relative.protocol;
                        if (
                            !relative.host &&
                            !hostlessProtocol[relative.protocol]
                        ) {
                            var relPath = (relative.pathname || "").split("/");
                            while (
                                relPath.length &&
                                !(relative.host = relPath.shift())
                            );
                            if (!relative.host) relative.host = "";
                            if (!relative.hostname) relative.hostname = "";
                            if (relPath[0] !== "") relPath.unshift("");
                            if (relPath.length < 2) relPath.unshift("");
                            result.pathname = relPath.join("/");
                        } else {
                            result.pathname = relative.pathname;
                        }
                        result.search = relative.search;
                        result.query = relative.query;
                        result.host = relative.host || "";
                        result.auth = relative.auth;
                        result.hostname = relative.hostname || relative.host;
                        result.port = relative.port;
                        // to support http.request
                        if (result.pathname || result.search) {
                            var p = result.pathname || "";
                            var s = result.search || "";
                            result.path = p + s;
                        }
                        result.slashes = result.slashes || relative.slashes;
                        result.href = result.format();
                        return result;
                    }

                    var isSourceAbs =
                            result.pathname &&
                            result.pathname.charAt(0) === "/",
                        isRelAbs =
                            relative.host ||
                            (relative.pathname &&
                                relative.pathname.charAt(0) === "/"),
                        mustEndAbs =
                            isRelAbs ||
                            isSourceAbs ||
                            (result.host && relative.pathname),
                        removeAllDots = mustEndAbs,
                        srcPath =
                            (result.pathname && result.pathname.split("/")) ||
                            [],
                        relPath =
                            (relative.pathname &&
                                relative.pathname.split("/")) ||
                            [],
                        psychotic =
                            result.protocol &&
                            !slashedProtocol[result.protocol];

                    // if the url is a non-slashed url, then relative
                    // links like ../.. should be able
                    // to crawl up to the hostname, as well.  This is strange.
                    // result.protocol has already been set by now.
                    // Later on, put the first path part into the host field.
                    if (psychotic) {
                        result.hostname = "";
                        result.port = null;
                        if (result.host) {
                            if (srcPath[0] === "") srcPath[0] = result.host;
                            else srcPath.unshift(result.host);
                        }
                        result.host = "";
                        if (relative.protocol) {
                            relative.hostname = null;
                            relative.port = null;
                            if (relative.host) {
                                if (relPath[0] === "")
                                    relPath[0] = relative.host;
                                else relPath.unshift(relative.host);
                            }
                            relative.host = null;
                        }
                        mustEndAbs =
                            mustEndAbs &&
                            (relPath[0] === "" || srcPath[0] === "");
                    }

                    if (isRelAbs) {
                        // it's absolute.
                        result.host =
                            relative.host || relative.host === ""
                                ? relative.host
                                : result.host;
                        result.hostname =
                            relative.hostname || relative.hostname === ""
                                ? relative.hostname
                                : result.hostname;
                        result.search = relative.search;
                        result.query = relative.query;
                        srcPath = relPath;
                        // fall through to the dot-handling below.
                    } else if (relPath.length) {
                        // it's relative
                        // throw away the existing file, and take the new path instead.
                        if (!srcPath) srcPath = [];
                        srcPath.pop();
                        srcPath = srcPath.concat(relPath);
                        result.search = relative.search;
                        result.query = relative.query;
                    } else if (!util.isNullOrUndefined(relative.search)) {
                        // just pull out the search.
                        // like href='?foo'.
                        // Put this after the other two cases because it simplifies the booleans
                        if (psychotic) {
                            result.hostname = result.host = srcPath.shift();
                            //occationaly the auth can get stuck only in host
                            //this especially happens in cases like
                            //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
                            var authInHost =
                                result.host && result.host.indexOf("@") > 0
                                    ? result.host.split("@")
                                    : false;
                            if (authInHost) {
                                result.auth = authInHost.shift();
                                result.host = result.hostname =
                                    authInHost.shift();
                            }
                        }
                        result.search = relative.search;
                        result.query = relative.query;
                        //to support http.request
                        if (
                            !util.isNull(result.pathname) ||
                            !util.isNull(result.search)
                        ) {
                            result.path =
                                (result.pathname ? result.pathname : "") +
                                (result.search ? result.search : "");
                        }
                        result.href = result.format();
                        return result;
                    }

                    if (!srcPath.length) {
                        // no path at all.  easy.
                        // we've already handled the other stuff above.
                        result.pathname = null;
                        //to support http.request
                        if (result.search) {
                            result.path = "/" + result.search;
                        } else {
                            result.path = null;
                        }
                        result.href = result.format();
                        return result;
                    }

                    // if a url ENDs in . or .., then it must get a trailing slash.
                    // however, if it ends in anything else non-slashy,
                    // then it must NOT get a trailing slash.
                    var last = srcPath.slice(-1)[0];
                    var hasTrailingSlash =
                        ((result.host || relative.host || srcPath.length > 1) &&
                            (last === "." || last === "..")) ||
                        last === "";

                    // strip single dots, resolve double dots to parent dir
                    // if the path tries to go above the root, `up` ends up > 0
                    var up = 0;
                    for (var i = srcPath.length; i >= 0; i--) {
                        last = srcPath[i];
                        if (last === ".") {
                            srcPath.splice(i, 1);
                        } else if (last === "..") {
                            srcPath.splice(i, 1);
                            up++;
                        } else if (up) {
                            srcPath.splice(i, 1);
                            up--;
                        }
                    }

                    // if the path is allowed to go above the root, restore leading ..s
                    if (!mustEndAbs && !removeAllDots) {
                        for (; up--; up) {
                            srcPath.unshift("..");
                        }
                    }

                    if (
                        mustEndAbs &&
                        srcPath[0] !== "" &&
                        (!srcPath[0] || srcPath[0].charAt(0) !== "/")
                    ) {
                        srcPath.unshift("");
                    }

                    if (
                        hasTrailingSlash &&
                        srcPath.join("/").substr(-1) !== "/"
                    ) {
                        srcPath.push("");
                    }

                    var isAbsolute =
                        srcPath[0] === "" ||
                        (srcPath[0] && srcPath[0].charAt(0) === "/");

                    // put the host back
                    if (psychotic) {
                        result.hostname = result.host = isAbsolute
                            ? ""
                            : srcPath.length
                            ? srcPath.shift()
                            : "";
                        //occationaly the auth can get stuck only in host
                        //this especially happens in cases like
                        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
                        var authInHost =
                            result.host && result.host.indexOf("@") > 0
                                ? result.host.split("@")
                                : false;
                        if (authInHost) {
                            result.auth = authInHost.shift();
                            result.host = result.hostname = authInHost.shift();
                        }
                    }

                    mustEndAbs = mustEndAbs || (result.host && srcPath.length);

                    if (mustEndAbs && !isAbsolute) {
                        srcPath.unshift("");
                    }

                    if (!srcPath.length) {
                        result.pathname = null;
                        result.path = null;
                    } else {
                        result.pathname = srcPath.join("/");
                    }

                    //to support request.http
                    if (
                        !util.isNull(result.pathname) ||
                        !util.isNull(result.search)
                    ) {
                        result.path =
                            (result.pathname ? result.pathname : "") +
                            (result.search ? result.search : "");
                    }
                    result.auth = relative.auth || result.auth;
                    result.slashes = result.slashes || relative.slashes;
                    result.href = result.format();
                    return result;
                };

                Url.prototype.parseHost = function () {
                    var host = this.host;
                    var port = portPattern.exec(host);
                    if (port) {
                        port = port[0];
                        if (port !== ":") {
                            this.port = port.substr(1);
                        }
                        host = host.substr(0, host.length - port.length);
                    }
                    if (host) this.hostname = host;
                };
            },
            { "./util": 130, punycode: 103, querystring: 106 },
        ],
        130: [
            function (require, module, exports) {
                "use strict";

                module.exports = {
                    isString: function (arg) {
                        return typeof arg === "string";
                    },
                    isObject: function (arg) {
                        return typeof arg === "object" && arg !== null;
                    },
                    isNull: function (arg) {
                        return arg === null;
                    },
                    isNullOrUndefined: function (arg) {
                        return arg == null;
                    },
                };
            },
            {},
        ],
        131: [
            function (require, module, exports) {
                (function (global) {
                    (function () {
                        /**
                         * Module exports.
                         */

                        module.exports = deprecate;

                        /**
                         * Mark that a method should not be used.
                         * Returns a modified function which warns once by default.
                         *
                         * If `localStorage.noDeprecation = true` is set, then it is a no-op.
                         *
                         * If `localStorage.throwDeprecation = true` is set, then deprecated functions
                         * will throw an Error when invoked.
                         *
                         * If `localStorage.traceDeprecation = true` is set, then deprecated functions
                         * will invoke `console.trace()` instead of `console.error()`.
                         *
                         * @param {Function} fn - the function to deprecate
                         * @param {String} msg - the string to print to the console when `fn` is invoked
                         * @returns {Function} a new "deprecated" version of `fn`
                         * @api public
                         */

                        function deprecate(fn, msg) {
                            if (config("noDeprecation")) {
                                return fn;
                            }

                            var warned = false;
                            function deprecated() {
                                if (!warned) {
                                    if (config("throwDeprecation")) {
                                        throw new Error(msg);
                                    } else if (config("traceDeprecation")) {
                                        console.trace(msg);
                                    } else {
                                        console.warn(msg);
                                    }
                                    warned = true;
                                }
                                return fn.apply(this, arguments);
                            }

                            return deprecated;
                        }

                        /**
                         * Checks `localStorage` for boolean values for the given `name`.
                         *
                         * @param {String} name
                         * @returns {Boolean}
                         * @api private
                         */

                        function config(name) {
                            // accessing global.localStorage can trigger a DOMException in sandboxed iframes
                            try {
                                if (!global.localStorage) return false;
                            } catch (_) {
                                return false;
                            }
                            var val = global.localStorage[name];
                            if (null == val) return false;
                            return String(val).toLowerCase() === "true";
                        }
                    }.call(this));
                }.call(
                    this,
                    typeof global !== "undefined"
                        ? global
                        : typeof self !== "undefined"
                        ? self
                        : typeof window !== "undefined"
                        ? window
                        : {}
                ));
            },
            {},
        ],
        132: [
            function (require, module, exports) {
                arguments[4][73][0].apply(exports, arguments);
            },
            { dup: 73 },
        ],
        133: [
            function (require, module, exports) {
                arguments[4][74][0].apply(exports, arguments);
            },
            { dup: 74 },
        ],
        134: [
            function (require, module, exports) {
                arguments[4][75][0].apply(exports, arguments);
            },
            {
                "./support/isBuffer": 133,
                _process: 102,
                dup: 75,
                inherits: 132,
            },
        ],
        135: [
            function (require, module, exports) {
                "use strict";

                module.exports = function () {
                    throw new Error(
                        "ws does not work in the browser. Browser clients must use the native " +
                            "WebSocket object"
                    );
                };
            },
            {},
        ],
        136: [
            function (require, module, exports) {
                module.exports = extend;

                var hasOwnProperty = Object.prototype.hasOwnProperty;

                function extend() {
                    var target = {};

                    for (var i = 0; i < arguments.length; i++) {
                        var source = arguments[i];

                        for (var key in source) {
                            if (hasOwnProperty.call(source, key)) {
                                target[key] = source[key];
                            }
                        }
                    }

                    return target;
                }
            },
            {},
        ],
    },
    {},
    [1]
);
